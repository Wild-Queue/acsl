/* File generated by the BNF Converter (bnfc 2.9.4.1). */

#ifndef PARTIAL_BNFC_ACSL_PARSER_HEADER_FILE
#define PARTIAL_BNFC_ACSL_PARSER_HEADER_FILE

#include<vector>
#include<string>
#include<cstdio>
#include "Absyn.H"

namespace partial_bnfc_acsl
{
Program* pProgram(FILE *inp);
Program* pProgram(const char *str);
Annot* pAnnot(FILE *inp);
Annot* pAnnot(const char *str);
Code_Annot* pCode_Annot(FILE *inp);
Code_Annot* pCode_Annot(const char *str);
Contract* pContract(FILE *inp);
Contract* pContract(const char *str);
Requires* pRequires(FILE *inp);
Requires* pRequires(const char *str);
NERequires* pNERequires(FILE *inp);
NERequires* pNERequires(const char *str);
Terminates* pTerminates(FILE *inp);
Terminates* pTerminates(const char *str);
Decreases* pDecreases(FILE *inp);
Decreases* pDecreases(const char *str);
SimpleClauses* pSimpleClauses(FILE *inp);
SimpleClauses* pSimpleClauses(const char *str);
NESimpleClauses* pNESimpleClauses(FILE *inp);
NESimpleClauses* pNESimpleClauses(const char *str);
Assigns* pAssigns(FILE *inp);
Assigns* pAssigns(const char *str);
Zones* pZones(FILE *inp);
Zones* pZones(const char *str);
Behaviors* pBehaviors(FILE *inp);
Behaviors* pBehaviors(const char *str);
CompleteOrDisjoint* pCompleteOrDisjoint(FILE *inp);
CompleteOrDisjoint* pCompleteOrDisjoint(const char *str);
Lexpr* pLexpr(FILE *inp);
Lexpr* pLexpr(const char *str);
ListLexpr* pListLexpr(FILE *inp);
ListLexpr* pListLexpr(const char *str);
Lexpr* pLexpr1(FILE *inp);
Lexpr* pLexpr1(const char *str);
LexprRelInner* pLexprRelInner(FILE *inp);
LexprRelInner* pLexprRelInner(const char *str);
ListLexprRelInner* pListLexprRelInner(FILE *inp);
ListLexprRelInner* pListLexprRelInner(const char *str);
Relation* pRelation(FILE *inp);
Relation* pRelation(const char *str);
Lexpr* pLexpr2(FILE *inp);
Lexpr* pLexpr2(const char *str);
LexprBinder* pLexprBinder(FILE *inp);
LexprBinder* pLexprBinder(const char *str);
Binders* pBinders(FILE *inp);
Binders* pBinders(const char *str);
TypeSpecOFTYPENAME* pTypeSpecOFTYPENAME(FILE *inp);
TypeSpecOFTYPENAME* pTypeSpecOFTYPENAME(const char *str);
BindersReentrance* pBindersReentrance(FILE *inp);
BindersReentrance* pBindersReentrance(const char *str);
ListBindersReentrance* pListBindersReentrance(FILE *inp);
ListBindersReentrance* pListBindersReentrance(const char *str);
VarSpec* pVarSpec(FILE *inp);
VarSpec* pVarSpec(const char *str);
Stars* pStars(FILE *inp);
Stars* pStars(const char *str);
ListStars* pListStars(FILE *inp);
ListStars* pListStars(const char *str);
VarSpec* pVarSpec1(FILE *inp);
VarSpec* pVarSpec1(const char *str);
ArraySize* pArraySize(FILE *inp);
ArraySize* pArraySize(const char *str);
Lexpr* pLexpr3(FILE *inp);
Lexpr* pLexpr3(const char *str);
OptLabel* pOptLabel1(FILE *inp);
OptLabel* pOptLabel1(const char *str);
OptLabel* pOptLabel2(FILE *inp);
OptLabel* pOptLabel2(const char *str);
OptLabelList* pOptLabelList(FILE *inp);
OptLabelList* pOptLabelList(const char *str);
LabelName* pLabelName(FILE *inp);
LabelName* pLabelName(const char *str);
ListLabelName* pListLabelName(FILE *inp);
ListLabelName* pListLabelName(const char *str);
Range* pRange(FILE *inp);
Range* pRange(const char *str);
LexprOption* pLexprOption(FILE *inp);
LexprOption* pLexprOption(const char *str);
AnyIdentifier* pAnyIdentifier(FILE *inp);
AnyIdentifier* pAnyIdentifier(const char *str);
PostCond* pPostCond(FILE *inp);
PostCond* pPostCond(const char *str);
FullIdentifier* pFullIdentifier(FILE *inp);
FullIdentifier* pFullIdentifier(const char *str);
ListFullIdentifier* pListFullIdentifier(FILE *inp);
ListFullIdentifier* pListFullIdentifier(const char *str);
Identifier* pIdentifier(FILE *inp);
Identifier* pIdentifier(const char *str);
TypeSpecSimple* pTypeSpecSimple(FILE *inp);
TypeSpecSimple* pTypeSpecSimple(const char *str);
}

#endif
