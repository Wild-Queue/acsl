/* File generated by the BNF Converter (bnfc 2.9.4.1). */

#ifndef PARTIAL_BNFC_ACSL_PRINTER_HEADER
#define PARTIAL_BNFC_ACSL_PRINTER_HEADER

#include "Absyn.H"
#include <stdio.h>
#include <stddef.h>
#include <string.h>
#include <stdlib.h>

namespace partial_bnfc_acsl
{
/* Certain applications may improve performance by changing the buffer size */
#define PARTIAL_BNFC_ACSL_BUFFER_INITIAL 2000
/* You may wish to change _L_PAREN or _R_PAREN */
#define PARTIAL_BNFC_ACSL__L_PAREN '('
#define PARTIAL_BNFC_ACSL__R_PAREN ')'

class PrintAbsyn : public Visitor
{
 protected:
  int _n_, _i_;
  /* The following are simple heuristics for rendering terminals */
  /* You may wish to change them */
  void render(Char c);
  void render(String s);
  void render(const char *s);
  void indent(void);
  void backup(void);
  void onEmptyLine(void);
  void removeTrailingSpaces(void);
  void removeTrailingWhitespace(void);
 public:
  PrintAbsyn(void);
  ~PrintAbsyn(void);
  char *print(Visitable *v);

  void visitProgram(Program *p); /* abstract class */
  void visitAProgram(AProgram *p);
  void visitAnnot(Annot *p); /* abstract class */
  void visitCodeAnnot(CodeAnnot *p);
  void visitCode_Annot(Code_Annot *p); /* abstract class */
  void visitCodeAnnotContract(CodeAnnotContract *p);
  void visitContract(Contract *p); /* abstract class */
  void visitSimpleContract(SimpleContract *p);
  void visitRequires(Requires *p); /* abstract class */
  void visitNoRequires(NoRequires *p);
  void visitSomeRequires(SomeRequires *p);
  void visitNERequires(NERequires *p); /* abstract class */
  void visitSimpleRequires(SimpleRequires *p);
  void visitCheckRequires(CheckRequires *p);
  void visitAdimtRequires(AdimtRequires *p);
  void visitTerminates(Terminates *p); /* abstract class */
  void visitNoTerminate(NoTerminate *p);
  void visitDecreases(Decreases *p); /* abstract class */
  void visitNoDecreases(NoDecreases *p);
  void visitSimpleClauses(SimpleClauses *p); /* abstract class */
  void visitNoSimpleClauses(NoSimpleClauses *p);
  void visitSomeSimpleClauses(SomeSimpleClauses *p);
  void visitNESimpleClauses(NESimpleClauses *p); /* abstract class */
  void visitPostCondSimpleClauses(PostCondSimpleClauses *p);
  void visitAssignsSimpleClauses(AssignsSimpleClauses *p);
  void visitAssigns(Assigns *p); /* abstract class */
  void visitAssignZone(AssignZone *p);
  void visitAssignZoneFromZone(AssignZoneFromZone *p);
  void visitZones(Zones *p); /* abstract class */
  void visitSomeZone(SomeZone *p);
  void visitNoZone(NoZone *p);
  void visitBehaviors(Behaviors *p); /* abstract class */
  void visitNoBehaviors(NoBehaviors *p);
  void visitCompleteOrDisjoint(CompleteOrDisjoint *p); /* abstract class */
  void visitNoComplDisj(NoComplDisj *p);
  void visitLexpr(Lexpr *p); /* abstract class */
  void visitImplLexpr(ImplLexpr *p);
  void visitIffLexpr(IffLexpr *p);
  void visitOrLexpr(OrLexpr *p);
  void visitAndLexpr(AndLexpr *p);
  void visitHatHatLexpr(HatHatLexpr *p);
  void visitRelationLexpr(RelationLexpr *p);
  void visitBinderLexpr(BinderLexpr *p);
  void visitNotBinderLexpr(NotBinderLexpr *p);
  void visitTrueLexpr(TrueLexpr *p);
  void visitFalseLexpr(FalseLexpr *p);
  void visitValidLexpr(ValidLexpr *p);
  void visitAutomaticLexpr(AutomaticLexpr *p);
  void visitDynamicLexpr(DynamicLexpr *p);
  void visitRegisterLexpr(RegisterLexpr *p);
  void visitStaticLexpr(StaticLexpr *p);
  void visitUnallocatedLexpr(UnallocatedLexpr *p);
  void visitNullLexpr(NullLexpr *p);
  void visitLexprIntConst(LexprIntConst *p);
  void visitLexprFloatConst(LexprFloatConst *p);
  void visitLexprStringConst(LexprStringConst *p);
  void visitAddLexpr(AddLexpr *p);
  void visitSubtrLexpr(SubtrLexpr *p);
  void visitSquaresRangeLexpr(SquaresRangeLexpr *p);
  void visitSquaresLexpr(SquaresLexpr *p);
  void visitSeparatedLexpr(SeparatedLexpr *p);
  void visitFullIdParenLexpr(FullIdParenLexpr *p);
  void visitFullId(FullId *p);
  void visitPiLexpr(PiLexpr *p);
  void visitParenRangeLexpr(ParenRangeLexpr *p);
  void visitListLexpr(ListLexpr *p);
  void iterListLexpr(ListLexpr::const_iterator i, ListLexpr::const_iterator j);
  void visitLexprRelInner(LexprRelInner *p); /* abstract class */
  void visitRelInnerLexpr(RelInnerLexpr *p);
  void visitListLexprRelInner(ListLexprRelInner *p);
  void iterListLexprRelInner(ListLexprRelInner::const_iterator i, ListLexprRelInner::const_iterator j);
  void visitRelation(Relation *p); /* abstract class */
  void visitLessRel(LessRel *p);
  void visitGreaterRel(GreaterRel *p);
  void visitLessEqRel(LessEqRel *p);
  void visitGreaterEqRel(GreaterEqRel *p);
  void visitEqRel(EqRel *p);
  void visitNotEqRel(NotEqRel *p);
  void visitLexprBinder(LexprBinder *p); /* abstract class */
  void visitForallBinderLexpr(ForallBinderLexpr *p);
  void visitExistBinderLexpr(ExistBinderLexpr *p);
  void visitLambdaBinderLexpr(LambdaBinderLexpr *p);
  void visitBinders(Binders *p); /* abstract class */
  void visitTheBinders(TheBinders *p);
  void visitTypeSpecOFTYPENAME(TypeSpecOFTYPENAME *p); /* abstract class */
  void visitTypeSpecTYPENAME(TypeSpecTYPENAME *p);
  void visitTypeSpecSimpleFromTypenameTypeSpec(TypeSpecSimpleFromTypenameTypeSpec *p);
  void visitBindersReentrance(BindersReentrance *p); /* abstract class */
  void visitBindersReentranceDeclSpec(BindersReentranceDeclSpec *p);
  void visitBindersReentranceVarSpec(BindersReentranceVarSpec *p);
  void visitListBindersReentrance(ListBindersReentrance *p);
  void iterListBindersReentrance(ListBindersReentrance::const_iterator i, ListBindersReentrance::const_iterator j);
  void visitVarSpec(VarSpec *p); /* abstract class */
  void visitStartVarSpec(StartVarSpec *p);
  void visitSimpleSpec(SimpleSpec *p);
  void visitArraySpec(ArraySpec *p);
  void visitStars(Stars *p); /* abstract class */
  void visitStar(Star *p);
  void visitListStars(ListStars *p);
  void iterListStars(ListStars::const_iterator i, ListStars::const_iterator j);
  void visitArraySize(ArraySize *p); /* abstract class */
  void visitIntConstArraySize(IntConstArraySize *p);
  void visitSomeArraySize(SomeArraySize *p);
  void visitNoSize(NoSize *p);
  void visitOptLabel(OptLabel *p); /* abstract class */
  void visitOptLabelOne(OptLabelOne *p);
  void visitOptLabelTwo(OptLabelTwo *p);
  void visitOptLabelList(OptLabelList *p); /* abstract class */
  void visitNoLableList(NoLableList *p);
  void visitLableList(LableList *p);
  void visitLabelName(LabelName *p); /* abstract class */
  void visitLableName(LableName *p);
  void visitListLabelName(ListLabelName *p);
  void iterListLabelName(ListLabelName::const_iterator i, ListLabelName::const_iterator j);
  void visitRange(Range *p); /* abstract class */
  void visitLexprRange(LexprRange *p);
  void visitLexprOption(LexprOption *p); /* abstract class */
  void visitNoLexprOption(NoLexprOption *p);
  void visitSomeLexprOption(SomeLexprOption *p);
  void visitAnyIdentifier(AnyIdentifier *p); /* abstract class */
  void visitSimpleIdentifierAny(SimpleIdentifierAny *p);
  void visitPostCond(PostCond *p); /* abstract class */
  void visitEnsuresKeyWord(EnsuresKeyWord *p);
  void visitExitsKeyWord(ExitsKeyWord *p);
  void visitBreaksKeyWord(BreaksKeyWord *p);
  void visitContinuesKeyWord(ContinuesKeyWord *p);
  void visitReturnsKeyWord(ReturnsKeyWord *p);
  void visitCheckEnsuresKeyWord(CheckEnsuresKeyWord *p);
  void visitCheckExitsKeyWord(CheckExitsKeyWord *p);
  void visitCheckBreaksKeyWord(CheckBreaksKeyWord *p);
  void visitCheckContinuesKeyWord(CheckContinuesKeyWord *p);
  void visitCheckReturnsKeyWord(CheckReturnsKeyWord *p);
  void visitAdmitEnsuresKeyWord(AdmitEnsuresKeyWord *p);
  void visitAdmitExitsKeyWord(AdmitExitsKeyWord *p);
  void visitAdmitBreaksKeyWord(AdmitBreaksKeyWord *p);
  void visitAdmitContinuesKeyWord(AdmitContinuesKeyWord *p);
  void visitAdmitReturnsKeyWord(AdmitReturnsKeyWord *p);
  void visitFullIdentifier(FullIdentifier *p); /* abstract class */
  void visitSimpleIdentifierFull(SimpleIdentifierFull *p);
  void visitListFullIdentifier(ListFullIdentifier *p);
  void iterListFullIdentifier(ListFullIdentifier::const_iterator i, ListFullIdentifier::const_iterator j);
  void visitIdentifier(Identifier *p); /* abstract class */
  void visitIdentifierIdent(IdentifierIdent *p);
  void visitTypeSpecSimple(TypeSpecSimple *p); /* abstract class */
  void visitTypeSpecSimpleIntegerKeyWord(TypeSpecSimpleIntegerKeyWord *p);
  void visitTypeSpecSimpleRealKeyWord(TypeSpecSimpleRealKeyWord *p);
  void visitTypeSpecSimpleBooleanKeyWord(TypeSpecSimpleBooleanKeyWord *p);
  void visitTypeSpecSimpleVoidKeyWord(TypeSpecSimpleVoidKeyWord *p);
  void visitTypeSpecSimpleBoolKeyWord(TypeSpecSimpleBoolKeyWord *p);
  void visitTypeSpecSimpleCharKeyWord(TypeSpecSimpleCharKeyWord *p);
  void visitTypeSpecSimpleIntKeyWord(TypeSpecSimpleIntKeyWord *p);
  void visitTypeSpecSimpleDoubleKeyWord(TypeSpecSimpleDoubleKeyWord *p);
  void visitTypeSpecSimpleLongDoubleKeyWord(TypeSpecSimpleLongDoubleKeyWord *p);

  void visitInteger(Integer i);
  void visitDouble(Double d);
  void visitChar(Char c);
  void visitString(String s);
  void visitIdent(String s);
 protected:
  char *buf_;
  size_t cur_, buf_size;

  void inline bufAppend(const char *s)
  {
    size_t end = cur_ + strlen(s);
    if (end >= buf_size) {
      do buf_size *= 2; /* Double the buffer size */
      while (end >= buf_size);
      resizeBuffer();
    }
    strcpy(&buf_[cur_], s);
    cur_ = end;
  }

  void inline bufAppend(const char c)
  {
    if (cur_ + 1 >= buf_size)
    {
      buf_size *= 2; /* Double the buffer size */
      resizeBuffer();
    }
    buf_[cur_] = c;
    buf_[++cur_] = 0;
  }

  void inline bufAppend(String str)
  {
    const char *s = str.c_str();
    bufAppend(s);
  }
  void inline bufReset(void)
  {
    if (buf_) delete[] buf_;
    buf_size = PARTIAL_BNFC_ACSL_BUFFER_INITIAL;
    buf_ = new char[buf_size];
    memset(buf_, 0, buf_size);
    cur_ = 0;
  }

  void inline resizeBuffer(void)
  {
    char *temp = new char[buf_size];
    if (buf_)
    {
      strcpy(temp, buf_);
      delete[] buf_;
    }
    buf_ = temp;
  }
};



class ShowAbsyn : public Visitor
{
 public:
  ShowAbsyn(void);
  ~ShowAbsyn(void);
  char *show(Visitable *v);

  void visitProgram(Program *p); /* abstract class */
  void visitAProgram(AProgram *p);
  void visitAnnot(Annot *p); /* abstract class */
  void visitCodeAnnot(CodeAnnot *p);
  void visitCode_Annot(Code_Annot *p); /* abstract class */
  void visitCodeAnnotContract(CodeAnnotContract *p);
  void visitContract(Contract *p); /* abstract class */
  void visitSimpleContract(SimpleContract *p);
  void visitRequires(Requires *p); /* abstract class */
  void visitNoRequires(NoRequires *p);
  void visitSomeRequires(SomeRequires *p);
  void visitNERequires(NERequires *p); /* abstract class */
  void visitSimpleRequires(SimpleRequires *p);
  void visitCheckRequires(CheckRequires *p);
  void visitAdimtRequires(AdimtRequires *p);
  void visitTerminates(Terminates *p); /* abstract class */
  void visitNoTerminate(NoTerminate *p);
  void visitDecreases(Decreases *p); /* abstract class */
  void visitNoDecreases(NoDecreases *p);
  void visitSimpleClauses(SimpleClauses *p); /* abstract class */
  void visitNoSimpleClauses(NoSimpleClauses *p);
  void visitSomeSimpleClauses(SomeSimpleClauses *p);
  void visitNESimpleClauses(NESimpleClauses *p); /* abstract class */
  void visitPostCondSimpleClauses(PostCondSimpleClauses *p);
  void visitAssignsSimpleClauses(AssignsSimpleClauses *p);
  void visitAssigns(Assigns *p); /* abstract class */
  void visitAssignZone(AssignZone *p);
  void visitAssignZoneFromZone(AssignZoneFromZone *p);
  void visitZones(Zones *p); /* abstract class */
  void visitSomeZone(SomeZone *p);
  void visitNoZone(NoZone *p);
  void visitBehaviors(Behaviors *p); /* abstract class */
  void visitNoBehaviors(NoBehaviors *p);
  void visitCompleteOrDisjoint(CompleteOrDisjoint *p); /* abstract class */
  void visitNoComplDisj(NoComplDisj *p);
  void visitLexpr(Lexpr *p); /* abstract class */
  void visitImplLexpr(ImplLexpr *p);
  void visitIffLexpr(IffLexpr *p);
  void visitOrLexpr(OrLexpr *p);
  void visitAndLexpr(AndLexpr *p);
  void visitHatHatLexpr(HatHatLexpr *p);
  void visitRelationLexpr(RelationLexpr *p);
  void visitBinderLexpr(BinderLexpr *p);
  void visitNotBinderLexpr(NotBinderLexpr *p);
  void visitTrueLexpr(TrueLexpr *p);
  void visitFalseLexpr(FalseLexpr *p);
  void visitValidLexpr(ValidLexpr *p);
  void visitAutomaticLexpr(AutomaticLexpr *p);
  void visitDynamicLexpr(DynamicLexpr *p);
  void visitRegisterLexpr(RegisterLexpr *p);
  void visitStaticLexpr(StaticLexpr *p);
  void visitUnallocatedLexpr(UnallocatedLexpr *p);
  void visitNullLexpr(NullLexpr *p);
  void visitLexprIntConst(LexprIntConst *p);
  void visitLexprFloatConst(LexprFloatConst *p);
  void visitLexprStringConst(LexprStringConst *p);
  void visitAddLexpr(AddLexpr *p);
  void visitSubtrLexpr(SubtrLexpr *p);
  void visitSquaresRangeLexpr(SquaresRangeLexpr *p);
  void visitSquaresLexpr(SquaresLexpr *p);
  void visitSeparatedLexpr(SeparatedLexpr *p);
  void visitFullIdParenLexpr(FullIdParenLexpr *p);
  void visitFullId(FullId *p);
  void visitPiLexpr(PiLexpr *p);
  void visitParenRangeLexpr(ParenRangeLexpr *p);
  void visitListLexpr(ListLexpr *p);
  void iterListLexpr(ListLexpr::const_iterator i, ListLexpr::const_iterator j);
  void visitLexprRelInner(LexprRelInner *p); /* abstract class */
  void visitRelInnerLexpr(RelInnerLexpr *p);
  void visitListLexprRelInner(ListLexprRelInner *p);
  void iterListLexprRelInner(ListLexprRelInner::const_iterator i, ListLexprRelInner::const_iterator j);
  void visitRelation(Relation *p); /* abstract class */
  void visitLessRel(LessRel *p);
  void visitGreaterRel(GreaterRel *p);
  void visitLessEqRel(LessEqRel *p);
  void visitGreaterEqRel(GreaterEqRel *p);
  void visitEqRel(EqRel *p);
  void visitNotEqRel(NotEqRel *p);
  void visitLexprBinder(LexprBinder *p); /* abstract class */
  void visitForallBinderLexpr(ForallBinderLexpr *p);
  void visitExistBinderLexpr(ExistBinderLexpr *p);
  void visitLambdaBinderLexpr(LambdaBinderLexpr *p);
  void visitBinders(Binders *p); /* abstract class */
  void visitTheBinders(TheBinders *p);
  void visitTypeSpecOFTYPENAME(TypeSpecOFTYPENAME *p); /* abstract class */
  void visitTypeSpecTYPENAME(TypeSpecTYPENAME *p);
  void visitTypeSpecSimpleFromTypenameTypeSpec(TypeSpecSimpleFromTypenameTypeSpec *p);
  void visitBindersReentrance(BindersReentrance *p); /* abstract class */
  void visitBindersReentranceDeclSpec(BindersReentranceDeclSpec *p);
  void visitBindersReentranceVarSpec(BindersReentranceVarSpec *p);
  void visitListBindersReentrance(ListBindersReentrance *p);
  void iterListBindersReentrance(ListBindersReentrance::const_iterator i, ListBindersReentrance::const_iterator j);
  void visitVarSpec(VarSpec *p); /* abstract class */
  void visitStartVarSpec(StartVarSpec *p);
  void visitSimpleSpec(SimpleSpec *p);
  void visitArraySpec(ArraySpec *p);
  void visitStars(Stars *p); /* abstract class */
  void visitStar(Star *p);
  void visitListStars(ListStars *p);
  void iterListStars(ListStars::const_iterator i, ListStars::const_iterator j);
  void visitArraySize(ArraySize *p); /* abstract class */
  void visitIntConstArraySize(IntConstArraySize *p);
  void visitSomeArraySize(SomeArraySize *p);
  void visitNoSize(NoSize *p);
  void visitOptLabel(OptLabel *p); /* abstract class */
  void visitOptLabelOne(OptLabelOne *p);
  void visitOptLabelTwo(OptLabelTwo *p);
  void visitOptLabelList(OptLabelList *p); /* abstract class */
  void visitNoLableList(NoLableList *p);
  void visitLableList(LableList *p);
  void visitLabelName(LabelName *p); /* abstract class */
  void visitLableName(LableName *p);
  void visitListLabelName(ListLabelName *p);
  void iterListLabelName(ListLabelName::const_iterator i, ListLabelName::const_iterator j);
  void visitRange(Range *p); /* abstract class */
  void visitLexprRange(LexprRange *p);
  void visitLexprOption(LexprOption *p); /* abstract class */
  void visitNoLexprOption(NoLexprOption *p);
  void visitSomeLexprOption(SomeLexprOption *p);
  void visitAnyIdentifier(AnyIdentifier *p); /* abstract class */
  void visitSimpleIdentifierAny(SimpleIdentifierAny *p);
  void visitPostCond(PostCond *p); /* abstract class */
  void visitEnsuresKeyWord(EnsuresKeyWord *p);
  void visitExitsKeyWord(ExitsKeyWord *p);
  void visitBreaksKeyWord(BreaksKeyWord *p);
  void visitContinuesKeyWord(ContinuesKeyWord *p);
  void visitReturnsKeyWord(ReturnsKeyWord *p);
  void visitCheckEnsuresKeyWord(CheckEnsuresKeyWord *p);
  void visitCheckExitsKeyWord(CheckExitsKeyWord *p);
  void visitCheckBreaksKeyWord(CheckBreaksKeyWord *p);
  void visitCheckContinuesKeyWord(CheckContinuesKeyWord *p);
  void visitCheckReturnsKeyWord(CheckReturnsKeyWord *p);
  void visitAdmitEnsuresKeyWord(AdmitEnsuresKeyWord *p);
  void visitAdmitExitsKeyWord(AdmitExitsKeyWord *p);
  void visitAdmitBreaksKeyWord(AdmitBreaksKeyWord *p);
  void visitAdmitContinuesKeyWord(AdmitContinuesKeyWord *p);
  void visitAdmitReturnsKeyWord(AdmitReturnsKeyWord *p);
  void visitFullIdentifier(FullIdentifier *p); /* abstract class */
  void visitSimpleIdentifierFull(SimpleIdentifierFull *p);
  void visitListFullIdentifier(ListFullIdentifier *p);
  void iterListFullIdentifier(ListFullIdentifier::const_iterator i, ListFullIdentifier::const_iterator j);
  void visitIdentifier(Identifier *p); /* abstract class */
  void visitIdentifierIdent(IdentifierIdent *p);
  void visitTypeSpecSimple(TypeSpecSimple *p); /* abstract class */
  void visitTypeSpecSimpleIntegerKeyWord(TypeSpecSimpleIntegerKeyWord *p);
  void visitTypeSpecSimpleRealKeyWord(TypeSpecSimpleRealKeyWord *p);
  void visitTypeSpecSimpleBooleanKeyWord(TypeSpecSimpleBooleanKeyWord *p);
  void visitTypeSpecSimpleVoidKeyWord(TypeSpecSimpleVoidKeyWord *p);
  void visitTypeSpecSimpleBoolKeyWord(TypeSpecSimpleBoolKeyWord *p);
  void visitTypeSpecSimpleCharKeyWord(TypeSpecSimpleCharKeyWord *p);
  void visitTypeSpecSimpleIntKeyWord(TypeSpecSimpleIntKeyWord *p);
  void visitTypeSpecSimpleDoubleKeyWord(TypeSpecSimpleDoubleKeyWord *p);
  void visitTypeSpecSimpleLongDoubleKeyWord(TypeSpecSimpleLongDoubleKeyWord *p);

  void visitInteger(Integer i);
  void visitDouble(Double d);
  void visitChar(Char c);
  void visitString(String s);
  void visitIdent(String s);
 protected:
  char *buf_;
  size_t cur_, buf_size;

  void inline bufAppend(const char *s)
  {
    size_t end = cur_ + strlen(s);
    if (end >= buf_size) {
      do buf_size *= 2; /* Double the buffer size */
      while (end >= buf_size);
      resizeBuffer();
    }
    strcpy(&buf_[cur_], s);
    cur_ = end;
  }

  void inline bufAppend(const char c)
  {
    if (cur_ + 1 >= buf_size)
    {
      buf_size *= 2; /* Double the buffer size */
      resizeBuffer();
    }
    buf_[cur_] = c;
    buf_[++cur_] = 0;
  }

  void inline bufAppend(String str)
  {
    const char *s = str.c_str();
    bufAppend(s);
  }
  void inline bufReset(void)
  {
    if (buf_) delete[] buf_;
    buf_size = PARTIAL_BNFC_ACSL_BUFFER_INITIAL;
    buf_ = new char[buf_size];
    memset(buf_, 0, buf_size);
    cur_ = 0;
  }

  void inline resizeBuffer(void)
  {
    char *temp = new char[buf_size];
    if (buf_)
    {
      strcpy(temp, buf_);
      delete[] buf_;
    }
    buf_ = temp;
  }
};


}

#endif

