/* File generated by the BNF Converter (bnfc 2.9.4.1). */

#ifndef PARTIAL_BNFC_ACSL_SKELETON_HEADER
#define PARTIAL_BNFC_ACSL_SKELETON_HEADER
/* You might want to change the above name. */

#include "Absyn.H"

namespace partial_bnfc_acsl
{
class Skeleton : public Visitor
{
public:
  void visitProgram(Program *p);
  void visitAnnot(Annot *p);
  void visitCode_Annot(Code_Annot *p);
  void visitContract(Contract *p);
  void visitRequires(Requires *p);
  void visitNERequires(NERequires *p);
  void visitTerminates(Terminates *p);
  void visitDecreases(Decreases *p);
  void visitSimpleClauses(SimpleClauses *p);
  void visitNESimpleClauses(NESimpleClauses *p);
  void visitBehaviors(Behaviors *p);
  void visitCompleteOrDisjoint(CompleteOrDisjoint *p);
  void visitLexpr(Lexpr *p);
  void visitLexprRelInner(LexprRelInner *p);
  void visitRelation(Relation *p);
  void visitPostCond(PostCond *p);
  void visitFullIdentifier(FullIdentifier *p);
  void visitIdentifier(Identifier *p);
  void visitAProgram(AProgram *p);
  void visitCodeAnnot(CodeAnnot *p);
  void visitCodeAnnotContract(CodeAnnotContract *p);
  void visitSimpleContract(SimpleContract *p);
  void visitNoRequires(NoRequires *p);
  void visitSomeRequires(SomeRequires *p);
  void visitSimpleRequires(SimpleRequires *p);
  void visitCheckRequires(CheckRequires *p);
  void visitAdimtRequires(AdimtRequires *p);
  void visitNoTerminate(NoTerminate *p);
  void visitNoDecreases(NoDecreases *p);
  void visitNoSimpleClauses(NoSimpleClauses *p);
  void visitSomeSimpleClauses(SomeSimpleClauses *p);
  void visitPostCondSimpleClauses(PostCondSimpleClauses *p);
  void visitNoBehaviors(NoBehaviors *p);
  void visitNoComplDisj(NoComplDisj *p);
  void visitNoLexpr(NoLexpr *p);
  void visitImplLexpr(ImplLexpr *p);
  void visitIffLexpr(IffLexpr *p);
  void visitOrLexpr(OrLexpr *p);
  void visitAndLexpr(AndLexpr *p);
  void visitHatHatLexpr(HatHatLexpr *p);
  void visitAmpLexpr(AmpLexpr *p);
  void visitPipeLexpr(PipeLexpr *p);
  void visitHatLexpr(HatLexpr *p);
  void visitBimpliesLexpr(BimpliesLexpr *p);
  void visitBiffLexpr(BiffLexpr *p);
  void visitInLexpr(InLexpr *p);
  void visitTernaryLexpr(TernaryLexpr *p);
  void visitRelationLexpr(RelationLexpr *p);
  void visitRelInnerLexpr(RelInnerLexpr *p);
  void visitLessRel(LessRel *p);
  void visitGreaterRel(GreaterRel *p);
  void visitLessEqRel(LessEqRel *p);
  void visitGreaterEqRel(GreaterEqRel *p);
  void visitEqRel(EqRel *p);
  void visitNotEqRel(NotEqRel *p);
  void visitNotLexprInner(NotLexprInner *p);
  void visitTrueLexpr(TrueLexpr *p);
  void visitFalseLexpr(FalseLexpr *p);
  void visitAutomaticLexpr(AutomaticLexpr *p);
  void visitDynamicLexpr(DynamicLexpr *p);
  void visitRegisterLexpr(RegisterLexpr *p);
  void visitStaticLexpr(StaticLexpr *p);
  void visitUnallocatedLexpr(UnallocatedLexpr *p);
  void visitNullLexpr(NullLexpr *p);
  void visitLexprIntConst(LexprIntConst *p);
  void visitLexprFloatConst(LexprFloatConst *p);
  void visitLexprStringConst(LexprStringConst *p);
  void visitAddLexpr(AddLexpr *p);
  void visitSubtrLexpr(SubtrLexpr *p);
  void visitMultLexpr(MultLexpr *p);
  void visitDivLexpr(DivLexpr *p);
  void visitModLexpr(ModLexpr *p);
  void visitStarHatLexpr(StarHatLexpr *p);
  void visitSquaresLexpr(SquaresLexpr *p);
  void visitMinusLexpr(MinusLexpr *p);
  void visitPlusLexpr(PlusLexpr *p);
  void visitTildeLexpr(TildeLexpr *p);
  void visitStarLexpr(StarLexpr *p);
  void visitAmpUnaryLexpr(AmpUnaryLexpr *p);
  void visitSizeOfLexpr(SizeOfLexpr *p);
  void visitOldLexpr(OldLexpr *p);
  void visitResultLexpr(ResultLexpr *p);
  void visitSeparatedLexpr(SeparatedLexpr *p);
  void visitFullIdParenLexpr(FullIdParenLexpr *p);
  void visitFullId(FullId *p);
  void visitPiLexpr(PiLexpr *p);
  void visitLessLessLexpr(LessLessLexpr *p);
  void visitGreaterGreaterLexpr(GreaterGreaterLexpr *p);
  void visitTypeOfLexpr(TypeOfLexpr *p);
  void visitEnsuresKeyWord(EnsuresKeyWord *p);
  void visitExitsKeyWord(ExitsKeyWord *p);
  void visitBreaksKeyWord(BreaksKeyWord *p);
  void visitContinuesKeyWord(ContinuesKeyWord *p);
  void visitReturnsKeyWord(ReturnsKeyWord *p);
  void visitCheckEnsuresKeyWord(CheckEnsuresKeyWord *p);
  void visitCheckExitsKeyWord(CheckExitsKeyWord *p);
  void visitCheckBreaksKeyWord(CheckBreaksKeyWord *p);
  void visitCheckContinuesKeyWord(CheckContinuesKeyWord *p);
  void visitCheckReturnsKeyWord(CheckReturnsKeyWord *p);
  void visitAdmitEnsuresKeyWord(AdmitEnsuresKeyWord *p);
  void visitAdmitExitsKeyWord(AdmitExitsKeyWord *p);
  void visitAdmitBreaksKeyWord(AdmitBreaksKeyWord *p);
  void visitAdmitContinuesKeyWord(AdmitContinuesKeyWord *p);
  void visitAdmitReturnsKeyWord(AdmitReturnsKeyWord *p);
  void visitSimpleIdentifierFull(SimpleIdentifierFull *p);
  void visitIdentifierIdent(IdentifierIdent *p);
  void visitListAnnot(ListAnnot *p);
  void visitListLexpr(ListLexpr *p);
  void visitListLexprRelInner(ListLexprRelInner *p);
  void visitListFullIdentifier(ListFullIdentifier *p);

  void visitInteger(Integer x);
  void visitChar(Char x);
  void visitDouble(Double x);
  void visitString(String x);
  void visitIdent(Ident x);

};
}

#endif
