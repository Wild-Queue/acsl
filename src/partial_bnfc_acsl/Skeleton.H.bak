/* File generated by the BNF Converter (bnfc 2.9.4.1). */

#ifndef PARTIAL_BNFC_ACSL_SKELETON_HEADER
#define PARTIAL_BNFC_ACSL_SKELETON_HEADER
/* You might want to change the above name. */

#include "Absyn.H"

namespace partial_bnfc_acsl
{
class Skeleton : public Visitor
{
public:
  void visitProgram(Program *p);
  void visitAnnot(Annot *p);
  void visitCode_Annot(Code_Annot *p);
  void visitContract(Contract *p);
  void visitRequires(Requires *p);
  void visitNERequires(NERequires *p);
  void visitTerminates(Terminates *p);
  void visitDecreases(Decreases *p);
  void visitSimpleClauses(SimpleClauses *p);
  void visitNESimpleClauses(NESimpleClauses *p);
  void visitAssigns(Assigns *p);
  void visitZones(Zones *p);
  void visitBehaviors(Behaviors *p);
  void visitCompleteOrDisjoint(CompleteOrDisjoint *p);
  void visitLexpr(Lexpr *p);
  void visitLexprRelInner(LexprRelInner *p);
  void visitRelation(Relation *p);
  void visitLexprBinder(LexprBinder *p);
  void visitBinders(Binders *p);
  void visitTypeSpecOFTYPENAME(TypeSpecOFTYPENAME *p);
  void visitBindersReentrance(BindersReentrance *p);
  void visitVarSpec(VarSpec *p);
  void visitStars(Stars *p);
  void visitArraySize(ArraySize *p);
  void visitOptLabel(OptLabel *p);
  void visitOptLabelList(OptLabelList *p);
  void visitLabelName(LabelName *p);
  void visitRange(Range *p);
  void visitLexprOption(LexprOption *p);
  void visitAnyIdentifier(AnyIdentifier *p);
  void visitPostCond(PostCond *p);
  void visitFullIdentifier(FullIdentifier *p);
  void visitIdentifier(Identifier *p);
  void visitTypeSpecSimple(TypeSpecSimple *p);
  void visitLogicPTreeAnnot(LogicPTreeAnnot *p);
  void visitAnnotation(Annotation *p);
  void visitLoopAnnotStack(LoopAnnotStack *p);
  void visitLoopAnnotOpt(LoopAnnotOpt *p);
  void visitLoopInvariant(LoopInvariant *p);
  void visitLoopAllocation(LoopAllocation *p);
  void visitAllocation(Allocation *p);
  void visitLoopVariant(LoopVariant *p);
  void visitLoopEffects(LoopEffects *p);
  void visitVariant(Variant *p);
  void visitAnnotProgram(AnnotProgram *p);
  void visitAnnotationProgram(AnnotationProgram *p);
  void visitCodeAnnot(CodeAnnot *p);
  void visitCodeAnnotContract(CodeAnnotContract *p);
  void visitSimpleContract(SimpleContract *p);
  void visitClausesRequiresContract(ClausesRequiresContract *p);
  void visitClausesTerminatesContract(ClausesTerminatesContract *p);
  void visitClausesDecreasesContract(ClausesDecreasesContract *p);
  void visitNoRequires(NoRequires *p);
  void visitSomeRequires(SomeRequires *p);
  void visitSimpleRequires(SimpleRequires *p);
  void visitCheckRequires(CheckRequires *p);
  void visitAdimtRequires(AdimtRequires *p);
  void visitNoTerminate(NoTerminate *p);
  void visitNoDecreases(NoDecreases *p);
  void visitNoSimpleClauses(NoSimpleClauses *p);
  void visitSomeSimpleClauses(SomeSimpleClauses *p);
  void visitPostCondSimpleClauses(PostCondSimpleClauses *p);
  void visitAssignsSimpleClauses(AssignsSimpleClauses *p);
  void visitAssignZone(AssignZone *p);
  void visitAssignZoneFromZone(AssignZoneFromZone *p);
  void visitSomeZone(SomeZone *p);
  void visitNoZone(NoZone *p);
  void visitNoBehaviors(NoBehaviors *p);
  void visitNoComplDisj(NoComplDisj *p);
  void visitImplLexpr(ImplLexpr *p);
  void visitIffLexpr(IffLexpr *p);
  void visitOrLexpr(OrLexpr *p);
  void visitAndLexpr(AndLexpr *p);
  void visitHatHatLexpr(HatHatLexpr *p);
  void visitAmpLexpr(AmpLexpr *p);
  void visitPipeLexpr(PipeLexpr *p);
  void visitHatLexpr(HatLexpr *p);
  void visitBimpliesLexpr(BimpliesLexpr *p);
  void visitBiffLexpr(BiffLexpr *p);
  void visitInLexpr(InLexpr *p);
  void visitTernaryLexpr(TernaryLexpr *p);
  void visitRelationLexpr(RelationLexpr *p);
  void visitRelInnerLexpr(RelInnerLexpr *p);
  void visitLessRel(LessRel *p);
  void visitGreaterRel(GreaterRel *p);
  void visitLessEqRel(LessEqRel *p);
  void visitGreaterEqRel(GreaterEqRel *p);
  void visitEqRel(EqRel *p);
  void visitNotEqRel(NotEqRel *p);
  void visitBinderLexpr(BinderLexpr *p);
  void visitNotBinderLexpr(NotBinderLexpr *p);
  void visitForallBinderLexpr(ForallBinderLexpr *p);
  void visitExistBinderLexpr(ExistBinderLexpr *p);
  void visitLambdaBinderLexpr(LambdaBinderLexpr *p);
  void visitTheBinders(TheBinders *p);
  void visitTypeSpecTYPENAME(TypeSpecTYPENAME *p);
  void visitTypeSpecSimpleFromTypenameTypeSpec(TypeSpecSimpleFromTypenameTypeSpec *p);
  void visitBindersReentranceDeclSpec(BindersReentranceDeclSpec *p);
  void visitBindersReentranceVarSpec(BindersReentranceVarSpec *p);
  void visitStartVarSpec(StartVarSpec *p);
  void visitStar(Star *p);
  void visitSimpleSpec(SimpleSpec *p);
  void visitArraySpec(ArraySpec *p);
  void visitIntConstArraySize(IntConstArraySize *p);
  void visitSomeArraySize(SomeArraySize *p);
  void visitNoSize(NoSize *p);
  void visitTrueLexpr(TrueLexpr *p);
  void visitFalseLexpr(FalseLexpr *p);
  void visitPointerLexpr(PointerLexpr *p);
  void visitValidLexpr(ValidLexpr *p);
  void visitValidReadLexpr(ValidReadLexpr *p);
  void visitValidFuncLexpr(ValidFuncLexpr *p);
  void visitValidIndxLexpr(ValidIndxLexpr *p);
  void visitValidRangeLexpr(ValidRangeLexpr *p);
  void visitInitializedLexpr(InitializedLexpr *p);
  void visitDanglingLexpr(DanglingLexpr *p);
  void visitFreshLexpr(FreshLexpr *p);
  void visitBaseAddrLexpr(BaseAddrLexpr *p);
  void visitBlockLengthLexpr(BlockLengthLexpr *p);
  void visitOffsetLexpr(OffsetLexpr *p);
  void visitAllocableLexpr(AllocableLexpr *p);
  void visitFreeableLexpr(FreeableLexpr *p);
  void visitAllocationLexpr(AllocationLexpr *p);
  void visitAutomaticLexpr(AutomaticLexpr *p);
  void visitDynamicLexpr(DynamicLexpr *p);
  void visitRegisterLexpr(RegisterLexpr *p);
  void visitStaticLexpr(StaticLexpr *p);
  void visitUnallocatedLexpr(UnallocatedLexpr *p);
  void visitNullLexpr(NullLexpr *p);
  void visitLexprIntConst(LexprIntConst *p);
  void visitLexprFloatConst(LexprFloatConst *p);
  void visitLexprStringConst(LexprStringConst *p);
  void visitAddLexpr(AddLexpr *p);
  void visitSubtrLexpr(SubtrLexpr *p);
  void visitMultLexpr(MultLexpr *p);
  void visitDivLexpr(DivLexpr *p);
  void visitModLexpr(ModLexpr *p);
  void visitSquaresRangeLexpr(SquaresRangeLexpr *p);
  void visitSquaresLexpr(SquaresLexpr *p);
  void visitSizeOfLexpr(SizeOfLexpr *p);
  void visitOldLexpr(OldLexpr *p);
  void visitAtLexpr(AtLexpr *p);
  void visitResultLexpr(ResultLexpr *p);
  void visitSeparatedLexpr(SeparatedLexpr *p);
  void visitFullIdParenLexpr(FullIdParenLexpr *p);
  void visitFullId(FullId *p);
  void visitPiLexpr(PiLexpr *p);
  void visitParenRangeLexpr(ParenRangeLexpr *p);
  void visitOptLabelOne(OptLabelOne *p);
  void visitOptLabelTwo(OptLabelTwo *p);
  void visitNoLableList(NoLableList *p);
  void visitLableList(LableList *p);
  void visitLableName(LableName *p);
  void visitLexprRange(LexprRange *p);
  void visitNoLexprOption(NoLexprOption *p);
  void visitSomeLexprOption(SomeLexprOption *p);
  void visitSimpleIdentifierAny(SimpleIdentifierAny *p);
  void visitEnsuresKeyWord(EnsuresKeyWord *p);
  void visitExitsKeyWord(ExitsKeyWord *p);
  void visitBreaksKeyWord(BreaksKeyWord *p);
  void visitContinuesKeyWord(ContinuesKeyWord *p);
  void visitReturnsKeyWord(ReturnsKeyWord *p);
  void visitCheckEnsuresKeyWord(CheckEnsuresKeyWord *p);
  void visitCheckExitsKeyWord(CheckExitsKeyWord *p);
  void visitCheckBreaksKeyWord(CheckBreaksKeyWord *p);
  void visitCheckContinuesKeyWord(CheckContinuesKeyWord *p);
  void visitCheckReturnsKeyWord(CheckReturnsKeyWord *p);
  void visitAdmitEnsuresKeyWord(AdmitEnsuresKeyWord *p);
  void visitAdmitExitsKeyWord(AdmitExitsKeyWord *p);
  void visitAdmitBreaksKeyWord(AdmitBreaksKeyWord *p);
  void visitAdmitContinuesKeyWord(AdmitContinuesKeyWord *p);
  void visitAdmitReturnsKeyWord(AdmitReturnsKeyWord *p);
  void visitSimpleIdentifierFull(SimpleIdentifierFull *p);
  void visitAdmitKeyWordFullIdent(AdmitKeyWordFullIdent *p);
  void visitAllocatesKeyWordFullIdent(AllocatesKeyWordFullIdent *p);
  void visitAssertKeyWordFullIdent(AssertKeyWordFullIdent *p);
  void visitAssignsKeyWordFullIdent(AssignsKeyWordFullIdent *p);
  void visitAssumesKeyWordFullIdent(AssumesKeyWordFullIdent *p);
  void visitAtKeyWordFullIdent(AtKeyWordFullIdent *p);
  void visitAxiomKeyWordFullIdent(AxiomKeyWordFullIdent *p);
  void visitAxiomaticKeyWordFullIdent(AxiomaticKeyWordFullIdent *p);
  void visitBehaviorKeyWordFullIdent(BehaviorKeyWordFullIdent *p);
  void visitBreaksKeyWordFullIdent(BreaksKeyWordFullIdent *p);
  void visitCheckKeyWordFullIdent(CheckKeyWordFullIdent *p);
  void visitCompleteKeyWordFullIdent(CompleteKeyWordFullIdent *p);
  void visitContinuesKeyWordFullIdent(ContinuesKeyWordFullIdent *p);
  void visitContractKeyWordFullIdent(ContractKeyWordFullIdent *p);
  void visitDecreasesKeyWordFullIdent(DecreasesKeyWordFullIdent *p);
  void visitDisjointKeyWordFullIdent(DisjointKeyWordFullIdent *p);
  void visitEnsuresKeyWordFullIdent(EnsuresKeyWordFullIdent *p);
  void visitExitsKeyWordFullIdent(ExitsKeyWordFullIdent *p);
  void visitFreesKeyWordFullIdent(FreesKeyWordFullIdent *p);
  void visitFunctionKeyWordFullIdent(FunctionKeyWordFullIdent *p);
  void visitGlobalKeyWordFullIdent(GlobalKeyWordFullIdent *p);
  void visitImpactKeyWordFullIdent(ImpactKeyWordFullIdent *p);
  void visitInductiveKeyWordFullIdent(InductiveKeyWordFullIdent *p);
  void visitIncludeKeyWordFullIdent(IncludeKeyWordFullIdent *p);
  void visitInvariantKeyWordFullIdent(InvariantKeyWordFullIdent *p);
  void visitLemmaKeyWordFullIdent(LemmaKeyWordFullIdent *p);
  void visitLetKeyWordFullIdent(LetKeyWordFullIdent *p);
  void visitLogicKeyWordFullIdent(LogicKeyWordFullIdent *p);
  void visitLoopKeyWordFullIdent(LoopKeyWordFullIdent *p);
  void visitModelKeyWordFullIdent(ModelKeyWordFullIdent *p);
  void visitModuleKeyWordFullIdent(ModuleKeyWordFullIdent *p);
  void visitPragmaKeyWordFullIdent(PragmaKeyWordFullIdent *p);
  void visitPredicateKeyWordFullIdent(PredicateKeyWordFullIdent *p);
  void visitRequiresKeyWordFullIdent(RequiresKeyWordFullIdent *p);
  void visitReturnsKeyWordFullIdent(ReturnsKeyWordFullIdent *p);
  void visitSliceKeyWordFullIdent(SliceKeyWordFullIdent *p);
  void visitTerminatesKeyWordFullIdent(TerminatesKeyWordFullIdent *p);
  void visitTypeKeyWordFullIdent(TypeKeyWordFullIdent *p);
  void visitVariantKeyWordFullIdent(VariantKeyWordFullIdent *p);
  void visitIdentifierIdent(IdentifierIdent *p);
  void visitBehaviorsKeyWord(BehaviorsKeyWord *p);
  void visitLabelKeyWord(LabelKeyWord *p);
  void visitReadsKeyWord(ReadsKeyWord *p);
  void visitWritesKeyWord(WritesKeyWord *p);
  void visitTypeSpecSimpleIntegerKeyWord(TypeSpecSimpleIntegerKeyWord *p);
  void visitTypeSpecSimpleRealKeyWord(TypeSpecSimpleRealKeyWord *p);
  void visitTypeSpecSimpleBooleanKeyWord(TypeSpecSimpleBooleanKeyWord *p);
  void visitTypeSpecSimpleVoidKeyWord(TypeSpecSimpleVoidKeyWord *p);
  void visitTypeSpecSimpleBoolKeyWord(TypeSpecSimpleBoolKeyWord *p);
  void visitTypeSpecSimpleCharKeyWord(TypeSpecSimpleCharKeyWord *p);
  void visitTypeSpecSimpleSignedCharKeyWord(TypeSpecSimpleSignedCharKeyWord *p);
  void visitTypeSpecSimpleUnsignedCharKeyWord(TypeSpecSimpleUnsignedCharKeyWord *p);
  void visitTypeSpecSimpleIntKeyWord(TypeSpecSimpleIntKeyWord *p);
  void visitTypeSpecSimpleSignedIntKeyWord(TypeSpecSimpleSignedIntKeyWord *p);
  void visitTypeSpecSimpleUnsignedIntKeyWord(TypeSpecSimpleUnsignedIntKeyWord *p);
  void visitTypeSpecSimpleUnsignedKeyWord(TypeSpecSimpleUnsignedKeyWord *p);
  void visitTypeSpecSimpleShortKeyWord(TypeSpecSimpleShortKeyWord *p);
  void visitTypeSpecSimpleSignedShortKeyWord(TypeSpecSimpleSignedShortKeyWord *p);
  void visitTypeSpecSimpleUnsignedShortKeyWord(TypeSpecSimpleUnsignedShortKeyWord *p);
  void visitTypeSpecSimpleShortIntKeyWord(TypeSpecSimpleShortIntKeyWord *p);
  void visitTypeSpecSimpleSignedShortIntKeyWord(TypeSpecSimpleSignedShortIntKeyWord *p);
  void visitTypeSpecSimpleUnsignedShortIntKeyWord(TypeSpecSimpleUnsignedShortIntKeyWord *p);
  void visitTypeSpecSimpleLongKeyWord(TypeSpecSimpleLongKeyWord *p);
  void visitTypeSpecSimpleSignedLongKeyWord(TypeSpecSimpleSignedLongKeyWord *p);
  void visitTypeSpecSimpleUnsignedLongKeyWord(TypeSpecSimpleUnsignedLongKeyWord *p);
  void visitTypeSpecSimpleSignedLongIntKeyWord(TypeSpecSimpleSignedLongIntKeyWord *p);
  void visitTypeSpecSimpleLongIntKeyWord(TypeSpecSimpleLongIntKeyWord *p);
  void visitTypeSpecSimpleUnsignedLongIntKeyWord(TypeSpecSimpleUnsignedLongIntKeyWord *p);
  void visitTypeSpecSimpleLongLongKeyWord(TypeSpecSimpleLongLongKeyWord *p);
  void visitTypeSpecSimpleSignedLongLongKeyWord(TypeSpecSimpleSignedLongLongKeyWord *p);
  void visitTypeSpecSimpleUnsignedLongLongKeyWord(TypeSpecSimpleUnsignedLongLongKeyWord *p);
  void visitTypeSpecSimpleLongLongIntKeyWord(TypeSpecSimpleLongLongIntKeyWord *p);
  void visitTypeSpecSimpleSignedLongLongIntKeyWord(TypeSpecSimpleSignedLongLongIntKeyWord *p);
  void visitTypeSpecSimpleUnsignedLongLongIntKeyWord(TypeSpecSimpleUnsignedLongLongIntKeyWord *p);
  void visitTypeSpecSimpleFloatKeyWord(TypeSpecSimpleFloatKeyWord *p);
  void visitTypeSpecSimpleDoubleKeyWord(TypeSpecSimpleDoubleKeyWord *p);
  void visitTypeSpecSimpleLongDoubleKeyWord(TypeSpecSimpleLongDoubleKeyWord *p);
  void visitAnAnnotation(AnAnnotation *p);
  void visitLoopAnnotation(LoopAnnotation *p);
  void visitLoopAnnotStackInvariant(LoopAnnotStackInvariant *p);
  void visitLoopAnnotStackEffects(LoopAnnotStackEffects *p);
  void visitLoopAnnotStackAllocation(LoopAnnotStackAllocation *p);
  void visitLoopAnnotStackVariant(LoopAnnotStackVariant *p);
  void visitNoLoopAnnot(NoLoopAnnot *p);
  void visitSomeLoopAnnot(SomeLoopAnnot *p);
  void visitSimpleLoopInvariant(SimpleLoopInvariant *p);
  void visitCheckLoopInvariant(CheckLoopInvariant *p);
  void visitAdmitLoopInvariant(AdmitLoopInvariant *p);
  void visitSimpleLoopAllocation(SimpleLoopAllocation *p);
  void visitAllocatesZones(AllocatesZones *p);
  void visitFreesZones(FreesZones *p);
  void visitSimpleLoopVariant(SimpleLoopVariant *p);
  void visitLoopAssigns(LoopAssigns *p);
  void visitForVariant(ForVariant *p);
  void visitLexprVariant(LexprVariant *p);
  void visitListLexpr(ListLexpr *p);
  void visitListLexprRelInner(ListLexprRelInner *p);
  void visitListBindersReentrance(ListBindersReentrance *p);
  void visitListStars(ListStars *p);
  void visitListLabelName(ListLabelName *p);
  void visitListFullIdentifier(ListFullIdentifier *p);

  void visitInteger(Integer x);
  void visitChar(Char x);
  void visitDouble(Double x);
  void visitString(String x);
  void visitIdent(Ident x);

};
}

#endif
