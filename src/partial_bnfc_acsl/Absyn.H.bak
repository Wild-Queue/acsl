/* File generated by the BNF Converter (bnfc 2.9.4.1). */

#ifndef PARTIAL_BNFC_ACSL_ABSYN_HEADER
#define PARTIAL_BNFC_ACSL_ABSYN_HEADER

#include<string>
#include<vector>

//C++ Abstract Syntax Interface.
namespace partial_bnfc_acsl
{
/********************   TypeDef Section    ********************/

typedef int Integer;
typedef char Char;
typedef double Double;
typedef std::string String;
typedef std::string Ident;




/********************   Forward Declarations    ********************/

class Program;
class Annot;
class Code_Annot;
class Contract;
class Requires;
class NERequires;
class Terminates;
class Decreases;
class SimpleClauses;
class NESimpleClauses;
class Assigns;
class Zones;
class Behaviors;
class CompleteOrDisjoint;
class Lexpr;
class LexprRelInner;
class Relation;
class LexprBinder;
class Binders;
class TypeSpecOFTYPENAME;
class BindersReentrance;
class VarSpec;
class Stars;
class ArraySize;
class OptLabel;
class OptLabelList;
class LabelName;
class Range;
class LexprOption;
class AnyIdentifier;
class PostCond;
class FullIdentifier;
class Identifier;
class TypeSpecSimple;
class LogicPTreeAnnot;
class Annotation;
class LoopAnnotStack;
class LoopAnnotOpt;
class LoopInvariant;
class LoopAllocation;
class Allocation;
class LoopVariant;
class LoopEffects;
class Variant;
class AnnotProgram;
class AnnotationProgram;
class CodeAnnot;
class CodeAnnotContract;
class SimpleContract;
class ClausesRequiresContract;
class ClausesTerminatesContract;
class ClausesDecreasesContract;
class NoRequires;
class SomeRequires;
class SimpleRequires;
class CheckRequires;
class AdimtRequires;
class NoTerminate;
class NoDecreases;
class NoSimpleClauses;
class SomeSimpleClauses;
class PostCondSimpleClauses;
class AssignsSimpleClauses;
class AssignZone;
class AssignZoneFromZone;
class SomeZone;
class NoZone;
class NoBehaviors;
class NoComplDisj;
class ImplLexpr;
class IffLexpr;
class OrLexpr;
class AndLexpr;
class HatHatLexpr;
class AmpLexpr;
class PipeLexpr;
class HatLexpr;
class BimpliesLexpr;
class BiffLexpr;
class InLexpr;
class TernaryLexpr;
class RelationLexpr;
class RelInnerLexpr;
class LessRel;
class GreaterRel;
class LessEqRel;
class GreaterEqRel;
class EqRel;
class NotEqRel;
class BinderLexpr;
class NotBinderLexpr;
class ForallBinderLexpr;
class ExistBinderLexpr;
class LambdaBinderLexpr;
class TheBinders;
class TypeSpecTYPENAME;
class TypeSpecSimpleFromTypenameTypeSpec;
class BindersReentranceDeclSpec;
class BindersReentranceVarSpec;
class StartVarSpec;
class Star;
class SimpleSpec;
class ArraySpec;
class IntConstArraySize;
class SomeArraySize;
class NoSize;
class TrueLexpr;
class FalseLexpr;
class PointerLexpr;
class ValidLexpr;
class ValidReadLexpr;
class ValidFuncLexpr;
class ValidIndxLexpr;
class ValidRangeLexpr;
class InitializedLexpr;
class DanglingLexpr;
class FreshLexpr;
class BaseAddrLexpr;
class BlockLengthLexpr;
class OffsetLexpr;
class AllocableLexpr;
class FreeableLexpr;
class AllocationLexpr;
class AutomaticLexpr;
class DynamicLexpr;
class RegisterLexpr;
class StaticLexpr;
class UnallocatedLexpr;
class NullLexpr;
class LexprIntConst;
class LexprFloatConst;
class LexprStringConst;
class AddLexpr;
class SubtrLexpr;
class MultLexpr;
class DivLexpr;
class ModLexpr;
class SquaresRangeLexpr;
class SquaresLexpr;
class SizeOfLexpr;
class OldLexpr;
class AtLexpr;
class ResultLexpr;
class SeparatedLexpr;
class FullIdParenLexpr;
class FullId;
class PiLexpr;
class ParenRangeLexpr;
class OptLabelOne;
class OptLabelTwo;
class NoLableList;
class LableList;
class LableName;
class LexprRange;
class NoLexprOption;
class SomeLexprOption;
class SimpleIdentifierAny;
class EnsuresKeyWord;
class ExitsKeyWord;
class BreaksKeyWord;
class ContinuesKeyWord;
class ReturnsKeyWord;
class CheckEnsuresKeyWord;
class CheckExitsKeyWord;
class CheckBreaksKeyWord;
class CheckContinuesKeyWord;
class CheckReturnsKeyWord;
class AdmitEnsuresKeyWord;
class AdmitExitsKeyWord;
class AdmitBreaksKeyWord;
class AdmitContinuesKeyWord;
class AdmitReturnsKeyWord;
class SimpleIdentifierFull;
class AdmitKeyWordFullIdent;
class AllocatesKeyWordFullIdent;
class AssertKeyWordFullIdent;
class AssignsKeyWordFullIdent;
class AssumesKeyWordFullIdent;
class AtKeyWordFullIdent;
class AxiomKeyWordFullIdent;
class AxiomaticKeyWordFullIdent;
class BehaviorKeyWordFullIdent;
class BreaksKeyWordFullIdent;
class CheckKeyWordFullIdent;
class CompleteKeyWordFullIdent;
class ContinuesKeyWordFullIdent;
class ContractKeyWordFullIdent;
class DecreasesKeyWordFullIdent;
class DisjointKeyWordFullIdent;
class EnsuresKeyWordFullIdent;
class ExitsKeyWordFullIdent;
class FreesKeyWordFullIdent;
class FunctionKeyWordFullIdent;
class GlobalKeyWordFullIdent;
class ImpactKeyWordFullIdent;
class InductiveKeyWordFullIdent;
class IncludeKeyWordFullIdent;
class InvariantKeyWordFullIdent;
class LemmaKeyWordFullIdent;
class LetKeyWordFullIdent;
class LogicKeyWordFullIdent;
class LoopKeyWordFullIdent;
class ModelKeyWordFullIdent;
class ModuleKeyWordFullIdent;
class PragmaKeyWordFullIdent;
class PredicateKeyWordFullIdent;
class RequiresKeyWordFullIdent;
class ReturnsKeyWordFullIdent;
class SliceKeyWordFullIdent;
class TerminatesKeyWordFullIdent;
class TypeKeyWordFullIdent;
class VariantKeyWordFullIdent;
class IdentifierIdent;
class BehaviorsKeyWord;
class LabelKeyWord;
class ReadsKeyWord;
class WritesKeyWord;
class TypeSpecSimpleIntegerKeyWord;
class TypeSpecSimpleRealKeyWord;
class TypeSpecSimpleBooleanKeyWord;
class TypeSpecSimpleVoidKeyWord;
class TypeSpecSimpleBoolKeyWord;
class TypeSpecSimpleCharKeyWord;
class TypeSpecSimpleSignedCharKeyWord;
class TypeSpecSimpleUnsignedCharKeyWord;
class TypeSpecSimpleIntKeyWord;
class TypeSpecSimpleSignedIntKeyWord;
class TypeSpecSimpleUnsignedIntKeyWord;
class TypeSpecSimpleUnsignedKeyWord;
class TypeSpecSimpleShortKeyWord;
class TypeSpecSimpleSignedShortKeyWord;
class TypeSpecSimpleUnsignedShortKeyWord;
class TypeSpecSimpleShortIntKeyWord;
class TypeSpecSimpleSignedShortIntKeyWord;
class TypeSpecSimpleUnsignedShortIntKeyWord;
class TypeSpecSimpleLongKeyWord;
class TypeSpecSimpleSignedLongKeyWord;
class TypeSpecSimpleUnsignedLongKeyWord;
class TypeSpecSimpleSignedLongIntKeyWord;
class TypeSpecSimpleLongIntKeyWord;
class TypeSpecSimpleUnsignedLongIntKeyWord;
class TypeSpecSimpleLongLongKeyWord;
class TypeSpecSimpleSignedLongLongKeyWord;
class TypeSpecSimpleUnsignedLongLongKeyWord;
class TypeSpecSimpleLongLongIntKeyWord;
class TypeSpecSimpleSignedLongLongIntKeyWord;
class TypeSpecSimpleUnsignedLongLongIntKeyWord;
class TypeSpecSimpleFloatKeyWord;
class TypeSpecSimpleDoubleKeyWord;
class TypeSpecSimpleLongDoubleKeyWord;
class AnAnnotation;
class LoopAnnotation;
class LoopAnnotStackInvariant;
class LoopAnnotStackEffects;
class LoopAnnotStackAllocation;
class LoopAnnotStackVariant;
class NoLoopAnnot;
class SomeLoopAnnot;
class SimpleLoopInvariant;
class CheckLoopInvariant;
class AdmitLoopInvariant;
class SimpleLoopAllocation;
class AllocatesZones;
class FreesZones;
class SimpleLoopVariant;
class LoopAssigns;
class ForVariant;
class LexprVariant;
class ListLexpr;
class ListLexprRelInner;
class ListBindersReentrance;
class ListStars;
class ListLabelName;
class ListFullIdentifier;


/********************   Visitor Interfaces    ********************/
class Visitor
{
public:
  virtual ~Visitor() {}
  virtual void visitProgram(Program *p) = 0;
  virtual void visitAnnot(Annot *p) = 0;
  virtual void visitCode_Annot(Code_Annot *p) = 0;
  virtual void visitContract(Contract *p) = 0;
  virtual void visitRequires(Requires *p) = 0;
  virtual void visitNERequires(NERequires *p) = 0;
  virtual void visitTerminates(Terminates *p) = 0;
  virtual void visitDecreases(Decreases *p) = 0;
  virtual void visitSimpleClauses(SimpleClauses *p) = 0;
  virtual void visitNESimpleClauses(NESimpleClauses *p) = 0;
  virtual void visitAssigns(Assigns *p) = 0;
  virtual void visitZones(Zones *p) = 0;
  virtual void visitBehaviors(Behaviors *p) = 0;
  virtual void visitCompleteOrDisjoint(CompleteOrDisjoint *p) = 0;
  virtual void visitLexpr(Lexpr *p) = 0;
  virtual void visitLexprRelInner(LexprRelInner *p) = 0;
  virtual void visitRelation(Relation *p) = 0;
  virtual void visitLexprBinder(LexprBinder *p) = 0;
  virtual void visitBinders(Binders *p) = 0;
  virtual void visitTypeSpecOFTYPENAME(TypeSpecOFTYPENAME *p) = 0;
  virtual void visitBindersReentrance(BindersReentrance *p) = 0;
  virtual void visitVarSpec(VarSpec *p) = 0;
  virtual void visitStars(Stars *p) = 0;
  virtual void visitArraySize(ArraySize *p) = 0;
  virtual void visitOptLabel(OptLabel *p) = 0;
  virtual void visitOptLabelList(OptLabelList *p) = 0;
  virtual void visitLabelName(LabelName *p) = 0;
  virtual void visitRange(Range *p) = 0;
  virtual void visitLexprOption(LexprOption *p) = 0;
  virtual void visitAnyIdentifier(AnyIdentifier *p) = 0;
  virtual void visitPostCond(PostCond *p) = 0;
  virtual void visitFullIdentifier(FullIdentifier *p) = 0;
  virtual void visitIdentifier(Identifier *p) = 0;
  virtual void visitTypeSpecSimple(TypeSpecSimple *p) = 0;
  virtual void visitLogicPTreeAnnot(LogicPTreeAnnot *p) = 0;
  virtual void visitAnnotation(Annotation *p) = 0;
  virtual void visitLoopAnnotStack(LoopAnnotStack *p) = 0;
  virtual void visitLoopAnnotOpt(LoopAnnotOpt *p) = 0;
  virtual void visitLoopInvariant(LoopInvariant *p) = 0;
  virtual void visitLoopAllocation(LoopAllocation *p) = 0;
  virtual void visitAllocation(Allocation *p) = 0;
  virtual void visitLoopVariant(LoopVariant *p) = 0;
  virtual void visitLoopEffects(LoopEffects *p) = 0;
  virtual void visitVariant(Variant *p) = 0;
  virtual void visitAnnotProgram(AnnotProgram *p) = 0;
  virtual void visitAnnotationProgram(AnnotationProgram *p) = 0;
  virtual void visitCodeAnnot(CodeAnnot *p) = 0;
  virtual void visitCodeAnnotContract(CodeAnnotContract *p) = 0;
  virtual void visitSimpleContract(SimpleContract *p) = 0;
  virtual void visitClausesRequiresContract(ClausesRequiresContract *p) = 0;
  virtual void visitClausesTerminatesContract(ClausesTerminatesContract *p) = 0;
  virtual void visitClausesDecreasesContract(ClausesDecreasesContract *p) = 0;
  virtual void visitNoRequires(NoRequires *p) = 0;
  virtual void visitSomeRequires(SomeRequires *p) = 0;
  virtual void visitSimpleRequires(SimpleRequires *p) = 0;
  virtual void visitCheckRequires(CheckRequires *p) = 0;
  virtual void visitAdimtRequires(AdimtRequires *p) = 0;
  virtual void visitNoTerminate(NoTerminate *p) = 0;
  virtual void visitNoDecreases(NoDecreases *p) = 0;
  virtual void visitNoSimpleClauses(NoSimpleClauses *p) = 0;
  virtual void visitSomeSimpleClauses(SomeSimpleClauses *p) = 0;
  virtual void visitPostCondSimpleClauses(PostCondSimpleClauses *p) = 0;
  virtual void visitAssignsSimpleClauses(AssignsSimpleClauses *p) = 0;
  virtual void visitAssignZone(AssignZone *p) = 0;
  virtual void visitAssignZoneFromZone(AssignZoneFromZone *p) = 0;
  virtual void visitSomeZone(SomeZone *p) = 0;
  virtual void visitNoZone(NoZone *p) = 0;
  virtual void visitNoBehaviors(NoBehaviors *p) = 0;
  virtual void visitNoComplDisj(NoComplDisj *p) = 0;
  virtual void visitImplLexpr(ImplLexpr *p) = 0;
  virtual void visitIffLexpr(IffLexpr *p) = 0;
  virtual void visitOrLexpr(OrLexpr *p) = 0;
  virtual void visitAndLexpr(AndLexpr *p) = 0;
  virtual void visitHatHatLexpr(HatHatLexpr *p) = 0;
  virtual void visitAmpLexpr(AmpLexpr *p) = 0;
  virtual void visitPipeLexpr(PipeLexpr *p) = 0;
  virtual void visitHatLexpr(HatLexpr *p) = 0;
  virtual void visitBimpliesLexpr(BimpliesLexpr *p) = 0;
  virtual void visitBiffLexpr(BiffLexpr *p) = 0;
  virtual void visitInLexpr(InLexpr *p) = 0;
  virtual void visitTernaryLexpr(TernaryLexpr *p) = 0;
  virtual void visitRelationLexpr(RelationLexpr *p) = 0;
  virtual void visitRelInnerLexpr(RelInnerLexpr *p) = 0;
  virtual void visitLessRel(LessRel *p) = 0;
  virtual void visitGreaterRel(GreaterRel *p) = 0;
  virtual void visitLessEqRel(LessEqRel *p) = 0;
  virtual void visitGreaterEqRel(GreaterEqRel *p) = 0;
  virtual void visitEqRel(EqRel *p) = 0;
  virtual void visitNotEqRel(NotEqRel *p) = 0;
  virtual void visitBinderLexpr(BinderLexpr *p) = 0;
  virtual void visitNotBinderLexpr(NotBinderLexpr *p) = 0;
  virtual void visitForallBinderLexpr(ForallBinderLexpr *p) = 0;
  virtual void visitExistBinderLexpr(ExistBinderLexpr *p) = 0;
  virtual void visitLambdaBinderLexpr(LambdaBinderLexpr *p) = 0;
  virtual void visitTheBinders(TheBinders *p) = 0;
  virtual void visitTypeSpecTYPENAME(TypeSpecTYPENAME *p) = 0;
  virtual void visitTypeSpecSimpleFromTypenameTypeSpec(TypeSpecSimpleFromTypenameTypeSpec *p) = 0;
  virtual void visitBindersReentranceDeclSpec(BindersReentranceDeclSpec *p) = 0;
  virtual void visitBindersReentranceVarSpec(BindersReentranceVarSpec *p) = 0;
  virtual void visitStartVarSpec(StartVarSpec *p) = 0;
  virtual void visitStar(Star *p) = 0;
  virtual void visitSimpleSpec(SimpleSpec *p) = 0;
  virtual void visitArraySpec(ArraySpec *p) = 0;
  virtual void visitIntConstArraySize(IntConstArraySize *p) = 0;
  virtual void visitSomeArraySize(SomeArraySize *p) = 0;
  virtual void visitNoSize(NoSize *p) = 0;
  virtual void visitTrueLexpr(TrueLexpr *p) = 0;
  virtual void visitFalseLexpr(FalseLexpr *p) = 0;
  virtual void visitPointerLexpr(PointerLexpr *p) = 0;
  virtual void visitValidLexpr(ValidLexpr *p) = 0;
  virtual void visitValidReadLexpr(ValidReadLexpr *p) = 0;
  virtual void visitValidFuncLexpr(ValidFuncLexpr *p) = 0;
  virtual void visitValidIndxLexpr(ValidIndxLexpr *p) = 0;
  virtual void visitValidRangeLexpr(ValidRangeLexpr *p) = 0;
  virtual void visitInitializedLexpr(InitializedLexpr *p) = 0;
  virtual void visitDanglingLexpr(DanglingLexpr *p) = 0;
  virtual void visitFreshLexpr(FreshLexpr *p) = 0;
  virtual void visitBaseAddrLexpr(BaseAddrLexpr *p) = 0;
  virtual void visitBlockLengthLexpr(BlockLengthLexpr *p) = 0;
  virtual void visitOffsetLexpr(OffsetLexpr *p) = 0;
  virtual void visitAllocableLexpr(AllocableLexpr *p) = 0;
  virtual void visitFreeableLexpr(FreeableLexpr *p) = 0;
  virtual void visitAllocationLexpr(AllocationLexpr *p) = 0;
  virtual void visitAutomaticLexpr(AutomaticLexpr *p) = 0;
  virtual void visitDynamicLexpr(DynamicLexpr *p) = 0;
  virtual void visitRegisterLexpr(RegisterLexpr *p) = 0;
  virtual void visitStaticLexpr(StaticLexpr *p) = 0;
  virtual void visitUnallocatedLexpr(UnallocatedLexpr *p) = 0;
  virtual void visitNullLexpr(NullLexpr *p) = 0;
  virtual void visitLexprIntConst(LexprIntConst *p) = 0;
  virtual void visitLexprFloatConst(LexprFloatConst *p) = 0;
  virtual void visitLexprStringConst(LexprStringConst *p) = 0;
  virtual void visitAddLexpr(AddLexpr *p) = 0;
  virtual void visitSubtrLexpr(SubtrLexpr *p) = 0;
  virtual void visitMultLexpr(MultLexpr *p) = 0;
  virtual void visitDivLexpr(DivLexpr *p) = 0;
  virtual void visitModLexpr(ModLexpr *p) = 0;
  virtual void visitSquaresRangeLexpr(SquaresRangeLexpr *p) = 0;
  virtual void visitSquaresLexpr(SquaresLexpr *p) = 0;
  virtual void visitSizeOfLexpr(SizeOfLexpr *p) = 0;
  virtual void visitOldLexpr(OldLexpr *p) = 0;
  virtual void visitAtLexpr(AtLexpr *p) = 0;
  virtual void visitResultLexpr(ResultLexpr *p) = 0;
  virtual void visitSeparatedLexpr(SeparatedLexpr *p) = 0;
  virtual void visitFullIdParenLexpr(FullIdParenLexpr *p) = 0;
  virtual void visitFullId(FullId *p) = 0;
  virtual void visitPiLexpr(PiLexpr *p) = 0;
  virtual void visitParenRangeLexpr(ParenRangeLexpr *p) = 0;
  virtual void visitOptLabelOne(OptLabelOne *p) = 0;
  virtual void visitOptLabelTwo(OptLabelTwo *p) = 0;
  virtual void visitNoLableList(NoLableList *p) = 0;
  virtual void visitLableList(LableList *p) = 0;
  virtual void visitLableName(LableName *p) = 0;
  virtual void visitLexprRange(LexprRange *p) = 0;
  virtual void visitNoLexprOption(NoLexprOption *p) = 0;
  virtual void visitSomeLexprOption(SomeLexprOption *p) = 0;
  virtual void visitSimpleIdentifierAny(SimpleIdentifierAny *p) = 0;
  virtual void visitEnsuresKeyWord(EnsuresKeyWord *p) = 0;
  virtual void visitExitsKeyWord(ExitsKeyWord *p) = 0;
  virtual void visitBreaksKeyWord(BreaksKeyWord *p) = 0;
  virtual void visitContinuesKeyWord(ContinuesKeyWord *p) = 0;
  virtual void visitReturnsKeyWord(ReturnsKeyWord *p) = 0;
  virtual void visitCheckEnsuresKeyWord(CheckEnsuresKeyWord *p) = 0;
  virtual void visitCheckExitsKeyWord(CheckExitsKeyWord *p) = 0;
  virtual void visitCheckBreaksKeyWord(CheckBreaksKeyWord *p) = 0;
  virtual void visitCheckContinuesKeyWord(CheckContinuesKeyWord *p) = 0;
  virtual void visitCheckReturnsKeyWord(CheckReturnsKeyWord *p) = 0;
  virtual void visitAdmitEnsuresKeyWord(AdmitEnsuresKeyWord *p) = 0;
  virtual void visitAdmitExitsKeyWord(AdmitExitsKeyWord *p) = 0;
  virtual void visitAdmitBreaksKeyWord(AdmitBreaksKeyWord *p) = 0;
  virtual void visitAdmitContinuesKeyWord(AdmitContinuesKeyWord *p) = 0;
  virtual void visitAdmitReturnsKeyWord(AdmitReturnsKeyWord *p) = 0;
  virtual void visitSimpleIdentifierFull(SimpleIdentifierFull *p) = 0;
  virtual void visitAdmitKeyWordFullIdent(AdmitKeyWordFullIdent *p) = 0;
  virtual void visitAllocatesKeyWordFullIdent(AllocatesKeyWordFullIdent *p) = 0;
  virtual void visitAssertKeyWordFullIdent(AssertKeyWordFullIdent *p) = 0;
  virtual void visitAssignsKeyWordFullIdent(AssignsKeyWordFullIdent *p) = 0;
  virtual void visitAssumesKeyWordFullIdent(AssumesKeyWordFullIdent *p) = 0;
  virtual void visitAtKeyWordFullIdent(AtKeyWordFullIdent *p) = 0;
  virtual void visitAxiomKeyWordFullIdent(AxiomKeyWordFullIdent *p) = 0;
  virtual void visitAxiomaticKeyWordFullIdent(AxiomaticKeyWordFullIdent *p) = 0;
  virtual void visitBehaviorKeyWordFullIdent(BehaviorKeyWordFullIdent *p) = 0;
  virtual void visitBreaksKeyWordFullIdent(BreaksKeyWordFullIdent *p) = 0;
  virtual void visitCheckKeyWordFullIdent(CheckKeyWordFullIdent *p) = 0;
  virtual void visitCompleteKeyWordFullIdent(CompleteKeyWordFullIdent *p) = 0;
  virtual void visitContinuesKeyWordFullIdent(ContinuesKeyWordFullIdent *p) = 0;
  virtual void visitContractKeyWordFullIdent(ContractKeyWordFullIdent *p) = 0;
  virtual void visitDecreasesKeyWordFullIdent(DecreasesKeyWordFullIdent *p) = 0;
  virtual void visitDisjointKeyWordFullIdent(DisjointKeyWordFullIdent *p) = 0;
  virtual void visitEnsuresKeyWordFullIdent(EnsuresKeyWordFullIdent *p) = 0;
  virtual void visitExitsKeyWordFullIdent(ExitsKeyWordFullIdent *p) = 0;
  virtual void visitFreesKeyWordFullIdent(FreesKeyWordFullIdent *p) = 0;
  virtual void visitFunctionKeyWordFullIdent(FunctionKeyWordFullIdent *p) = 0;
  virtual void visitGlobalKeyWordFullIdent(GlobalKeyWordFullIdent *p) = 0;
  virtual void visitImpactKeyWordFullIdent(ImpactKeyWordFullIdent *p) = 0;
  virtual void visitInductiveKeyWordFullIdent(InductiveKeyWordFullIdent *p) = 0;
  virtual void visitIncludeKeyWordFullIdent(IncludeKeyWordFullIdent *p) = 0;
  virtual void visitInvariantKeyWordFullIdent(InvariantKeyWordFullIdent *p) = 0;
  virtual void visitLemmaKeyWordFullIdent(LemmaKeyWordFullIdent *p) = 0;
  virtual void visitLetKeyWordFullIdent(LetKeyWordFullIdent *p) = 0;
  virtual void visitLogicKeyWordFullIdent(LogicKeyWordFullIdent *p) = 0;
  virtual void visitLoopKeyWordFullIdent(LoopKeyWordFullIdent *p) = 0;
  virtual void visitModelKeyWordFullIdent(ModelKeyWordFullIdent *p) = 0;
  virtual void visitModuleKeyWordFullIdent(ModuleKeyWordFullIdent *p) = 0;
  virtual void visitPragmaKeyWordFullIdent(PragmaKeyWordFullIdent *p) = 0;
  virtual void visitPredicateKeyWordFullIdent(PredicateKeyWordFullIdent *p) = 0;
  virtual void visitRequiresKeyWordFullIdent(RequiresKeyWordFullIdent *p) = 0;
  virtual void visitReturnsKeyWordFullIdent(ReturnsKeyWordFullIdent *p) = 0;
  virtual void visitSliceKeyWordFullIdent(SliceKeyWordFullIdent *p) = 0;
  virtual void visitTerminatesKeyWordFullIdent(TerminatesKeyWordFullIdent *p) = 0;
  virtual void visitTypeKeyWordFullIdent(TypeKeyWordFullIdent *p) = 0;
  virtual void visitVariantKeyWordFullIdent(VariantKeyWordFullIdent *p) = 0;
  virtual void visitIdentifierIdent(IdentifierIdent *p) = 0;
  virtual void visitBehaviorsKeyWord(BehaviorsKeyWord *p) = 0;
  virtual void visitLabelKeyWord(LabelKeyWord *p) = 0;
  virtual void visitReadsKeyWord(ReadsKeyWord *p) = 0;
  virtual void visitWritesKeyWord(WritesKeyWord *p) = 0;
  virtual void visitTypeSpecSimpleIntegerKeyWord(TypeSpecSimpleIntegerKeyWord *p) = 0;
  virtual void visitTypeSpecSimpleRealKeyWord(TypeSpecSimpleRealKeyWord *p) = 0;
  virtual void visitTypeSpecSimpleBooleanKeyWord(TypeSpecSimpleBooleanKeyWord *p) = 0;
  virtual void visitTypeSpecSimpleVoidKeyWord(TypeSpecSimpleVoidKeyWord *p) = 0;
  virtual void visitTypeSpecSimpleBoolKeyWord(TypeSpecSimpleBoolKeyWord *p) = 0;
  virtual void visitTypeSpecSimpleCharKeyWord(TypeSpecSimpleCharKeyWord *p) = 0;
  virtual void visitTypeSpecSimpleSignedCharKeyWord(TypeSpecSimpleSignedCharKeyWord *p) = 0;
  virtual void visitTypeSpecSimpleUnsignedCharKeyWord(TypeSpecSimpleUnsignedCharKeyWord *p) = 0;
  virtual void visitTypeSpecSimpleIntKeyWord(TypeSpecSimpleIntKeyWord *p) = 0;
  virtual void visitTypeSpecSimpleSignedIntKeyWord(TypeSpecSimpleSignedIntKeyWord *p) = 0;
  virtual void visitTypeSpecSimpleUnsignedIntKeyWord(TypeSpecSimpleUnsignedIntKeyWord *p) = 0;
  virtual void visitTypeSpecSimpleUnsignedKeyWord(TypeSpecSimpleUnsignedKeyWord *p) = 0;
  virtual void visitTypeSpecSimpleShortKeyWord(TypeSpecSimpleShortKeyWord *p) = 0;
  virtual void visitTypeSpecSimpleSignedShortKeyWord(TypeSpecSimpleSignedShortKeyWord *p) = 0;
  virtual void visitTypeSpecSimpleUnsignedShortKeyWord(TypeSpecSimpleUnsignedShortKeyWord *p) = 0;
  virtual void visitTypeSpecSimpleShortIntKeyWord(TypeSpecSimpleShortIntKeyWord *p) = 0;
  virtual void visitTypeSpecSimpleSignedShortIntKeyWord(TypeSpecSimpleSignedShortIntKeyWord *p) = 0;
  virtual void visitTypeSpecSimpleUnsignedShortIntKeyWord(TypeSpecSimpleUnsignedShortIntKeyWord *p) = 0;
  virtual void visitTypeSpecSimpleLongKeyWord(TypeSpecSimpleLongKeyWord *p) = 0;
  virtual void visitTypeSpecSimpleSignedLongKeyWord(TypeSpecSimpleSignedLongKeyWord *p) = 0;
  virtual void visitTypeSpecSimpleUnsignedLongKeyWord(TypeSpecSimpleUnsignedLongKeyWord *p) = 0;
  virtual void visitTypeSpecSimpleSignedLongIntKeyWord(TypeSpecSimpleSignedLongIntKeyWord *p) = 0;
  virtual void visitTypeSpecSimpleLongIntKeyWord(TypeSpecSimpleLongIntKeyWord *p) = 0;
  virtual void visitTypeSpecSimpleUnsignedLongIntKeyWord(TypeSpecSimpleUnsignedLongIntKeyWord *p) = 0;
  virtual void visitTypeSpecSimpleLongLongKeyWord(TypeSpecSimpleLongLongKeyWord *p) = 0;
  virtual void visitTypeSpecSimpleSignedLongLongKeyWord(TypeSpecSimpleSignedLongLongKeyWord *p) = 0;
  virtual void visitTypeSpecSimpleUnsignedLongLongKeyWord(TypeSpecSimpleUnsignedLongLongKeyWord *p) = 0;
  virtual void visitTypeSpecSimpleLongLongIntKeyWord(TypeSpecSimpleLongLongIntKeyWord *p) = 0;
  virtual void visitTypeSpecSimpleSignedLongLongIntKeyWord(TypeSpecSimpleSignedLongLongIntKeyWord *p) = 0;
  virtual void visitTypeSpecSimpleUnsignedLongLongIntKeyWord(TypeSpecSimpleUnsignedLongLongIntKeyWord *p) = 0;
  virtual void visitTypeSpecSimpleFloatKeyWord(TypeSpecSimpleFloatKeyWord *p) = 0;
  virtual void visitTypeSpecSimpleDoubleKeyWord(TypeSpecSimpleDoubleKeyWord *p) = 0;
  virtual void visitTypeSpecSimpleLongDoubleKeyWord(TypeSpecSimpleLongDoubleKeyWord *p) = 0;
  virtual void visitAnAnnotation(AnAnnotation *p) = 0;
  virtual void visitLoopAnnotation(LoopAnnotation *p) = 0;
  virtual void visitLoopAnnotStackInvariant(LoopAnnotStackInvariant *p) = 0;
  virtual void visitLoopAnnotStackEffects(LoopAnnotStackEffects *p) = 0;
  virtual void visitLoopAnnotStackAllocation(LoopAnnotStackAllocation *p) = 0;
  virtual void visitLoopAnnotStackVariant(LoopAnnotStackVariant *p) = 0;
  virtual void visitNoLoopAnnot(NoLoopAnnot *p) = 0;
  virtual void visitSomeLoopAnnot(SomeLoopAnnot *p) = 0;
  virtual void visitSimpleLoopInvariant(SimpleLoopInvariant *p) = 0;
  virtual void visitCheckLoopInvariant(CheckLoopInvariant *p) = 0;
  virtual void visitAdmitLoopInvariant(AdmitLoopInvariant *p) = 0;
  virtual void visitSimpleLoopAllocation(SimpleLoopAllocation *p) = 0;
  virtual void visitAllocatesZones(AllocatesZones *p) = 0;
  virtual void visitFreesZones(FreesZones *p) = 0;
  virtual void visitSimpleLoopVariant(SimpleLoopVariant *p) = 0;
  virtual void visitLoopAssigns(LoopAssigns *p) = 0;
  virtual void visitForVariant(ForVariant *p) = 0;
  virtual void visitLexprVariant(LexprVariant *p) = 0;
  virtual void visitListLexpr(ListLexpr *p) = 0;
  virtual void visitListLexprRelInner(ListLexprRelInner *p) = 0;
  virtual void visitListBindersReentrance(ListBindersReentrance *p) = 0;
  virtual void visitListStars(ListStars *p) = 0;
  virtual void visitListLabelName(ListLabelName *p) = 0;
  virtual void visitListFullIdentifier(ListFullIdentifier *p) = 0;


  virtual void visitInteger(Integer x) = 0;
  virtual void visitChar(Char x) = 0;
  virtual void visitDouble(Double x) = 0;
  virtual void visitString(String x) = 0;
  virtual void visitIdent(Ident x) = 0;

};


class Visitable
{
 public:
  virtual ~Visitable() {}
  virtual void accept(Visitor *v) = 0;
};


/********************   Abstract Syntax Classes    ********************/

class Program : public Visitable
{
public:
  virtual Program *clone() const = 0;
  int line_number, char_number;
};

class Annot : public Visitable
{
public:
  virtual Annot *clone() const = 0;
  int line_number, char_number;
};

class Code_Annot : public Visitable
{
public:
  virtual Code_Annot *clone() const = 0;
  int line_number, char_number;
};

class Contract : public Visitable
{
public:
  virtual Contract *clone() const = 0;
  int line_number, char_number;
};

class Requires : public Visitable
{
public:
  virtual Requires *clone() const = 0;
  int line_number, char_number;
};

class NERequires : public Visitable
{
public:
  virtual NERequires *clone() const = 0;
  int line_number, char_number;
};

class Terminates : public Visitable
{
public:
  virtual Terminates *clone() const = 0;
  int line_number, char_number;
};

class Decreases : public Visitable
{
public:
  virtual Decreases *clone() const = 0;
  int line_number, char_number;
};

class SimpleClauses : public Visitable
{
public:
  virtual SimpleClauses *clone() const = 0;
  int line_number, char_number;
};

class NESimpleClauses : public Visitable
{
public:
  virtual NESimpleClauses *clone() const = 0;
  int line_number, char_number;
};

class Assigns : public Visitable
{
public:
  virtual Assigns *clone() const = 0;
  int line_number, char_number;
};

class Zones : public Visitable
{
public:
  virtual Zones *clone() const = 0;
  int line_number, char_number;
};

class Behaviors : public Visitable
{
public:
  virtual Behaviors *clone() const = 0;
  int line_number, char_number;
};

class CompleteOrDisjoint : public Visitable
{
public:
  virtual CompleteOrDisjoint *clone() const = 0;
  int line_number, char_number;
};

class Lexpr : public Visitable
{
public:
  virtual Lexpr *clone() const = 0;
  int line_number, char_number;
};

class LexprRelInner : public Visitable
{
public:
  virtual LexprRelInner *clone() const = 0;
  int line_number, char_number;
};

class Relation : public Visitable
{
public:
  virtual Relation *clone() const = 0;
  int line_number, char_number;
};

class LexprBinder : public Visitable
{
public:
  virtual LexprBinder *clone() const = 0;
  int line_number, char_number;
};

class Binders : public Visitable
{
public:
  virtual Binders *clone() const = 0;
  int line_number, char_number;
};

class TypeSpecOFTYPENAME : public Visitable
{
public:
  virtual TypeSpecOFTYPENAME *clone() const = 0;
  int line_number, char_number;
};

class BindersReentrance : public Visitable
{
public:
  virtual BindersReentrance *clone() const = 0;
  int line_number, char_number;
};

class VarSpec : public Visitable
{
public:
  virtual VarSpec *clone() const = 0;
  int line_number, char_number;
};

class Stars : public Visitable
{
public:
  virtual Stars *clone() const = 0;
  int line_number, char_number;
};

class ArraySize : public Visitable
{
public:
  virtual ArraySize *clone() const = 0;
  int line_number, char_number;
};

class OptLabel : public Visitable
{
public:
  virtual OptLabel *clone() const = 0;
  int line_number, char_number;
};

class OptLabelList : public Visitable
{
public:
  virtual OptLabelList *clone() const = 0;
  int line_number, char_number;
};

class LabelName : public Visitable
{
public:
  virtual LabelName *clone() const = 0;
  int line_number, char_number;
};

class Range : public Visitable
{
public:
  virtual Range *clone() const = 0;
  int line_number, char_number;
};

class LexprOption : public Visitable
{
public:
  virtual LexprOption *clone() const = 0;
  int line_number, char_number;
};

class AnyIdentifier : public Visitable
{
public:
  virtual AnyIdentifier *clone() const = 0;
  int line_number, char_number;
};

class PostCond : public Visitable
{
public:
  virtual PostCond *clone() const = 0;
  int line_number, char_number;
};

class FullIdentifier : public Visitable
{
public:
  virtual FullIdentifier *clone() const = 0;
  int line_number, char_number;
};

class Identifier : public Visitable
{
public:
  virtual Identifier *clone() const = 0;
  int line_number, char_number;
};

class TypeSpecSimple : public Visitable
{
public:
  virtual TypeSpecSimple *clone() const = 0;
  int line_number, char_number;
};

class LogicPTreeAnnot : public Visitable
{
public:
  virtual LogicPTreeAnnot *clone() const = 0;
  int line_number, char_number;
};

class Annotation : public Visitable
{
public:
  virtual Annotation *clone() const = 0;
  int line_number, char_number;
};

class LoopAnnotStack : public Visitable
{
public:
  virtual LoopAnnotStack *clone() const = 0;
  int line_number, char_number;
};

class LoopAnnotOpt : public Visitable
{
public:
  virtual LoopAnnotOpt *clone() const = 0;
  int line_number, char_number;
};

class LoopInvariant : public Visitable
{
public:
  virtual LoopInvariant *clone() const = 0;
  int line_number, char_number;
};

class LoopAllocation : public Visitable
{
public:
  virtual LoopAllocation *clone() const = 0;
  int line_number, char_number;
};

class Allocation : public Visitable
{
public:
  virtual Allocation *clone() const = 0;
  int line_number, char_number;
};

class LoopVariant : public Visitable
{
public:
  virtual LoopVariant *clone() const = 0;
  int line_number, char_number;
};

class LoopEffects : public Visitable
{
public:
  virtual LoopEffects *clone() const = 0;
  int line_number, char_number;
};

class Variant : public Visitable
{
public:
  virtual Variant *clone() const = 0;
  int line_number, char_number;
};



class AnnotProgram : public Program
{
public:
  Annot *annot_;

  AnnotProgram(const AnnotProgram &);
  AnnotProgram &operator=(const AnnotProgram &);
  AnnotProgram(Annot *p1);
  ~AnnotProgram();
  virtual void accept(Visitor *v);
  virtual AnnotProgram *clone() const;
  void swap(AnnotProgram &);
};

class AnnotationProgram : public Program
{
public:
  LogicPTreeAnnot *logicptreeannot_;

  AnnotationProgram(const AnnotationProgram &);
  AnnotationProgram &operator=(const AnnotationProgram &);
  AnnotationProgram(LogicPTreeAnnot *p1);
  ~AnnotationProgram();
  virtual void accept(Visitor *v);
  virtual AnnotationProgram *clone() const;
  void swap(AnnotationProgram &);
};

class CodeAnnot : public Annot
{
public:
  Code_Annot *code_annot_;

  CodeAnnot(const CodeAnnot &);
  CodeAnnot &operator=(const CodeAnnot &);
  CodeAnnot(Code_Annot *p1);
  ~CodeAnnot();
  virtual void accept(Visitor *v);
  virtual CodeAnnot *clone() const;
  void swap(CodeAnnot &);
};

class CodeAnnotContract : public Code_Annot
{
public:
  Contract *contract_;

  CodeAnnotContract(const CodeAnnotContract &);
  CodeAnnotContract &operator=(const CodeAnnotContract &);
  CodeAnnotContract(Contract *p1);
  ~CodeAnnotContract();
  virtual void accept(Visitor *v);
  virtual CodeAnnotContract *clone() const;
  void swap(CodeAnnotContract &);
};

class SimpleContract : public Contract
{
public:
  Requires *requires_;
  Terminates *terminates_;
  Decreases *decreases_;
  SimpleClauses *simpleclauses_;
  Behaviors *behaviors_;
  CompleteOrDisjoint *completeordisjoint_;

  SimpleContract(const SimpleContract &);
  SimpleContract &operator=(const SimpleContract &);
  SimpleContract(Requires *p1, Terminates *p2, Decreases *p3, SimpleClauses *p4, Behaviors *p5, CompleteOrDisjoint *p6);
  ~SimpleContract();
  virtual void accept(Visitor *v);
  virtual SimpleContract *clone() const;
  void swap(SimpleContract &);
};

class ClausesRequiresContract : public Contract
{
public:
  Requires *requires_;
  Terminates *terminates_;
  Decreases *decreases_;
  NESimpleClauses *nesimpleclauses_;

  ClausesRequiresContract(const ClausesRequiresContract &);
  ClausesRequiresContract &operator=(const ClausesRequiresContract &);
  ClausesRequiresContract(Requires *p1, Terminates *p2, Decreases *p3, NESimpleClauses *p4);
  ~ClausesRequiresContract();
  virtual void accept(Visitor *v);
  virtual ClausesRequiresContract *clone() const;
  void swap(ClausesRequiresContract &);
};

class ClausesTerminatesContract : public Contract
{
public:
  Requires *requires_;
  Terminates *terminates_;
  Decreases *decreases_;
  NESimpleClauses *nesimpleclauses_;

  ClausesTerminatesContract(const ClausesTerminatesContract &);
  ClausesTerminatesContract &operator=(const ClausesTerminatesContract &);
  ClausesTerminatesContract(Requires *p1, Terminates *p2, Decreases *p3, NESimpleClauses *p4);
  ~ClausesTerminatesContract();
  virtual void accept(Visitor *v);
  virtual ClausesTerminatesContract *clone() const;
  void swap(ClausesTerminatesContract &);
};

class ClausesDecreasesContract : public Contract
{
public:
  Requires *requires_;
  Terminates *terminates_;
  Decreases *decreases_;
  NESimpleClauses *nesimpleclauses_;

  ClausesDecreasesContract(const ClausesDecreasesContract &);
  ClausesDecreasesContract &operator=(const ClausesDecreasesContract &);
  ClausesDecreasesContract(Requires *p1, Terminates *p2, Decreases *p3, NESimpleClauses *p4);
  ~ClausesDecreasesContract();
  virtual void accept(Visitor *v);
  virtual ClausesDecreasesContract *clone() const;
  void swap(ClausesDecreasesContract &);
};

class NoRequires : public Requires
{
public:

  NoRequires(const NoRequires &);
  NoRequires &operator=(const NoRequires &);
  NoRequires();
  ~NoRequires();
  virtual void accept(Visitor *v);
  virtual NoRequires *clone() const;
  void swap(NoRequires &);
};

class SomeRequires : public Requires
{
public:
  NERequires *nerequires_;

  SomeRequires(const SomeRequires &);
  SomeRequires &operator=(const SomeRequires &);
  SomeRequires(NERequires *p1);
  ~SomeRequires();
  virtual void accept(Visitor *v);
  virtual SomeRequires *clone() const;
  void swap(SomeRequires &);
};

class SimpleRequires : public NERequires
{
public:
  Lexpr *lexpr_;
  Requires *requires_;

  SimpleRequires(const SimpleRequires &);
  SimpleRequires &operator=(const SimpleRequires &);
  SimpleRequires(Lexpr *p1, Requires *p2);
  ~SimpleRequires();
  virtual void accept(Visitor *v);
  virtual SimpleRequires *clone() const;
  void swap(SimpleRequires &);
};

class CheckRequires : public NERequires
{
public:
  Lexpr *lexpr_;
  Requires *requires_;

  CheckRequires(const CheckRequires &);
  CheckRequires &operator=(const CheckRequires &);
  CheckRequires(Lexpr *p1, Requires *p2);
  ~CheckRequires();
  virtual void accept(Visitor *v);
  virtual CheckRequires *clone() const;
  void swap(CheckRequires &);
};

class AdimtRequires : public NERequires
{
public:
  Lexpr *lexpr_;
  Requires *requires_;

  AdimtRequires(const AdimtRequires &);
  AdimtRequires &operator=(const AdimtRequires &);
  AdimtRequires(Lexpr *p1, Requires *p2);
  ~AdimtRequires();
  virtual void accept(Visitor *v);
  virtual AdimtRequires *clone() const;
  void swap(AdimtRequires &);
};

class NoTerminate : public Terminates
{
public:

  NoTerminate(const NoTerminate &);
  NoTerminate &operator=(const NoTerminate &);
  NoTerminate();
  ~NoTerminate();
  virtual void accept(Visitor *v);
  virtual NoTerminate *clone() const;
  void swap(NoTerminate &);
};

class NoDecreases : public Decreases
{
public:

  NoDecreases(const NoDecreases &);
  NoDecreases &operator=(const NoDecreases &);
  NoDecreases();
  ~NoDecreases();
  virtual void accept(Visitor *v);
  virtual NoDecreases *clone() const;
  void swap(NoDecreases &);
};

class NoSimpleClauses : public SimpleClauses
{
public:

  NoSimpleClauses(const NoSimpleClauses &);
  NoSimpleClauses &operator=(const NoSimpleClauses &);
  NoSimpleClauses();
  ~NoSimpleClauses();
  virtual void accept(Visitor *v);
  virtual NoSimpleClauses *clone() const;
  void swap(NoSimpleClauses &);
};

class SomeSimpleClauses : public SimpleClauses
{
public:
  NESimpleClauses *nesimpleclauses_;

  SomeSimpleClauses(const SomeSimpleClauses &);
  SomeSimpleClauses &operator=(const SomeSimpleClauses &);
  SomeSimpleClauses(NESimpleClauses *p1);
  ~SomeSimpleClauses();
  virtual void accept(Visitor *v);
  virtual SomeSimpleClauses *clone() const;
  void swap(SomeSimpleClauses &);
};

class PostCondSimpleClauses : public NESimpleClauses
{
public:
  PostCond *postcond_;
  Lexpr *lexpr_;
  SimpleClauses *simpleclauses_;

  PostCondSimpleClauses(const PostCondSimpleClauses &);
  PostCondSimpleClauses &operator=(const PostCondSimpleClauses &);
  PostCondSimpleClauses(PostCond *p1, Lexpr *p2, SimpleClauses *p3);
  ~PostCondSimpleClauses();
  virtual void accept(Visitor *v);
  virtual PostCondSimpleClauses *clone() const;
  void swap(PostCondSimpleClauses &);
};

class AssignsSimpleClauses : public NESimpleClauses
{
public:
  Assigns *assigns_;
  SimpleClauses *simpleclauses_;

  AssignsSimpleClauses(const AssignsSimpleClauses &);
  AssignsSimpleClauses &operator=(const AssignsSimpleClauses &);
  AssignsSimpleClauses(Assigns *p1, SimpleClauses *p2);
  ~AssignsSimpleClauses();
  virtual void accept(Visitor *v);
  virtual AssignsSimpleClauses *clone() const;
  void swap(AssignsSimpleClauses &);
};

class AssignZone : public Assigns
{
public:
  Zones *zones_;

  AssignZone(const AssignZone &);
  AssignZone &operator=(const AssignZone &);
  AssignZone(Zones *p1);
  ~AssignZone();
  virtual void accept(Visitor *v);
  virtual AssignZone *clone() const;
  void swap(AssignZone &);
};

class AssignZoneFromZone : public Assigns
{
public:
  ListLexpr *listlexpr_;
  Zones *zones_;

  AssignZoneFromZone(const AssignZoneFromZone &);
  AssignZoneFromZone &operator=(const AssignZoneFromZone &);
  AssignZoneFromZone(ListLexpr *p1, Zones *p2);
  ~AssignZoneFromZone();
  virtual void accept(Visitor *v);
  virtual AssignZoneFromZone *clone() const;
  void swap(AssignZoneFromZone &);
};

class SomeZone : public Zones
{
public:
  ListLexpr *listlexpr_;

  SomeZone(const SomeZone &);
  SomeZone &operator=(const SomeZone &);
  SomeZone(ListLexpr *p1);
  ~SomeZone();
  virtual void accept(Visitor *v);
  virtual SomeZone *clone() const;
  void swap(SomeZone &);
};

class NoZone : public Zones
{
public:

  NoZone(const NoZone &);
  NoZone &operator=(const NoZone &);
  NoZone();
  ~NoZone();
  virtual void accept(Visitor *v);
  virtual NoZone *clone() const;
  void swap(NoZone &);
};

class NoBehaviors : public Behaviors
{
public:

  NoBehaviors(const NoBehaviors &);
  NoBehaviors &operator=(const NoBehaviors &);
  NoBehaviors();
  ~NoBehaviors();
  virtual void accept(Visitor *v);
  virtual NoBehaviors *clone() const;
  void swap(NoBehaviors &);
};

class NoComplDisj : public CompleteOrDisjoint
{
public:

  NoComplDisj(const NoComplDisj &);
  NoComplDisj &operator=(const NoComplDisj &);
  NoComplDisj();
  ~NoComplDisj();
  virtual void accept(Visitor *v);
  virtual NoComplDisj *clone() const;
  void swap(NoComplDisj &);
};

class ImplLexpr : public Lexpr
{
public:
  Lexpr *lexpr_1;
  Lexpr *lexpr_2;

  ImplLexpr(const ImplLexpr &);
  ImplLexpr &operator=(const ImplLexpr &);
  ImplLexpr(Lexpr *p1, Lexpr *p2);
  ~ImplLexpr();
  virtual void accept(Visitor *v);
  virtual ImplLexpr *clone() const;
  void swap(ImplLexpr &);
};

class IffLexpr : public Lexpr
{
public:
  Lexpr *lexpr_1;
  Lexpr *lexpr_2;

  IffLexpr(const IffLexpr &);
  IffLexpr &operator=(const IffLexpr &);
  IffLexpr(Lexpr *p1, Lexpr *p2);
  ~IffLexpr();
  virtual void accept(Visitor *v);
  virtual IffLexpr *clone() const;
  void swap(IffLexpr &);
};

class OrLexpr : public Lexpr
{
public:
  Lexpr *lexpr_1;
  Lexpr *lexpr_2;

  OrLexpr(const OrLexpr &);
  OrLexpr &operator=(const OrLexpr &);
  OrLexpr(Lexpr *p1, Lexpr *p2);
  ~OrLexpr();
  virtual void accept(Visitor *v);
  virtual OrLexpr *clone() const;
  void swap(OrLexpr &);
};

class AndLexpr : public Lexpr
{
public:
  Lexpr *lexpr_1;
  Lexpr *lexpr_2;

  AndLexpr(const AndLexpr &);
  AndLexpr &operator=(const AndLexpr &);
  AndLexpr(Lexpr *p1, Lexpr *p2);
  ~AndLexpr();
  virtual void accept(Visitor *v);
  virtual AndLexpr *clone() const;
  void swap(AndLexpr &);
};

class HatHatLexpr : public Lexpr
{
public:
  Lexpr *lexpr_1;
  Lexpr *lexpr_2;

  HatHatLexpr(const HatHatLexpr &);
  HatHatLexpr &operator=(const HatHatLexpr &);
  HatHatLexpr(Lexpr *p1, Lexpr *p2);
  ~HatHatLexpr();
  virtual void accept(Visitor *v);
  virtual HatHatLexpr *clone() const;
  void swap(HatHatLexpr &);
};

class AmpLexpr : public Lexpr
{
public:
  Lexpr *lexpr_1;
  Lexpr *lexpr_2;

  AmpLexpr(const AmpLexpr &);
  AmpLexpr &operator=(const AmpLexpr &);
  AmpLexpr(Lexpr *p1, Lexpr *p2);
  ~AmpLexpr();
  virtual void accept(Visitor *v);
  virtual AmpLexpr *clone() const;
  void swap(AmpLexpr &);
};

class PipeLexpr : public Lexpr
{
public:
  Lexpr *lexpr_1;
  Lexpr *lexpr_2;

  PipeLexpr(const PipeLexpr &);
  PipeLexpr &operator=(const PipeLexpr &);
  PipeLexpr(Lexpr *p1, Lexpr *p2);
  ~PipeLexpr();
  virtual void accept(Visitor *v);
  virtual PipeLexpr *clone() const;
  void swap(PipeLexpr &);
};

class HatLexpr : public Lexpr
{
public:
  Lexpr *lexpr_1;
  Lexpr *lexpr_2;

  HatLexpr(const HatLexpr &);
  HatLexpr &operator=(const HatLexpr &);
  HatLexpr(Lexpr *p1, Lexpr *p2);
  ~HatLexpr();
  virtual void accept(Visitor *v);
  virtual HatLexpr *clone() const;
  void swap(HatLexpr &);
};

class BimpliesLexpr : public Lexpr
{
public:
  Lexpr *lexpr_1;
  Lexpr *lexpr_2;

  BimpliesLexpr(const BimpliesLexpr &);
  BimpliesLexpr &operator=(const BimpliesLexpr &);
  BimpliesLexpr(Lexpr *p1, Lexpr *p2);
  ~BimpliesLexpr();
  virtual void accept(Visitor *v);
  virtual BimpliesLexpr *clone() const;
  void swap(BimpliesLexpr &);
};

class BiffLexpr : public Lexpr
{
public:
  Lexpr *lexpr_1;
  Lexpr *lexpr_2;

  BiffLexpr(const BiffLexpr &);
  BiffLexpr &operator=(const BiffLexpr &);
  BiffLexpr(Lexpr *p1, Lexpr *p2);
  ~BiffLexpr();
  virtual void accept(Visitor *v);
  virtual BiffLexpr *clone() const;
  void swap(BiffLexpr &);
};

class InLexpr : public Lexpr
{
public:
  Lexpr *lexpr_1;
  Lexpr *lexpr_2;

  InLexpr(const InLexpr &);
  InLexpr &operator=(const InLexpr &);
  InLexpr(Lexpr *p1, Lexpr *p2);
  ~InLexpr();
  virtual void accept(Visitor *v);
  virtual InLexpr *clone() const;
  void swap(InLexpr &);
};

class TernaryLexpr : public Lexpr
{
public:
  Lexpr *lexpr_1;
  Lexpr *lexpr_2;
  Lexpr *lexpr_3;

  TernaryLexpr(const TernaryLexpr &);
  TernaryLexpr &operator=(const TernaryLexpr &);
  TernaryLexpr(Lexpr *p1, Lexpr *p2, Lexpr *p3);
  ~TernaryLexpr();
  virtual void accept(Visitor *v);
  virtual TernaryLexpr *clone() const;
  void swap(TernaryLexpr &);
};

class RelationLexpr : public Lexpr
{
public:
  Lexpr *lexpr_1;
  ListLexprRelInner *listlexprrelinner_;
  Relation *relation_;
  Lexpr *lexpr_2;

  RelationLexpr(const RelationLexpr &);
  RelationLexpr &operator=(const RelationLexpr &);
  RelationLexpr(Lexpr *p1, ListLexprRelInner *p2, Relation *p3, Lexpr *p4);
  ~RelationLexpr();
  virtual void accept(Visitor *v);
  virtual RelationLexpr *clone() const;
  void swap(RelationLexpr &);
};

class BinderLexpr : public Lexpr
{
public:
  LexprBinder *lexprbinder_;

  BinderLexpr(const BinderLexpr &);
  BinderLexpr &operator=(const BinderLexpr &);
  BinderLexpr(LexprBinder *p1);
  ~BinderLexpr();
  virtual void accept(Visitor *v);
  virtual BinderLexpr *clone() const;
  void swap(BinderLexpr &);
};

class NotBinderLexpr : public Lexpr
{
public:
  LexprBinder *lexprbinder_;

  NotBinderLexpr(const NotBinderLexpr &);
  NotBinderLexpr &operator=(const NotBinderLexpr &);
  NotBinderLexpr(LexprBinder *p1);
  ~NotBinderLexpr();
  virtual void accept(Visitor *v);
  virtual NotBinderLexpr *clone() const;
  void swap(NotBinderLexpr &);
};

class TrueLexpr : public Lexpr
{
public:

  TrueLexpr(const TrueLexpr &);
  TrueLexpr &operator=(const TrueLexpr &);
  TrueLexpr();
  ~TrueLexpr();
  virtual void accept(Visitor *v);
  virtual TrueLexpr *clone() const;
  void swap(TrueLexpr &);
};

class FalseLexpr : public Lexpr
{
public:

  FalseLexpr(const FalseLexpr &);
  FalseLexpr &operator=(const FalseLexpr &);
  FalseLexpr();
  ~FalseLexpr();
  virtual void accept(Visitor *v);
  virtual FalseLexpr *clone() const;
  void swap(FalseLexpr &);
};

class PointerLexpr : public Lexpr
{
public:
  OptLabel *optlabel_;
  Lexpr *lexpr_;

  PointerLexpr(const PointerLexpr &);
  PointerLexpr &operator=(const PointerLexpr &);
  PointerLexpr(OptLabel *p1, Lexpr *p2);
  ~PointerLexpr();
  virtual void accept(Visitor *v);
  virtual PointerLexpr *clone() const;
  void swap(PointerLexpr &);
};

class ValidLexpr : public Lexpr
{
public:
  OptLabel *optlabel_;
  Lexpr *lexpr_;

  ValidLexpr(const ValidLexpr &);
  ValidLexpr &operator=(const ValidLexpr &);
  ValidLexpr(OptLabel *p1, Lexpr *p2);
  ~ValidLexpr();
  virtual void accept(Visitor *v);
  virtual ValidLexpr *clone() const;
  void swap(ValidLexpr &);
};

class ValidReadLexpr : public Lexpr
{
public:
  OptLabel *optlabel_;
  Lexpr *lexpr_;

  ValidReadLexpr(const ValidReadLexpr &);
  ValidReadLexpr &operator=(const ValidReadLexpr &);
  ValidReadLexpr(OptLabel *p1, Lexpr *p2);
  ~ValidReadLexpr();
  virtual void accept(Visitor *v);
  virtual ValidReadLexpr *clone() const;
  void swap(ValidReadLexpr &);
};

class ValidFuncLexpr : public Lexpr
{
public:
  Lexpr *lexpr_;

  ValidFuncLexpr(const ValidFuncLexpr &);
  ValidFuncLexpr &operator=(const ValidFuncLexpr &);
  ValidFuncLexpr(Lexpr *p1);
  ~ValidFuncLexpr();
  virtual void accept(Visitor *v);
  virtual ValidFuncLexpr *clone() const;
  void swap(ValidFuncLexpr &);
};

class ValidIndxLexpr : public Lexpr
{
public:
  OptLabel *optlabel_;
  Lexpr *lexpr_1;
  Lexpr *lexpr_2;

  ValidIndxLexpr(const ValidIndxLexpr &);
  ValidIndxLexpr &operator=(const ValidIndxLexpr &);
  ValidIndxLexpr(OptLabel *p1, Lexpr *p2, Lexpr *p3);
  ~ValidIndxLexpr();
  virtual void accept(Visitor *v);
  virtual ValidIndxLexpr *clone() const;
  void swap(ValidIndxLexpr &);
};

class ValidRangeLexpr : public Lexpr
{
public:
  OptLabel *optlabel_;
  Lexpr *lexpr_1;
  Lexpr *lexpr_2;
  Lexpr *lexpr_3;

  ValidRangeLexpr(const ValidRangeLexpr &);
  ValidRangeLexpr &operator=(const ValidRangeLexpr &);
  ValidRangeLexpr(OptLabel *p1, Lexpr *p2, Lexpr *p3, Lexpr *p4);
  ~ValidRangeLexpr();
  virtual void accept(Visitor *v);
  virtual ValidRangeLexpr *clone() const;
  void swap(ValidRangeLexpr &);
};

class InitializedLexpr : public Lexpr
{
public:
  OptLabel *optlabel_;
  Lexpr *lexpr_;

  InitializedLexpr(const InitializedLexpr &);
  InitializedLexpr &operator=(const InitializedLexpr &);
  InitializedLexpr(OptLabel *p1, Lexpr *p2);
  ~InitializedLexpr();
  virtual void accept(Visitor *v);
  virtual InitializedLexpr *clone() const;
  void swap(InitializedLexpr &);
};

class DanglingLexpr : public Lexpr
{
public:
  OptLabel *optlabel_;
  Lexpr *lexpr_;

  DanglingLexpr(const DanglingLexpr &);
  DanglingLexpr &operator=(const DanglingLexpr &);
  DanglingLexpr(OptLabel *p1, Lexpr *p2);
  ~DanglingLexpr();
  virtual void accept(Visitor *v);
  virtual DanglingLexpr *clone() const;
  void swap(DanglingLexpr &);
};

class FreshLexpr : public Lexpr
{
public:
  OptLabel *optlabel_;
  Lexpr *lexpr_1;
  Lexpr *lexpr_2;

  FreshLexpr(const FreshLexpr &);
  FreshLexpr &operator=(const FreshLexpr &);
  FreshLexpr(OptLabel *p1, Lexpr *p2, Lexpr *p3);
  ~FreshLexpr();
  virtual void accept(Visitor *v);
  virtual FreshLexpr *clone() const;
  void swap(FreshLexpr &);
};

class BaseAddrLexpr : public Lexpr
{
public:
  OptLabel *optlabel_;
  Lexpr *lexpr_;

  BaseAddrLexpr(const BaseAddrLexpr &);
  BaseAddrLexpr &operator=(const BaseAddrLexpr &);
  BaseAddrLexpr(OptLabel *p1, Lexpr *p2);
  ~BaseAddrLexpr();
  virtual void accept(Visitor *v);
  virtual BaseAddrLexpr *clone() const;
  void swap(BaseAddrLexpr &);
};

class BlockLengthLexpr : public Lexpr
{
public:
  OptLabel *optlabel_;
  Lexpr *lexpr_;

  BlockLengthLexpr(const BlockLengthLexpr &);
  BlockLengthLexpr &operator=(const BlockLengthLexpr &);
  BlockLengthLexpr(OptLabel *p1, Lexpr *p2);
  ~BlockLengthLexpr();
  virtual void accept(Visitor *v);
  virtual BlockLengthLexpr *clone() const;
  void swap(BlockLengthLexpr &);
};

class OffsetLexpr : public Lexpr
{
public:
  OptLabel *optlabel_;
  Lexpr *lexpr_;

  OffsetLexpr(const OffsetLexpr &);
  OffsetLexpr &operator=(const OffsetLexpr &);
  OffsetLexpr(OptLabel *p1, Lexpr *p2);
  ~OffsetLexpr();
  virtual void accept(Visitor *v);
  virtual OffsetLexpr *clone() const;
  void swap(OffsetLexpr &);
};

class AllocableLexpr : public Lexpr
{
public:
  OptLabel *optlabel_;
  Lexpr *lexpr_;

  AllocableLexpr(const AllocableLexpr &);
  AllocableLexpr &operator=(const AllocableLexpr &);
  AllocableLexpr(OptLabel *p1, Lexpr *p2);
  ~AllocableLexpr();
  virtual void accept(Visitor *v);
  virtual AllocableLexpr *clone() const;
  void swap(AllocableLexpr &);
};

class FreeableLexpr : public Lexpr
{
public:
  OptLabel *optlabel_;
  Lexpr *lexpr_;

  FreeableLexpr(const FreeableLexpr &);
  FreeableLexpr &operator=(const FreeableLexpr &);
  FreeableLexpr(OptLabel *p1, Lexpr *p2);
  ~FreeableLexpr();
  virtual void accept(Visitor *v);
  virtual FreeableLexpr *clone() const;
  void swap(FreeableLexpr &);
};

class AllocationLexpr : public Lexpr
{
public:
  OptLabel *optlabel_;
  Lexpr *lexpr_;

  AllocationLexpr(const AllocationLexpr &);
  AllocationLexpr &operator=(const AllocationLexpr &);
  AllocationLexpr(OptLabel *p1, Lexpr *p2);
  ~AllocationLexpr();
  virtual void accept(Visitor *v);
  virtual AllocationLexpr *clone() const;
  void swap(AllocationLexpr &);
};

class AutomaticLexpr : public Lexpr
{
public:

  AutomaticLexpr(const AutomaticLexpr &);
  AutomaticLexpr &operator=(const AutomaticLexpr &);
  AutomaticLexpr();
  ~AutomaticLexpr();
  virtual void accept(Visitor *v);
  virtual AutomaticLexpr *clone() const;
  void swap(AutomaticLexpr &);
};

class DynamicLexpr : public Lexpr
{
public:

  DynamicLexpr(const DynamicLexpr &);
  DynamicLexpr &operator=(const DynamicLexpr &);
  DynamicLexpr();
  ~DynamicLexpr();
  virtual void accept(Visitor *v);
  virtual DynamicLexpr *clone() const;
  void swap(DynamicLexpr &);
};

class RegisterLexpr : public Lexpr
{
public:

  RegisterLexpr(const RegisterLexpr &);
  RegisterLexpr &operator=(const RegisterLexpr &);
  RegisterLexpr();
  ~RegisterLexpr();
  virtual void accept(Visitor *v);
  virtual RegisterLexpr *clone() const;
  void swap(RegisterLexpr &);
};

class StaticLexpr : public Lexpr
{
public:

  StaticLexpr(const StaticLexpr &);
  StaticLexpr &operator=(const StaticLexpr &);
  StaticLexpr();
  ~StaticLexpr();
  virtual void accept(Visitor *v);
  virtual StaticLexpr *clone() const;
  void swap(StaticLexpr &);
};

class UnallocatedLexpr : public Lexpr
{
public:

  UnallocatedLexpr(const UnallocatedLexpr &);
  UnallocatedLexpr &operator=(const UnallocatedLexpr &);
  UnallocatedLexpr();
  ~UnallocatedLexpr();
  virtual void accept(Visitor *v);
  virtual UnallocatedLexpr *clone() const;
  void swap(UnallocatedLexpr &);
};

class NullLexpr : public Lexpr
{
public:

  NullLexpr(const NullLexpr &);
  NullLexpr &operator=(const NullLexpr &);
  NullLexpr();
  ~NullLexpr();
  virtual void accept(Visitor *v);
  virtual NullLexpr *clone() const;
  void swap(NullLexpr &);
};

class LexprIntConst : public Lexpr
{
public:
  Integer integer_;

  LexprIntConst(const LexprIntConst &);
  LexprIntConst &operator=(const LexprIntConst &);
  LexprIntConst(Integer p1);
  ~LexprIntConst();
  virtual void accept(Visitor *v);
  virtual LexprIntConst *clone() const;
  void swap(LexprIntConst &);
};

class LexprFloatConst : public Lexpr
{
public:
  Double double_;

  LexprFloatConst(const LexprFloatConst &);
  LexprFloatConst &operator=(const LexprFloatConst &);
  LexprFloatConst(Double p1);
  ~LexprFloatConst();
  virtual void accept(Visitor *v);
  virtual LexprFloatConst *clone() const;
  void swap(LexprFloatConst &);
};

class LexprStringConst : public Lexpr
{
public:
  String string_;

  LexprStringConst(const LexprStringConst &);
  LexprStringConst &operator=(const LexprStringConst &);
  LexprStringConst(String p1);
  ~LexprStringConst();
  virtual void accept(Visitor *v);
  virtual LexprStringConst *clone() const;
  void swap(LexprStringConst &);
};

class AddLexpr : public Lexpr
{
public:
  Lexpr *lexpr_1;
  Lexpr *lexpr_2;

  AddLexpr(const AddLexpr &);
  AddLexpr &operator=(const AddLexpr &);
  AddLexpr(Lexpr *p1, Lexpr *p2);
  ~AddLexpr();
  virtual void accept(Visitor *v);
  virtual AddLexpr *clone() const;
  void swap(AddLexpr &);
};

class SubtrLexpr : public Lexpr
{
public:
  Lexpr *lexpr_1;
  Lexpr *lexpr_2;

  SubtrLexpr(const SubtrLexpr &);
  SubtrLexpr &operator=(const SubtrLexpr &);
  SubtrLexpr(Lexpr *p1, Lexpr *p2);
  ~SubtrLexpr();
  virtual void accept(Visitor *v);
  virtual SubtrLexpr *clone() const;
  void swap(SubtrLexpr &);
};

class MultLexpr : public Lexpr
{
public:
  Lexpr *lexpr_1;
  Lexpr *lexpr_2;

  MultLexpr(const MultLexpr &);
  MultLexpr &operator=(const MultLexpr &);
  MultLexpr(Lexpr *p1, Lexpr *p2);
  ~MultLexpr();
  virtual void accept(Visitor *v);
  virtual MultLexpr *clone() const;
  void swap(MultLexpr &);
};

class DivLexpr : public Lexpr
{
public:
  Lexpr *lexpr_1;
  Lexpr *lexpr_2;

  DivLexpr(const DivLexpr &);
  DivLexpr &operator=(const DivLexpr &);
  DivLexpr(Lexpr *p1, Lexpr *p2);
  ~DivLexpr();
  virtual void accept(Visitor *v);
  virtual DivLexpr *clone() const;
  void swap(DivLexpr &);
};

class ModLexpr : public Lexpr
{
public:
  Lexpr *lexpr_1;
  Lexpr *lexpr_2;

  ModLexpr(const ModLexpr &);
  ModLexpr &operator=(const ModLexpr &);
  ModLexpr(Lexpr *p1, Lexpr *p2);
  ~ModLexpr();
  virtual void accept(Visitor *v);
  virtual ModLexpr *clone() const;
  void swap(ModLexpr &);
};

class SquaresRangeLexpr : public Lexpr
{
public:
  Lexpr *lexpr_;
  Range *range_;

  SquaresRangeLexpr(const SquaresRangeLexpr &);
  SquaresRangeLexpr &operator=(const SquaresRangeLexpr &);
  SquaresRangeLexpr(Lexpr *p1, Range *p2);
  ~SquaresRangeLexpr();
  virtual void accept(Visitor *v);
  virtual SquaresRangeLexpr *clone() const;
  void swap(SquaresRangeLexpr &);
};

class SquaresLexpr : public Lexpr
{
public:
  Lexpr *lexpr_1;
  Lexpr *lexpr_2;

  SquaresLexpr(const SquaresLexpr &);
  SquaresLexpr &operator=(const SquaresLexpr &);
  SquaresLexpr(Lexpr *p1, Lexpr *p2);
  ~SquaresLexpr();
  virtual void accept(Visitor *v);
  virtual SquaresLexpr *clone() const;
  void swap(SquaresLexpr &);
};

class SizeOfLexpr : public Lexpr
{
public:
  Lexpr *lexpr_;

  SizeOfLexpr(const SizeOfLexpr &);
  SizeOfLexpr &operator=(const SizeOfLexpr &);
  SizeOfLexpr(Lexpr *p1);
  ~SizeOfLexpr();
  virtual void accept(Visitor *v);
  virtual SizeOfLexpr *clone() const;
  void swap(SizeOfLexpr &);
};

class OldLexpr : public Lexpr
{
public:
  Lexpr *lexpr_;

  OldLexpr(const OldLexpr &);
  OldLexpr &operator=(const OldLexpr &);
  OldLexpr(Lexpr *p1);
  ~OldLexpr();
  virtual void accept(Visitor *v);
  virtual OldLexpr *clone() const;
  void swap(OldLexpr &);
};

class AtLexpr : public Lexpr
{
public:
  Lexpr *lexpr_;
  LabelName *labelname_;

  AtLexpr(const AtLexpr &);
  AtLexpr &operator=(const AtLexpr &);
  AtLexpr(Lexpr *p1, LabelName *p2);
  ~AtLexpr();
  virtual void accept(Visitor *v);
  virtual AtLexpr *clone() const;
  void swap(AtLexpr &);
};

class ResultLexpr : public Lexpr
{
public:

  ResultLexpr(const ResultLexpr &);
  ResultLexpr &operator=(const ResultLexpr &);
  ResultLexpr();
  ~ResultLexpr();
  virtual void accept(Visitor *v);
  virtual ResultLexpr *clone() const;
  void swap(ResultLexpr &);
};

class SeparatedLexpr : public Lexpr
{
public:
  ListLexpr *listlexpr_;

  SeparatedLexpr(const SeparatedLexpr &);
  SeparatedLexpr &operator=(const SeparatedLexpr &);
  SeparatedLexpr(ListLexpr *p1);
  ~SeparatedLexpr();
  virtual void accept(Visitor *v);
  virtual SeparatedLexpr *clone() const;
  void swap(SeparatedLexpr &);
};

class FullIdParenLexpr : public Lexpr
{
public:
  FullIdentifier *fullidentifier_;
  ListLexpr *listlexpr_;

  FullIdParenLexpr(const FullIdParenLexpr &);
  FullIdParenLexpr &operator=(const FullIdParenLexpr &);
  FullIdParenLexpr(FullIdentifier *p1, ListLexpr *p2);
  ~FullIdParenLexpr();
  virtual void accept(Visitor *v);
  virtual FullIdParenLexpr *clone() const;
  void swap(FullIdParenLexpr &);
};

class FullId : public Lexpr
{
public:
  FullIdentifier *fullidentifier_;

  FullId(const FullId &);
  FullId &operator=(const FullId &);
  FullId(FullIdentifier *p1);
  ~FullId();
  virtual void accept(Visitor *v);
  virtual FullId *clone() const;
  void swap(FullId &);
};

class PiLexpr : public Lexpr
{
public:

  PiLexpr(const PiLexpr &);
  PiLexpr &operator=(const PiLexpr &);
  PiLexpr();
  ~PiLexpr();
  virtual void accept(Visitor *v);
  virtual PiLexpr *clone() const;
  void swap(PiLexpr &);
};

class ParenRangeLexpr : public Lexpr
{
public:
  Range *range_;

  ParenRangeLexpr(const ParenRangeLexpr &);
  ParenRangeLexpr &operator=(const ParenRangeLexpr &);
  ParenRangeLexpr(Range *p1);
  ~ParenRangeLexpr();
  virtual void accept(Visitor *v);
  virtual ParenRangeLexpr *clone() const;
  void swap(ParenRangeLexpr &);
};

class RelInnerLexpr : public LexprRelInner
{
public:
  Relation *relation_;
  Lexpr *lexpr_;

  RelInnerLexpr(const RelInnerLexpr &);
  RelInnerLexpr &operator=(const RelInnerLexpr &);
  RelInnerLexpr(Relation *p1, Lexpr *p2);
  ~RelInnerLexpr();
  virtual void accept(Visitor *v);
  virtual RelInnerLexpr *clone() const;
  void swap(RelInnerLexpr &);
};

class LessRel : public Relation
{
public:

  LessRel(const LessRel &);
  LessRel &operator=(const LessRel &);
  LessRel();
  ~LessRel();
  virtual void accept(Visitor *v);
  virtual LessRel *clone() const;
  void swap(LessRel &);
};

class GreaterRel : public Relation
{
public:

  GreaterRel(const GreaterRel &);
  GreaterRel &operator=(const GreaterRel &);
  GreaterRel();
  ~GreaterRel();
  virtual void accept(Visitor *v);
  virtual GreaterRel *clone() const;
  void swap(GreaterRel &);
};

class LessEqRel : public Relation
{
public:

  LessEqRel(const LessEqRel &);
  LessEqRel &operator=(const LessEqRel &);
  LessEqRel();
  ~LessEqRel();
  virtual void accept(Visitor *v);
  virtual LessEqRel *clone() const;
  void swap(LessEqRel &);
};

class GreaterEqRel : public Relation
{
public:

  GreaterEqRel(const GreaterEqRel &);
  GreaterEqRel &operator=(const GreaterEqRel &);
  GreaterEqRel();
  ~GreaterEqRel();
  virtual void accept(Visitor *v);
  virtual GreaterEqRel *clone() const;
  void swap(GreaterEqRel &);
};

class EqRel : public Relation
{
public:

  EqRel(const EqRel &);
  EqRel &operator=(const EqRel &);
  EqRel();
  ~EqRel();
  virtual void accept(Visitor *v);
  virtual EqRel *clone() const;
  void swap(EqRel &);
};

class NotEqRel : public Relation
{
public:

  NotEqRel(const NotEqRel &);
  NotEqRel &operator=(const NotEqRel &);
  NotEqRel();
  ~NotEqRel();
  virtual void accept(Visitor *v);
  virtual NotEqRel *clone() const;
  void swap(NotEqRel &);
};

class ForallBinderLexpr : public LexprBinder
{
public:
  Binders *binders_;
  Lexpr *lexpr_;

  ForallBinderLexpr(const ForallBinderLexpr &);
  ForallBinderLexpr &operator=(const ForallBinderLexpr &);
  ForallBinderLexpr(Binders *p1, Lexpr *p2);
  ~ForallBinderLexpr();
  virtual void accept(Visitor *v);
  virtual ForallBinderLexpr *clone() const;
  void swap(ForallBinderLexpr &);
};

class ExistBinderLexpr : public LexprBinder
{
public:
  Binders *binders_;
  Lexpr *lexpr_;

  ExistBinderLexpr(const ExistBinderLexpr &);
  ExistBinderLexpr &operator=(const ExistBinderLexpr &);
  ExistBinderLexpr(Binders *p1, Lexpr *p2);
  ~ExistBinderLexpr();
  virtual void accept(Visitor *v);
  virtual ExistBinderLexpr *clone() const;
  void swap(ExistBinderLexpr &);
};

class LambdaBinderLexpr : public LexprBinder
{
public:
  Binders *binders_;
  Lexpr *lexpr_;

  LambdaBinderLexpr(const LambdaBinderLexpr &);
  LambdaBinderLexpr &operator=(const LambdaBinderLexpr &);
  LambdaBinderLexpr(Binders *p1, Lexpr *p2);
  ~LambdaBinderLexpr();
  virtual void accept(Visitor *v);
  virtual LambdaBinderLexpr *clone() const;
  void swap(LambdaBinderLexpr &);
};

class TheBinders : public Binders
{
public:
  TypeSpecOFTYPENAME *typespecoftypename_;
  VarSpec *varspec_;
  ListBindersReentrance *listbindersreentrance_;

  TheBinders(const TheBinders &);
  TheBinders &operator=(const TheBinders &);
  TheBinders(TypeSpecOFTYPENAME *p1, VarSpec *p2, ListBindersReentrance *p3);
  ~TheBinders();
  virtual void accept(Visitor *v);
  virtual TheBinders *clone() const;
  void swap(TheBinders &);
};

class TypeSpecTYPENAME : public TypeSpecOFTYPENAME
{
public:
  Ident ident_;

  TypeSpecTYPENAME(const TypeSpecTYPENAME &);
  TypeSpecTYPENAME &operator=(const TypeSpecTYPENAME &);
  TypeSpecTYPENAME(Ident p1);
  ~TypeSpecTYPENAME();
  virtual void accept(Visitor *v);
  virtual TypeSpecTYPENAME *clone() const;
  void swap(TypeSpecTYPENAME &);
};

class TypeSpecSimpleFromTypenameTypeSpec : public TypeSpecOFTYPENAME
{
public:
  TypeSpecSimple *typespecsimple_;

  TypeSpecSimpleFromTypenameTypeSpec(const TypeSpecSimpleFromTypenameTypeSpec &);
  TypeSpecSimpleFromTypenameTypeSpec &operator=(const TypeSpecSimpleFromTypenameTypeSpec &);
  TypeSpecSimpleFromTypenameTypeSpec(TypeSpecSimple *p1);
  ~TypeSpecSimpleFromTypenameTypeSpec();
  virtual void accept(Visitor *v);
  virtual TypeSpecSimpleFromTypenameTypeSpec *clone() const;
  void swap(TypeSpecSimpleFromTypenameTypeSpec &);
};

class BindersReentranceDeclSpec : public BindersReentrance
{
public:
  TypeSpecOFTYPENAME *typespecoftypename_;
  VarSpec *varspec_;

  BindersReentranceDeclSpec(const BindersReentranceDeclSpec &);
  BindersReentranceDeclSpec &operator=(const BindersReentranceDeclSpec &);
  BindersReentranceDeclSpec(TypeSpecOFTYPENAME *p1, VarSpec *p2);
  ~BindersReentranceDeclSpec();
  virtual void accept(Visitor *v);
  virtual BindersReentranceDeclSpec *clone() const;
  void swap(BindersReentranceDeclSpec &);
};

class BindersReentranceVarSpec : public BindersReentrance
{
public:
  VarSpec *varspec_;

  BindersReentranceVarSpec(const BindersReentranceVarSpec &);
  BindersReentranceVarSpec &operator=(const BindersReentranceVarSpec &);
  BindersReentranceVarSpec(VarSpec *p1);
  ~BindersReentranceVarSpec();
  virtual void accept(Visitor *v);
  virtual BindersReentranceVarSpec *clone() const;
  void swap(BindersReentranceVarSpec &);
};

class StartVarSpec : public VarSpec
{
public:
  ListStars *liststars_;
  VarSpec *varspec_;

  StartVarSpec(const StartVarSpec &);
  StartVarSpec &operator=(const StartVarSpec &);
  StartVarSpec(ListStars *p1, VarSpec *p2);
  ~StartVarSpec();
  virtual void accept(Visitor *v);
  virtual StartVarSpec *clone() const;
  void swap(StartVarSpec &);
};

class SimpleSpec : public VarSpec
{
public:
  FullIdentifier *fullidentifier_;

  SimpleSpec(const SimpleSpec &);
  SimpleSpec &operator=(const SimpleSpec &);
  SimpleSpec(FullIdentifier *p1);
  ~SimpleSpec();
  virtual void accept(Visitor *v);
  virtual SimpleSpec *clone() const;
  void swap(SimpleSpec &);
};

class ArraySpec : public VarSpec
{
public:
  VarSpec *varspec_;
  ArraySize *arraysize_;

  ArraySpec(const ArraySpec &);
  ArraySpec &operator=(const ArraySpec &);
  ArraySpec(VarSpec *p1, ArraySize *p2);
  ~ArraySpec();
  virtual void accept(Visitor *v);
  virtual ArraySpec *clone() const;
  void swap(ArraySpec &);
};

class Star : public Stars
{
public:

  Star(const Star &);
  Star &operator=(const Star &);
  Star();
  ~Star();
  virtual void accept(Visitor *v);
  virtual Star *clone() const;
  void swap(Star &);
};

class IntConstArraySize : public ArraySize
{
public:
  Integer integer_;

  IntConstArraySize(const IntConstArraySize &);
  IntConstArraySize &operator=(const IntConstArraySize &);
  IntConstArraySize(Integer p1);
  ~IntConstArraySize();
  virtual void accept(Visitor *v);
  virtual IntConstArraySize *clone() const;
  void swap(IntConstArraySize &);
};

class SomeArraySize : public ArraySize
{
public:
  FullIdentifier *fullidentifier_;

  SomeArraySize(const SomeArraySize &);
  SomeArraySize &operator=(const SomeArraySize &);
  SomeArraySize(FullIdentifier *p1);
  ~SomeArraySize();
  virtual void accept(Visitor *v);
  virtual SomeArraySize *clone() const;
  void swap(SomeArraySize &);
};

class NoSize : public ArraySize
{
public:

  NoSize(const NoSize &);
  NoSize &operator=(const NoSize &);
  NoSize();
  ~NoSize();
  virtual void accept(Visitor *v);
  virtual NoSize *clone() const;
  void swap(NoSize &);
};

class OptLabelOne : public OptLabel
{
public:
  OptLabelList *optlabellist_;

  OptLabelOne(const OptLabelOne &);
  OptLabelOne &operator=(const OptLabelOne &);
  OptLabelOne(OptLabelList *p1);
  ~OptLabelOne();
  virtual void accept(Visitor *v);
  virtual OptLabelOne *clone() const;
  void swap(OptLabelOne &);
};

class OptLabelTwo : public OptLabel
{
public:
  OptLabelList *optlabellist_;

  OptLabelTwo(const OptLabelTwo &);
  OptLabelTwo &operator=(const OptLabelTwo &);
  OptLabelTwo(OptLabelList *p1);
  ~OptLabelTwo();
  virtual void accept(Visitor *v);
  virtual OptLabelTwo *clone() const;
  void swap(OptLabelTwo &);
};

class NoLableList : public OptLabelList
{
public:

  NoLableList(const NoLableList &);
  NoLableList &operator=(const NoLableList &);
  NoLableList();
  ~NoLableList();
  virtual void accept(Visitor *v);
  virtual NoLableList *clone() const;
  void swap(NoLableList &);
};

class LableList : public OptLabelList
{
public:
  ListLabelName *listlabelname_;

  LableList(const LableList &);
  LableList &operator=(const LableList &);
  LableList(ListLabelName *p1);
  ~LableList();
  virtual void accept(Visitor *v);
  virtual LableList *clone() const;
  void swap(LableList &);
};

class LableName : public LabelName
{
public:
  AnyIdentifier *anyidentifier_;

  LableName(const LableName &);
  LableName &operator=(const LableName &);
  LableName(AnyIdentifier *p1);
  ~LableName();
  virtual void accept(Visitor *v);
  virtual LableName *clone() const;
  void swap(LableName &);
};

class LexprRange : public Range
{
public:
  LexprOption *lexproption_1;
  LexprOption *lexproption_2;

  LexprRange(const LexprRange &);
  LexprRange &operator=(const LexprRange &);
  LexprRange(LexprOption *p1, LexprOption *p2);
  ~LexprRange();
  virtual void accept(Visitor *v);
  virtual LexprRange *clone() const;
  void swap(LexprRange &);
};

class NoLexprOption : public LexprOption
{
public:

  NoLexprOption(const NoLexprOption &);
  NoLexprOption &operator=(const NoLexprOption &);
  NoLexprOption();
  ~NoLexprOption();
  virtual void accept(Visitor *v);
  virtual NoLexprOption *clone() const;
  void swap(NoLexprOption &);
};

class SomeLexprOption : public LexprOption
{
public:
  Lexpr *lexpr_;

  SomeLexprOption(const SomeLexprOption &);
  SomeLexprOption &operator=(const SomeLexprOption &);
  SomeLexprOption(Lexpr *p1);
  ~SomeLexprOption();
  virtual void accept(Visitor *v);
  virtual SomeLexprOption *clone() const;
  void swap(SomeLexprOption &);
};

class SimpleIdentifierAny : public AnyIdentifier
{
public:
  Identifier *identifier_;

  SimpleIdentifierAny(const SimpleIdentifierAny &);
  SimpleIdentifierAny &operator=(const SimpleIdentifierAny &);
  SimpleIdentifierAny(Identifier *p1);
  ~SimpleIdentifierAny();
  virtual void accept(Visitor *v);
  virtual SimpleIdentifierAny *clone() const;
  void swap(SimpleIdentifierAny &);
};

class EnsuresKeyWord : public PostCond
{
public:

  EnsuresKeyWord(const EnsuresKeyWord &);
  EnsuresKeyWord &operator=(const EnsuresKeyWord &);
  EnsuresKeyWord();
  ~EnsuresKeyWord();
  virtual void accept(Visitor *v);
  virtual EnsuresKeyWord *clone() const;
  void swap(EnsuresKeyWord &);
};

class ExitsKeyWord : public PostCond
{
public:

  ExitsKeyWord(const ExitsKeyWord &);
  ExitsKeyWord &operator=(const ExitsKeyWord &);
  ExitsKeyWord();
  ~ExitsKeyWord();
  virtual void accept(Visitor *v);
  virtual ExitsKeyWord *clone() const;
  void swap(ExitsKeyWord &);
};

class BreaksKeyWord : public PostCond
{
public:

  BreaksKeyWord(const BreaksKeyWord &);
  BreaksKeyWord &operator=(const BreaksKeyWord &);
  BreaksKeyWord();
  ~BreaksKeyWord();
  virtual void accept(Visitor *v);
  virtual BreaksKeyWord *clone() const;
  void swap(BreaksKeyWord &);
};

class ContinuesKeyWord : public PostCond
{
public:

  ContinuesKeyWord(const ContinuesKeyWord &);
  ContinuesKeyWord &operator=(const ContinuesKeyWord &);
  ContinuesKeyWord();
  ~ContinuesKeyWord();
  virtual void accept(Visitor *v);
  virtual ContinuesKeyWord *clone() const;
  void swap(ContinuesKeyWord &);
};

class ReturnsKeyWord : public PostCond
{
public:

  ReturnsKeyWord(const ReturnsKeyWord &);
  ReturnsKeyWord &operator=(const ReturnsKeyWord &);
  ReturnsKeyWord();
  ~ReturnsKeyWord();
  virtual void accept(Visitor *v);
  virtual ReturnsKeyWord *clone() const;
  void swap(ReturnsKeyWord &);
};

class CheckEnsuresKeyWord : public PostCond
{
public:

  CheckEnsuresKeyWord(const CheckEnsuresKeyWord &);
  CheckEnsuresKeyWord &operator=(const CheckEnsuresKeyWord &);
  CheckEnsuresKeyWord();
  ~CheckEnsuresKeyWord();
  virtual void accept(Visitor *v);
  virtual CheckEnsuresKeyWord *clone() const;
  void swap(CheckEnsuresKeyWord &);
};

class CheckExitsKeyWord : public PostCond
{
public:

  CheckExitsKeyWord(const CheckExitsKeyWord &);
  CheckExitsKeyWord &operator=(const CheckExitsKeyWord &);
  CheckExitsKeyWord();
  ~CheckExitsKeyWord();
  virtual void accept(Visitor *v);
  virtual CheckExitsKeyWord *clone() const;
  void swap(CheckExitsKeyWord &);
};

class CheckBreaksKeyWord : public PostCond
{
public:

  CheckBreaksKeyWord(const CheckBreaksKeyWord &);
  CheckBreaksKeyWord &operator=(const CheckBreaksKeyWord &);
  CheckBreaksKeyWord();
  ~CheckBreaksKeyWord();
  virtual void accept(Visitor *v);
  virtual CheckBreaksKeyWord *clone() const;
  void swap(CheckBreaksKeyWord &);
};

class CheckContinuesKeyWord : public PostCond
{
public:

  CheckContinuesKeyWord(const CheckContinuesKeyWord &);
  CheckContinuesKeyWord &operator=(const CheckContinuesKeyWord &);
  CheckContinuesKeyWord();
  ~CheckContinuesKeyWord();
  virtual void accept(Visitor *v);
  virtual CheckContinuesKeyWord *clone() const;
  void swap(CheckContinuesKeyWord &);
};

class CheckReturnsKeyWord : public PostCond
{
public:

  CheckReturnsKeyWord(const CheckReturnsKeyWord &);
  CheckReturnsKeyWord &operator=(const CheckReturnsKeyWord &);
  CheckReturnsKeyWord();
  ~CheckReturnsKeyWord();
  virtual void accept(Visitor *v);
  virtual CheckReturnsKeyWord *clone() const;
  void swap(CheckReturnsKeyWord &);
};

class AdmitEnsuresKeyWord : public PostCond
{
public:

  AdmitEnsuresKeyWord(const AdmitEnsuresKeyWord &);
  AdmitEnsuresKeyWord &operator=(const AdmitEnsuresKeyWord &);
  AdmitEnsuresKeyWord();
  ~AdmitEnsuresKeyWord();
  virtual void accept(Visitor *v);
  virtual AdmitEnsuresKeyWord *clone() const;
  void swap(AdmitEnsuresKeyWord &);
};

class AdmitExitsKeyWord : public PostCond
{
public:

  AdmitExitsKeyWord(const AdmitExitsKeyWord &);
  AdmitExitsKeyWord &operator=(const AdmitExitsKeyWord &);
  AdmitExitsKeyWord();
  ~AdmitExitsKeyWord();
  virtual void accept(Visitor *v);
  virtual AdmitExitsKeyWord *clone() const;
  void swap(AdmitExitsKeyWord &);
};

class AdmitBreaksKeyWord : public PostCond
{
public:

  AdmitBreaksKeyWord(const AdmitBreaksKeyWord &);
  AdmitBreaksKeyWord &operator=(const AdmitBreaksKeyWord &);
  AdmitBreaksKeyWord();
  ~AdmitBreaksKeyWord();
  virtual void accept(Visitor *v);
  virtual AdmitBreaksKeyWord *clone() const;
  void swap(AdmitBreaksKeyWord &);
};

class AdmitContinuesKeyWord : public PostCond
{
public:

  AdmitContinuesKeyWord(const AdmitContinuesKeyWord &);
  AdmitContinuesKeyWord &operator=(const AdmitContinuesKeyWord &);
  AdmitContinuesKeyWord();
  ~AdmitContinuesKeyWord();
  virtual void accept(Visitor *v);
  virtual AdmitContinuesKeyWord *clone() const;
  void swap(AdmitContinuesKeyWord &);
};

class AdmitReturnsKeyWord : public PostCond
{
public:

  AdmitReturnsKeyWord(const AdmitReturnsKeyWord &);
  AdmitReturnsKeyWord &operator=(const AdmitReturnsKeyWord &);
  AdmitReturnsKeyWord();
  ~AdmitReturnsKeyWord();
  virtual void accept(Visitor *v);
  virtual AdmitReturnsKeyWord *clone() const;
  void swap(AdmitReturnsKeyWord &);
};

class SimpleIdentifierFull : public FullIdentifier
{
public:
  Identifier *identifier_;

  SimpleIdentifierFull(const SimpleIdentifierFull &);
  SimpleIdentifierFull &operator=(const SimpleIdentifierFull &);
  SimpleIdentifierFull(Identifier *p1);
  ~SimpleIdentifierFull();
  virtual void accept(Visitor *v);
  virtual SimpleIdentifierFull *clone() const;
  void swap(SimpleIdentifierFull &);
};

class AdmitKeyWordFullIdent : public FullIdentifier
{
public:

  AdmitKeyWordFullIdent(const AdmitKeyWordFullIdent &);
  AdmitKeyWordFullIdent &operator=(const AdmitKeyWordFullIdent &);
  AdmitKeyWordFullIdent();
  ~AdmitKeyWordFullIdent();
  virtual void accept(Visitor *v);
  virtual AdmitKeyWordFullIdent *clone() const;
  void swap(AdmitKeyWordFullIdent &);
};

class AllocatesKeyWordFullIdent : public FullIdentifier
{
public:

  AllocatesKeyWordFullIdent(const AllocatesKeyWordFullIdent &);
  AllocatesKeyWordFullIdent &operator=(const AllocatesKeyWordFullIdent &);
  AllocatesKeyWordFullIdent();
  ~AllocatesKeyWordFullIdent();
  virtual void accept(Visitor *v);
  virtual AllocatesKeyWordFullIdent *clone() const;
  void swap(AllocatesKeyWordFullIdent &);
};

class AssertKeyWordFullIdent : public FullIdentifier
{
public:

  AssertKeyWordFullIdent(const AssertKeyWordFullIdent &);
  AssertKeyWordFullIdent &operator=(const AssertKeyWordFullIdent &);
  AssertKeyWordFullIdent();
  ~AssertKeyWordFullIdent();
  virtual void accept(Visitor *v);
  virtual AssertKeyWordFullIdent *clone() const;
  void swap(AssertKeyWordFullIdent &);
};

class AssignsKeyWordFullIdent : public FullIdentifier
{
public:

  AssignsKeyWordFullIdent(const AssignsKeyWordFullIdent &);
  AssignsKeyWordFullIdent &operator=(const AssignsKeyWordFullIdent &);
  AssignsKeyWordFullIdent();
  ~AssignsKeyWordFullIdent();
  virtual void accept(Visitor *v);
  virtual AssignsKeyWordFullIdent *clone() const;
  void swap(AssignsKeyWordFullIdent &);
};

class AssumesKeyWordFullIdent : public FullIdentifier
{
public:

  AssumesKeyWordFullIdent(const AssumesKeyWordFullIdent &);
  AssumesKeyWordFullIdent &operator=(const AssumesKeyWordFullIdent &);
  AssumesKeyWordFullIdent();
  ~AssumesKeyWordFullIdent();
  virtual void accept(Visitor *v);
  virtual AssumesKeyWordFullIdent *clone() const;
  void swap(AssumesKeyWordFullIdent &);
};

class AtKeyWordFullIdent : public FullIdentifier
{
public:

  AtKeyWordFullIdent(const AtKeyWordFullIdent &);
  AtKeyWordFullIdent &operator=(const AtKeyWordFullIdent &);
  AtKeyWordFullIdent();
  ~AtKeyWordFullIdent();
  virtual void accept(Visitor *v);
  virtual AtKeyWordFullIdent *clone() const;
  void swap(AtKeyWordFullIdent &);
};

class AxiomKeyWordFullIdent : public FullIdentifier
{
public:

  AxiomKeyWordFullIdent(const AxiomKeyWordFullIdent &);
  AxiomKeyWordFullIdent &operator=(const AxiomKeyWordFullIdent &);
  AxiomKeyWordFullIdent();
  ~AxiomKeyWordFullIdent();
  virtual void accept(Visitor *v);
  virtual AxiomKeyWordFullIdent *clone() const;
  void swap(AxiomKeyWordFullIdent &);
};

class AxiomaticKeyWordFullIdent : public FullIdentifier
{
public:

  AxiomaticKeyWordFullIdent(const AxiomaticKeyWordFullIdent &);
  AxiomaticKeyWordFullIdent &operator=(const AxiomaticKeyWordFullIdent &);
  AxiomaticKeyWordFullIdent();
  ~AxiomaticKeyWordFullIdent();
  virtual void accept(Visitor *v);
  virtual AxiomaticKeyWordFullIdent *clone() const;
  void swap(AxiomaticKeyWordFullIdent &);
};

class BehaviorKeyWordFullIdent : public FullIdentifier
{
public:

  BehaviorKeyWordFullIdent(const BehaviorKeyWordFullIdent &);
  BehaviorKeyWordFullIdent &operator=(const BehaviorKeyWordFullIdent &);
  BehaviorKeyWordFullIdent();
  ~BehaviorKeyWordFullIdent();
  virtual void accept(Visitor *v);
  virtual BehaviorKeyWordFullIdent *clone() const;
  void swap(BehaviorKeyWordFullIdent &);
};

class BreaksKeyWordFullIdent : public FullIdentifier
{
public:

  BreaksKeyWordFullIdent(const BreaksKeyWordFullIdent &);
  BreaksKeyWordFullIdent &operator=(const BreaksKeyWordFullIdent &);
  BreaksKeyWordFullIdent();
  ~BreaksKeyWordFullIdent();
  virtual void accept(Visitor *v);
  virtual BreaksKeyWordFullIdent *clone() const;
  void swap(BreaksKeyWordFullIdent &);
};

class CheckKeyWordFullIdent : public FullIdentifier
{
public:

  CheckKeyWordFullIdent(const CheckKeyWordFullIdent &);
  CheckKeyWordFullIdent &operator=(const CheckKeyWordFullIdent &);
  CheckKeyWordFullIdent();
  ~CheckKeyWordFullIdent();
  virtual void accept(Visitor *v);
  virtual CheckKeyWordFullIdent *clone() const;
  void swap(CheckKeyWordFullIdent &);
};

class CompleteKeyWordFullIdent : public FullIdentifier
{
public:

  CompleteKeyWordFullIdent(const CompleteKeyWordFullIdent &);
  CompleteKeyWordFullIdent &operator=(const CompleteKeyWordFullIdent &);
  CompleteKeyWordFullIdent();
  ~CompleteKeyWordFullIdent();
  virtual void accept(Visitor *v);
  virtual CompleteKeyWordFullIdent *clone() const;
  void swap(CompleteKeyWordFullIdent &);
};

class ContinuesKeyWordFullIdent : public FullIdentifier
{
public:

  ContinuesKeyWordFullIdent(const ContinuesKeyWordFullIdent &);
  ContinuesKeyWordFullIdent &operator=(const ContinuesKeyWordFullIdent &);
  ContinuesKeyWordFullIdent();
  ~ContinuesKeyWordFullIdent();
  virtual void accept(Visitor *v);
  virtual ContinuesKeyWordFullIdent *clone() const;
  void swap(ContinuesKeyWordFullIdent &);
};

class ContractKeyWordFullIdent : public FullIdentifier
{
public:

  ContractKeyWordFullIdent(const ContractKeyWordFullIdent &);
  ContractKeyWordFullIdent &operator=(const ContractKeyWordFullIdent &);
  ContractKeyWordFullIdent();
  ~ContractKeyWordFullIdent();
  virtual void accept(Visitor *v);
  virtual ContractKeyWordFullIdent *clone() const;
  void swap(ContractKeyWordFullIdent &);
};

class DecreasesKeyWordFullIdent : public FullIdentifier
{
public:

  DecreasesKeyWordFullIdent(const DecreasesKeyWordFullIdent &);
  DecreasesKeyWordFullIdent &operator=(const DecreasesKeyWordFullIdent &);
  DecreasesKeyWordFullIdent();
  ~DecreasesKeyWordFullIdent();
  virtual void accept(Visitor *v);
  virtual DecreasesKeyWordFullIdent *clone() const;
  void swap(DecreasesKeyWordFullIdent &);
};

class DisjointKeyWordFullIdent : public FullIdentifier
{
public:

  DisjointKeyWordFullIdent(const DisjointKeyWordFullIdent &);
  DisjointKeyWordFullIdent &operator=(const DisjointKeyWordFullIdent &);
  DisjointKeyWordFullIdent();
  ~DisjointKeyWordFullIdent();
  virtual void accept(Visitor *v);
  virtual DisjointKeyWordFullIdent *clone() const;
  void swap(DisjointKeyWordFullIdent &);
};

class EnsuresKeyWordFullIdent : public FullIdentifier
{
public:

  EnsuresKeyWordFullIdent(const EnsuresKeyWordFullIdent &);
  EnsuresKeyWordFullIdent &operator=(const EnsuresKeyWordFullIdent &);
  EnsuresKeyWordFullIdent();
  ~EnsuresKeyWordFullIdent();
  virtual void accept(Visitor *v);
  virtual EnsuresKeyWordFullIdent *clone() const;
  void swap(EnsuresKeyWordFullIdent &);
};

class ExitsKeyWordFullIdent : public FullIdentifier
{
public:

  ExitsKeyWordFullIdent(const ExitsKeyWordFullIdent &);
  ExitsKeyWordFullIdent &operator=(const ExitsKeyWordFullIdent &);
  ExitsKeyWordFullIdent();
  ~ExitsKeyWordFullIdent();
  virtual void accept(Visitor *v);
  virtual ExitsKeyWordFullIdent *clone() const;
  void swap(ExitsKeyWordFullIdent &);
};

class FreesKeyWordFullIdent : public FullIdentifier
{
public:

  FreesKeyWordFullIdent(const FreesKeyWordFullIdent &);
  FreesKeyWordFullIdent &operator=(const FreesKeyWordFullIdent &);
  FreesKeyWordFullIdent();
  ~FreesKeyWordFullIdent();
  virtual void accept(Visitor *v);
  virtual FreesKeyWordFullIdent *clone() const;
  void swap(FreesKeyWordFullIdent &);
};

class FunctionKeyWordFullIdent : public FullIdentifier
{
public:

  FunctionKeyWordFullIdent(const FunctionKeyWordFullIdent &);
  FunctionKeyWordFullIdent &operator=(const FunctionKeyWordFullIdent &);
  FunctionKeyWordFullIdent();
  ~FunctionKeyWordFullIdent();
  virtual void accept(Visitor *v);
  virtual FunctionKeyWordFullIdent *clone() const;
  void swap(FunctionKeyWordFullIdent &);
};

class GlobalKeyWordFullIdent : public FullIdentifier
{
public:

  GlobalKeyWordFullIdent(const GlobalKeyWordFullIdent &);
  GlobalKeyWordFullIdent &operator=(const GlobalKeyWordFullIdent &);
  GlobalKeyWordFullIdent();
  ~GlobalKeyWordFullIdent();
  virtual void accept(Visitor *v);
  virtual GlobalKeyWordFullIdent *clone() const;
  void swap(GlobalKeyWordFullIdent &);
};

class ImpactKeyWordFullIdent : public FullIdentifier
{
public:

  ImpactKeyWordFullIdent(const ImpactKeyWordFullIdent &);
  ImpactKeyWordFullIdent &operator=(const ImpactKeyWordFullIdent &);
  ImpactKeyWordFullIdent();
  ~ImpactKeyWordFullIdent();
  virtual void accept(Visitor *v);
  virtual ImpactKeyWordFullIdent *clone() const;
  void swap(ImpactKeyWordFullIdent &);
};

class InductiveKeyWordFullIdent : public FullIdentifier
{
public:

  InductiveKeyWordFullIdent(const InductiveKeyWordFullIdent &);
  InductiveKeyWordFullIdent &operator=(const InductiveKeyWordFullIdent &);
  InductiveKeyWordFullIdent();
  ~InductiveKeyWordFullIdent();
  virtual void accept(Visitor *v);
  virtual InductiveKeyWordFullIdent *clone() const;
  void swap(InductiveKeyWordFullIdent &);
};

class IncludeKeyWordFullIdent : public FullIdentifier
{
public:

  IncludeKeyWordFullIdent(const IncludeKeyWordFullIdent &);
  IncludeKeyWordFullIdent &operator=(const IncludeKeyWordFullIdent &);
  IncludeKeyWordFullIdent();
  ~IncludeKeyWordFullIdent();
  virtual void accept(Visitor *v);
  virtual IncludeKeyWordFullIdent *clone() const;
  void swap(IncludeKeyWordFullIdent &);
};

class InvariantKeyWordFullIdent : public FullIdentifier
{
public:

  InvariantKeyWordFullIdent(const InvariantKeyWordFullIdent &);
  InvariantKeyWordFullIdent &operator=(const InvariantKeyWordFullIdent &);
  InvariantKeyWordFullIdent();
  ~InvariantKeyWordFullIdent();
  virtual void accept(Visitor *v);
  virtual InvariantKeyWordFullIdent *clone() const;
  void swap(InvariantKeyWordFullIdent &);
};

class LemmaKeyWordFullIdent : public FullIdentifier
{
public:

  LemmaKeyWordFullIdent(const LemmaKeyWordFullIdent &);
  LemmaKeyWordFullIdent &operator=(const LemmaKeyWordFullIdent &);
  LemmaKeyWordFullIdent();
  ~LemmaKeyWordFullIdent();
  virtual void accept(Visitor *v);
  virtual LemmaKeyWordFullIdent *clone() const;
  void swap(LemmaKeyWordFullIdent &);
};

class LetKeyWordFullIdent : public FullIdentifier
{
public:

  LetKeyWordFullIdent(const LetKeyWordFullIdent &);
  LetKeyWordFullIdent &operator=(const LetKeyWordFullIdent &);
  LetKeyWordFullIdent();
  ~LetKeyWordFullIdent();
  virtual void accept(Visitor *v);
  virtual LetKeyWordFullIdent *clone() const;
  void swap(LetKeyWordFullIdent &);
};

class LogicKeyWordFullIdent : public FullIdentifier
{
public:

  LogicKeyWordFullIdent(const LogicKeyWordFullIdent &);
  LogicKeyWordFullIdent &operator=(const LogicKeyWordFullIdent &);
  LogicKeyWordFullIdent();
  ~LogicKeyWordFullIdent();
  virtual void accept(Visitor *v);
  virtual LogicKeyWordFullIdent *clone() const;
  void swap(LogicKeyWordFullIdent &);
};

class LoopKeyWordFullIdent : public FullIdentifier
{
public:

  LoopKeyWordFullIdent(const LoopKeyWordFullIdent &);
  LoopKeyWordFullIdent &operator=(const LoopKeyWordFullIdent &);
  LoopKeyWordFullIdent();
  ~LoopKeyWordFullIdent();
  virtual void accept(Visitor *v);
  virtual LoopKeyWordFullIdent *clone() const;
  void swap(LoopKeyWordFullIdent &);
};

class ModelKeyWordFullIdent : public FullIdentifier
{
public:

  ModelKeyWordFullIdent(const ModelKeyWordFullIdent &);
  ModelKeyWordFullIdent &operator=(const ModelKeyWordFullIdent &);
  ModelKeyWordFullIdent();
  ~ModelKeyWordFullIdent();
  virtual void accept(Visitor *v);
  virtual ModelKeyWordFullIdent *clone() const;
  void swap(ModelKeyWordFullIdent &);
};

class ModuleKeyWordFullIdent : public FullIdentifier
{
public:

  ModuleKeyWordFullIdent(const ModuleKeyWordFullIdent &);
  ModuleKeyWordFullIdent &operator=(const ModuleKeyWordFullIdent &);
  ModuleKeyWordFullIdent();
  ~ModuleKeyWordFullIdent();
  virtual void accept(Visitor *v);
  virtual ModuleKeyWordFullIdent *clone() const;
  void swap(ModuleKeyWordFullIdent &);
};

class PragmaKeyWordFullIdent : public FullIdentifier
{
public:

  PragmaKeyWordFullIdent(const PragmaKeyWordFullIdent &);
  PragmaKeyWordFullIdent &operator=(const PragmaKeyWordFullIdent &);
  PragmaKeyWordFullIdent();
  ~PragmaKeyWordFullIdent();
  virtual void accept(Visitor *v);
  virtual PragmaKeyWordFullIdent *clone() const;
  void swap(PragmaKeyWordFullIdent &);
};

class PredicateKeyWordFullIdent : public FullIdentifier
{
public:

  PredicateKeyWordFullIdent(const PredicateKeyWordFullIdent &);
  PredicateKeyWordFullIdent &operator=(const PredicateKeyWordFullIdent &);
  PredicateKeyWordFullIdent();
  ~PredicateKeyWordFullIdent();
  virtual void accept(Visitor *v);
  virtual PredicateKeyWordFullIdent *clone() const;
  void swap(PredicateKeyWordFullIdent &);
};

class RequiresKeyWordFullIdent : public FullIdentifier
{
public:

  RequiresKeyWordFullIdent(const RequiresKeyWordFullIdent &);
  RequiresKeyWordFullIdent &operator=(const RequiresKeyWordFullIdent &);
  RequiresKeyWordFullIdent();
  ~RequiresKeyWordFullIdent();
  virtual void accept(Visitor *v);
  virtual RequiresKeyWordFullIdent *clone() const;
  void swap(RequiresKeyWordFullIdent &);
};

class ReturnsKeyWordFullIdent : public FullIdentifier
{
public:

  ReturnsKeyWordFullIdent(const ReturnsKeyWordFullIdent &);
  ReturnsKeyWordFullIdent &operator=(const ReturnsKeyWordFullIdent &);
  ReturnsKeyWordFullIdent();
  ~ReturnsKeyWordFullIdent();
  virtual void accept(Visitor *v);
  virtual ReturnsKeyWordFullIdent *clone() const;
  void swap(ReturnsKeyWordFullIdent &);
};

class SliceKeyWordFullIdent : public FullIdentifier
{
public:

  SliceKeyWordFullIdent(const SliceKeyWordFullIdent &);
  SliceKeyWordFullIdent &operator=(const SliceKeyWordFullIdent &);
  SliceKeyWordFullIdent();
  ~SliceKeyWordFullIdent();
  virtual void accept(Visitor *v);
  virtual SliceKeyWordFullIdent *clone() const;
  void swap(SliceKeyWordFullIdent &);
};

class TerminatesKeyWordFullIdent : public FullIdentifier
{
public:

  TerminatesKeyWordFullIdent(const TerminatesKeyWordFullIdent &);
  TerminatesKeyWordFullIdent &operator=(const TerminatesKeyWordFullIdent &);
  TerminatesKeyWordFullIdent();
  ~TerminatesKeyWordFullIdent();
  virtual void accept(Visitor *v);
  virtual TerminatesKeyWordFullIdent *clone() const;
  void swap(TerminatesKeyWordFullIdent &);
};

class TypeKeyWordFullIdent : public FullIdentifier
{
public:

  TypeKeyWordFullIdent(const TypeKeyWordFullIdent &);
  TypeKeyWordFullIdent &operator=(const TypeKeyWordFullIdent &);
  TypeKeyWordFullIdent();
  ~TypeKeyWordFullIdent();
  virtual void accept(Visitor *v);
  virtual TypeKeyWordFullIdent *clone() const;
  void swap(TypeKeyWordFullIdent &);
};

class VariantKeyWordFullIdent : public FullIdentifier
{
public:

  VariantKeyWordFullIdent(const VariantKeyWordFullIdent &);
  VariantKeyWordFullIdent &operator=(const VariantKeyWordFullIdent &);
  VariantKeyWordFullIdent();
  ~VariantKeyWordFullIdent();
  virtual void accept(Visitor *v);
  virtual VariantKeyWordFullIdent *clone() const;
  void swap(VariantKeyWordFullIdent &);
};

class IdentifierIdent : public Identifier
{
public:
  Ident ident_;

  IdentifierIdent(const IdentifierIdent &);
  IdentifierIdent &operator=(const IdentifierIdent &);
  IdentifierIdent(Ident p1);
  ~IdentifierIdent();
  virtual void accept(Visitor *v);
  virtual IdentifierIdent *clone() const;
  void swap(IdentifierIdent &);
};

class BehaviorsKeyWord : public Identifier
{
public:

  BehaviorsKeyWord(const BehaviorsKeyWord &);
  BehaviorsKeyWord &operator=(const BehaviorsKeyWord &);
  BehaviorsKeyWord();
  ~BehaviorsKeyWord();
  virtual void accept(Visitor *v);
  virtual BehaviorsKeyWord *clone() const;
  void swap(BehaviorsKeyWord &);
};

class LabelKeyWord : public Identifier
{
public:

  LabelKeyWord(const LabelKeyWord &);
  LabelKeyWord &operator=(const LabelKeyWord &);
  LabelKeyWord();
  ~LabelKeyWord();
  virtual void accept(Visitor *v);
  virtual LabelKeyWord *clone() const;
  void swap(LabelKeyWord &);
};

class ReadsKeyWord : public Identifier
{
public:

  ReadsKeyWord(const ReadsKeyWord &);
  ReadsKeyWord &operator=(const ReadsKeyWord &);
  ReadsKeyWord();
  ~ReadsKeyWord();
  virtual void accept(Visitor *v);
  virtual ReadsKeyWord *clone() const;
  void swap(ReadsKeyWord &);
};

class WritesKeyWord : public Identifier
{
public:

  WritesKeyWord(const WritesKeyWord &);
  WritesKeyWord &operator=(const WritesKeyWord &);
  WritesKeyWord();
  ~WritesKeyWord();
  virtual void accept(Visitor *v);
  virtual WritesKeyWord *clone() const;
  void swap(WritesKeyWord &);
};

class TypeSpecSimpleIntegerKeyWord : public TypeSpecSimple
{
public:

  TypeSpecSimpleIntegerKeyWord(const TypeSpecSimpleIntegerKeyWord &);
  TypeSpecSimpleIntegerKeyWord &operator=(const TypeSpecSimpleIntegerKeyWord &);
  TypeSpecSimpleIntegerKeyWord();
  ~TypeSpecSimpleIntegerKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecSimpleIntegerKeyWord *clone() const;
  void swap(TypeSpecSimpleIntegerKeyWord &);
};

class TypeSpecSimpleRealKeyWord : public TypeSpecSimple
{
public:

  TypeSpecSimpleRealKeyWord(const TypeSpecSimpleRealKeyWord &);
  TypeSpecSimpleRealKeyWord &operator=(const TypeSpecSimpleRealKeyWord &);
  TypeSpecSimpleRealKeyWord();
  ~TypeSpecSimpleRealKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecSimpleRealKeyWord *clone() const;
  void swap(TypeSpecSimpleRealKeyWord &);
};

class TypeSpecSimpleBooleanKeyWord : public TypeSpecSimple
{
public:

  TypeSpecSimpleBooleanKeyWord(const TypeSpecSimpleBooleanKeyWord &);
  TypeSpecSimpleBooleanKeyWord &operator=(const TypeSpecSimpleBooleanKeyWord &);
  TypeSpecSimpleBooleanKeyWord();
  ~TypeSpecSimpleBooleanKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecSimpleBooleanKeyWord *clone() const;
  void swap(TypeSpecSimpleBooleanKeyWord &);
};

class TypeSpecSimpleVoidKeyWord : public TypeSpecSimple
{
public:

  TypeSpecSimpleVoidKeyWord(const TypeSpecSimpleVoidKeyWord &);
  TypeSpecSimpleVoidKeyWord &operator=(const TypeSpecSimpleVoidKeyWord &);
  TypeSpecSimpleVoidKeyWord();
  ~TypeSpecSimpleVoidKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecSimpleVoidKeyWord *clone() const;
  void swap(TypeSpecSimpleVoidKeyWord &);
};

class TypeSpecSimpleBoolKeyWord : public TypeSpecSimple
{
public:

  TypeSpecSimpleBoolKeyWord(const TypeSpecSimpleBoolKeyWord &);
  TypeSpecSimpleBoolKeyWord &operator=(const TypeSpecSimpleBoolKeyWord &);
  TypeSpecSimpleBoolKeyWord();
  ~TypeSpecSimpleBoolKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecSimpleBoolKeyWord *clone() const;
  void swap(TypeSpecSimpleBoolKeyWord &);
};

class TypeSpecSimpleCharKeyWord : public TypeSpecSimple
{
public:

  TypeSpecSimpleCharKeyWord(const TypeSpecSimpleCharKeyWord &);
  TypeSpecSimpleCharKeyWord &operator=(const TypeSpecSimpleCharKeyWord &);
  TypeSpecSimpleCharKeyWord();
  ~TypeSpecSimpleCharKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecSimpleCharKeyWord *clone() const;
  void swap(TypeSpecSimpleCharKeyWord &);
};

class TypeSpecSimpleSignedCharKeyWord : public TypeSpecSimple
{
public:

  TypeSpecSimpleSignedCharKeyWord(const TypeSpecSimpleSignedCharKeyWord &);
  TypeSpecSimpleSignedCharKeyWord &operator=(const TypeSpecSimpleSignedCharKeyWord &);
  TypeSpecSimpleSignedCharKeyWord();
  ~TypeSpecSimpleSignedCharKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecSimpleSignedCharKeyWord *clone() const;
  void swap(TypeSpecSimpleSignedCharKeyWord &);
};

class TypeSpecSimpleUnsignedCharKeyWord : public TypeSpecSimple
{
public:

  TypeSpecSimpleUnsignedCharKeyWord(const TypeSpecSimpleUnsignedCharKeyWord &);
  TypeSpecSimpleUnsignedCharKeyWord &operator=(const TypeSpecSimpleUnsignedCharKeyWord &);
  TypeSpecSimpleUnsignedCharKeyWord();
  ~TypeSpecSimpleUnsignedCharKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecSimpleUnsignedCharKeyWord *clone() const;
  void swap(TypeSpecSimpleUnsignedCharKeyWord &);
};

class TypeSpecSimpleIntKeyWord : public TypeSpecSimple
{
public:

  TypeSpecSimpleIntKeyWord(const TypeSpecSimpleIntKeyWord &);
  TypeSpecSimpleIntKeyWord &operator=(const TypeSpecSimpleIntKeyWord &);
  TypeSpecSimpleIntKeyWord();
  ~TypeSpecSimpleIntKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecSimpleIntKeyWord *clone() const;
  void swap(TypeSpecSimpleIntKeyWord &);
};

class TypeSpecSimpleSignedIntKeyWord : public TypeSpecSimple
{
public:

  TypeSpecSimpleSignedIntKeyWord(const TypeSpecSimpleSignedIntKeyWord &);
  TypeSpecSimpleSignedIntKeyWord &operator=(const TypeSpecSimpleSignedIntKeyWord &);
  TypeSpecSimpleSignedIntKeyWord();
  ~TypeSpecSimpleSignedIntKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecSimpleSignedIntKeyWord *clone() const;
  void swap(TypeSpecSimpleSignedIntKeyWord &);
};

class TypeSpecSimpleUnsignedIntKeyWord : public TypeSpecSimple
{
public:

  TypeSpecSimpleUnsignedIntKeyWord(const TypeSpecSimpleUnsignedIntKeyWord &);
  TypeSpecSimpleUnsignedIntKeyWord &operator=(const TypeSpecSimpleUnsignedIntKeyWord &);
  TypeSpecSimpleUnsignedIntKeyWord();
  ~TypeSpecSimpleUnsignedIntKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecSimpleUnsignedIntKeyWord *clone() const;
  void swap(TypeSpecSimpleUnsignedIntKeyWord &);
};

class TypeSpecSimpleUnsignedKeyWord : public TypeSpecSimple
{
public:

  TypeSpecSimpleUnsignedKeyWord(const TypeSpecSimpleUnsignedKeyWord &);
  TypeSpecSimpleUnsignedKeyWord &operator=(const TypeSpecSimpleUnsignedKeyWord &);
  TypeSpecSimpleUnsignedKeyWord();
  ~TypeSpecSimpleUnsignedKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecSimpleUnsignedKeyWord *clone() const;
  void swap(TypeSpecSimpleUnsignedKeyWord &);
};

class TypeSpecSimpleShortKeyWord : public TypeSpecSimple
{
public:

  TypeSpecSimpleShortKeyWord(const TypeSpecSimpleShortKeyWord &);
  TypeSpecSimpleShortKeyWord &operator=(const TypeSpecSimpleShortKeyWord &);
  TypeSpecSimpleShortKeyWord();
  ~TypeSpecSimpleShortKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecSimpleShortKeyWord *clone() const;
  void swap(TypeSpecSimpleShortKeyWord &);
};

class TypeSpecSimpleSignedShortKeyWord : public TypeSpecSimple
{
public:

  TypeSpecSimpleSignedShortKeyWord(const TypeSpecSimpleSignedShortKeyWord &);
  TypeSpecSimpleSignedShortKeyWord &operator=(const TypeSpecSimpleSignedShortKeyWord &);
  TypeSpecSimpleSignedShortKeyWord();
  ~TypeSpecSimpleSignedShortKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecSimpleSignedShortKeyWord *clone() const;
  void swap(TypeSpecSimpleSignedShortKeyWord &);
};

class TypeSpecSimpleUnsignedShortKeyWord : public TypeSpecSimple
{
public:

  TypeSpecSimpleUnsignedShortKeyWord(const TypeSpecSimpleUnsignedShortKeyWord &);
  TypeSpecSimpleUnsignedShortKeyWord &operator=(const TypeSpecSimpleUnsignedShortKeyWord &);
  TypeSpecSimpleUnsignedShortKeyWord();
  ~TypeSpecSimpleUnsignedShortKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecSimpleUnsignedShortKeyWord *clone() const;
  void swap(TypeSpecSimpleUnsignedShortKeyWord &);
};

class TypeSpecSimpleShortIntKeyWord : public TypeSpecSimple
{
public:

  TypeSpecSimpleShortIntKeyWord(const TypeSpecSimpleShortIntKeyWord &);
  TypeSpecSimpleShortIntKeyWord &operator=(const TypeSpecSimpleShortIntKeyWord &);
  TypeSpecSimpleShortIntKeyWord();
  ~TypeSpecSimpleShortIntKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecSimpleShortIntKeyWord *clone() const;
  void swap(TypeSpecSimpleShortIntKeyWord &);
};

class TypeSpecSimpleSignedShortIntKeyWord : public TypeSpecSimple
{
public:

  TypeSpecSimpleSignedShortIntKeyWord(const TypeSpecSimpleSignedShortIntKeyWord &);
  TypeSpecSimpleSignedShortIntKeyWord &operator=(const TypeSpecSimpleSignedShortIntKeyWord &);
  TypeSpecSimpleSignedShortIntKeyWord();
  ~TypeSpecSimpleSignedShortIntKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecSimpleSignedShortIntKeyWord *clone() const;
  void swap(TypeSpecSimpleSignedShortIntKeyWord &);
};

class TypeSpecSimpleUnsignedShortIntKeyWord : public TypeSpecSimple
{
public:

  TypeSpecSimpleUnsignedShortIntKeyWord(const TypeSpecSimpleUnsignedShortIntKeyWord &);
  TypeSpecSimpleUnsignedShortIntKeyWord &operator=(const TypeSpecSimpleUnsignedShortIntKeyWord &);
  TypeSpecSimpleUnsignedShortIntKeyWord();
  ~TypeSpecSimpleUnsignedShortIntKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecSimpleUnsignedShortIntKeyWord *clone() const;
  void swap(TypeSpecSimpleUnsignedShortIntKeyWord &);
};

class TypeSpecSimpleLongKeyWord : public TypeSpecSimple
{
public:

  TypeSpecSimpleLongKeyWord(const TypeSpecSimpleLongKeyWord &);
  TypeSpecSimpleLongKeyWord &operator=(const TypeSpecSimpleLongKeyWord &);
  TypeSpecSimpleLongKeyWord();
  ~TypeSpecSimpleLongKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecSimpleLongKeyWord *clone() const;
  void swap(TypeSpecSimpleLongKeyWord &);
};

class TypeSpecSimpleSignedLongKeyWord : public TypeSpecSimple
{
public:

  TypeSpecSimpleSignedLongKeyWord(const TypeSpecSimpleSignedLongKeyWord &);
  TypeSpecSimpleSignedLongKeyWord &operator=(const TypeSpecSimpleSignedLongKeyWord &);
  TypeSpecSimpleSignedLongKeyWord();
  ~TypeSpecSimpleSignedLongKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecSimpleSignedLongKeyWord *clone() const;
  void swap(TypeSpecSimpleSignedLongKeyWord &);
};

class TypeSpecSimpleUnsignedLongKeyWord : public TypeSpecSimple
{
public:

  TypeSpecSimpleUnsignedLongKeyWord(const TypeSpecSimpleUnsignedLongKeyWord &);
  TypeSpecSimpleUnsignedLongKeyWord &operator=(const TypeSpecSimpleUnsignedLongKeyWord &);
  TypeSpecSimpleUnsignedLongKeyWord();
  ~TypeSpecSimpleUnsignedLongKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecSimpleUnsignedLongKeyWord *clone() const;
  void swap(TypeSpecSimpleUnsignedLongKeyWord &);
};

class TypeSpecSimpleSignedLongIntKeyWord : public TypeSpecSimple
{
public:

  TypeSpecSimpleSignedLongIntKeyWord(const TypeSpecSimpleSignedLongIntKeyWord &);
  TypeSpecSimpleSignedLongIntKeyWord &operator=(const TypeSpecSimpleSignedLongIntKeyWord &);
  TypeSpecSimpleSignedLongIntKeyWord();
  ~TypeSpecSimpleSignedLongIntKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecSimpleSignedLongIntKeyWord *clone() const;
  void swap(TypeSpecSimpleSignedLongIntKeyWord &);
};

class TypeSpecSimpleLongIntKeyWord : public TypeSpecSimple
{
public:

  TypeSpecSimpleLongIntKeyWord(const TypeSpecSimpleLongIntKeyWord &);
  TypeSpecSimpleLongIntKeyWord &operator=(const TypeSpecSimpleLongIntKeyWord &);
  TypeSpecSimpleLongIntKeyWord();
  ~TypeSpecSimpleLongIntKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecSimpleLongIntKeyWord *clone() const;
  void swap(TypeSpecSimpleLongIntKeyWord &);
};

class TypeSpecSimpleUnsignedLongIntKeyWord : public TypeSpecSimple
{
public:

  TypeSpecSimpleUnsignedLongIntKeyWord(const TypeSpecSimpleUnsignedLongIntKeyWord &);
  TypeSpecSimpleUnsignedLongIntKeyWord &operator=(const TypeSpecSimpleUnsignedLongIntKeyWord &);
  TypeSpecSimpleUnsignedLongIntKeyWord();
  ~TypeSpecSimpleUnsignedLongIntKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecSimpleUnsignedLongIntKeyWord *clone() const;
  void swap(TypeSpecSimpleUnsignedLongIntKeyWord &);
};

class TypeSpecSimpleLongLongKeyWord : public TypeSpecSimple
{
public:

  TypeSpecSimpleLongLongKeyWord(const TypeSpecSimpleLongLongKeyWord &);
  TypeSpecSimpleLongLongKeyWord &operator=(const TypeSpecSimpleLongLongKeyWord &);
  TypeSpecSimpleLongLongKeyWord();
  ~TypeSpecSimpleLongLongKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecSimpleLongLongKeyWord *clone() const;
  void swap(TypeSpecSimpleLongLongKeyWord &);
};

class TypeSpecSimpleSignedLongLongKeyWord : public TypeSpecSimple
{
public:

  TypeSpecSimpleSignedLongLongKeyWord(const TypeSpecSimpleSignedLongLongKeyWord &);
  TypeSpecSimpleSignedLongLongKeyWord &operator=(const TypeSpecSimpleSignedLongLongKeyWord &);
  TypeSpecSimpleSignedLongLongKeyWord();
  ~TypeSpecSimpleSignedLongLongKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecSimpleSignedLongLongKeyWord *clone() const;
  void swap(TypeSpecSimpleSignedLongLongKeyWord &);
};

class TypeSpecSimpleUnsignedLongLongKeyWord : public TypeSpecSimple
{
public:

  TypeSpecSimpleUnsignedLongLongKeyWord(const TypeSpecSimpleUnsignedLongLongKeyWord &);
  TypeSpecSimpleUnsignedLongLongKeyWord &operator=(const TypeSpecSimpleUnsignedLongLongKeyWord &);
  TypeSpecSimpleUnsignedLongLongKeyWord();
  ~TypeSpecSimpleUnsignedLongLongKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecSimpleUnsignedLongLongKeyWord *clone() const;
  void swap(TypeSpecSimpleUnsignedLongLongKeyWord &);
};

class TypeSpecSimpleLongLongIntKeyWord : public TypeSpecSimple
{
public:

  TypeSpecSimpleLongLongIntKeyWord(const TypeSpecSimpleLongLongIntKeyWord &);
  TypeSpecSimpleLongLongIntKeyWord &operator=(const TypeSpecSimpleLongLongIntKeyWord &);
  TypeSpecSimpleLongLongIntKeyWord();
  ~TypeSpecSimpleLongLongIntKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecSimpleLongLongIntKeyWord *clone() const;
  void swap(TypeSpecSimpleLongLongIntKeyWord &);
};

class TypeSpecSimpleSignedLongLongIntKeyWord : public TypeSpecSimple
{
public:

  TypeSpecSimpleSignedLongLongIntKeyWord(const TypeSpecSimpleSignedLongLongIntKeyWord &);
  TypeSpecSimpleSignedLongLongIntKeyWord &operator=(const TypeSpecSimpleSignedLongLongIntKeyWord &);
  TypeSpecSimpleSignedLongLongIntKeyWord();
  ~TypeSpecSimpleSignedLongLongIntKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecSimpleSignedLongLongIntKeyWord *clone() const;
  void swap(TypeSpecSimpleSignedLongLongIntKeyWord &);
};

class TypeSpecSimpleUnsignedLongLongIntKeyWord : public TypeSpecSimple
{
public:

  TypeSpecSimpleUnsignedLongLongIntKeyWord(const TypeSpecSimpleUnsignedLongLongIntKeyWord &);
  TypeSpecSimpleUnsignedLongLongIntKeyWord &operator=(const TypeSpecSimpleUnsignedLongLongIntKeyWord &);
  TypeSpecSimpleUnsignedLongLongIntKeyWord();
  ~TypeSpecSimpleUnsignedLongLongIntKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecSimpleUnsignedLongLongIntKeyWord *clone() const;
  void swap(TypeSpecSimpleUnsignedLongLongIntKeyWord &);
};

class TypeSpecSimpleFloatKeyWord : public TypeSpecSimple
{
public:

  TypeSpecSimpleFloatKeyWord(const TypeSpecSimpleFloatKeyWord &);
  TypeSpecSimpleFloatKeyWord &operator=(const TypeSpecSimpleFloatKeyWord &);
  TypeSpecSimpleFloatKeyWord();
  ~TypeSpecSimpleFloatKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecSimpleFloatKeyWord *clone() const;
  void swap(TypeSpecSimpleFloatKeyWord &);
};

class TypeSpecSimpleDoubleKeyWord : public TypeSpecSimple
{
public:

  TypeSpecSimpleDoubleKeyWord(const TypeSpecSimpleDoubleKeyWord &);
  TypeSpecSimpleDoubleKeyWord &operator=(const TypeSpecSimpleDoubleKeyWord &);
  TypeSpecSimpleDoubleKeyWord();
  ~TypeSpecSimpleDoubleKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecSimpleDoubleKeyWord *clone() const;
  void swap(TypeSpecSimpleDoubleKeyWord &);
};

class TypeSpecSimpleLongDoubleKeyWord : public TypeSpecSimple
{
public:

  TypeSpecSimpleLongDoubleKeyWord(const TypeSpecSimpleLongDoubleKeyWord &);
  TypeSpecSimpleLongDoubleKeyWord &operator=(const TypeSpecSimpleLongDoubleKeyWord &);
  TypeSpecSimpleLongDoubleKeyWord();
  ~TypeSpecSimpleLongDoubleKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecSimpleLongDoubleKeyWord *clone() const;
  void swap(TypeSpecSimpleLongDoubleKeyWord &);
};

class AnAnnotation : public LogicPTreeAnnot
{
public:
  Annotation *annotation_;

  AnAnnotation(const AnAnnotation &);
  AnAnnotation &operator=(const AnAnnotation &);
  AnAnnotation(Annotation *p1);
  ~AnAnnotation();
  virtual void accept(Visitor *v);
  virtual AnAnnotation *clone() const;
  void swap(AnAnnotation &);
};

class LoopAnnotation : public Annotation
{
public:
  LoopAnnotStack *loopannotstack_;

  LoopAnnotation(const LoopAnnotation &);
  LoopAnnotation &operator=(const LoopAnnotation &);
  LoopAnnotation(LoopAnnotStack *p1);
  ~LoopAnnotation();
  virtual void accept(Visitor *v);
  virtual LoopAnnotation *clone() const;
  void swap(LoopAnnotation &);
};

class LoopAnnotStackInvariant : public LoopAnnotStack
{
public:
  LoopInvariant *loopinvariant_;
  LoopAnnotOpt *loopannotopt_;

  LoopAnnotStackInvariant(const LoopAnnotStackInvariant &);
  LoopAnnotStackInvariant &operator=(const LoopAnnotStackInvariant &);
  LoopAnnotStackInvariant(LoopInvariant *p1, LoopAnnotOpt *p2);
  ~LoopAnnotStackInvariant();
  virtual void accept(Visitor *v);
  virtual LoopAnnotStackInvariant *clone() const;
  void swap(LoopAnnotStackInvariant &);
};

class LoopAnnotStackEffects : public LoopAnnotStack
{
public:
  LoopEffects *loopeffects_;
  LoopAnnotOpt *loopannotopt_;

  LoopAnnotStackEffects(const LoopAnnotStackEffects &);
  LoopAnnotStackEffects &operator=(const LoopAnnotStackEffects &);
  LoopAnnotStackEffects(LoopEffects *p1, LoopAnnotOpt *p2);
  ~LoopAnnotStackEffects();
  virtual void accept(Visitor *v);
  virtual LoopAnnotStackEffects *clone() const;
  void swap(LoopAnnotStackEffects &);
};

class LoopAnnotStackAllocation : public LoopAnnotStack
{
public:
  LoopAllocation *loopallocation_;
  LoopAnnotOpt *loopannotopt_;

  LoopAnnotStackAllocation(const LoopAnnotStackAllocation &);
  LoopAnnotStackAllocation &operator=(const LoopAnnotStackAllocation &);
  LoopAnnotStackAllocation(LoopAllocation *p1, LoopAnnotOpt *p2);
  ~LoopAnnotStackAllocation();
  virtual void accept(Visitor *v);
  virtual LoopAnnotStackAllocation *clone() const;
  void swap(LoopAnnotStackAllocation &);
};

class LoopAnnotStackVariant : public LoopAnnotStack
{
public:
  LoopVariant *loopvariant_;
  LoopAnnotOpt *loopannotopt_;

  LoopAnnotStackVariant(const LoopAnnotStackVariant &);
  LoopAnnotStackVariant &operator=(const LoopAnnotStackVariant &);
  LoopAnnotStackVariant(LoopVariant *p1, LoopAnnotOpt *p2);
  ~LoopAnnotStackVariant();
  virtual void accept(Visitor *v);
  virtual LoopAnnotStackVariant *clone() const;
  void swap(LoopAnnotStackVariant &);
};

class NoLoopAnnot : public LoopAnnotOpt
{
public:

  NoLoopAnnot(const NoLoopAnnot &);
  NoLoopAnnot &operator=(const NoLoopAnnot &);
  NoLoopAnnot();
  ~NoLoopAnnot();
  virtual void accept(Visitor *v);
  virtual NoLoopAnnot *clone() const;
  void swap(NoLoopAnnot &);
};

class SomeLoopAnnot : public LoopAnnotOpt
{
public:
  LoopAnnotStack *loopannotstack_;

  SomeLoopAnnot(const SomeLoopAnnot &);
  SomeLoopAnnot &operator=(const SomeLoopAnnot &);
  SomeLoopAnnot(LoopAnnotStack *p1);
  ~SomeLoopAnnot();
  virtual void accept(Visitor *v);
  virtual SomeLoopAnnot *clone() const;
  void swap(SomeLoopAnnot &);
};

class SimpleLoopInvariant : public LoopInvariant
{
public:
  Lexpr *lexpr_;

  SimpleLoopInvariant(const SimpleLoopInvariant &);
  SimpleLoopInvariant &operator=(const SimpleLoopInvariant &);
  SimpleLoopInvariant(Lexpr *p1);
  ~SimpleLoopInvariant();
  virtual void accept(Visitor *v);
  virtual SimpleLoopInvariant *clone() const;
  void swap(SimpleLoopInvariant &);
};

class CheckLoopInvariant : public LoopInvariant
{
public:
  Lexpr *lexpr_;

  CheckLoopInvariant(const CheckLoopInvariant &);
  CheckLoopInvariant &operator=(const CheckLoopInvariant &);
  CheckLoopInvariant(Lexpr *p1);
  ~CheckLoopInvariant();
  virtual void accept(Visitor *v);
  virtual CheckLoopInvariant *clone() const;
  void swap(CheckLoopInvariant &);
};

class AdmitLoopInvariant : public LoopInvariant
{
public:
  Lexpr *lexpr_;

  AdmitLoopInvariant(const AdmitLoopInvariant &);
  AdmitLoopInvariant &operator=(const AdmitLoopInvariant &);
  AdmitLoopInvariant(Lexpr *p1);
  ~AdmitLoopInvariant();
  virtual void accept(Visitor *v);
  virtual AdmitLoopInvariant *clone() const;
  void swap(AdmitLoopInvariant &);
};

class SimpleLoopAllocation : public LoopAllocation
{
public:
  Allocation *allocation_;

  SimpleLoopAllocation(const SimpleLoopAllocation &);
  SimpleLoopAllocation &operator=(const SimpleLoopAllocation &);
  SimpleLoopAllocation(Allocation *p1);
  ~SimpleLoopAllocation();
  virtual void accept(Visitor *v);
  virtual SimpleLoopAllocation *clone() const;
  void swap(SimpleLoopAllocation &);
};

class AllocatesZones : public Allocation
{
public:
  Zones *zones_;

  AllocatesZones(const AllocatesZones &);
  AllocatesZones &operator=(const AllocatesZones &);
  AllocatesZones(Zones *p1);
  ~AllocatesZones();
  virtual void accept(Visitor *v);
  virtual AllocatesZones *clone() const;
  void swap(AllocatesZones &);
};

class FreesZones : public Allocation
{
public:
  Zones *zones_;

  FreesZones(const FreesZones &);
  FreesZones &operator=(const FreesZones &);
  FreesZones(Zones *p1);
  ~FreesZones();
  virtual void accept(Visitor *v);
  virtual FreesZones *clone() const;
  void swap(FreesZones &);
};

class SimpleLoopVariant : public LoopVariant
{
public:
  Variant *variant_;

  SimpleLoopVariant(const SimpleLoopVariant &);
  SimpleLoopVariant &operator=(const SimpleLoopVariant &);
  SimpleLoopVariant(Variant *p1);
  ~SimpleLoopVariant();
  virtual void accept(Visitor *v);
  virtual SimpleLoopVariant *clone() const;
  void swap(SimpleLoopVariant &);
};

class LoopAssigns : public LoopEffects
{
public:
  Assigns *assigns_;

  LoopAssigns(const LoopAssigns &);
  LoopAssigns &operator=(const LoopAssigns &);
  LoopAssigns(Assigns *p1);
  ~LoopAssigns();
  virtual void accept(Visitor *v);
  virtual LoopAssigns *clone() const;
  void swap(LoopAssigns &);
};

class ForVariant : public Variant
{
public:
  Lexpr *lexpr_;
  AnyIdentifier *anyidentifier_;

  ForVariant(const ForVariant &);
  ForVariant &operator=(const ForVariant &);
  ForVariant(Lexpr *p1, AnyIdentifier *p2);
  ~ForVariant();
  virtual void accept(Visitor *v);
  virtual ForVariant *clone() const;
  void swap(ForVariant &);
};

class LexprVariant : public Variant
{
public:
  Lexpr *lexpr_;

  LexprVariant(const LexprVariant &);
  LexprVariant &operator=(const LexprVariant &);
  LexprVariant(Lexpr *p1);
  ~LexprVariant();
  virtual void accept(Visitor *v);
  virtual LexprVariant *clone() const;
  void swap(LexprVariant &);
};



class ListLexpr : public Visitable, public std::vector<Lexpr*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListLexpr *clone() const;
};

ListLexpr* consListLexpr(Lexpr* x, ListLexpr* xs);

class ListLexprRelInner : public Visitable, public std::vector<LexprRelInner*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListLexprRelInner *clone() const;
};

ListLexprRelInner* consListLexprRelInner(LexprRelInner* x, ListLexprRelInner* xs);

class ListBindersReentrance : public Visitable, public std::vector<BindersReentrance*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListBindersReentrance *clone() const;
};

ListBindersReentrance* consListBindersReentrance(BindersReentrance* x, ListBindersReentrance* xs);

class ListStars : public Visitable, public std::vector<Stars*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListStars *clone() const;
};

ListStars* consListStars(Stars* x, ListStars* xs);

class ListLabelName : public Visitable, public std::vector<LabelName*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListLabelName *clone() const;
};

ListLabelName* consListLabelName(LabelName* x, ListLabelName* xs);

class ListFullIdentifier : public Visitable, public std::vector<FullIdentifier*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListFullIdentifier *clone() const;
};

ListFullIdentifier* consListFullIdentifier(FullIdentifier* x, ListFullIdentifier* xs);




}
#endif
