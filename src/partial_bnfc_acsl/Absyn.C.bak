/* File generated by the BNF Converter (bnfc 2.9.4.1). */

//C++ Abstract Syntax Implementation.
#include <algorithm>
#include <string>
#include <vector>
#include "Absyn.H"
namespace partial_bnfc_acsl
{
/********************   AnnotProgram    ********************/
AnnotProgram::AnnotProgram(Annot *p1)
{
  annot_ = p1;

}

AnnotProgram::AnnotProgram(const AnnotProgram & other)
{
  annot_ = other.annot_->clone();

}

AnnotProgram &AnnotProgram::operator=(const AnnotProgram & other)
{
  AnnotProgram tmp(other);
  swap(tmp);
  return *this;
}

void AnnotProgram::swap(AnnotProgram & other)
{
  std::swap(annot_, other.annot_);

}

AnnotProgram::~AnnotProgram()
{
  delete(annot_);

}

void AnnotProgram::accept(Visitor *v)
{
  v->visitAnnotProgram(this);
}

AnnotProgram *AnnotProgram::clone() const
{
  return new AnnotProgram(*this);
}



/********************   AnnotationProgram    ********************/
AnnotationProgram::AnnotationProgram(LogicPTreeAnnot *p1)
{
  logicptreeannot_ = p1;

}

AnnotationProgram::AnnotationProgram(const AnnotationProgram & other)
{
  logicptreeannot_ = other.logicptreeannot_->clone();

}

AnnotationProgram &AnnotationProgram::operator=(const AnnotationProgram & other)
{
  AnnotationProgram tmp(other);
  swap(tmp);
  return *this;
}

void AnnotationProgram::swap(AnnotationProgram & other)
{
  std::swap(logicptreeannot_, other.logicptreeannot_);

}

AnnotationProgram::~AnnotationProgram()
{
  delete(logicptreeannot_);

}

void AnnotationProgram::accept(Visitor *v)
{
  v->visitAnnotationProgram(this);
}

AnnotationProgram *AnnotationProgram::clone() const
{
  return new AnnotationProgram(*this);
}



/********************   CodeAnnot    ********************/
CodeAnnot::CodeAnnot(Code_Annot *p1)
{
  code_annot_ = p1;

}

CodeAnnot::CodeAnnot(const CodeAnnot & other)
{
  code_annot_ = other.code_annot_->clone();

}

CodeAnnot &CodeAnnot::operator=(const CodeAnnot & other)
{
  CodeAnnot tmp(other);
  swap(tmp);
  return *this;
}

void CodeAnnot::swap(CodeAnnot & other)
{
  std::swap(code_annot_, other.code_annot_);

}

CodeAnnot::~CodeAnnot()
{
  delete(code_annot_);

}

void CodeAnnot::accept(Visitor *v)
{
  v->visitCodeAnnot(this);
}

CodeAnnot *CodeAnnot::clone() const
{
  return new CodeAnnot(*this);
}



/********************   CodeAnnotContract    ********************/
CodeAnnotContract::CodeAnnotContract(Contract *p1)
{
  contract_ = p1;

}

CodeAnnotContract::CodeAnnotContract(const CodeAnnotContract & other)
{
  contract_ = other.contract_->clone();

}

CodeAnnotContract &CodeAnnotContract::operator=(const CodeAnnotContract & other)
{
  CodeAnnotContract tmp(other);
  swap(tmp);
  return *this;
}

void CodeAnnotContract::swap(CodeAnnotContract & other)
{
  std::swap(contract_, other.contract_);

}

CodeAnnotContract::~CodeAnnotContract()
{
  delete(contract_);

}

void CodeAnnotContract::accept(Visitor *v)
{
  v->visitCodeAnnotContract(this);
}

CodeAnnotContract *CodeAnnotContract::clone() const
{
  return new CodeAnnotContract(*this);
}



/********************   SimpleContract    ********************/
SimpleContract::SimpleContract(Requires *p1, Terminates *p2, Decreases *p3, SimpleClauses *p4, Behaviors *p5, CompleteOrDisjoint *p6)
{
  requires_ = p1;
  terminates_ = p2;
  decreases_ = p3;
  simpleclauses_ = p4;
  behaviors_ = p5;
  completeordisjoint_ = p6;

}

SimpleContract::SimpleContract(const SimpleContract & other)
{
  requires_ = other.requires_->clone();
  terminates_ = other.terminates_->clone();
  decreases_ = other.decreases_->clone();
  simpleclauses_ = other.simpleclauses_->clone();
  behaviors_ = other.behaviors_->clone();
  completeordisjoint_ = other.completeordisjoint_->clone();

}

SimpleContract &SimpleContract::operator=(const SimpleContract & other)
{
  SimpleContract tmp(other);
  swap(tmp);
  return *this;
}

void SimpleContract::swap(SimpleContract & other)
{
  std::swap(requires_, other.requires_);
  std::swap(terminates_, other.terminates_);
  std::swap(decreases_, other.decreases_);
  std::swap(simpleclauses_, other.simpleclauses_);
  std::swap(behaviors_, other.behaviors_);
  std::swap(completeordisjoint_, other.completeordisjoint_);

}

SimpleContract::~SimpleContract()
{
  delete(requires_);
  delete(terminates_);
  delete(decreases_);
  delete(simpleclauses_);
  delete(behaviors_);
  delete(completeordisjoint_);

}

void SimpleContract::accept(Visitor *v)
{
  v->visitSimpleContract(this);
}

SimpleContract *SimpleContract::clone() const
{
  return new SimpleContract(*this);
}



/********************   ClausesRequiresContract    ********************/
ClausesRequiresContract::ClausesRequiresContract(Requires *p1, Terminates *p2, Decreases *p3, NESimpleClauses *p4)
{
  requires_ = p1;
  terminates_ = p2;
  decreases_ = p3;
  nesimpleclauses_ = p4;

}

ClausesRequiresContract::ClausesRequiresContract(const ClausesRequiresContract & other)
{
  requires_ = other.requires_->clone();
  terminates_ = other.terminates_->clone();
  decreases_ = other.decreases_->clone();
  nesimpleclauses_ = other.nesimpleclauses_->clone();

}

ClausesRequiresContract &ClausesRequiresContract::operator=(const ClausesRequiresContract & other)
{
  ClausesRequiresContract tmp(other);
  swap(tmp);
  return *this;
}

void ClausesRequiresContract::swap(ClausesRequiresContract & other)
{
  std::swap(requires_, other.requires_);
  std::swap(terminates_, other.terminates_);
  std::swap(decreases_, other.decreases_);
  std::swap(nesimpleclauses_, other.nesimpleclauses_);

}

ClausesRequiresContract::~ClausesRequiresContract()
{
  delete(requires_);
  delete(terminates_);
  delete(decreases_);
  delete(nesimpleclauses_);

}

void ClausesRequiresContract::accept(Visitor *v)
{
  v->visitClausesRequiresContract(this);
}

ClausesRequiresContract *ClausesRequiresContract::clone() const
{
  return new ClausesRequiresContract(*this);
}



/********************   ClausesTerminatesContract    ********************/
ClausesTerminatesContract::ClausesTerminatesContract(Requires *p1, Terminates *p2, Decreases *p3, NESimpleClauses *p4)
{
  requires_ = p1;
  terminates_ = p2;
  decreases_ = p3;
  nesimpleclauses_ = p4;

}

ClausesTerminatesContract::ClausesTerminatesContract(const ClausesTerminatesContract & other)
{
  requires_ = other.requires_->clone();
  terminates_ = other.terminates_->clone();
  decreases_ = other.decreases_->clone();
  nesimpleclauses_ = other.nesimpleclauses_->clone();

}

ClausesTerminatesContract &ClausesTerminatesContract::operator=(const ClausesTerminatesContract & other)
{
  ClausesTerminatesContract tmp(other);
  swap(tmp);
  return *this;
}

void ClausesTerminatesContract::swap(ClausesTerminatesContract & other)
{
  std::swap(requires_, other.requires_);
  std::swap(terminates_, other.terminates_);
  std::swap(decreases_, other.decreases_);
  std::swap(nesimpleclauses_, other.nesimpleclauses_);

}

ClausesTerminatesContract::~ClausesTerminatesContract()
{
  delete(requires_);
  delete(terminates_);
  delete(decreases_);
  delete(nesimpleclauses_);

}

void ClausesTerminatesContract::accept(Visitor *v)
{
  v->visitClausesTerminatesContract(this);
}

ClausesTerminatesContract *ClausesTerminatesContract::clone() const
{
  return new ClausesTerminatesContract(*this);
}



/********************   ClausesDecreasesContract    ********************/
ClausesDecreasesContract::ClausesDecreasesContract(Requires *p1, Terminates *p2, Decreases *p3, NESimpleClauses *p4)
{
  requires_ = p1;
  terminates_ = p2;
  decreases_ = p3;
  nesimpleclauses_ = p4;

}

ClausesDecreasesContract::ClausesDecreasesContract(const ClausesDecreasesContract & other)
{
  requires_ = other.requires_->clone();
  terminates_ = other.terminates_->clone();
  decreases_ = other.decreases_->clone();
  nesimpleclauses_ = other.nesimpleclauses_->clone();

}

ClausesDecreasesContract &ClausesDecreasesContract::operator=(const ClausesDecreasesContract & other)
{
  ClausesDecreasesContract tmp(other);
  swap(tmp);
  return *this;
}

void ClausesDecreasesContract::swap(ClausesDecreasesContract & other)
{
  std::swap(requires_, other.requires_);
  std::swap(terminates_, other.terminates_);
  std::swap(decreases_, other.decreases_);
  std::swap(nesimpleclauses_, other.nesimpleclauses_);

}

ClausesDecreasesContract::~ClausesDecreasesContract()
{
  delete(requires_);
  delete(terminates_);
  delete(decreases_);
  delete(nesimpleclauses_);

}

void ClausesDecreasesContract::accept(Visitor *v)
{
  v->visitClausesDecreasesContract(this);
}

ClausesDecreasesContract *ClausesDecreasesContract::clone() const
{
  return new ClausesDecreasesContract(*this);
}



/********************   NoRequires    ********************/
NoRequires::NoRequires()
{

}

NoRequires::NoRequires(const NoRequires & other)
{

}

NoRequires &NoRequires::operator=(const NoRequires & other)
{
  NoRequires tmp(other);
  swap(tmp);
  return *this;
}

void NoRequires::swap(NoRequires & other)
{

}

NoRequires::~NoRequires()
{

}

void NoRequires::accept(Visitor *v)
{
  v->visitNoRequires(this);
}

NoRequires *NoRequires::clone() const
{
  return new NoRequires(*this);
}



/********************   SomeRequires    ********************/
SomeRequires::SomeRequires(NERequires *p1)
{
  nerequires_ = p1;

}

SomeRequires::SomeRequires(const SomeRequires & other)
{
  nerequires_ = other.nerequires_->clone();

}

SomeRequires &SomeRequires::operator=(const SomeRequires & other)
{
  SomeRequires tmp(other);
  swap(tmp);
  return *this;
}

void SomeRequires::swap(SomeRequires & other)
{
  std::swap(nerequires_, other.nerequires_);

}

SomeRequires::~SomeRequires()
{
  delete(nerequires_);

}

void SomeRequires::accept(Visitor *v)
{
  v->visitSomeRequires(this);
}

SomeRequires *SomeRequires::clone() const
{
  return new SomeRequires(*this);
}



/********************   SimpleRequires    ********************/
SimpleRequires::SimpleRequires(Lexpr *p1, Requires *p2)
{
  lexpr_ = p1;
  requires_ = p2;

}

SimpleRequires::SimpleRequires(const SimpleRequires & other)
{
  lexpr_ = other.lexpr_->clone();
  requires_ = other.requires_->clone();

}

SimpleRequires &SimpleRequires::operator=(const SimpleRequires & other)
{
  SimpleRequires tmp(other);
  swap(tmp);
  return *this;
}

void SimpleRequires::swap(SimpleRequires & other)
{
  std::swap(lexpr_, other.lexpr_);
  std::swap(requires_, other.requires_);

}

SimpleRequires::~SimpleRequires()
{
  delete(lexpr_);
  delete(requires_);

}

void SimpleRequires::accept(Visitor *v)
{
  v->visitSimpleRequires(this);
}

SimpleRequires *SimpleRequires::clone() const
{
  return new SimpleRequires(*this);
}



/********************   CheckRequires    ********************/
CheckRequires::CheckRequires(Lexpr *p1, Requires *p2)
{
  lexpr_ = p1;
  requires_ = p2;

}

CheckRequires::CheckRequires(const CheckRequires & other)
{
  lexpr_ = other.lexpr_->clone();
  requires_ = other.requires_->clone();

}

CheckRequires &CheckRequires::operator=(const CheckRequires & other)
{
  CheckRequires tmp(other);
  swap(tmp);
  return *this;
}

void CheckRequires::swap(CheckRequires & other)
{
  std::swap(lexpr_, other.lexpr_);
  std::swap(requires_, other.requires_);

}

CheckRequires::~CheckRequires()
{
  delete(lexpr_);
  delete(requires_);

}

void CheckRequires::accept(Visitor *v)
{
  v->visitCheckRequires(this);
}

CheckRequires *CheckRequires::clone() const
{
  return new CheckRequires(*this);
}



/********************   AdimtRequires    ********************/
AdimtRequires::AdimtRequires(Lexpr *p1, Requires *p2)
{
  lexpr_ = p1;
  requires_ = p2;

}

AdimtRequires::AdimtRequires(const AdimtRequires & other)
{
  lexpr_ = other.lexpr_->clone();
  requires_ = other.requires_->clone();

}

AdimtRequires &AdimtRequires::operator=(const AdimtRequires & other)
{
  AdimtRequires tmp(other);
  swap(tmp);
  return *this;
}

void AdimtRequires::swap(AdimtRequires & other)
{
  std::swap(lexpr_, other.lexpr_);
  std::swap(requires_, other.requires_);

}

AdimtRequires::~AdimtRequires()
{
  delete(lexpr_);
  delete(requires_);

}

void AdimtRequires::accept(Visitor *v)
{
  v->visitAdimtRequires(this);
}

AdimtRequires *AdimtRequires::clone() const
{
  return new AdimtRequires(*this);
}



/********************   NoTerminate    ********************/
NoTerminate::NoTerminate()
{

}

NoTerminate::NoTerminate(const NoTerminate & other)
{

}

NoTerminate &NoTerminate::operator=(const NoTerminate & other)
{
  NoTerminate tmp(other);
  swap(tmp);
  return *this;
}

void NoTerminate::swap(NoTerminate & other)
{

}

NoTerminate::~NoTerminate()
{

}

void NoTerminate::accept(Visitor *v)
{
  v->visitNoTerminate(this);
}

NoTerminate *NoTerminate::clone() const
{
  return new NoTerminate(*this);
}



/********************   NoDecreases    ********************/
NoDecreases::NoDecreases()
{

}

NoDecreases::NoDecreases(const NoDecreases & other)
{

}

NoDecreases &NoDecreases::operator=(const NoDecreases & other)
{
  NoDecreases tmp(other);
  swap(tmp);
  return *this;
}

void NoDecreases::swap(NoDecreases & other)
{

}

NoDecreases::~NoDecreases()
{

}

void NoDecreases::accept(Visitor *v)
{
  v->visitNoDecreases(this);
}

NoDecreases *NoDecreases::clone() const
{
  return new NoDecreases(*this);
}



/********************   NoSimpleClauses    ********************/
NoSimpleClauses::NoSimpleClauses()
{

}

NoSimpleClauses::NoSimpleClauses(const NoSimpleClauses & other)
{

}

NoSimpleClauses &NoSimpleClauses::operator=(const NoSimpleClauses & other)
{
  NoSimpleClauses tmp(other);
  swap(tmp);
  return *this;
}

void NoSimpleClauses::swap(NoSimpleClauses & other)
{

}

NoSimpleClauses::~NoSimpleClauses()
{

}

void NoSimpleClauses::accept(Visitor *v)
{
  v->visitNoSimpleClauses(this);
}

NoSimpleClauses *NoSimpleClauses::clone() const
{
  return new NoSimpleClauses(*this);
}



/********************   SomeSimpleClauses    ********************/
SomeSimpleClauses::SomeSimpleClauses(NESimpleClauses *p1)
{
  nesimpleclauses_ = p1;

}

SomeSimpleClauses::SomeSimpleClauses(const SomeSimpleClauses & other)
{
  nesimpleclauses_ = other.nesimpleclauses_->clone();

}

SomeSimpleClauses &SomeSimpleClauses::operator=(const SomeSimpleClauses & other)
{
  SomeSimpleClauses tmp(other);
  swap(tmp);
  return *this;
}

void SomeSimpleClauses::swap(SomeSimpleClauses & other)
{
  std::swap(nesimpleclauses_, other.nesimpleclauses_);

}

SomeSimpleClauses::~SomeSimpleClauses()
{
  delete(nesimpleclauses_);

}

void SomeSimpleClauses::accept(Visitor *v)
{
  v->visitSomeSimpleClauses(this);
}

SomeSimpleClauses *SomeSimpleClauses::clone() const
{
  return new SomeSimpleClauses(*this);
}



/********************   PostCondSimpleClauses    ********************/
PostCondSimpleClauses::PostCondSimpleClauses(PostCond *p1, Lexpr *p2, SimpleClauses *p3)
{
  postcond_ = p1;
  lexpr_ = p2;
  simpleclauses_ = p3;

}

PostCondSimpleClauses::PostCondSimpleClauses(const PostCondSimpleClauses & other)
{
  postcond_ = other.postcond_->clone();
  lexpr_ = other.lexpr_->clone();
  simpleclauses_ = other.simpleclauses_->clone();

}

PostCondSimpleClauses &PostCondSimpleClauses::operator=(const PostCondSimpleClauses & other)
{
  PostCondSimpleClauses tmp(other);
  swap(tmp);
  return *this;
}

void PostCondSimpleClauses::swap(PostCondSimpleClauses & other)
{
  std::swap(postcond_, other.postcond_);
  std::swap(lexpr_, other.lexpr_);
  std::swap(simpleclauses_, other.simpleclauses_);

}

PostCondSimpleClauses::~PostCondSimpleClauses()
{
  delete(postcond_);
  delete(lexpr_);
  delete(simpleclauses_);

}

void PostCondSimpleClauses::accept(Visitor *v)
{
  v->visitPostCondSimpleClauses(this);
}

PostCondSimpleClauses *PostCondSimpleClauses::clone() const
{
  return new PostCondSimpleClauses(*this);
}



/********************   AssignsSimpleClauses    ********************/
AssignsSimpleClauses::AssignsSimpleClauses(Assigns *p1, SimpleClauses *p2)
{
  assigns_ = p1;
  simpleclauses_ = p2;

}

AssignsSimpleClauses::AssignsSimpleClauses(const AssignsSimpleClauses & other)
{
  assigns_ = other.assigns_->clone();
  simpleclauses_ = other.simpleclauses_->clone();

}

AssignsSimpleClauses &AssignsSimpleClauses::operator=(const AssignsSimpleClauses & other)
{
  AssignsSimpleClauses tmp(other);
  swap(tmp);
  return *this;
}

void AssignsSimpleClauses::swap(AssignsSimpleClauses & other)
{
  std::swap(assigns_, other.assigns_);
  std::swap(simpleclauses_, other.simpleclauses_);

}

AssignsSimpleClauses::~AssignsSimpleClauses()
{
  delete(assigns_);
  delete(simpleclauses_);

}

void AssignsSimpleClauses::accept(Visitor *v)
{
  v->visitAssignsSimpleClauses(this);
}

AssignsSimpleClauses *AssignsSimpleClauses::clone() const
{
  return new AssignsSimpleClauses(*this);
}



/********************   AssignZone    ********************/
AssignZone::AssignZone(Zones *p1)
{
  zones_ = p1;

}

AssignZone::AssignZone(const AssignZone & other)
{
  zones_ = other.zones_->clone();

}

AssignZone &AssignZone::operator=(const AssignZone & other)
{
  AssignZone tmp(other);
  swap(tmp);
  return *this;
}

void AssignZone::swap(AssignZone & other)
{
  std::swap(zones_, other.zones_);

}

AssignZone::~AssignZone()
{
  delete(zones_);

}

void AssignZone::accept(Visitor *v)
{
  v->visitAssignZone(this);
}

AssignZone *AssignZone::clone() const
{
  return new AssignZone(*this);
}



/********************   AssignZoneFromZone    ********************/
AssignZoneFromZone::AssignZoneFromZone(ListLexpr *p1, Zones *p2)
{
  listlexpr_ = p1;
  zones_ = p2;

}

AssignZoneFromZone::AssignZoneFromZone(const AssignZoneFromZone & other)
{
  listlexpr_ = other.listlexpr_->clone();
  zones_ = other.zones_->clone();

}

AssignZoneFromZone &AssignZoneFromZone::operator=(const AssignZoneFromZone & other)
{
  AssignZoneFromZone tmp(other);
  swap(tmp);
  return *this;
}

void AssignZoneFromZone::swap(AssignZoneFromZone & other)
{
  std::swap(listlexpr_, other.listlexpr_);
  std::swap(zones_, other.zones_);

}

AssignZoneFromZone::~AssignZoneFromZone()
{
  delete(listlexpr_);
  delete(zones_);

}

void AssignZoneFromZone::accept(Visitor *v)
{
  v->visitAssignZoneFromZone(this);
}

AssignZoneFromZone *AssignZoneFromZone::clone() const
{
  return new AssignZoneFromZone(*this);
}



/********************   SomeZone    ********************/
SomeZone::SomeZone(ListLexpr *p1)
{
  listlexpr_ = p1;

}

SomeZone::SomeZone(const SomeZone & other)
{
  listlexpr_ = other.listlexpr_->clone();

}

SomeZone &SomeZone::operator=(const SomeZone & other)
{
  SomeZone tmp(other);
  swap(tmp);
  return *this;
}

void SomeZone::swap(SomeZone & other)
{
  std::swap(listlexpr_, other.listlexpr_);

}

SomeZone::~SomeZone()
{
  delete(listlexpr_);

}

void SomeZone::accept(Visitor *v)
{
  v->visitSomeZone(this);
}

SomeZone *SomeZone::clone() const
{
  return new SomeZone(*this);
}



/********************   NoZone    ********************/
NoZone::NoZone()
{

}

NoZone::NoZone(const NoZone & other)
{

}

NoZone &NoZone::operator=(const NoZone & other)
{
  NoZone tmp(other);
  swap(tmp);
  return *this;
}

void NoZone::swap(NoZone & other)
{

}

NoZone::~NoZone()
{

}

void NoZone::accept(Visitor *v)
{
  v->visitNoZone(this);
}

NoZone *NoZone::clone() const
{
  return new NoZone(*this);
}



/********************   NoBehaviors    ********************/
NoBehaviors::NoBehaviors()
{

}

NoBehaviors::NoBehaviors(const NoBehaviors & other)
{

}

NoBehaviors &NoBehaviors::operator=(const NoBehaviors & other)
{
  NoBehaviors tmp(other);
  swap(tmp);
  return *this;
}

void NoBehaviors::swap(NoBehaviors & other)
{

}

NoBehaviors::~NoBehaviors()
{

}

void NoBehaviors::accept(Visitor *v)
{
  v->visitNoBehaviors(this);
}

NoBehaviors *NoBehaviors::clone() const
{
  return new NoBehaviors(*this);
}



/********************   NoComplDisj    ********************/
NoComplDisj::NoComplDisj()
{

}

NoComplDisj::NoComplDisj(const NoComplDisj & other)
{

}

NoComplDisj &NoComplDisj::operator=(const NoComplDisj & other)
{
  NoComplDisj tmp(other);
  swap(tmp);
  return *this;
}

void NoComplDisj::swap(NoComplDisj & other)
{

}

NoComplDisj::~NoComplDisj()
{

}

void NoComplDisj::accept(Visitor *v)
{
  v->visitNoComplDisj(this);
}

NoComplDisj *NoComplDisj::clone() const
{
  return new NoComplDisj(*this);
}



/********************   ImplLexpr    ********************/
ImplLexpr::ImplLexpr(Lexpr *p1, Lexpr *p2)
{
  lexpr_1 = p1;
  lexpr_2 = p2;

}

ImplLexpr::ImplLexpr(const ImplLexpr & other)
{
  lexpr_1 = other.lexpr_1->clone();
  lexpr_2 = other.lexpr_2->clone();

}

ImplLexpr &ImplLexpr::operator=(const ImplLexpr & other)
{
  ImplLexpr tmp(other);
  swap(tmp);
  return *this;
}

void ImplLexpr::swap(ImplLexpr & other)
{
  std::swap(lexpr_1, other.lexpr_1);
  std::swap(lexpr_2, other.lexpr_2);

}

ImplLexpr::~ImplLexpr()
{
  delete(lexpr_1);
  delete(lexpr_2);

}

void ImplLexpr::accept(Visitor *v)
{
  v->visitImplLexpr(this);
}

ImplLexpr *ImplLexpr::clone() const
{
  return new ImplLexpr(*this);
}



/********************   IffLexpr    ********************/
IffLexpr::IffLexpr(Lexpr *p1, Lexpr *p2)
{
  lexpr_1 = p1;
  lexpr_2 = p2;

}

IffLexpr::IffLexpr(const IffLexpr & other)
{
  lexpr_1 = other.lexpr_1->clone();
  lexpr_2 = other.lexpr_2->clone();

}

IffLexpr &IffLexpr::operator=(const IffLexpr & other)
{
  IffLexpr tmp(other);
  swap(tmp);
  return *this;
}

void IffLexpr::swap(IffLexpr & other)
{
  std::swap(lexpr_1, other.lexpr_1);
  std::swap(lexpr_2, other.lexpr_2);

}

IffLexpr::~IffLexpr()
{
  delete(lexpr_1);
  delete(lexpr_2);

}

void IffLexpr::accept(Visitor *v)
{
  v->visitIffLexpr(this);
}

IffLexpr *IffLexpr::clone() const
{
  return new IffLexpr(*this);
}



/********************   OrLexpr    ********************/
OrLexpr::OrLexpr(Lexpr *p1, Lexpr *p2)
{
  lexpr_1 = p1;
  lexpr_2 = p2;

}

OrLexpr::OrLexpr(const OrLexpr & other)
{
  lexpr_1 = other.lexpr_1->clone();
  lexpr_2 = other.lexpr_2->clone();

}

OrLexpr &OrLexpr::operator=(const OrLexpr & other)
{
  OrLexpr tmp(other);
  swap(tmp);
  return *this;
}

void OrLexpr::swap(OrLexpr & other)
{
  std::swap(lexpr_1, other.lexpr_1);
  std::swap(lexpr_2, other.lexpr_2);

}

OrLexpr::~OrLexpr()
{
  delete(lexpr_1);
  delete(lexpr_2);

}

void OrLexpr::accept(Visitor *v)
{
  v->visitOrLexpr(this);
}

OrLexpr *OrLexpr::clone() const
{
  return new OrLexpr(*this);
}



/********************   AndLexpr    ********************/
AndLexpr::AndLexpr(Lexpr *p1, Lexpr *p2)
{
  lexpr_1 = p1;
  lexpr_2 = p2;

}

AndLexpr::AndLexpr(const AndLexpr & other)
{
  lexpr_1 = other.lexpr_1->clone();
  lexpr_2 = other.lexpr_2->clone();

}

AndLexpr &AndLexpr::operator=(const AndLexpr & other)
{
  AndLexpr tmp(other);
  swap(tmp);
  return *this;
}

void AndLexpr::swap(AndLexpr & other)
{
  std::swap(lexpr_1, other.lexpr_1);
  std::swap(lexpr_2, other.lexpr_2);

}

AndLexpr::~AndLexpr()
{
  delete(lexpr_1);
  delete(lexpr_2);

}

void AndLexpr::accept(Visitor *v)
{
  v->visitAndLexpr(this);
}

AndLexpr *AndLexpr::clone() const
{
  return new AndLexpr(*this);
}



/********************   HatHatLexpr    ********************/
HatHatLexpr::HatHatLexpr(Lexpr *p1, Lexpr *p2)
{
  lexpr_1 = p1;
  lexpr_2 = p2;

}

HatHatLexpr::HatHatLexpr(const HatHatLexpr & other)
{
  lexpr_1 = other.lexpr_1->clone();
  lexpr_2 = other.lexpr_2->clone();

}

HatHatLexpr &HatHatLexpr::operator=(const HatHatLexpr & other)
{
  HatHatLexpr tmp(other);
  swap(tmp);
  return *this;
}

void HatHatLexpr::swap(HatHatLexpr & other)
{
  std::swap(lexpr_1, other.lexpr_1);
  std::swap(lexpr_2, other.lexpr_2);

}

HatHatLexpr::~HatHatLexpr()
{
  delete(lexpr_1);
  delete(lexpr_2);

}

void HatHatLexpr::accept(Visitor *v)
{
  v->visitHatHatLexpr(this);
}

HatHatLexpr *HatHatLexpr::clone() const
{
  return new HatHatLexpr(*this);
}



/********************   AmpLexpr    ********************/
AmpLexpr::AmpLexpr(Lexpr *p1, Lexpr *p2)
{
  lexpr_1 = p1;
  lexpr_2 = p2;

}

AmpLexpr::AmpLexpr(const AmpLexpr & other)
{
  lexpr_1 = other.lexpr_1->clone();
  lexpr_2 = other.lexpr_2->clone();

}

AmpLexpr &AmpLexpr::operator=(const AmpLexpr & other)
{
  AmpLexpr tmp(other);
  swap(tmp);
  return *this;
}

void AmpLexpr::swap(AmpLexpr & other)
{
  std::swap(lexpr_1, other.lexpr_1);
  std::swap(lexpr_2, other.lexpr_2);

}

AmpLexpr::~AmpLexpr()
{
  delete(lexpr_1);
  delete(lexpr_2);

}

void AmpLexpr::accept(Visitor *v)
{
  v->visitAmpLexpr(this);
}

AmpLexpr *AmpLexpr::clone() const
{
  return new AmpLexpr(*this);
}



/********************   PipeLexpr    ********************/
PipeLexpr::PipeLexpr(Lexpr *p1, Lexpr *p2)
{
  lexpr_1 = p1;
  lexpr_2 = p2;

}

PipeLexpr::PipeLexpr(const PipeLexpr & other)
{
  lexpr_1 = other.lexpr_1->clone();
  lexpr_2 = other.lexpr_2->clone();

}

PipeLexpr &PipeLexpr::operator=(const PipeLexpr & other)
{
  PipeLexpr tmp(other);
  swap(tmp);
  return *this;
}

void PipeLexpr::swap(PipeLexpr & other)
{
  std::swap(lexpr_1, other.lexpr_1);
  std::swap(lexpr_2, other.lexpr_2);

}

PipeLexpr::~PipeLexpr()
{
  delete(lexpr_1);
  delete(lexpr_2);

}

void PipeLexpr::accept(Visitor *v)
{
  v->visitPipeLexpr(this);
}

PipeLexpr *PipeLexpr::clone() const
{
  return new PipeLexpr(*this);
}



/********************   HatLexpr    ********************/
HatLexpr::HatLexpr(Lexpr *p1, Lexpr *p2)
{
  lexpr_1 = p1;
  lexpr_2 = p2;

}

HatLexpr::HatLexpr(const HatLexpr & other)
{
  lexpr_1 = other.lexpr_1->clone();
  lexpr_2 = other.lexpr_2->clone();

}

HatLexpr &HatLexpr::operator=(const HatLexpr & other)
{
  HatLexpr tmp(other);
  swap(tmp);
  return *this;
}

void HatLexpr::swap(HatLexpr & other)
{
  std::swap(lexpr_1, other.lexpr_1);
  std::swap(lexpr_2, other.lexpr_2);

}

HatLexpr::~HatLexpr()
{
  delete(lexpr_1);
  delete(lexpr_2);

}

void HatLexpr::accept(Visitor *v)
{
  v->visitHatLexpr(this);
}

HatLexpr *HatLexpr::clone() const
{
  return new HatLexpr(*this);
}



/********************   BimpliesLexpr    ********************/
BimpliesLexpr::BimpliesLexpr(Lexpr *p1, Lexpr *p2)
{
  lexpr_1 = p1;
  lexpr_2 = p2;

}

BimpliesLexpr::BimpliesLexpr(const BimpliesLexpr & other)
{
  lexpr_1 = other.lexpr_1->clone();
  lexpr_2 = other.lexpr_2->clone();

}

BimpliesLexpr &BimpliesLexpr::operator=(const BimpliesLexpr & other)
{
  BimpliesLexpr tmp(other);
  swap(tmp);
  return *this;
}

void BimpliesLexpr::swap(BimpliesLexpr & other)
{
  std::swap(lexpr_1, other.lexpr_1);
  std::swap(lexpr_2, other.lexpr_2);

}

BimpliesLexpr::~BimpliesLexpr()
{
  delete(lexpr_1);
  delete(lexpr_2);

}

void BimpliesLexpr::accept(Visitor *v)
{
  v->visitBimpliesLexpr(this);
}

BimpliesLexpr *BimpliesLexpr::clone() const
{
  return new BimpliesLexpr(*this);
}



/********************   BiffLexpr    ********************/
BiffLexpr::BiffLexpr(Lexpr *p1, Lexpr *p2)
{
  lexpr_1 = p1;
  lexpr_2 = p2;

}

BiffLexpr::BiffLexpr(const BiffLexpr & other)
{
  lexpr_1 = other.lexpr_1->clone();
  lexpr_2 = other.lexpr_2->clone();

}

BiffLexpr &BiffLexpr::operator=(const BiffLexpr & other)
{
  BiffLexpr tmp(other);
  swap(tmp);
  return *this;
}

void BiffLexpr::swap(BiffLexpr & other)
{
  std::swap(lexpr_1, other.lexpr_1);
  std::swap(lexpr_2, other.lexpr_2);

}

BiffLexpr::~BiffLexpr()
{
  delete(lexpr_1);
  delete(lexpr_2);

}

void BiffLexpr::accept(Visitor *v)
{
  v->visitBiffLexpr(this);
}

BiffLexpr *BiffLexpr::clone() const
{
  return new BiffLexpr(*this);
}



/********************   InLexpr    ********************/
InLexpr::InLexpr(Lexpr *p1, Lexpr *p2)
{
  lexpr_1 = p1;
  lexpr_2 = p2;

}

InLexpr::InLexpr(const InLexpr & other)
{
  lexpr_1 = other.lexpr_1->clone();
  lexpr_2 = other.lexpr_2->clone();

}

InLexpr &InLexpr::operator=(const InLexpr & other)
{
  InLexpr tmp(other);
  swap(tmp);
  return *this;
}

void InLexpr::swap(InLexpr & other)
{
  std::swap(lexpr_1, other.lexpr_1);
  std::swap(lexpr_2, other.lexpr_2);

}

InLexpr::~InLexpr()
{
  delete(lexpr_1);
  delete(lexpr_2);

}

void InLexpr::accept(Visitor *v)
{
  v->visitInLexpr(this);
}

InLexpr *InLexpr::clone() const
{
  return new InLexpr(*this);
}



/********************   TernaryLexpr    ********************/
TernaryLexpr::TernaryLexpr(Lexpr *p1, Lexpr *p2, Lexpr *p3)
{
  lexpr_1 = p1;
  lexpr_2 = p2;
  lexpr_3 = p3;

}

TernaryLexpr::TernaryLexpr(const TernaryLexpr & other)
{
  lexpr_1 = other.lexpr_1->clone();
  lexpr_2 = other.lexpr_2->clone();
  lexpr_3 = other.lexpr_3->clone();

}

TernaryLexpr &TernaryLexpr::operator=(const TernaryLexpr & other)
{
  TernaryLexpr tmp(other);
  swap(tmp);
  return *this;
}

void TernaryLexpr::swap(TernaryLexpr & other)
{
  std::swap(lexpr_1, other.lexpr_1);
  std::swap(lexpr_2, other.lexpr_2);
  std::swap(lexpr_3, other.lexpr_3);

}

TernaryLexpr::~TernaryLexpr()
{
  delete(lexpr_1);
  delete(lexpr_2);
  delete(lexpr_3);

}

void TernaryLexpr::accept(Visitor *v)
{
  v->visitTernaryLexpr(this);
}

TernaryLexpr *TernaryLexpr::clone() const
{
  return new TernaryLexpr(*this);
}



/********************   RelationLexpr    ********************/
RelationLexpr::RelationLexpr(Lexpr *p1, ListLexprRelInner *p2, Relation *p3, Lexpr *p4)
{
  lexpr_1 = p1;
  listlexprrelinner_ = p2;
  relation_ = p3;
  lexpr_2 = p4;

}

RelationLexpr::RelationLexpr(const RelationLexpr & other)
{
  lexpr_1 = other.lexpr_1->clone();
  listlexprrelinner_ = other.listlexprrelinner_->clone();
  relation_ = other.relation_->clone();
  lexpr_2 = other.lexpr_2->clone();

}

RelationLexpr &RelationLexpr::operator=(const RelationLexpr & other)
{
  RelationLexpr tmp(other);
  swap(tmp);
  return *this;
}

void RelationLexpr::swap(RelationLexpr & other)
{
  std::swap(lexpr_1, other.lexpr_1);
  std::swap(listlexprrelinner_, other.listlexprrelinner_);
  std::swap(relation_, other.relation_);
  std::swap(lexpr_2, other.lexpr_2);

}

RelationLexpr::~RelationLexpr()
{
  delete(lexpr_1);
  delete(listlexprrelinner_);
  delete(relation_);
  delete(lexpr_2);

}

void RelationLexpr::accept(Visitor *v)
{
  v->visitRelationLexpr(this);
}

RelationLexpr *RelationLexpr::clone() const
{
  return new RelationLexpr(*this);
}



/********************   BinderLexpr    ********************/
BinderLexpr::BinderLexpr(LexprBinder *p1)
{
  lexprbinder_ = p1;

}

BinderLexpr::BinderLexpr(const BinderLexpr & other)
{
  lexprbinder_ = other.lexprbinder_->clone();

}

BinderLexpr &BinderLexpr::operator=(const BinderLexpr & other)
{
  BinderLexpr tmp(other);
  swap(tmp);
  return *this;
}

void BinderLexpr::swap(BinderLexpr & other)
{
  std::swap(lexprbinder_, other.lexprbinder_);

}

BinderLexpr::~BinderLexpr()
{
  delete(lexprbinder_);

}

void BinderLexpr::accept(Visitor *v)
{
  v->visitBinderLexpr(this);
}

BinderLexpr *BinderLexpr::clone() const
{
  return new BinderLexpr(*this);
}



/********************   NotBinderLexpr    ********************/
NotBinderLexpr::NotBinderLexpr(LexprBinder *p1)
{
  lexprbinder_ = p1;

}

NotBinderLexpr::NotBinderLexpr(const NotBinderLexpr & other)
{
  lexprbinder_ = other.lexprbinder_->clone();

}

NotBinderLexpr &NotBinderLexpr::operator=(const NotBinderLexpr & other)
{
  NotBinderLexpr tmp(other);
  swap(tmp);
  return *this;
}

void NotBinderLexpr::swap(NotBinderLexpr & other)
{
  std::swap(lexprbinder_, other.lexprbinder_);

}

NotBinderLexpr::~NotBinderLexpr()
{
  delete(lexprbinder_);

}

void NotBinderLexpr::accept(Visitor *v)
{
  v->visitNotBinderLexpr(this);
}

NotBinderLexpr *NotBinderLexpr::clone() const
{
  return new NotBinderLexpr(*this);
}



/********************   TrueLexpr    ********************/
TrueLexpr::TrueLexpr()
{

}

TrueLexpr::TrueLexpr(const TrueLexpr & other)
{

}

TrueLexpr &TrueLexpr::operator=(const TrueLexpr & other)
{
  TrueLexpr tmp(other);
  swap(tmp);
  return *this;
}

void TrueLexpr::swap(TrueLexpr & other)
{

}

TrueLexpr::~TrueLexpr()
{

}

void TrueLexpr::accept(Visitor *v)
{
  v->visitTrueLexpr(this);
}

TrueLexpr *TrueLexpr::clone() const
{
  return new TrueLexpr(*this);
}



/********************   FalseLexpr    ********************/
FalseLexpr::FalseLexpr()
{

}

FalseLexpr::FalseLexpr(const FalseLexpr & other)
{

}

FalseLexpr &FalseLexpr::operator=(const FalseLexpr & other)
{
  FalseLexpr tmp(other);
  swap(tmp);
  return *this;
}

void FalseLexpr::swap(FalseLexpr & other)
{

}

FalseLexpr::~FalseLexpr()
{

}

void FalseLexpr::accept(Visitor *v)
{
  v->visitFalseLexpr(this);
}

FalseLexpr *FalseLexpr::clone() const
{
  return new FalseLexpr(*this);
}



/********************   PointerLexpr    ********************/
PointerLexpr::PointerLexpr(OptLabel *p1, Lexpr *p2)
{
  optlabel_ = p1;
  lexpr_ = p2;

}

PointerLexpr::PointerLexpr(const PointerLexpr & other)
{
  optlabel_ = other.optlabel_->clone();
  lexpr_ = other.lexpr_->clone();

}

PointerLexpr &PointerLexpr::operator=(const PointerLexpr & other)
{
  PointerLexpr tmp(other);
  swap(tmp);
  return *this;
}

void PointerLexpr::swap(PointerLexpr & other)
{
  std::swap(optlabel_, other.optlabel_);
  std::swap(lexpr_, other.lexpr_);

}

PointerLexpr::~PointerLexpr()
{
  delete(optlabel_);
  delete(lexpr_);

}

void PointerLexpr::accept(Visitor *v)
{
  v->visitPointerLexpr(this);
}

PointerLexpr *PointerLexpr::clone() const
{
  return new PointerLexpr(*this);
}



/********************   ValidLexpr    ********************/
ValidLexpr::ValidLexpr(OptLabel *p1, Lexpr *p2)
{
  optlabel_ = p1;
  lexpr_ = p2;

}

ValidLexpr::ValidLexpr(const ValidLexpr & other)
{
  optlabel_ = other.optlabel_->clone();
  lexpr_ = other.lexpr_->clone();

}

ValidLexpr &ValidLexpr::operator=(const ValidLexpr & other)
{
  ValidLexpr tmp(other);
  swap(tmp);
  return *this;
}

void ValidLexpr::swap(ValidLexpr & other)
{
  std::swap(optlabel_, other.optlabel_);
  std::swap(lexpr_, other.lexpr_);

}

ValidLexpr::~ValidLexpr()
{
  delete(optlabel_);
  delete(lexpr_);

}

void ValidLexpr::accept(Visitor *v)
{
  v->visitValidLexpr(this);
}

ValidLexpr *ValidLexpr::clone() const
{
  return new ValidLexpr(*this);
}



/********************   ValidReadLexpr    ********************/
ValidReadLexpr::ValidReadLexpr(OptLabel *p1, Lexpr *p2)
{
  optlabel_ = p1;
  lexpr_ = p2;

}

ValidReadLexpr::ValidReadLexpr(const ValidReadLexpr & other)
{
  optlabel_ = other.optlabel_->clone();
  lexpr_ = other.lexpr_->clone();

}

ValidReadLexpr &ValidReadLexpr::operator=(const ValidReadLexpr & other)
{
  ValidReadLexpr tmp(other);
  swap(tmp);
  return *this;
}

void ValidReadLexpr::swap(ValidReadLexpr & other)
{
  std::swap(optlabel_, other.optlabel_);
  std::swap(lexpr_, other.lexpr_);

}

ValidReadLexpr::~ValidReadLexpr()
{
  delete(optlabel_);
  delete(lexpr_);

}

void ValidReadLexpr::accept(Visitor *v)
{
  v->visitValidReadLexpr(this);
}

ValidReadLexpr *ValidReadLexpr::clone() const
{
  return new ValidReadLexpr(*this);
}



/********************   ValidFuncLexpr    ********************/
ValidFuncLexpr::ValidFuncLexpr(Lexpr *p1)
{
  lexpr_ = p1;

}

ValidFuncLexpr::ValidFuncLexpr(const ValidFuncLexpr & other)
{
  lexpr_ = other.lexpr_->clone();

}

ValidFuncLexpr &ValidFuncLexpr::operator=(const ValidFuncLexpr & other)
{
  ValidFuncLexpr tmp(other);
  swap(tmp);
  return *this;
}

void ValidFuncLexpr::swap(ValidFuncLexpr & other)
{
  std::swap(lexpr_, other.lexpr_);

}

ValidFuncLexpr::~ValidFuncLexpr()
{
  delete(lexpr_);

}

void ValidFuncLexpr::accept(Visitor *v)
{
  v->visitValidFuncLexpr(this);
}

ValidFuncLexpr *ValidFuncLexpr::clone() const
{
  return new ValidFuncLexpr(*this);
}



/********************   ValidIndxLexpr    ********************/
ValidIndxLexpr::ValidIndxLexpr(OptLabel *p1, Lexpr *p2, Lexpr *p3)
{
  optlabel_ = p1;
  lexpr_1 = p2;
  lexpr_2 = p3;

}

ValidIndxLexpr::ValidIndxLexpr(const ValidIndxLexpr & other)
{
  optlabel_ = other.optlabel_->clone();
  lexpr_1 = other.lexpr_1->clone();
  lexpr_2 = other.lexpr_2->clone();

}

ValidIndxLexpr &ValidIndxLexpr::operator=(const ValidIndxLexpr & other)
{
  ValidIndxLexpr tmp(other);
  swap(tmp);
  return *this;
}

void ValidIndxLexpr::swap(ValidIndxLexpr & other)
{
  std::swap(optlabel_, other.optlabel_);
  std::swap(lexpr_1, other.lexpr_1);
  std::swap(lexpr_2, other.lexpr_2);

}

ValidIndxLexpr::~ValidIndxLexpr()
{
  delete(optlabel_);
  delete(lexpr_1);
  delete(lexpr_2);

}

void ValidIndxLexpr::accept(Visitor *v)
{
  v->visitValidIndxLexpr(this);
}

ValidIndxLexpr *ValidIndxLexpr::clone() const
{
  return new ValidIndxLexpr(*this);
}



/********************   ValidRangeLexpr    ********************/
ValidRangeLexpr::ValidRangeLexpr(OptLabel *p1, Lexpr *p2, Lexpr *p3, Lexpr *p4)
{
  optlabel_ = p1;
  lexpr_1 = p2;
  lexpr_2 = p3;
  lexpr_3 = p4;

}

ValidRangeLexpr::ValidRangeLexpr(const ValidRangeLexpr & other)
{
  optlabel_ = other.optlabel_->clone();
  lexpr_1 = other.lexpr_1->clone();
  lexpr_2 = other.lexpr_2->clone();
  lexpr_3 = other.lexpr_3->clone();

}

ValidRangeLexpr &ValidRangeLexpr::operator=(const ValidRangeLexpr & other)
{
  ValidRangeLexpr tmp(other);
  swap(tmp);
  return *this;
}

void ValidRangeLexpr::swap(ValidRangeLexpr & other)
{
  std::swap(optlabel_, other.optlabel_);
  std::swap(lexpr_1, other.lexpr_1);
  std::swap(lexpr_2, other.lexpr_2);
  std::swap(lexpr_3, other.lexpr_3);

}

ValidRangeLexpr::~ValidRangeLexpr()
{
  delete(optlabel_);
  delete(lexpr_1);
  delete(lexpr_2);
  delete(lexpr_3);

}

void ValidRangeLexpr::accept(Visitor *v)
{
  v->visitValidRangeLexpr(this);
}

ValidRangeLexpr *ValidRangeLexpr::clone() const
{
  return new ValidRangeLexpr(*this);
}



/********************   InitializedLexpr    ********************/
InitializedLexpr::InitializedLexpr(OptLabel *p1, Lexpr *p2)
{
  optlabel_ = p1;
  lexpr_ = p2;

}

InitializedLexpr::InitializedLexpr(const InitializedLexpr & other)
{
  optlabel_ = other.optlabel_->clone();
  lexpr_ = other.lexpr_->clone();

}

InitializedLexpr &InitializedLexpr::operator=(const InitializedLexpr & other)
{
  InitializedLexpr tmp(other);
  swap(tmp);
  return *this;
}

void InitializedLexpr::swap(InitializedLexpr & other)
{
  std::swap(optlabel_, other.optlabel_);
  std::swap(lexpr_, other.lexpr_);

}

InitializedLexpr::~InitializedLexpr()
{
  delete(optlabel_);
  delete(lexpr_);

}

void InitializedLexpr::accept(Visitor *v)
{
  v->visitInitializedLexpr(this);
}

InitializedLexpr *InitializedLexpr::clone() const
{
  return new InitializedLexpr(*this);
}



/********************   DanglingLexpr    ********************/
DanglingLexpr::DanglingLexpr(OptLabel *p1, Lexpr *p2)
{
  optlabel_ = p1;
  lexpr_ = p2;

}

DanglingLexpr::DanglingLexpr(const DanglingLexpr & other)
{
  optlabel_ = other.optlabel_->clone();
  lexpr_ = other.lexpr_->clone();

}

DanglingLexpr &DanglingLexpr::operator=(const DanglingLexpr & other)
{
  DanglingLexpr tmp(other);
  swap(tmp);
  return *this;
}

void DanglingLexpr::swap(DanglingLexpr & other)
{
  std::swap(optlabel_, other.optlabel_);
  std::swap(lexpr_, other.lexpr_);

}

DanglingLexpr::~DanglingLexpr()
{
  delete(optlabel_);
  delete(lexpr_);

}

void DanglingLexpr::accept(Visitor *v)
{
  v->visitDanglingLexpr(this);
}

DanglingLexpr *DanglingLexpr::clone() const
{
  return new DanglingLexpr(*this);
}



/********************   FreshLexpr    ********************/
FreshLexpr::FreshLexpr(OptLabel *p1, Lexpr *p2, Lexpr *p3)
{
  optlabel_ = p1;
  lexpr_1 = p2;
  lexpr_2 = p3;

}

FreshLexpr::FreshLexpr(const FreshLexpr & other)
{
  optlabel_ = other.optlabel_->clone();
  lexpr_1 = other.lexpr_1->clone();
  lexpr_2 = other.lexpr_2->clone();

}

FreshLexpr &FreshLexpr::operator=(const FreshLexpr & other)
{
  FreshLexpr tmp(other);
  swap(tmp);
  return *this;
}

void FreshLexpr::swap(FreshLexpr & other)
{
  std::swap(optlabel_, other.optlabel_);
  std::swap(lexpr_1, other.lexpr_1);
  std::swap(lexpr_2, other.lexpr_2);

}

FreshLexpr::~FreshLexpr()
{
  delete(optlabel_);
  delete(lexpr_1);
  delete(lexpr_2);

}

void FreshLexpr::accept(Visitor *v)
{
  v->visitFreshLexpr(this);
}

FreshLexpr *FreshLexpr::clone() const
{
  return new FreshLexpr(*this);
}



/********************   BaseAddrLexpr    ********************/
BaseAddrLexpr::BaseAddrLexpr(OptLabel *p1, Lexpr *p2)
{
  optlabel_ = p1;
  lexpr_ = p2;

}

BaseAddrLexpr::BaseAddrLexpr(const BaseAddrLexpr & other)
{
  optlabel_ = other.optlabel_->clone();
  lexpr_ = other.lexpr_->clone();

}

BaseAddrLexpr &BaseAddrLexpr::operator=(const BaseAddrLexpr & other)
{
  BaseAddrLexpr tmp(other);
  swap(tmp);
  return *this;
}

void BaseAddrLexpr::swap(BaseAddrLexpr & other)
{
  std::swap(optlabel_, other.optlabel_);
  std::swap(lexpr_, other.lexpr_);

}

BaseAddrLexpr::~BaseAddrLexpr()
{
  delete(optlabel_);
  delete(lexpr_);

}

void BaseAddrLexpr::accept(Visitor *v)
{
  v->visitBaseAddrLexpr(this);
}

BaseAddrLexpr *BaseAddrLexpr::clone() const
{
  return new BaseAddrLexpr(*this);
}



/********************   BlockLengthLexpr    ********************/
BlockLengthLexpr::BlockLengthLexpr(OptLabel *p1, Lexpr *p2)
{
  optlabel_ = p1;
  lexpr_ = p2;

}

BlockLengthLexpr::BlockLengthLexpr(const BlockLengthLexpr & other)
{
  optlabel_ = other.optlabel_->clone();
  lexpr_ = other.lexpr_->clone();

}

BlockLengthLexpr &BlockLengthLexpr::operator=(const BlockLengthLexpr & other)
{
  BlockLengthLexpr tmp(other);
  swap(tmp);
  return *this;
}

void BlockLengthLexpr::swap(BlockLengthLexpr & other)
{
  std::swap(optlabel_, other.optlabel_);
  std::swap(lexpr_, other.lexpr_);

}

BlockLengthLexpr::~BlockLengthLexpr()
{
  delete(optlabel_);
  delete(lexpr_);

}

void BlockLengthLexpr::accept(Visitor *v)
{
  v->visitBlockLengthLexpr(this);
}

BlockLengthLexpr *BlockLengthLexpr::clone() const
{
  return new BlockLengthLexpr(*this);
}



/********************   OffsetLexpr    ********************/
OffsetLexpr::OffsetLexpr(OptLabel *p1, Lexpr *p2)
{
  optlabel_ = p1;
  lexpr_ = p2;

}

OffsetLexpr::OffsetLexpr(const OffsetLexpr & other)
{
  optlabel_ = other.optlabel_->clone();
  lexpr_ = other.lexpr_->clone();

}

OffsetLexpr &OffsetLexpr::operator=(const OffsetLexpr & other)
{
  OffsetLexpr tmp(other);
  swap(tmp);
  return *this;
}

void OffsetLexpr::swap(OffsetLexpr & other)
{
  std::swap(optlabel_, other.optlabel_);
  std::swap(lexpr_, other.lexpr_);

}

OffsetLexpr::~OffsetLexpr()
{
  delete(optlabel_);
  delete(lexpr_);

}

void OffsetLexpr::accept(Visitor *v)
{
  v->visitOffsetLexpr(this);
}

OffsetLexpr *OffsetLexpr::clone() const
{
  return new OffsetLexpr(*this);
}



/********************   AllocableLexpr    ********************/
AllocableLexpr::AllocableLexpr(OptLabel *p1, Lexpr *p2)
{
  optlabel_ = p1;
  lexpr_ = p2;

}

AllocableLexpr::AllocableLexpr(const AllocableLexpr & other)
{
  optlabel_ = other.optlabel_->clone();
  lexpr_ = other.lexpr_->clone();

}

AllocableLexpr &AllocableLexpr::operator=(const AllocableLexpr & other)
{
  AllocableLexpr tmp(other);
  swap(tmp);
  return *this;
}

void AllocableLexpr::swap(AllocableLexpr & other)
{
  std::swap(optlabel_, other.optlabel_);
  std::swap(lexpr_, other.lexpr_);

}

AllocableLexpr::~AllocableLexpr()
{
  delete(optlabel_);
  delete(lexpr_);

}

void AllocableLexpr::accept(Visitor *v)
{
  v->visitAllocableLexpr(this);
}

AllocableLexpr *AllocableLexpr::clone() const
{
  return new AllocableLexpr(*this);
}



/********************   FreeableLexpr    ********************/
FreeableLexpr::FreeableLexpr(OptLabel *p1, Lexpr *p2)
{
  optlabel_ = p1;
  lexpr_ = p2;

}

FreeableLexpr::FreeableLexpr(const FreeableLexpr & other)
{
  optlabel_ = other.optlabel_->clone();
  lexpr_ = other.lexpr_->clone();

}

FreeableLexpr &FreeableLexpr::operator=(const FreeableLexpr & other)
{
  FreeableLexpr tmp(other);
  swap(tmp);
  return *this;
}

void FreeableLexpr::swap(FreeableLexpr & other)
{
  std::swap(optlabel_, other.optlabel_);
  std::swap(lexpr_, other.lexpr_);

}

FreeableLexpr::~FreeableLexpr()
{
  delete(optlabel_);
  delete(lexpr_);

}

void FreeableLexpr::accept(Visitor *v)
{
  v->visitFreeableLexpr(this);
}

FreeableLexpr *FreeableLexpr::clone() const
{
  return new FreeableLexpr(*this);
}



/********************   AllocationLexpr    ********************/
AllocationLexpr::AllocationLexpr(OptLabel *p1, Lexpr *p2)
{
  optlabel_ = p1;
  lexpr_ = p2;

}

AllocationLexpr::AllocationLexpr(const AllocationLexpr & other)
{
  optlabel_ = other.optlabel_->clone();
  lexpr_ = other.lexpr_->clone();

}

AllocationLexpr &AllocationLexpr::operator=(const AllocationLexpr & other)
{
  AllocationLexpr tmp(other);
  swap(tmp);
  return *this;
}

void AllocationLexpr::swap(AllocationLexpr & other)
{
  std::swap(optlabel_, other.optlabel_);
  std::swap(lexpr_, other.lexpr_);

}

AllocationLexpr::~AllocationLexpr()
{
  delete(optlabel_);
  delete(lexpr_);

}

void AllocationLexpr::accept(Visitor *v)
{
  v->visitAllocationLexpr(this);
}

AllocationLexpr *AllocationLexpr::clone() const
{
  return new AllocationLexpr(*this);
}



/********************   AutomaticLexpr    ********************/
AutomaticLexpr::AutomaticLexpr()
{

}

AutomaticLexpr::AutomaticLexpr(const AutomaticLexpr & other)
{

}

AutomaticLexpr &AutomaticLexpr::operator=(const AutomaticLexpr & other)
{
  AutomaticLexpr tmp(other);
  swap(tmp);
  return *this;
}

void AutomaticLexpr::swap(AutomaticLexpr & other)
{

}

AutomaticLexpr::~AutomaticLexpr()
{

}

void AutomaticLexpr::accept(Visitor *v)
{
  v->visitAutomaticLexpr(this);
}

AutomaticLexpr *AutomaticLexpr::clone() const
{
  return new AutomaticLexpr(*this);
}



/********************   DynamicLexpr    ********************/
DynamicLexpr::DynamicLexpr()
{

}

DynamicLexpr::DynamicLexpr(const DynamicLexpr & other)
{

}

DynamicLexpr &DynamicLexpr::operator=(const DynamicLexpr & other)
{
  DynamicLexpr tmp(other);
  swap(tmp);
  return *this;
}

void DynamicLexpr::swap(DynamicLexpr & other)
{

}

DynamicLexpr::~DynamicLexpr()
{

}

void DynamicLexpr::accept(Visitor *v)
{
  v->visitDynamicLexpr(this);
}

DynamicLexpr *DynamicLexpr::clone() const
{
  return new DynamicLexpr(*this);
}



/********************   RegisterLexpr    ********************/
RegisterLexpr::RegisterLexpr()
{

}

RegisterLexpr::RegisterLexpr(const RegisterLexpr & other)
{

}

RegisterLexpr &RegisterLexpr::operator=(const RegisterLexpr & other)
{
  RegisterLexpr tmp(other);
  swap(tmp);
  return *this;
}

void RegisterLexpr::swap(RegisterLexpr & other)
{

}

RegisterLexpr::~RegisterLexpr()
{

}

void RegisterLexpr::accept(Visitor *v)
{
  v->visitRegisterLexpr(this);
}

RegisterLexpr *RegisterLexpr::clone() const
{
  return new RegisterLexpr(*this);
}



/********************   StaticLexpr    ********************/
StaticLexpr::StaticLexpr()
{

}

StaticLexpr::StaticLexpr(const StaticLexpr & other)
{

}

StaticLexpr &StaticLexpr::operator=(const StaticLexpr & other)
{
  StaticLexpr tmp(other);
  swap(tmp);
  return *this;
}

void StaticLexpr::swap(StaticLexpr & other)
{

}

StaticLexpr::~StaticLexpr()
{

}

void StaticLexpr::accept(Visitor *v)
{
  v->visitStaticLexpr(this);
}

StaticLexpr *StaticLexpr::clone() const
{
  return new StaticLexpr(*this);
}



/********************   UnallocatedLexpr    ********************/
UnallocatedLexpr::UnallocatedLexpr()
{

}

UnallocatedLexpr::UnallocatedLexpr(const UnallocatedLexpr & other)
{

}

UnallocatedLexpr &UnallocatedLexpr::operator=(const UnallocatedLexpr & other)
{
  UnallocatedLexpr tmp(other);
  swap(tmp);
  return *this;
}

void UnallocatedLexpr::swap(UnallocatedLexpr & other)
{

}

UnallocatedLexpr::~UnallocatedLexpr()
{

}

void UnallocatedLexpr::accept(Visitor *v)
{
  v->visitUnallocatedLexpr(this);
}

UnallocatedLexpr *UnallocatedLexpr::clone() const
{
  return new UnallocatedLexpr(*this);
}



/********************   NullLexpr    ********************/
NullLexpr::NullLexpr()
{

}

NullLexpr::NullLexpr(const NullLexpr & other)
{

}

NullLexpr &NullLexpr::operator=(const NullLexpr & other)
{
  NullLexpr tmp(other);
  swap(tmp);
  return *this;
}

void NullLexpr::swap(NullLexpr & other)
{

}

NullLexpr::~NullLexpr()
{

}

void NullLexpr::accept(Visitor *v)
{
  v->visitNullLexpr(this);
}

NullLexpr *NullLexpr::clone() const
{
  return new NullLexpr(*this);
}



/********************   LexprIntConst    ********************/
LexprIntConst::LexprIntConst(Integer p1)
{
  integer_ = p1;

}

LexprIntConst::LexprIntConst(const LexprIntConst & other)
{
  integer_ = other.integer_;

}

LexprIntConst &LexprIntConst::operator=(const LexprIntConst & other)
{
  LexprIntConst tmp(other);
  swap(tmp);
  return *this;
}

void LexprIntConst::swap(LexprIntConst & other)
{
  std::swap(integer_, other.integer_);

}

LexprIntConst::~LexprIntConst()
{

}

void LexprIntConst::accept(Visitor *v)
{
  v->visitLexprIntConst(this);
}

LexprIntConst *LexprIntConst::clone() const
{
  return new LexprIntConst(*this);
}



/********************   LexprFloatConst    ********************/
LexprFloatConst::LexprFloatConst(Double p1)
{
  double_ = p1;

}

LexprFloatConst::LexprFloatConst(const LexprFloatConst & other)
{
  double_ = other.double_;

}

LexprFloatConst &LexprFloatConst::operator=(const LexprFloatConst & other)
{
  LexprFloatConst tmp(other);
  swap(tmp);
  return *this;
}

void LexprFloatConst::swap(LexprFloatConst & other)
{
  std::swap(double_, other.double_);

}

LexprFloatConst::~LexprFloatConst()
{

}

void LexprFloatConst::accept(Visitor *v)
{
  v->visitLexprFloatConst(this);
}

LexprFloatConst *LexprFloatConst::clone() const
{
  return new LexprFloatConst(*this);
}



/********************   LexprStringConst    ********************/
LexprStringConst::LexprStringConst(String p1)
{
  string_ = p1;

}

LexprStringConst::LexprStringConst(const LexprStringConst & other)
{
  string_ = other.string_;

}

LexprStringConst &LexprStringConst::operator=(const LexprStringConst & other)
{
  LexprStringConst tmp(other);
  swap(tmp);
  return *this;
}

void LexprStringConst::swap(LexprStringConst & other)
{
  std::swap(string_, other.string_);

}

LexprStringConst::~LexprStringConst()
{

}

void LexprStringConst::accept(Visitor *v)
{
  v->visitLexprStringConst(this);
}

LexprStringConst *LexprStringConst::clone() const
{
  return new LexprStringConst(*this);
}



/********************   AddLexpr    ********************/
AddLexpr::AddLexpr(Lexpr *p1, Lexpr *p2)
{
  lexpr_1 = p1;
  lexpr_2 = p2;

}

AddLexpr::AddLexpr(const AddLexpr & other)
{
  lexpr_1 = other.lexpr_1->clone();
  lexpr_2 = other.lexpr_2->clone();

}

AddLexpr &AddLexpr::operator=(const AddLexpr & other)
{
  AddLexpr tmp(other);
  swap(tmp);
  return *this;
}

void AddLexpr::swap(AddLexpr & other)
{
  std::swap(lexpr_1, other.lexpr_1);
  std::swap(lexpr_2, other.lexpr_2);

}

AddLexpr::~AddLexpr()
{
  delete(lexpr_1);
  delete(lexpr_2);

}

void AddLexpr::accept(Visitor *v)
{
  v->visitAddLexpr(this);
}

AddLexpr *AddLexpr::clone() const
{
  return new AddLexpr(*this);
}



/********************   SubtrLexpr    ********************/
SubtrLexpr::SubtrLexpr(Lexpr *p1, Lexpr *p2)
{
  lexpr_1 = p1;
  lexpr_2 = p2;

}

SubtrLexpr::SubtrLexpr(const SubtrLexpr & other)
{
  lexpr_1 = other.lexpr_1->clone();
  lexpr_2 = other.lexpr_2->clone();

}

SubtrLexpr &SubtrLexpr::operator=(const SubtrLexpr & other)
{
  SubtrLexpr tmp(other);
  swap(tmp);
  return *this;
}

void SubtrLexpr::swap(SubtrLexpr & other)
{
  std::swap(lexpr_1, other.lexpr_1);
  std::swap(lexpr_2, other.lexpr_2);

}

SubtrLexpr::~SubtrLexpr()
{
  delete(lexpr_1);
  delete(lexpr_2);

}

void SubtrLexpr::accept(Visitor *v)
{
  v->visitSubtrLexpr(this);
}

SubtrLexpr *SubtrLexpr::clone() const
{
  return new SubtrLexpr(*this);
}



/********************   MultLexpr    ********************/
MultLexpr::MultLexpr(Lexpr *p1, Lexpr *p2)
{
  lexpr_1 = p1;
  lexpr_2 = p2;

}

MultLexpr::MultLexpr(const MultLexpr & other)
{
  lexpr_1 = other.lexpr_1->clone();
  lexpr_2 = other.lexpr_2->clone();

}

MultLexpr &MultLexpr::operator=(const MultLexpr & other)
{
  MultLexpr tmp(other);
  swap(tmp);
  return *this;
}

void MultLexpr::swap(MultLexpr & other)
{
  std::swap(lexpr_1, other.lexpr_1);
  std::swap(lexpr_2, other.lexpr_2);

}

MultLexpr::~MultLexpr()
{
  delete(lexpr_1);
  delete(lexpr_2);

}

void MultLexpr::accept(Visitor *v)
{
  v->visitMultLexpr(this);
}

MultLexpr *MultLexpr::clone() const
{
  return new MultLexpr(*this);
}



/********************   DivLexpr    ********************/
DivLexpr::DivLexpr(Lexpr *p1, Lexpr *p2)
{
  lexpr_1 = p1;
  lexpr_2 = p2;

}

DivLexpr::DivLexpr(const DivLexpr & other)
{
  lexpr_1 = other.lexpr_1->clone();
  lexpr_2 = other.lexpr_2->clone();

}

DivLexpr &DivLexpr::operator=(const DivLexpr & other)
{
  DivLexpr tmp(other);
  swap(tmp);
  return *this;
}

void DivLexpr::swap(DivLexpr & other)
{
  std::swap(lexpr_1, other.lexpr_1);
  std::swap(lexpr_2, other.lexpr_2);

}

DivLexpr::~DivLexpr()
{
  delete(lexpr_1);
  delete(lexpr_2);

}

void DivLexpr::accept(Visitor *v)
{
  v->visitDivLexpr(this);
}

DivLexpr *DivLexpr::clone() const
{
  return new DivLexpr(*this);
}



/********************   ModLexpr    ********************/
ModLexpr::ModLexpr(Lexpr *p1, Lexpr *p2)
{
  lexpr_1 = p1;
  lexpr_2 = p2;

}

ModLexpr::ModLexpr(const ModLexpr & other)
{
  lexpr_1 = other.lexpr_1->clone();
  lexpr_2 = other.lexpr_2->clone();

}

ModLexpr &ModLexpr::operator=(const ModLexpr & other)
{
  ModLexpr tmp(other);
  swap(tmp);
  return *this;
}

void ModLexpr::swap(ModLexpr & other)
{
  std::swap(lexpr_1, other.lexpr_1);
  std::swap(lexpr_2, other.lexpr_2);

}

ModLexpr::~ModLexpr()
{
  delete(lexpr_1);
  delete(lexpr_2);

}

void ModLexpr::accept(Visitor *v)
{
  v->visitModLexpr(this);
}

ModLexpr *ModLexpr::clone() const
{
  return new ModLexpr(*this);
}



/********************   SquaresRangeLexpr    ********************/
SquaresRangeLexpr::SquaresRangeLexpr(Lexpr *p1, Range *p2)
{
  lexpr_ = p1;
  range_ = p2;

}

SquaresRangeLexpr::SquaresRangeLexpr(const SquaresRangeLexpr & other)
{
  lexpr_ = other.lexpr_->clone();
  range_ = other.range_->clone();

}

SquaresRangeLexpr &SquaresRangeLexpr::operator=(const SquaresRangeLexpr & other)
{
  SquaresRangeLexpr tmp(other);
  swap(tmp);
  return *this;
}

void SquaresRangeLexpr::swap(SquaresRangeLexpr & other)
{
  std::swap(lexpr_, other.lexpr_);
  std::swap(range_, other.range_);

}

SquaresRangeLexpr::~SquaresRangeLexpr()
{
  delete(lexpr_);
  delete(range_);

}

void SquaresRangeLexpr::accept(Visitor *v)
{
  v->visitSquaresRangeLexpr(this);
}

SquaresRangeLexpr *SquaresRangeLexpr::clone() const
{
  return new SquaresRangeLexpr(*this);
}



/********************   SquaresLexpr    ********************/
SquaresLexpr::SquaresLexpr(Lexpr *p1, Lexpr *p2)
{
  lexpr_1 = p1;
  lexpr_2 = p2;

}

SquaresLexpr::SquaresLexpr(const SquaresLexpr & other)
{
  lexpr_1 = other.lexpr_1->clone();
  lexpr_2 = other.lexpr_2->clone();

}

SquaresLexpr &SquaresLexpr::operator=(const SquaresLexpr & other)
{
  SquaresLexpr tmp(other);
  swap(tmp);
  return *this;
}

void SquaresLexpr::swap(SquaresLexpr & other)
{
  std::swap(lexpr_1, other.lexpr_1);
  std::swap(lexpr_2, other.lexpr_2);

}

SquaresLexpr::~SquaresLexpr()
{
  delete(lexpr_1);
  delete(lexpr_2);

}

void SquaresLexpr::accept(Visitor *v)
{
  v->visitSquaresLexpr(this);
}

SquaresLexpr *SquaresLexpr::clone() const
{
  return new SquaresLexpr(*this);
}



/********************   SizeOfLexpr    ********************/
SizeOfLexpr::SizeOfLexpr(Lexpr *p1)
{
  lexpr_ = p1;

}

SizeOfLexpr::SizeOfLexpr(const SizeOfLexpr & other)
{
  lexpr_ = other.lexpr_->clone();

}

SizeOfLexpr &SizeOfLexpr::operator=(const SizeOfLexpr & other)
{
  SizeOfLexpr tmp(other);
  swap(tmp);
  return *this;
}

void SizeOfLexpr::swap(SizeOfLexpr & other)
{
  std::swap(lexpr_, other.lexpr_);

}

SizeOfLexpr::~SizeOfLexpr()
{
  delete(lexpr_);

}

void SizeOfLexpr::accept(Visitor *v)
{
  v->visitSizeOfLexpr(this);
}

SizeOfLexpr *SizeOfLexpr::clone() const
{
  return new SizeOfLexpr(*this);
}



/********************   OldLexpr    ********************/
OldLexpr::OldLexpr(Lexpr *p1)
{
  lexpr_ = p1;

}

OldLexpr::OldLexpr(const OldLexpr & other)
{
  lexpr_ = other.lexpr_->clone();

}

OldLexpr &OldLexpr::operator=(const OldLexpr & other)
{
  OldLexpr tmp(other);
  swap(tmp);
  return *this;
}

void OldLexpr::swap(OldLexpr & other)
{
  std::swap(lexpr_, other.lexpr_);

}

OldLexpr::~OldLexpr()
{
  delete(lexpr_);

}

void OldLexpr::accept(Visitor *v)
{
  v->visitOldLexpr(this);
}

OldLexpr *OldLexpr::clone() const
{
  return new OldLexpr(*this);
}



/********************   AtLexpr    ********************/
AtLexpr::AtLexpr(Lexpr *p1, LabelName *p2)
{
  lexpr_ = p1;
  labelname_ = p2;

}

AtLexpr::AtLexpr(const AtLexpr & other)
{
  lexpr_ = other.lexpr_->clone();
  labelname_ = other.labelname_->clone();

}

AtLexpr &AtLexpr::operator=(const AtLexpr & other)
{
  AtLexpr tmp(other);
  swap(tmp);
  return *this;
}

void AtLexpr::swap(AtLexpr & other)
{
  std::swap(lexpr_, other.lexpr_);
  std::swap(labelname_, other.labelname_);

}

AtLexpr::~AtLexpr()
{
  delete(lexpr_);
  delete(labelname_);

}

void AtLexpr::accept(Visitor *v)
{
  v->visitAtLexpr(this);
}

AtLexpr *AtLexpr::clone() const
{
  return new AtLexpr(*this);
}



/********************   ResultLexpr    ********************/
ResultLexpr::ResultLexpr()
{

}

ResultLexpr::ResultLexpr(const ResultLexpr & other)
{

}

ResultLexpr &ResultLexpr::operator=(const ResultLexpr & other)
{
  ResultLexpr tmp(other);
  swap(tmp);
  return *this;
}

void ResultLexpr::swap(ResultLexpr & other)
{

}

ResultLexpr::~ResultLexpr()
{

}

void ResultLexpr::accept(Visitor *v)
{
  v->visitResultLexpr(this);
}

ResultLexpr *ResultLexpr::clone() const
{
  return new ResultLexpr(*this);
}



/********************   SeparatedLexpr    ********************/
SeparatedLexpr::SeparatedLexpr(ListLexpr *p1)
{
  listlexpr_ = p1;

}

SeparatedLexpr::SeparatedLexpr(const SeparatedLexpr & other)
{
  listlexpr_ = other.listlexpr_->clone();

}

SeparatedLexpr &SeparatedLexpr::operator=(const SeparatedLexpr & other)
{
  SeparatedLexpr tmp(other);
  swap(tmp);
  return *this;
}

void SeparatedLexpr::swap(SeparatedLexpr & other)
{
  std::swap(listlexpr_, other.listlexpr_);

}

SeparatedLexpr::~SeparatedLexpr()
{
  delete(listlexpr_);

}

void SeparatedLexpr::accept(Visitor *v)
{
  v->visitSeparatedLexpr(this);
}

SeparatedLexpr *SeparatedLexpr::clone() const
{
  return new SeparatedLexpr(*this);
}



/********************   FullIdParenLexpr    ********************/
FullIdParenLexpr::FullIdParenLexpr(FullIdentifier *p1, ListLexpr *p2)
{
  fullidentifier_ = p1;
  listlexpr_ = p2;

}

FullIdParenLexpr::FullIdParenLexpr(const FullIdParenLexpr & other)
{
  fullidentifier_ = other.fullidentifier_->clone();
  listlexpr_ = other.listlexpr_->clone();

}

FullIdParenLexpr &FullIdParenLexpr::operator=(const FullIdParenLexpr & other)
{
  FullIdParenLexpr tmp(other);
  swap(tmp);
  return *this;
}

void FullIdParenLexpr::swap(FullIdParenLexpr & other)
{
  std::swap(fullidentifier_, other.fullidentifier_);
  std::swap(listlexpr_, other.listlexpr_);

}

FullIdParenLexpr::~FullIdParenLexpr()
{
  delete(fullidentifier_);
  delete(listlexpr_);

}

void FullIdParenLexpr::accept(Visitor *v)
{
  v->visitFullIdParenLexpr(this);
}

FullIdParenLexpr *FullIdParenLexpr::clone() const
{
  return new FullIdParenLexpr(*this);
}



/********************   FullId    ********************/
FullId::FullId(FullIdentifier *p1)
{
  fullidentifier_ = p1;

}

FullId::FullId(const FullId & other)
{
  fullidentifier_ = other.fullidentifier_->clone();

}

FullId &FullId::operator=(const FullId & other)
{
  FullId tmp(other);
  swap(tmp);
  return *this;
}

void FullId::swap(FullId & other)
{
  std::swap(fullidentifier_, other.fullidentifier_);

}

FullId::~FullId()
{
  delete(fullidentifier_);

}

void FullId::accept(Visitor *v)
{
  v->visitFullId(this);
}

FullId *FullId::clone() const
{
  return new FullId(*this);
}



/********************   PiLexpr    ********************/
PiLexpr::PiLexpr()
{

}

PiLexpr::PiLexpr(const PiLexpr & other)
{

}

PiLexpr &PiLexpr::operator=(const PiLexpr & other)
{
  PiLexpr tmp(other);
  swap(tmp);
  return *this;
}

void PiLexpr::swap(PiLexpr & other)
{

}

PiLexpr::~PiLexpr()
{

}

void PiLexpr::accept(Visitor *v)
{
  v->visitPiLexpr(this);
}

PiLexpr *PiLexpr::clone() const
{
  return new PiLexpr(*this);
}



/********************   ParenRangeLexpr    ********************/
ParenRangeLexpr::ParenRangeLexpr(Range *p1)
{
  range_ = p1;

}

ParenRangeLexpr::ParenRangeLexpr(const ParenRangeLexpr & other)
{
  range_ = other.range_->clone();

}

ParenRangeLexpr &ParenRangeLexpr::operator=(const ParenRangeLexpr & other)
{
  ParenRangeLexpr tmp(other);
  swap(tmp);
  return *this;
}

void ParenRangeLexpr::swap(ParenRangeLexpr & other)
{
  std::swap(range_, other.range_);

}

ParenRangeLexpr::~ParenRangeLexpr()
{
  delete(range_);

}

void ParenRangeLexpr::accept(Visitor *v)
{
  v->visitParenRangeLexpr(this);
}

ParenRangeLexpr *ParenRangeLexpr::clone() const
{
  return new ParenRangeLexpr(*this);
}



/********************   RelInnerLexpr    ********************/
RelInnerLexpr::RelInnerLexpr(Relation *p1, Lexpr *p2)
{
  relation_ = p1;
  lexpr_ = p2;

}

RelInnerLexpr::RelInnerLexpr(const RelInnerLexpr & other)
{
  relation_ = other.relation_->clone();
  lexpr_ = other.lexpr_->clone();

}

RelInnerLexpr &RelInnerLexpr::operator=(const RelInnerLexpr & other)
{
  RelInnerLexpr tmp(other);
  swap(tmp);
  return *this;
}

void RelInnerLexpr::swap(RelInnerLexpr & other)
{
  std::swap(relation_, other.relation_);
  std::swap(lexpr_, other.lexpr_);

}

RelInnerLexpr::~RelInnerLexpr()
{
  delete(relation_);
  delete(lexpr_);

}

void RelInnerLexpr::accept(Visitor *v)
{
  v->visitRelInnerLexpr(this);
}

RelInnerLexpr *RelInnerLexpr::clone() const
{
  return new RelInnerLexpr(*this);
}



/********************   LessRel    ********************/
LessRel::LessRel()
{

}

LessRel::LessRel(const LessRel & other)
{

}

LessRel &LessRel::operator=(const LessRel & other)
{
  LessRel tmp(other);
  swap(tmp);
  return *this;
}

void LessRel::swap(LessRel & other)
{

}

LessRel::~LessRel()
{

}

void LessRel::accept(Visitor *v)
{
  v->visitLessRel(this);
}

LessRel *LessRel::clone() const
{
  return new LessRel(*this);
}



/********************   GreaterRel    ********************/
GreaterRel::GreaterRel()
{

}

GreaterRel::GreaterRel(const GreaterRel & other)
{

}

GreaterRel &GreaterRel::operator=(const GreaterRel & other)
{
  GreaterRel tmp(other);
  swap(tmp);
  return *this;
}

void GreaterRel::swap(GreaterRel & other)
{

}

GreaterRel::~GreaterRel()
{

}

void GreaterRel::accept(Visitor *v)
{
  v->visitGreaterRel(this);
}

GreaterRel *GreaterRel::clone() const
{
  return new GreaterRel(*this);
}



/********************   LessEqRel    ********************/
LessEqRel::LessEqRel()
{

}

LessEqRel::LessEqRel(const LessEqRel & other)
{

}

LessEqRel &LessEqRel::operator=(const LessEqRel & other)
{
  LessEqRel tmp(other);
  swap(tmp);
  return *this;
}

void LessEqRel::swap(LessEqRel & other)
{

}

LessEqRel::~LessEqRel()
{

}

void LessEqRel::accept(Visitor *v)
{
  v->visitLessEqRel(this);
}

LessEqRel *LessEqRel::clone() const
{
  return new LessEqRel(*this);
}



/********************   GreaterEqRel    ********************/
GreaterEqRel::GreaterEqRel()
{

}

GreaterEqRel::GreaterEqRel(const GreaterEqRel & other)
{

}

GreaterEqRel &GreaterEqRel::operator=(const GreaterEqRel & other)
{
  GreaterEqRel tmp(other);
  swap(tmp);
  return *this;
}

void GreaterEqRel::swap(GreaterEqRel & other)
{

}

GreaterEqRel::~GreaterEqRel()
{

}

void GreaterEqRel::accept(Visitor *v)
{
  v->visitGreaterEqRel(this);
}

GreaterEqRel *GreaterEqRel::clone() const
{
  return new GreaterEqRel(*this);
}



/********************   EqRel    ********************/
EqRel::EqRel()
{

}

EqRel::EqRel(const EqRel & other)
{

}

EqRel &EqRel::operator=(const EqRel & other)
{
  EqRel tmp(other);
  swap(tmp);
  return *this;
}

void EqRel::swap(EqRel & other)
{

}

EqRel::~EqRel()
{

}

void EqRel::accept(Visitor *v)
{
  v->visitEqRel(this);
}

EqRel *EqRel::clone() const
{
  return new EqRel(*this);
}



/********************   NotEqRel    ********************/
NotEqRel::NotEqRel()
{

}

NotEqRel::NotEqRel(const NotEqRel & other)
{

}

NotEqRel &NotEqRel::operator=(const NotEqRel & other)
{
  NotEqRel tmp(other);
  swap(tmp);
  return *this;
}

void NotEqRel::swap(NotEqRel & other)
{

}

NotEqRel::~NotEqRel()
{

}

void NotEqRel::accept(Visitor *v)
{
  v->visitNotEqRel(this);
}

NotEqRel *NotEqRel::clone() const
{
  return new NotEqRel(*this);
}



/********************   ForallBinderLexpr    ********************/
ForallBinderLexpr::ForallBinderLexpr(Binders *p1, Lexpr *p2)
{
  binders_ = p1;
  lexpr_ = p2;

}

ForallBinderLexpr::ForallBinderLexpr(const ForallBinderLexpr & other)
{
  binders_ = other.binders_->clone();
  lexpr_ = other.lexpr_->clone();

}

ForallBinderLexpr &ForallBinderLexpr::operator=(const ForallBinderLexpr & other)
{
  ForallBinderLexpr tmp(other);
  swap(tmp);
  return *this;
}

void ForallBinderLexpr::swap(ForallBinderLexpr & other)
{
  std::swap(binders_, other.binders_);
  std::swap(lexpr_, other.lexpr_);

}

ForallBinderLexpr::~ForallBinderLexpr()
{
  delete(binders_);
  delete(lexpr_);

}

void ForallBinderLexpr::accept(Visitor *v)
{
  v->visitForallBinderLexpr(this);
}

ForallBinderLexpr *ForallBinderLexpr::clone() const
{
  return new ForallBinderLexpr(*this);
}



/********************   ExistBinderLexpr    ********************/
ExistBinderLexpr::ExistBinderLexpr(Binders *p1, Lexpr *p2)
{
  binders_ = p1;
  lexpr_ = p2;

}

ExistBinderLexpr::ExistBinderLexpr(const ExistBinderLexpr & other)
{
  binders_ = other.binders_->clone();
  lexpr_ = other.lexpr_->clone();

}

ExistBinderLexpr &ExistBinderLexpr::operator=(const ExistBinderLexpr & other)
{
  ExistBinderLexpr tmp(other);
  swap(tmp);
  return *this;
}

void ExistBinderLexpr::swap(ExistBinderLexpr & other)
{
  std::swap(binders_, other.binders_);
  std::swap(lexpr_, other.lexpr_);

}

ExistBinderLexpr::~ExistBinderLexpr()
{
  delete(binders_);
  delete(lexpr_);

}

void ExistBinderLexpr::accept(Visitor *v)
{
  v->visitExistBinderLexpr(this);
}

ExistBinderLexpr *ExistBinderLexpr::clone() const
{
  return new ExistBinderLexpr(*this);
}



/********************   LambdaBinderLexpr    ********************/
LambdaBinderLexpr::LambdaBinderLexpr(Binders *p1, Lexpr *p2)
{
  binders_ = p1;
  lexpr_ = p2;

}

LambdaBinderLexpr::LambdaBinderLexpr(const LambdaBinderLexpr & other)
{
  binders_ = other.binders_->clone();
  lexpr_ = other.lexpr_->clone();

}

LambdaBinderLexpr &LambdaBinderLexpr::operator=(const LambdaBinderLexpr & other)
{
  LambdaBinderLexpr tmp(other);
  swap(tmp);
  return *this;
}

void LambdaBinderLexpr::swap(LambdaBinderLexpr & other)
{
  std::swap(binders_, other.binders_);
  std::swap(lexpr_, other.lexpr_);

}

LambdaBinderLexpr::~LambdaBinderLexpr()
{
  delete(binders_);
  delete(lexpr_);

}

void LambdaBinderLexpr::accept(Visitor *v)
{
  v->visitLambdaBinderLexpr(this);
}

LambdaBinderLexpr *LambdaBinderLexpr::clone() const
{
  return new LambdaBinderLexpr(*this);
}



/********************   TheBinders    ********************/
TheBinders::TheBinders(TypeSpecOFTYPENAME *p1, VarSpec *p2, ListBindersReentrance *p3)
{
  typespecoftypename_ = p1;
  varspec_ = p2;
  listbindersreentrance_ = p3;

}

TheBinders::TheBinders(const TheBinders & other)
{
  typespecoftypename_ = other.typespecoftypename_->clone();
  varspec_ = other.varspec_->clone();
  listbindersreentrance_ = other.listbindersreentrance_->clone();

}

TheBinders &TheBinders::operator=(const TheBinders & other)
{
  TheBinders tmp(other);
  swap(tmp);
  return *this;
}

void TheBinders::swap(TheBinders & other)
{
  std::swap(typespecoftypename_, other.typespecoftypename_);
  std::swap(varspec_, other.varspec_);
  std::swap(listbindersreentrance_, other.listbindersreentrance_);

}

TheBinders::~TheBinders()
{
  delete(typespecoftypename_);
  delete(varspec_);
  delete(listbindersreentrance_);

}

void TheBinders::accept(Visitor *v)
{
  v->visitTheBinders(this);
}

TheBinders *TheBinders::clone() const
{
  return new TheBinders(*this);
}



/********************   TypeSpecTYPENAME    ********************/
TypeSpecTYPENAME::TypeSpecTYPENAME(Ident p1)
{
  ident_ = p1;

}

TypeSpecTYPENAME::TypeSpecTYPENAME(const TypeSpecTYPENAME & other)
{
  ident_ = other.ident_;

}

TypeSpecTYPENAME &TypeSpecTYPENAME::operator=(const TypeSpecTYPENAME & other)
{
  TypeSpecTYPENAME tmp(other);
  swap(tmp);
  return *this;
}

void TypeSpecTYPENAME::swap(TypeSpecTYPENAME & other)
{
  std::swap(ident_, other.ident_);

}

TypeSpecTYPENAME::~TypeSpecTYPENAME()
{

}

void TypeSpecTYPENAME::accept(Visitor *v)
{
  v->visitTypeSpecTYPENAME(this);
}

TypeSpecTYPENAME *TypeSpecTYPENAME::clone() const
{
  return new TypeSpecTYPENAME(*this);
}



/********************   TypeSpecSimpleFromTypenameTypeSpec    ********************/
TypeSpecSimpleFromTypenameTypeSpec::TypeSpecSimpleFromTypenameTypeSpec(TypeSpecSimple *p1)
{
  typespecsimple_ = p1;

}

TypeSpecSimpleFromTypenameTypeSpec::TypeSpecSimpleFromTypenameTypeSpec(const TypeSpecSimpleFromTypenameTypeSpec & other)
{
  typespecsimple_ = other.typespecsimple_->clone();

}

TypeSpecSimpleFromTypenameTypeSpec &TypeSpecSimpleFromTypenameTypeSpec::operator=(const TypeSpecSimpleFromTypenameTypeSpec & other)
{
  TypeSpecSimpleFromTypenameTypeSpec tmp(other);
  swap(tmp);
  return *this;
}

void TypeSpecSimpleFromTypenameTypeSpec::swap(TypeSpecSimpleFromTypenameTypeSpec & other)
{
  std::swap(typespecsimple_, other.typespecsimple_);

}

TypeSpecSimpleFromTypenameTypeSpec::~TypeSpecSimpleFromTypenameTypeSpec()
{
  delete(typespecsimple_);

}

void TypeSpecSimpleFromTypenameTypeSpec::accept(Visitor *v)
{
  v->visitTypeSpecSimpleFromTypenameTypeSpec(this);
}

TypeSpecSimpleFromTypenameTypeSpec *TypeSpecSimpleFromTypenameTypeSpec::clone() const
{
  return new TypeSpecSimpleFromTypenameTypeSpec(*this);
}



/********************   BindersReentranceDeclSpec    ********************/
BindersReentranceDeclSpec::BindersReentranceDeclSpec(TypeSpecOFTYPENAME *p1, VarSpec *p2)
{
  typespecoftypename_ = p1;
  varspec_ = p2;

}

BindersReentranceDeclSpec::BindersReentranceDeclSpec(const BindersReentranceDeclSpec & other)
{
  typespecoftypename_ = other.typespecoftypename_->clone();
  varspec_ = other.varspec_->clone();

}

BindersReentranceDeclSpec &BindersReentranceDeclSpec::operator=(const BindersReentranceDeclSpec & other)
{
  BindersReentranceDeclSpec tmp(other);
  swap(tmp);
  return *this;
}

void BindersReentranceDeclSpec::swap(BindersReentranceDeclSpec & other)
{
  std::swap(typespecoftypename_, other.typespecoftypename_);
  std::swap(varspec_, other.varspec_);

}

BindersReentranceDeclSpec::~BindersReentranceDeclSpec()
{
  delete(typespecoftypename_);
  delete(varspec_);

}

void BindersReentranceDeclSpec::accept(Visitor *v)
{
  v->visitBindersReentranceDeclSpec(this);
}

BindersReentranceDeclSpec *BindersReentranceDeclSpec::clone() const
{
  return new BindersReentranceDeclSpec(*this);
}



/********************   BindersReentranceVarSpec    ********************/
BindersReentranceVarSpec::BindersReentranceVarSpec(VarSpec *p1)
{
  varspec_ = p1;

}

BindersReentranceVarSpec::BindersReentranceVarSpec(const BindersReentranceVarSpec & other)
{
  varspec_ = other.varspec_->clone();

}

BindersReentranceVarSpec &BindersReentranceVarSpec::operator=(const BindersReentranceVarSpec & other)
{
  BindersReentranceVarSpec tmp(other);
  swap(tmp);
  return *this;
}

void BindersReentranceVarSpec::swap(BindersReentranceVarSpec & other)
{
  std::swap(varspec_, other.varspec_);

}

BindersReentranceVarSpec::~BindersReentranceVarSpec()
{
  delete(varspec_);

}

void BindersReentranceVarSpec::accept(Visitor *v)
{
  v->visitBindersReentranceVarSpec(this);
}

BindersReentranceVarSpec *BindersReentranceVarSpec::clone() const
{
  return new BindersReentranceVarSpec(*this);
}



/********************   StartVarSpec    ********************/
StartVarSpec::StartVarSpec(ListStars *p1, VarSpec *p2)
{
  liststars_ = p1;
  varspec_ = p2;

}

StartVarSpec::StartVarSpec(const StartVarSpec & other)
{
  liststars_ = other.liststars_->clone();
  varspec_ = other.varspec_->clone();

}

StartVarSpec &StartVarSpec::operator=(const StartVarSpec & other)
{
  StartVarSpec tmp(other);
  swap(tmp);
  return *this;
}

void StartVarSpec::swap(StartVarSpec & other)
{
  std::swap(liststars_, other.liststars_);
  std::swap(varspec_, other.varspec_);

}

StartVarSpec::~StartVarSpec()
{
  delete(liststars_);
  delete(varspec_);

}

void StartVarSpec::accept(Visitor *v)
{
  v->visitStartVarSpec(this);
}

StartVarSpec *StartVarSpec::clone() const
{
  return new StartVarSpec(*this);
}



/********************   SimpleSpec    ********************/
SimpleSpec::SimpleSpec(FullIdentifier *p1)
{
  fullidentifier_ = p1;

}

SimpleSpec::SimpleSpec(const SimpleSpec & other)
{
  fullidentifier_ = other.fullidentifier_->clone();

}

SimpleSpec &SimpleSpec::operator=(const SimpleSpec & other)
{
  SimpleSpec tmp(other);
  swap(tmp);
  return *this;
}

void SimpleSpec::swap(SimpleSpec & other)
{
  std::swap(fullidentifier_, other.fullidentifier_);

}

SimpleSpec::~SimpleSpec()
{
  delete(fullidentifier_);

}

void SimpleSpec::accept(Visitor *v)
{
  v->visitSimpleSpec(this);
}

SimpleSpec *SimpleSpec::clone() const
{
  return new SimpleSpec(*this);
}



/********************   ArraySpec    ********************/
ArraySpec::ArraySpec(VarSpec *p1, ArraySize *p2)
{
  varspec_ = p1;
  arraysize_ = p2;

}

ArraySpec::ArraySpec(const ArraySpec & other)
{
  varspec_ = other.varspec_->clone();
  arraysize_ = other.arraysize_->clone();

}

ArraySpec &ArraySpec::operator=(const ArraySpec & other)
{
  ArraySpec tmp(other);
  swap(tmp);
  return *this;
}

void ArraySpec::swap(ArraySpec & other)
{
  std::swap(varspec_, other.varspec_);
  std::swap(arraysize_, other.arraysize_);

}

ArraySpec::~ArraySpec()
{
  delete(varspec_);
  delete(arraysize_);

}

void ArraySpec::accept(Visitor *v)
{
  v->visitArraySpec(this);
}

ArraySpec *ArraySpec::clone() const
{
  return new ArraySpec(*this);
}



/********************   Star    ********************/
Star::Star()
{

}

Star::Star(const Star & other)
{

}

Star &Star::operator=(const Star & other)
{
  Star tmp(other);
  swap(tmp);
  return *this;
}

void Star::swap(Star & other)
{

}

Star::~Star()
{

}

void Star::accept(Visitor *v)
{
  v->visitStar(this);
}

Star *Star::clone() const
{
  return new Star(*this);
}



/********************   IntConstArraySize    ********************/
IntConstArraySize::IntConstArraySize(Integer p1)
{
  integer_ = p1;

}

IntConstArraySize::IntConstArraySize(const IntConstArraySize & other)
{
  integer_ = other.integer_;

}

IntConstArraySize &IntConstArraySize::operator=(const IntConstArraySize & other)
{
  IntConstArraySize tmp(other);
  swap(tmp);
  return *this;
}

void IntConstArraySize::swap(IntConstArraySize & other)
{
  std::swap(integer_, other.integer_);

}

IntConstArraySize::~IntConstArraySize()
{

}

void IntConstArraySize::accept(Visitor *v)
{
  v->visitIntConstArraySize(this);
}

IntConstArraySize *IntConstArraySize::clone() const
{
  return new IntConstArraySize(*this);
}



/********************   SomeArraySize    ********************/
SomeArraySize::SomeArraySize(FullIdentifier *p1)
{
  fullidentifier_ = p1;

}

SomeArraySize::SomeArraySize(const SomeArraySize & other)
{
  fullidentifier_ = other.fullidentifier_->clone();

}

SomeArraySize &SomeArraySize::operator=(const SomeArraySize & other)
{
  SomeArraySize tmp(other);
  swap(tmp);
  return *this;
}

void SomeArraySize::swap(SomeArraySize & other)
{
  std::swap(fullidentifier_, other.fullidentifier_);

}

SomeArraySize::~SomeArraySize()
{
  delete(fullidentifier_);

}

void SomeArraySize::accept(Visitor *v)
{
  v->visitSomeArraySize(this);
}

SomeArraySize *SomeArraySize::clone() const
{
  return new SomeArraySize(*this);
}



/********************   NoSize    ********************/
NoSize::NoSize()
{

}

NoSize::NoSize(const NoSize & other)
{

}

NoSize &NoSize::operator=(const NoSize & other)
{
  NoSize tmp(other);
  swap(tmp);
  return *this;
}

void NoSize::swap(NoSize & other)
{

}

NoSize::~NoSize()
{

}

void NoSize::accept(Visitor *v)
{
  v->visitNoSize(this);
}

NoSize *NoSize::clone() const
{
  return new NoSize(*this);
}



/********************   OptLabelOne    ********************/
OptLabelOne::OptLabelOne(OptLabelList *p1)
{
  optlabellist_ = p1;

}

OptLabelOne::OptLabelOne(const OptLabelOne & other)
{
  optlabellist_ = other.optlabellist_->clone();

}

OptLabelOne &OptLabelOne::operator=(const OptLabelOne & other)
{
  OptLabelOne tmp(other);
  swap(tmp);
  return *this;
}

void OptLabelOne::swap(OptLabelOne & other)
{
  std::swap(optlabellist_, other.optlabellist_);

}

OptLabelOne::~OptLabelOne()
{
  delete(optlabellist_);

}

void OptLabelOne::accept(Visitor *v)
{
  v->visitOptLabelOne(this);
}

OptLabelOne *OptLabelOne::clone() const
{
  return new OptLabelOne(*this);
}



/********************   OptLabelTwo    ********************/
OptLabelTwo::OptLabelTwo(OptLabelList *p1)
{
  optlabellist_ = p1;

}

OptLabelTwo::OptLabelTwo(const OptLabelTwo & other)
{
  optlabellist_ = other.optlabellist_->clone();

}

OptLabelTwo &OptLabelTwo::operator=(const OptLabelTwo & other)
{
  OptLabelTwo tmp(other);
  swap(tmp);
  return *this;
}

void OptLabelTwo::swap(OptLabelTwo & other)
{
  std::swap(optlabellist_, other.optlabellist_);

}

OptLabelTwo::~OptLabelTwo()
{
  delete(optlabellist_);

}

void OptLabelTwo::accept(Visitor *v)
{
  v->visitOptLabelTwo(this);
}

OptLabelTwo *OptLabelTwo::clone() const
{
  return new OptLabelTwo(*this);
}



/********************   NoLableList    ********************/
NoLableList::NoLableList()
{

}

NoLableList::NoLableList(const NoLableList & other)
{

}

NoLableList &NoLableList::operator=(const NoLableList & other)
{
  NoLableList tmp(other);
  swap(tmp);
  return *this;
}

void NoLableList::swap(NoLableList & other)
{

}

NoLableList::~NoLableList()
{

}

void NoLableList::accept(Visitor *v)
{
  v->visitNoLableList(this);
}

NoLableList *NoLableList::clone() const
{
  return new NoLableList(*this);
}



/********************   LableList    ********************/
LableList::LableList(ListLabelName *p1)
{
  listlabelname_ = p1;

}

LableList::LableList(const LableList & other)
{
  listlabelname_ = other.listlabelname_->clone();

}

LableList &LableList::operator=(const LableList & other)
{
  LableList tmp(other);
  swap(tmp);
  return *this;
}

void LableList::swap(LableList & other)
{
  std::swap(listlabelname_, other.listlabelname_);

}

LableList::~LableList()
{
  delete(listlabelname_);

}

void LableList::accept(Visitor *v)
{
  v->visitLableList(this);
}

LableList *LableList::clone() const
{
  return new LableList(*this);
}



/********************   LableName    ********************/
LableName::LableName(AnyIdentifier *p1)
{
  anyidentifier_ = p1;

}

LableName::LableName(const LableName & other)
{
  anyidentifier_ = other.anyidentifier_->clone();

}

LableName &LableName::operator=(const LableName & other)
{
  LableName tmp(other);
  swap(tmp);
  return *this;
}

void LableName::swap(LableName & other)
{
  std::swap(anyidentifier_, other.anyidentifier_);

}

LableName::~LableName()
{
  delete(anyidentifier_);

}

void LableName::accept(Visitor *v)
{
  v->visitLableName(this);
}

LableName *LableName::clone() const
{
  return new LableName(*this);
}



/********************   LexprRange    ********************/
LexprRange::LexprRange(LexprOption *p1, LexprOption *p2)
{
  lexproption_1 = p1;
  lexproption_2 = p2;

}

LexprRange::LexprRange(const LexprRange & other)
{
  lexproption_1 = other.lexproption_1->clone();
  lexproption_2 = other.lexproption_2->clone();

}

LexprRange &LexprRange::operator=(const LexprRange & other)
{
  LexprRange tmp(other);
  swap(tmp);
  return *this;
}

void LexprRange::swap(LexprRange & other)
{
  std::swap(lexproption_1, other.lexproption_1);
  std::swap(lexproption_2, other.lexproption_2);

}

LexprRange::~LexprRange()
{
  delete(lexproption_1);
  delete(lexproption_2);

}

void LexprRange::accept(Visitor *v)
{
  v->visitLexprRange(this);
}

LexprRange *LexprRange::clone() const
{
  return new LexprRange(*this);
}



/********************   NoLexprOption    ********************/
NoLexprOption::NoLexprOption()
{

}

NoLexprOption::NoLexprOption(const NoLexprOption & other)
{

}

NoLexprOption &NoLexprOption::operator=(const NoLexprOption & other)
{
  NoLexprOption tmp(other);
  swap(tmp);
  return *this;
}

void NoLexprOption::swap(NoLexprOption & other)
{

}

NoLexprOption::~NoLexprOption()
{

}

void NoLexprOption::accept(Visitor *v)
{
  v->visitNoLexprOption(this);
}

NoLexprOption *NoLexprOption::clone() const
{
  return new NoLexprOption(*this);
}



/********************   SomeLexprOption    ********************/
SomeLexprOption::SomeLexprOption(Lexpr *p1)
{
  lexpr_ = p1;

}

SomeLexprOption::SomeLexprOption(const SomeLexprOption & other)
{
  lexpr_ = other.lexpr_->clone();

}

SomeLexprOption &SomeLexprOption::operator=(const SomeLexprOption & other)
{
  SomeLexprOption tmp(other);
  swap(tmp);
  return *this;
}

void SomeLexprOption::swap(SomeLexprOption & other)
{
  std::swap(lexpr_, other.lexpr_);

}

SomeLexprOption::~SomeLexprOption()
{
  delete(lexpr_);

}

void SomeLexprOption::accept(Visitor *v)
{
  v->visitSomeLexprOption(this);
}

SomeLexprOption *SomeLexprOption::clone() const
{
  return new SomeLexprOption(*this);
}



/********************   SimpleIdentifierAny    ********************/
SimpleIdentifierAny::SimpleIdentifierAny(Identifier *p1)
{
  identifier_ = p1;

}

SimpleIdentifierAny::SimpleIdentifierAny(const SimpleIdentifierAny & other)
{
  identifier_ = other.identifier_->clone();

}

SimpleIdentifierAny &SimpleIdentifierAny::operator=(const SimpleIdentifierAny & other)
{
  SimpleIdentifierAny tmp(other);
  swap(tmp);
  return *this;
}

void SimpleIdentifierAny::swap(SimpleIdentifierAny & other)
{
  std::swap(identifier_, other.identifier_);

}

SimpleIdentifierAny::~SimpleIdentifierAny()
{
  delete(identifier_);

}

void SimpleIdentifierAny::accept(Visitor *v)
{
  v->visitSimpleIdentifierAny(this);
}

SimpleIdentifierAny *SimpleIdentifierAny::clone() const
{
  return new SimpleIdentifierAny(*this);
}



/********************   EnsuresKeyWord    ********************/
EnsuresKeyWord::EnsuresKeyWord()
{

}

EnsuresKeyWord::EnsuresKeyWord(const EnsuresKeyWord & other)
{

}

EnsuresKeyWord &EnsuresKeyWord::operator=(const EnsuresKeyWord & other)
{
  EnsuresKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void EnsuresKeyWord::swap(EnsuresKeyWord & other)
{

}

EnsuresKeyWord::~EnsuresKeyWord()
{

}

void EnsuresKeyWord::accept(Visitor *v)
{
  v->visitEnsuresKeyWord(this);
}

EnsuresKeyWord *EnsuresKeyWord::clone() const
{
  return new EnsuresKeyWord(*this);
}



/********************   ExitsKeyWord    ********************/
ExitsKeyWord::ExitsKeyWord()
{

}

ExitsKeyWord::ExitsKeyWord(const ExitsKeyWord & other)
{

}

ExitsKeyWord &ExitsKeyWord::operator=(const ExitsKeyWord & other)
{
  ExitsKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void ExitsKeyWord::swap(ExitsKeyWord & other)
{

}

ExitsKeyWord::~ExitsKeyWord()
{

}

void ExitsKeyWord::accept(Visitor *v)
{
  v->visitExitsKeyWord(this);
}

ExitsKeyWord *ExitsKeyWord::clone() const
{
  return new ExitsKeyWord(*this);
}



/********************   BreaksKeyWord    ********************/
BreaksKeyWord::BreaksKeyWord()
{

}

BreaksKeyWord::BreaksKeyWord(const BreaksKeyWord & other)
{

}

BreaksKeyWord &BreaksKeyWord::operator=(const BreaksKeyWord & other)
{
  BreaksKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void BreaksKeyWord::swap(BreaksKeyWord & other)
{

}

BreaksKeyWord::~BreaksKeyWord()
{

}

void BreaksKeyWord::accept(Visitor *v)
{
  v->visitBreaksKeyWord(this);
}

BreaksKeyWord *BreaksKeyWord::clone() const
{
  return new BreaksKeyWord(*this);
}



/********************   ContinuesKeyWord    ********************/
ContinuesKeyWord::ContinuesKeyWord()
{

}

ContinuesKeyWord::ContinuesKeyWord(const ContinuesKeyWord & other)
{

}

ContinuesKeyWord &ContinuesKeyWord::operator=(const ContinuesKeyWord & other)
{
  ContinuesKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void ContinuesKeyWord::swap(ContinuesKeyWord & other)
{

}

ContinuesKeyWord::~ContinuesKeyWord()
{

}

void ContinuesKeyWord::accept(Visitor *v)
{
  v->visitContinuesKeyWord(this);
}

ContinuesKeyWord *ContinuesKeyWord::clone() const
{
  return new ContinuesKeyWord(*this);
}



/********************   ReturnsKeyWord    ********************/
ReturnsKeyWord::ReturnsKeyWord()
{

}

ReturnsKeyWord::ReturnsKeyWord(const ReturnsKeyWord & other)
{

}

ReturnsKeyWord &ReturnsKeyWord::operator=(const ReturnsKeyWord & other)
{
  ReturnsKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void ReturnsKeyWord::swap(ReturnsKeyWord & other)
{

}

ReturnsKeyWord::~ReturnsKeyWord()
{

}

void ReturnsKeyWord::accept(Visitor *v)
{
  v->visitReturnsKeyWord(this);
}

ReturnsKeyWord *ReturnsKeyWord::clone() const
{
  return new ReturnsKeyWord(*this);
}



/********************   CheckEnsuresKeyWord    ********************/
CheckEnsuresKeyWord::CheckEnsuresKeyWord()
{

}

CheckEnsuresKeyWord::CheckEnsuresKeyWord(const CheckEnsuresKeyWord & other)
{

}

CheckEnsuresKeyWord &CheckEnsuresKeyWord::operator=(const CheckEnsuresKeyWord & other)
{
  CheckEnsuresKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void CheckEnsuresKeyWord::swap(CheckEnsuresKeyWord & other)
{

}

CheckEnsuresKeyWord::~CheckEnsuresKeyWord()
{

}

void CheckEnsuresKeyWord::accept(Visitor *v)
{
  v->visitCheckEnsuresKeyWord(this);
}

CheckEnsuresKeyWord *CheckEnsuresKeyWord::clone() const
{
  return new CheckEnsuresKeyWord(*this);
}



/********************   CheckExitsKeyWord    ********************/
CheckExitsKeyWord::CheckExitsKeyWord()
{

}

CheckExitsKeyWord::CheckExitsKeyWord(const CheckExitsKeyWord & other)
{

}

CheckExitsKeyWord &CheckExitsKeyWord::operator=(const CheckExitsKeyWord & other)
{
  CheckExitsKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void CheckExitsKeyWord::swap(CheckExitsKeyWord & other)
{

}

CheckExitsKeyWord::~CheckExitsKeyWord()
{

}

void CheckExitsKeyWord::accept(Visitor *v)
{
  v->visitCheckExitsKeyWord(this);
}

CheckExitsKeyWord *CheckExitsKeyWord::clone() const
{
  return new CheckExitsKeyWord(*this);
}



/********************   CheckBreaksKeyWord    ********************/
CheckBreaksKeyWord::CheckBreaksKeyWord()
{

}

CheckBreaksKeyWord::CheckBreaksKeyWord(const CheckBreaksKeyWord & other)
{

}

CheckBreaksKeyWord &CheckBreaksKeyWord::operator=(const CheckBreaksKeyWord & other)
{
  CheckBreaksKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void CheckBreaksKeyWord::swap(CheckBreaksKeyWord & other)
{

}

CheckBreaksKeyWord::~CheckBreaksKeyWord()
{

}

void CheckBreaksKeyWord::accept(Visitor *v)
{
  v->visitCheckBreaksKeyWord(this);
}

CheckBreaksKeyWord *CheckBreaksKeyWord::clone() const
{
  return new CheckBreaksKeyWord(*this);
}



/********************   CheckContinuesKeyWord    ********************/
CheckContinuesKeyWord::CheckContinuesKeyWord()
{

}

CheckContinuesKeyWord::CheckContinuesKeyWord(const CheckContinuesKeyWord & other)
{

}

CheckContinuesKeyWord &CheckContinuesKeyWord::operator=(const CheckContinuesKeyWord & other)
{
  CheckContinuesKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void CheckContinuesKeyWord::swap(CheckContinuesKeyWord & other)
{

}

CheckContinuesKeyWord::~CheckContinuesKeyWord()
{

}

void CheckContinuesKeyWord::accept(Visitor *v)
{
  v->visitCheckContinuesKeyWord(this);
}

CheckContinuesKeyWord *CheckContinuesKeyWord::clone() const
{
  return new CheckContinuesKeyWord(*this);
}



/********************   CheckReturnsKeyWord    ********************/
CheckReturnsKeyWord::CheckReturnsKeyWord()
{

}

CheckReturnsKeyWord::CheckReturnsKeyWord(const CheckReturnsKeyWord & other)
{

}

CheckReturnsKeyWord &CheckReturnsKeyWord::operator=(const CheckReturnsKeyWord & other)
{
  CheckReturnsKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void CheckReturnsKeyWord::swap(CheckReturnsKeyWord & other)
{

}

CheckReturnsKeyWord::~CheckReturnsKeyWord()
{

}

void CheckReturnsKeyWord::accept(Visitor *v)
{
  v->visitCheckReturnsKeyWord(this);
}

CheckReturnsKeyWord *CheckReturnsKeyWord::clone() const
{
  return new CheckReturnsKeyWord(*this);
}



/********************   AdmitEnsuresKeyWord    ********************/
AdmitEnsuresKeyWord::AdmitEnsuresKeyWord()
{

}

AdmitEnsuresKeyWord::AdmitEnsuresKeyWord(const AdmitEnsuresKeyWord & other)
{

}

AdmitEnsuresKeyWord &AdmitEnsuresKeyWord::operator=(const AdmitEnsuresKeyWord & other)
{
  AdmitEnsuresKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void AdmitEnsuresKeyWord::swap(AdmitEnsuresKeyWord & other)
{

}

AdmitEnsuresKeyWord::~AdmitEnsuresKeyWord()
{

}

void AdmitEnsuresKeyWord::accept(Visitor *v)
{
  v->visitAdmitEnsuresKeyWord(this);
}

AdmitEnsuresKeyWord *AdmitEnsuresKeyWord::clone() const
{
  return new AdmitEnsuresKeyWord(*this);
}



/********************   AdmitExitsKeyWord    ********************/
AdmitExitsKeyWord::AdmitExitsKeyWord()
{

}

AdmitExitsKeyWord::AdmitExitsKeyWord(const AdmitExitsKeyWord & other)
{

}

AdmitExitsKeyWord &AdmitExitsKeyWord::operator=(const AdmitExitsKeyWord & other)
{
  AdmitExitsKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void AdmitExitsKeyWord::swap(AdmitExitsKeyWord & other)
{

}

AdmitExitsKeyWord::~AdmitExitsKeyWord()
{

}

void AdmitExitsKeyWord::accept(Visitor *v)
{
  v->visitAdmitExitsKeyWord(this);
}

AdmitExitsKeyWord *AdmitExitsKeyWord::clone() const
{
  return new AdmitExitsKeyWord(*this);
}



/********************   AdmitBreaksKeyWord    ********************/
AdmitBreaksKeyWord::AdmitBreaksKeyWord()
{

}

AdmitBreaksKeyWord::AdmitBreaksKeyWord(const AdmitBreaksKeyWord & other)
{

}

AdmitBreaksKeyWord &AdmitBreaksKeyWord::operator=(const AdmitBreaksKeyWord & other)
{
  AdmitBreaksKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void AdmitBreaksKeyWord::swap(AdmitBreaksKeyWord & other)
{

}

AdmitBreaksKeyWord::~AdmitBreaksKeyWord()
{

}

void AdmitBreaksKeyWord::accept(Visitor *v)
{
  v->visitAdmitBreaksKeyWord(this);
}

AdmitBreaksKeyWord *AdmitBreaksKeyWord::clone() const
{
  return new AdmitBreaksKeyWord(*this);
}



/********************   AdmitContinuesKeyWord    ********************/
AdmitContinuesKeyWord::AdmitContinuesKeyWord()
{

}

AdmitContinuesKeyWord::AdmitContinuesKeyWord(const AdmitContinuesKeyWord & other)
{

}

AdmitContinuesKeyWord &AdmitContinuesKeyWord::operator=(const AdmitContinuesKeyWord & other)
{
  AdmitContinuesKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void AdmitContinuesKeyWord::swap(AdmitContinuesKeyWord & other)
{

}

AdmitContinuesKeyWord::~AdmitContinuesKeyWord()
{

}

void AdmitContinuesKeyWord::accept(Visitor *v)
{
  v->visitAdmitContinuesKeyWord(this);
}

AdmitContinuesKeyWord *AdmitContinuesKeyWord::clone() const
{
  return new AdmitContinuesKeyWord(*this);
}



/********************   AdmitReturnsKeyWord    ********************/
AdmitReturnsKeyWord::AdmitReturnsKeyWord()
{

}

AdmitReturnsKeyWord::AdmitReturnsKeyWord(const AdmitReturnsKeyWord & other)
{

}

AdmitReturnsKeyWord &AdmitReturnsKeyWord::operator=(const AdmitReturnsKeyWord & other)
{
  AdmitReturnsKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void AdmitReturnsKeyWord::swap(AdmitReturnsKeyWord & other)
{

}

AdmitReturnsKeyWord::~AdmitReturnsKeyWord()
{

}

void AdmitReturnsKeyWord::accept(Visitor *v)
{
  v->visitAdmitReturnsKeyWord(this);
}

AdmitReturnsKeyWord *AdmitReturnsKeyWord::clone() const
{
  return new AdmitReturnsKeyWord(*this);
}



/********************   SimpleIdentifierFull    ********************/
SimpleIdentifierFull::SimpleIdentifierFull(Identifier *p1)
{
  identifier_ = p1;

}

SimpleIdentifierFull::SimpleIdentifierFull(const SimpleIdentifierFull & other)
{
  identifier_ = other.identifier_->clone();

}

SimpleIdentifierFull &SimpleIdentifierFull::operator=(const SimpleIdentifierFull & other)
{
  SimpleIdentifierFull tmp(other);
  swap(tmp);
  return *this;
}

void SimpleIdentifierFull::swap(SimpleIdentifierFull & other)
{
  std::swap(identifier_, other.identifier_);

}

SimpleIdentifierFull::~SimpleIdentifierFull()
{
  delete(identifier_);

}

void SimpleIdentifierFull::accept(Visitor *v)
{
  v->visitSimpleIdentifierFull(this);
}

SimpleIdentifierFull *SimpleIdentifierFull::clone() const
{
  return new SimpleIdentifierFull(*this);
}



/********************   AdmitKeyWordFullIdent    ********************/
AdmitKeyWordFullIdent::AdmitKeyWordFullIdent()
{

}

AdmitKeyWordFullIdent::AdmitKeyWordFullIdent(const AdmitKeyWordFullIdent & other)
{

}

AdmitKeyWordFullIdent &AdmitKeyWordFullIdent::operator=(const AdmitKeyWordFullIdent & other)
{
  AdmitKeyWordFullIdent tmp(other);
  swap(tmp);
  return *this;
}

void AdmitKeyWordFullIdent::swap(AdmitKeyWordFullIdent & other)
{

}

AdmitKeyWordFullIdent::~AdmitKeyWordFullIdent()
{

}

void AdmitKeyWordFullIdent::accept(Visitor *v)
{
  v->visitAdmitKeyWordFullIdent(this);
}

AdmitKeyWordFullIdent *AdmitKeyWordFullIdent::clone() const
{
  return new AdmitKeyWordFullIdent(*this);
}



/********************   AllocatesKeyWordFullIdent    ********************/
AllocatesKeyWordFullIdent::AllocatesKeyWordFullIdent()
{

}

AllocatesKeyWordFullIdent::AllocatesKeyWordFullIdent(const AllocatesKeyWordFullIdent & other)
{

}

AllocatesKeyWordFullIdent &AllocatesKeyWordFullIdent::operator=(const AllocatesKeyWordFullIdent & other)
{
  AllocatesKeyWordFullIdent tmp(other);
  swap(tmp);
  return *this;
}

void AllocatesKeyWordFullIdent::swap(AllocatesKeyWordFullIdent & other)
{

}

AllocatesKeyWordFullIdent::~AllocatesKeyWordFullIdent()
{

}

void AllocatesKeyWordFullIdent::accept(Visitor *v)
{
  v->visitAllocatesKeyWordFullIdent(this);
}

AllocatesKeyWordFullIdent *AllocatesKeyWordFullIdent::clone() const
{
  return new AllocatesKeyWordFullIdent(*this);
}



/********************   AssertKeyWordFullIdent    ********************/
AssertKeyWordFullIdent::AssertKeyWordFullIdent()
{

}

AssertKeyWordFullIdent::AssertKeyWordFullIdent(const AssertKeyWordFullIdent & other)
{

}

AssertKeyWordFullIdent &AssertKeyWordFullIdent::operator=(const AssertKeyWordFullIdent & other)
{
  AssertKeyWordFullIdent tmp(other);
  swap(tmp);
  return *this;
}

void AssertKeyWordFullIdent::swap(AssertKeyWordFullIdent & other)
{

}

AssertKeyWordFullIdent::~AssertKeyWordFullIdent()
{

}

void AssertKeyWordFullIdent::accept(Visitor *v)
{
  v->visitAssertKeyWordFullIdent(this);
}

AssertKeyWordFullIdent *AssertKeyWordFullIdent::clone() const
{
  return new AssertKeyWordFullIdent(*this);
}



/********************   AssignsKeyWordFullIdent    ********************/
AssignsKeyWordFullIdent::AssignsKeyWordFullIdent()
{

}

AssignsKeyWordFullIdent::AssignsKeyWordFullIdent(const AssignsKeyWordFullIdent & other)
{

}

AssignsKeyWordFullIdent &AssignsKeyWordFullIdent::operator=(const AssignsKeyWordFullIdent & other)
{
  AssignsKeyWordFullIdent tmp(other);
  swap(tmp);
  return *this;
}

void AssignsKeyWordFullIdent::swap(AssignsKeyWordFullIdent & other)
{

}

AssignsKeyWordFullIdent::~AssignsKeyWordFullIdent()
{

}

void AssignsKeyWordFullIdent::accept(Visitor *v)
{
  v->visitAssignsKeyWordFullIdent(this);
}

AssignsKeyWordFullIdent *AssignsKeyWordFullIdent::clone() const
{
  return new AssignsKeyWordFullIdent(*this);
}



/********************   AssumesKeyWordFullIdent    ********************/
AssumesKeyWordFullIdent::AssumesKeyWordFullIdent()
{

}

AssumesKeyWordFullIdent::AssumesKeyWordFullIdent(const AssumesKeyWordFullIdent & other)
{

}

AssumesKeyWordFullIdent &AssumesKeyWordFullIdent::operator=(const AssumesKeyWordFullIdent & other)
{
  AssumesKeyWordFullIdent tmp(other);
  swap(tmp);
  return *this;
}

void AssumesKeyWordFullIdent::swap(AssumesKeyWordFullIdent & other)
{

}

AssumesKeyWordFullIdent::~AssumesKeyWordFullIdent()
{

}

void AssumesKeyWordFullIdent::accept(Visitor *v)
{
  v->visitAssumesKeyWordFullIdent(this);
}

AssumesKeyWordFullIdent *AssumesKeyWordFullIdent::clone() const
{
  return new AssumesKeyWordFullIdent(*this);
}



/********************   AtKeyWordFullIdent    ********************/
AtKeyWordFullIdent::AtKeyWordFullIdent()
{

}

AtKeyWordFullIdent::AtKeyWordFullIdent(const AtKeyWordFullIdent & other)
{

}

AtKeyWordFullIdent &AtKeyWordFullIdent::operator=(const AtKeyWordFullIdent & other)
{
  AtKeyWordFullIdent tmp(other);
  swap(tmp);
  return *this;
}

void AtKeyWordFullIdent::swap(AtKeyWordFullIdent & other)
{

}

AtKeyWordFullIdent::~AtKeyWordFullIdent()
{

}

void AtKeyWordFullIdent::accept(Visitor *v)
{
  v->visitAtKeyWordFullIdent(this);
}

AtKeyWordFullIdent *AtKeyWordFullIdent::clone() const
{
  return new AtKeyWordFullIdent(*this);
}



/********************   AxiomKeyWordFullIdent    ********************/
AxiomKeyWordFullIdent::AxiomKeyWordFullIdent()
{

}

AxiomKeyWordFullIdent::AxiomKeyWordFullIdent(const AxiomKeyWordFullIdent & other)
{

}

AxiomKeyWordFullIdent &AxiomKeyWordFullIdent::operator=(const AxiomKeyWordFullIdent & other)
{
  AxiomKeyWordFullIdent tmp(other);
  swap(tmp);
  return *this;
}

void AxiomKeyWordFullIdent::swap(AxiomKeyWordFullIdent & other)
{

}

AxiomKeyWordFullIdent::~AxiomKeyWordFullIdent()
{

}

void AxiomKeyWordFullIdent::accept(Visitor *v)
{
  v->visitAxiomKeyWordFullIdent(this);
}

AxiomKeyWordFullIdent *AxiomKeyWordFullIdent::clone() const
{
  return new AxiomKeyWordFullIdent(*this);
}



/********************   AxiomaticKeyWordFullIdent    ********************/
AxiomaticKeyWordFullIdent::AxiomaticKeyWordFullIdent()
{

}

AxiomaticKeyWordFullIdent::AxiomaticKeyWordFullIdent(const AxiomaticKeyWordFullIdent & other)
{

}

AxiomaticKeyWordFullIdent &AxiomaticKeyWordFullIdent::operator=(const AxiomaticKeyWordFullIdent & other)
{
  AxiomaticKeyWordFullIdent tmp(other);
  swap(tmp);
  return *this;
}

void AxiomaticKeyWordFullIdent::swap(AxiomaticKeyWordFullIdent & other)
{

}

AxiomaticKeyWordFullIdent::~AxiomaticKeyWordFullIdent()
{

}

void AxiomaticKeyWordFullIdent::accept(Visitor *v)
{
  v->visitAxiomaticKeyWordFullIdent(this);
}

AxiomaticKeyWordFullIdent *AxiomaticKeyWordFullIdent::clone() const
{
  return new AxiomaticKeyWordFullIdent(*this);
}



/********************   BehaviorKeyWordFullIdent    ********************/
BehaviorKeyWordFullIdent::BehaviorKeyWordFullIdent()
{

}

BehaviorKeyWordFullIdent::BehaviorKeyWordFullIdent(const BehaviorKeyWordFullIdent & other)
{

}

BehaviorKeyWordFullIdent &BehaviorKeyWordFullIdent::operator=(const BehaviorKeyWordFullIdent & other)
{
  BehaviorKeyWordFullIdent tmp(other);
  swap(tmp);
  return *this;
}

void BehaviorKeyWordFullIdent::swap(BehaviorKeyWordFullIdent & other)
{

}

BehaviorKeyWordFullIdent::~BehaviorKeyWordFullIdent()
{

}

void BehaviorKeyWordFullIdent::accept(Visitor *v)
{
  v->visitBehaviorKeyWordFullIdent(this);
}

BehaviorKeyWordFullIdent *BehaviorKeyWordFullIdent::clone() const
{
  return new BehaviorKeyWordFullIdent(*this);
}



/********************   BreaksKeyWordFullIdent    ********************/
BreaksKeyWordFullIdent::BreaksKeyWordFullIdent()
{

}

BreaksKeyWordFullIdent::BreaksKeyWordFullIdent(const BreaksKeyWordFullIdent & other)
{

}

BreaksKeyWordFullIdent &BreaksKeyWordFullIdent::operator=(const BreaksKeyWordFullIdent & other)
{
  BreaksKeyWordFullIdent tmp(other);
  swap(tmp);
  return *this;
}

void BreaksKeyWordFullIdent::swap(BreaksKeyWordFullIdent & other)
{

}

BreaksKeyWordFullIdent::~BreaksKeyWordFullIdent()
{

}

void BreaksKeyWordFullIdent::accept(Visitor *v)
{
  v->visitBreaksKeyWordFullIdent(this);
}

BreaksKeyWordFullIdent *BreaksKeyWordFullIdent::clone() const
{
  return new BreaksKeyWordFullIdent(*this);
}



/********************   CheckKeyWordFullIdent    ********************/
CheckKeyWordFullIdent::CheckKeyWordFullIdent()
{

}

CheckKeyWordFullIdent::CheckKeyWordFullIdent(const CheckKeyWordFullIdent & other)
{

}

CheckKeyWordFullIdent &CheckKeyWordFullIdent::operator=(const CheckKeyWordFullIdent & other)
{
  CheckKeyWordFullIdent tmp(other);
  swap(tmp);
  return *this;
}

void CheckKeyWordFullIdent::swap(CheckKeyWordFullIdent & other)
{

}

CheckKeyWordFullIdent::~CheckKeyWordFullIdent()
{

}

void CheckKeyWordFullIdent::accept(Visitor *v)
{
  v->visitCheckKeyWordFullIdent(this);
}

CheckKeyWordFullIdent *CheckKeyWordFullIdent::clone() const
{
  return new CheckKeyWordFullIdent(*this);
}



/********************   CompleteKeyWordFullIdent    ********************/
CompleteKeyWordFullIdent::CompleteKeyWordFullIdent()
{

}

CompleteKeyWordFullIdent::CompleteKeyWordFullIdent(const CompleteKeyWordFullIdent & other)
{

}

CompleteKeyWordFullIdent &CompleteKeyWordFullIdent::operator=(const CompleteKeyWordFullIdent & other)
{
  CompleteKeyWordFullIdent tmp(other);
  swap(tmp);
  return *this;
}

void CompleteKeyWordFullIdent::swap(CompleteKeyWordFullIdent & other)
{

}

CompleteKeyWordFullIdent::~CompleteKeyWordFullIdent()
{

}

void CompleteKeyWordFullIdent::accept(Visitor *v)
{
  v->visitCompleteKeyWordFullIdent(this);
}

CompleteKeyWordFullIdent *CompleteKeyWordFullIdent::clone() const
{
  return new CompleteKeyWordFullIdent(*this);
}



/********************   ContinuesKeyWordFullIdent    ********************/
ContinuesKeyWordFullIdent::ContinuesKeyWordFullIdent()
{

}

ContinuesKeyWordFullIdent::ContinuesKeyWordFullIdent(const ContinuesKeyWordFullIdent & other)
{

}

ContinuesKeyWordFullIdent &ContinuesKeyWordFullIdent::operator=(const ContinuesKeyWordFullIdent & other)
{
  ContinuesKeyWordFullIdent tmp(other);
  swap(tmp);
  return *this;
}

void ContinuesKeyWordFullIdent::swap(ContinuesKeyWordFullIdent & other)
{

}

ContinuesKeyWordFullIdent::~ContinuesKeyWordFullIdent()
{

}

void ContinuesKeyWordFullIdent::accept(Visitor *v)
{
  v->visitContinuesKeyWordFullIdent(this);
}

ContinuesKeyWordFullIdent *ContinuesKeyWordFullIdent::clone() const
{
  return new ContinuesKeyWordFullIdent(*this);
}



/********************   ContractKeyWordFullIdent    ********************/
ContractKeyWordFullIdent::ContractKeyWordFullIdent()
{

}

ContractKeyWordFullIdent::ContractKeyWordFullIdent(const ContractKeyWordFullIdent & other)
{

}

ContractKeyWordFullIdent &ContractKeyWordFullIdent::operator=(const ContractKeyWordFullIdent & other)
{
  ContractKeyWordFullIdent tmp(other);
  swap(tmp);
  return *this;
}

void ContractKeyWordFullIdent::swap(ContractKeyWordFullIdent & other)
{

}

ContractKeyWordFullIdent::~ContractKeyWordFullIdent()
{

}

void ContractKeyWordFullIdent::accept(Visitor *v)
{
  v->visitContractKeyWordFullIdent(this);
}

ContractKeyWordFullIdent *ContractKeyWordFullIdent::clone() const
{
  return new ContractKeyWordFullIdent(*this);
}



/********************   DecreasesKeyWordFullIdent    ********************/
DecreasesKeyWordFullIdent::DecreasesKeyWordFullIdent()
{

}

DecreasesKeyWordFullIdent::DecreasesKeyWordFullIdent(const DecreasesKeyWordFullIdent & other)
{

}

DecreasesKeyWordFullIdent &DecreasesKeyWordFullIdent::operator=(const DecreasesKeyWordFullIdent & other)
{
  DecreasesKeyWordFullIdent tmp(other);
  swap(tmp);
  return *this;
}

void DecreasesKeyWordFullIdent::swap(DecreasesKeyWordFullIdent & other)
{

}

DecreasesKeyWordFullIdent::~DecreasesKeyWordFullIdent()
{

}

void DecreasesKeyWordFullIdent::accept(Visitor *v)
{
  v->visitDecreasesKeyWordFullIdent(this);
}

DecreasesKeyWordFullIdent *DecreasesKeyWordFullIdent::clone() const
{
  return new DecreasesKeyWordFullIdent(*this);
}



/********************   DisjointKeyWordFullIdent    ********************/
DisjointKeyWordFullIdent::DisjointKeyWordFullIdent()
{

}

DisjointKeyWordFullIdent::DisjointKeyWordFullIdent(const DisjointKeyWordFullIdent & other)
{

}

DisjointKeyWordFullIdent &DisjointKeyWordFullIdent::operator=(const DisjointKeyWordFullIdent & other)
{
  DisjointKeyWordFullIdent tmp(other);
  swap(tmp);
  return *this;
}

void DisjointKeyWordFullIdent::swap(DisjointKeyWordFullIdent & other)
{

}

DisjointKeyWordFullIdent::~DisjointKeyWordFullIdent()
{

}

void DisjointKeyWordFullIdent::accept(Visitor *v)
{
  v->visitDisjointKeyWordFullIdent(this);
}

DisjointKeyWordFullIdent *DisjointKeyWordFullIdent::clone() const
{
  return new DisjointKeyWordFullIdent(*this);
}



/********************   EnsuresKeyWordFullIdent    ********************/
EnsuresKeyWordFullIdent::EnsuresKeyWordFullIdent()
{

}

EnsuresKeyWordFullIdent::EnsuresKeyWordFullIdent(const EnsuresKeyWordFullIdent & other)
{

}

EnsuresKeyWordFullIdent &EnsuresKeyWordFullIdent::operator=(const EnsuresKeyWordFullIdent & other)
{
  EnsuresKeyWordFullIdent tmp(other);
  swap(tmp);
  return *this;
}

void EnsuresKeyWordFullIdent::swap(EnsuresKeyWordFullIdent & other)
{

}

EnsuresKeyWordFullIdent::~EnsuresKeyWordFullIdent()
{

}

void EnsuresKeyWordFullIdent::accept(Visitor *v)
{
  v->visitEnsuresKeyWordFullIdent(this);
}

EnsuresKeyWordFullIdent *EnsuresKeyWordFullIdent::clone() const
{
  return new EnsuresKeyWordFullIdent(*this);
}



/********************   ExitsKeyWordFullIdent    ********************/
ExitsKeyWordFullIdent::ExitsKeyWordFullIdent()
{

}

ExitsKeyWordFullIdent::ExitsKeyWordFullIdent(const ExitsKeyWordFullIdent & other)
{

}

ExitsKeyWordFullIdent &ExitsKeyWordFullIdent::operator=(const ExitsKeyWordFullIdent & other)
{
  ExitsKeyWordFullIdent tmp(other);
  swap(tmp);
  return *this;
}

void ExitsKeyWordFullIdent::swap(ExitsKeyWordFullIdent & other)
{

}

ExitsKeyWordFullIdent::~ExitsKeyWordFullIdent()
{

}

void ExitsKeyWordFullIdent::accept(Visitor *v)
{
  v->visitExitsKeyWordFullIdent(this);
}

ExitsKeyWordFullIdent *ExitsKeyWordFullIdent::clone() const
{
  return new ExitsKeyWordFullIdent(*this);
}



/********************   FreesKeyWordFullIdent    ********************/
FreesKeyWordFullIdent::FreesKeyWordFullIdent()
{

}

FreesKeyWordFullIdent::FreesKeyWordFullIdent(const FreesKeyWordFullIdent & other)
{

}

FreesKeyWordFullIdent &FreesKeyWordFullIdent::operator=(const FreesKeyWordFullIdent & other)
{
  FreesKeyWordFullIdent tmp(other);
  swap(tmp);
  return *this;
}

void FreesKeyWordFullIdent::swap(FreesKeyWordFullIdent & other)
{

}

FreesKeyWordFullIdent::~FreesKeyWordFullIdent()
{

}

void FreesKeyWordFullIdent::accept(Visitor *v)
{
  v->visitFreesKeyWordFullIdent(this);
}

FreesKeyWordFullIdent *FreesKeyWordFullIdent::clone() const
{
  return new FreesKeyWordFullIdent(*this);
}



/********************   FunctionKeyWordFullIdent    ********************/
FunctionKeyWordFullIdent::FunctionKeyWordFullIdent()
{

}

FunctionKeyWordFullIdent::FunctionKeyWordFullIdent(const FunctionKeyWordFullIdent & other)
{

}

FunctionKeyWordFullIdent &FunctionKeyWordFullIdent::operator=(const FunctionKeyWordFullIdent & other)
{
  FunctionKeyWordFullIdent tmp(other);
  swap(tmp);
  return *this;
}

void FunctionKeyWordFullIdent::swap(FunctionKeyWordFullIdent & other)
{

}

FunctionKeyWordFullIdent::~FunctionKeyWordFullIdent()
{

}

void FunctionKeyWordFullIdent::accept(Visitor *v)
{
  v->visitFunctionKeyWordFullIdent(this);
}

FunctionKeyWordFullIdent *FunctionKeyWordFullIdent::clone() const
{
  return new FunctionKeyWordFullIdent(*this);
}



/********************   GlobalKeyWordFullIdent    ********************/
GlobalKeyWordFullIdent::GlobalKeyWordFullIdent()
{

}

GlobalKeyWordFullIdent::GlobalKeyWordFullIdent(const GlobalKeyWordFullIdent & other)
{

}

GlobalKeyWordFullIdent &GlobalKeyWordFullIdent::operator=(const GlobalKeyWordFullIdent & other)
{
  GlobalKeyWordFullIdent tmp(other);
  swap(tmp);
  return *this;
}

void GlobalKeyWordFullIdent::swap(GlobalKeyWordFullIdent & other)
{

}

GlobalKeyWordFullIdent::~GlobalKeyWordFullIdent()
{

}

void GlobalKeyWordFullIdent::accept(Visitor *v)
{
  v->visitGlobalKeyWordFullIdent(this);
}

GlobalKeyWordFullIdent *GlobalKeyWordFullIdent::clone() const
{
  return new GlobalKeyWordFullIdent(*this);
}



/********************   ImpactKeyWordFullIdent    ********************/
ImpactKeyWordFullIdent::ImpactKeyWordFullIdent()
{

}

ImpactKeyWordFullIdent::ImpactKeyWordFullIdent(const ImpactKeyWordFullIdent & other)
{

}

ImpactKeyWordFullIdent &ImpactKeyWordFullIdent::operator=(const ImpactKeyWordFullIdent & other)
{
  ImpactKeyWordFullIdent tmp(other);
  swap(tmp);
  return *this;
}

void ImpactKeyWordFullIdent::swap(ImpactKeyWordFullIdent & other)
{

}

ImpactKeyWordFullIdent::~ImpactKeyWordFullIdent()
{

}

void ImpactKeyWordFullIdent::accept(Visitor *v)
{
  v->visitImpactKeyWordFullIdent(this);
}

ImpactKeyWordFullIdent *ImpactKeyWordFullIdent::clone() const
{
  return new ImpactKeyWordFullIdent(*this);
}



/********************   InductiveKeyWordFullIdent    ********************/
InductiveKeyWordFullIdent::InductiveKeyWordFullIdent()
{

}

InductiveKeyWordFullIdent::InductiveKeyWordFullIdent(const InductiveKeyWordFullIdent & other)
{

}

InductiveKeyWordFullIdent &InductiveKeyWordFullIdent::operator=(const InductiveKeyWordFullIdent & other)
{
  InductiveKeyWordFullIdent tmp(other);
  swap(tmp);
  return *this;
}

void InductiveKeyWordFullIdent::swap(InductiveKeyWordFullIdent & other)
{

}

InductiveKeyWordFullIdent::~InductiveKeyWordFullIdent()
{

}

void InductiveKeyWordFullIdent::accept(Visitor *v)
{
  v->visitInductiveKeyWordFullIdent(this);
}

InductiveKeyWordFullIdent *InductiveKeyWordFullIdent::clone() const
{
  return new InductiveKeyWordFullIdent(*this);
}



/********************   IncludeKeyWordFullIdent    ********************/
IncludeKeyWordFullIdent::IncludeKeyWordFullIdent()
{

}

IncludeKeyWordFullIdent::IncludeKeyWordFullIdent(const IncludeKeyWordFullIdent & other)
{

}

IncludeKeyWordFullIdent &IncludeKeyWordFullIdent::operator=(const IncludeKeyWordFullIdent & other)
{
  IncludeKeyWordFullIdent tmp(other);
  swap(tmp);
  return *this;
}

void IncludeKeyWordFullIdent::swap(IncludeKeyWordFullIdent & other)
{

}

IncludeKeyWordFullIdent::~IncludeKeyWordFullIdent()
{

}

void IncludeKeyWordFullIdent::accept(Visitor *v)
{
  v->visitIncludeKeyWordFullIdent(this);
}

IncludeKeyWordFullIdent *IncludeKeyWordFullIdent::clone() const
{
  return new IncludeKeyWordFullIdent(*this);
}



/********************   InvariantKeyWordFullIdent    ********************/
InvariantKeyWordFullIdent::InvariantKeyWordFullIdent()
{

}

InvariantKeyWordFullIdent::InvariantKeyWordFullIdent(const InvariantKeyWordFullIdent & other)
{

}

InvariantKeyWordFullIdent &InvariantKeyWordFullIdent::operator=(const InvariantKeyWordFullIdent & other)
{
  InvariantKeyWordFullIdent tmp(other);
  swap(tmp);
  return *this;
}

void InvariantKeyWordFullIdent::swap(InvariantKeyWordFullIdent & other)
{

}

InvariantKeyWordFullIdent::~InvariantKeyWordFullIdent()
{

}

void InvariantKeyWordFullIdent::accept(Visitor *v)
{
  v->visitInvariantKeyWordFullIdent(this);
}

InvariantKeyWordFullIdent *InvariantKeyWordFullIdent::clone() const
{
  return new InvariantKeyWordFullIdent(*this);
}



/********************   LemmaKeyWordFullIdent    ********************/
LemmaKeyWordFullIdent::LemmaKeyWordFullIdent()
{

}

LemmaKeyWordFullIdent::LemmaKeyWordFullIdent(const LemmaKeyWordFullIdent & other)
{

}

LemmaKeyWordFullIdent &LemmaKeyWordFullIdent::operator=(const LemmaKeyWordFullIdent & other)
{
  LemmaKeyWordFullIdent tmp(other);
  swap(tmp);
  return *this;
}

void LemmaKeyWordFullIdent::swap(LemmaKeyWordFullIdent & other)
{

}

LemmaKeyWordFullIdent::~LemmaKeyWordFullIdent()
{

}

void LemmaKeyWordFullIdent::accept(Visitor *v)
{
  v->visitLemmaKeyWordFullIdent(this);
}

LemmaKeyWordFullIdent *LemmaKeyWordFullIdent::clone() const
{
  return new LemmaKeyWordFullIdent(*this);
}



/********************   LetKeyWordFullIdent    ********************/
LetKeyWordFullIdent::LetKeyWordFullIdent()
{

}

LetKeyWordFullIdent::LetKeyWordFullIdent(const LetKeyWordFullIdent & other)
{

}

LetKeyWordFullIdent &LetKeyWordFullIdent::operator=(const LetKeyWordFullIdent & other)
{
  LetKeyWordFullIdent tmp(other);
  swap(tmp);
  return *this;
}

void LetKeyWordFullIdent::swap(LetKeyWordFullIdent & other)
{

}

LetKeyWordFullIdent::~LetKeyWordFullIdent()
{

}

void LetKeyWordFullIdent::accept(Visitor *v)
{
  v->visitLetKeyWordFullIdent(this);
}

LetKeyWordFullIdent *LetKeyWordFullIdent::clone() const
{
  return new LetKeyWordFullIdent(*this);
}



/********************   LogicKeyWordFullIdent    ********************/
LogicKeyWordFullIdent::LogicKeyWordFullIdent()
{

}

LogicKeyWordFullIdent::LogicKeyWordFullIdent(const LogicKeyWordFullIdent & other)
{

}

LogicKeyWordFullIdent &LogicKeyWordFullIdent::operator=(const LogicKeyWordFullIdent & other)
{
  LogicKeyWordFullIdent tmp(other);
  swap(tmp);
  return *this;
}

void LogicKeyWordFullIdent::swap(LogicKeyWordFullIdent & other)
{

}

LogicKeyWordFullIdent::~LogicKeyWordFullIdent()
{

}

void LogicKeyWordFullIdent::accept(Visitor *v)
{
  v->visitLogicKeyWordFullIdent(this);
}

LogicKeyWordFullIdent *LogicKeyWordFullIdent::clone() const
{
  return new LogicKeyWordFullIdent(*this);
}



/********************   LoopKeyWordFullIdent    ********************/
LoopKeyWordFullIdent::LoopKeyWordFullIdent()
{

}

LoopKeyWordFullIdent::LoopKeyWordFullIdent(const LoopKeyWordFullIdent & other)
{

}

LoopKeyWordFullIdent &LoopKeyWordFullIdent::operator=(const LoopKeyWordFullIdent & other)
{
  LoopKeyWordFullIdent tmp(other);
  swap(tmp);
  return *this;
}

void LoopKeyWordFullIdent::swap(LoopKeyWordFullIdent & other)
{

}

LoopKeyWordFullIdent::~LoopKeyWordFullIdent()
{

}

void LoopKeyWordFullIdent::accept(Visitor *v)
{
  v->visitLoopKeyWordFullIdent(this);
}

LoopKeyWordFullIdent *LoopKeyWordFullIdent::clone() const
{
  return new LoopKeyWordFullIdent(*this);
}



/********************   ModelKeyWordFullIdent    ********************/
ModelKeyWordFullIdent::ModelKeyWordFullIdent()
{

}

ModelKeyWordFullIdent::ModelKeyWordFullIdent(const ModelKeyWordFullIdent & other)
{

}

ModelKeyWordFullIdent &ModelKeyWordFullIdent::operator=(const ModelKeyWordFullIdent & other)
{
  ModelKeyWordFullIdent tmp(other);
  swap(tmp);
  return *this;
}

void ModelKeyWordFullIdent::swap(ModelKeyWordFullIdent & other)
{

}

ModelKeyWordFullIdent::~ModelKeyWordFullIdent()
{

}

void ModelKeyWordFullIdent::accept(Visitor *v)
{
  v->visitModelKeyWordFullIdent(this);
}

ModelKeyWordFullIdent *ModelKeyWordFullIdent::clone() const
{
  return new ModelKeyWordFullIdent(*this);
}



/********************   ModuleKeyWordFullIdent    ********************/
ModuleKeyWordFullIdent::ModuleKeyWordFullIdent()
{

}

ModuleKeyWordFullIdent::ModuleKeyWordFullIdent(const ModuleKeyWordFullIdent & other)
{

}

ModuleKeyWordFullIdent &ModuleKeyWordFullIdent::operator=(const ModuleKeyWordFullIdent & other)
{
  ModuleKeyWordFullIdent tmp(other);
  swap(tmp);
  return *this;
}

void ModuleKeyWordFullIdent::swap(ModuleKeyWordFullIdent & other)
{

}

ModuleKeyWordFullIdent::~ModuleKeyWordFullIdent()
{

}

void ModuleKeyWordFullIdent::accept(Visitor *v)
{
  v->visitModuleKeyWordFullIdent(this);
}

ModuleKeyWordFullIdent *ModuleKeyWordFullIdent::clone() const
{
  return new ModuleKeyWordFullIdent(*this);
}



/********************   PragmaKeyWordFullIdent    ********************/
PragmaKeyWordFullIdent::PragmaKeyWordFullIdent()
{

}

PragmaKeyWordFullIdent::PragmaKeyWordFullIdent(const PragmaKeyWordFullIdent & other)
{

}

PragmaKeyWordFullIdent &PragmaKeyWordFullIdent::operator=(const PragmaKeyWordFullIdent & other)
{
  PragmaKeyWordFullIdent tmp(other);
  swap(tmp);
  return *this;
}

void PragmaKeyWordFullIdent::swap(PragmaKeyWordFullIdent & other)
{

}

PragmaKeyWordFullIdent::~PragmaKeyWordFullIdent()
{

}

void PragmaKeyWordFullIdent::accept(Visitor *v)
{
  v->visitPragmaKeyWordFullIdent(this);
}

PragmaKeyWordFullIdent *PragmaKeyWordFullIdent::clone() const
{
  return new PragmaKeyWordFullIdent(*this);
}



/********************   PredicateKeyWordFullIdent    ********************/
PredicateKeyWordFullIdent::PredicateKeyWordFullIdent()
{

}

PredicateKeyWordFullIdent::PredicateKeyWordFullIdent(const PredicateKeyWordFullIdent & other)
{

}

PredicateKeyWordFullIdent &PredicateKeyWordFullIdent::operator=(const PredicateKeyWordFullIdent & other)
{
  PredicateKeyWordFullIdent tmp(other);
  swap(tmp);
  return *this;
}

void PredicateKeyWordFullIdent::swap(PredicateKeyWordFullIdent & other)
{

}

PredicateKeyWordFullIdent::~PredicateKeyWordFullIdent()
{

}

void PredicateKeyWordFullIdent::accept(Visitor *v)
{
  v->visitPredicateKeyWordFullIdent(this);
}

PredicateKeyWordFullIdent *PredicateKeyWordFullIdent::clone() const
{
  return new PredicateKeyWordFullIdent(*this);
}



/********************   RequiresKeyWordFullIdent    ********************/
RequiresKeyWordFullIdent::RequiresKeyWordFullIdent()
{

}

RequiresKeyWordFullIdent::RequiresKeyWordFullIdent(const RequiresKeyWordFullIdent & other)
{

}

RequiresKeyWordFullIdent &RequiresKeyWordFullIdent::operator=(const RequiresKeyWordFullIdent & other)
{
  RequiresKeyWordFullIdent tmp(other);
  swap(tmp);
  return *this;
}

void RequiresKeyWordFullIdent::swap(RequiresKeyWordFullIdent & other)
{

}

RequiresKeyWordFullIdent::~RequiresKeyWordFullIdent()
{

}

void RequiresKeyWordFullIdent::accept(Visitor *v)
{
  v->visitRequiresKeyWordFullIdent(this);
}

RequiresKeyWordFullIdent *RequiresKeyWordFullIdent::clone() const
{
  return new RequiresKeyWordFullIdent(*this);
}



/********************   ReturnsKeyWordFullIdent    ********************/
ReturnsKeyWordFullIdent::ReturnsKeyWordFullIdent()
{

}

ReturnsKeyWordFullIdent::ReturnsKeyWordFullIdent(const ReturnsKeyWordFullIdent & other)
{

}

ReturnsKeyWordFullIdent &ReturnsKeyWordFullIdent::operator=(const ReturnsKeyWordFullIdent & other)
{
  ReturnsKeyWordFullIdent tmp(other);
  swap(tmp);
  return *this;
}

void ReturnsKeyWordFullIdent::swap(ReturnsKeyWordFullIdent & other)
{

}

ReturnsKeyWordFullIdent::~ReturnsKeyWordFullIdent()
{

}

void ReturnsKeyWordFullIdent::accept(Visitor *v)
{
  v->visitReturnsKeyWordFullIdent(this);
}

ReturnsKeyWordFullIdent *ReturnsKeyWordFullIdent::clone() const
{
  return new ReturnsKeyWordFullIdent(*this);
}



/********************   SliceKeyWordFullIdent    ********************/
SliceKeyWordFullIdent::SliceKeyWordFullIdent()
{

}

SliceKeyWordFullIdent::SliceKeyWordFullIdent(const SliceKeyWordFullIdent & other)
{

}

SliceKeyWordFullIdent &SliceKeyWordFullIdent::operator=(const SliceKeyWordFullIdent & other)
{
  SliceKeyWordFullIdent tmp(other);
  swap(tmp);
  return *this;
}

void SliceKeyWordFullIdent::swap(SliceKeyWordFullIdent & other)
{

}

SliceKeyWordFullIdent::~SliceKeyWordFullIdent()
{

}

void SliceKeyWordFullIdent::accept(Visitor *v)
{
  v->visitSliceKeyWordFullIdent(this);
}

SliceKeyWordFullIdent *SliceKeyWordFullIdent::clone() const
{
  return new SliceKeyWordFullIdent(*this);
}



/********************   TerminatesKeyWordFullIdent    ********************/
TerminatesKeyWordFullIdent::TerminatesKeyWordFullIdent()
{

}

TerminatesKeyWordFullIdent::TerminatesKeyWordFullIdent(const TerminatesKeyWordFullIdent & other)
{

}

TerminatesKeyWordFullIdent &TerminatesKeyWordFullIdent::operator=(const TerminatesKeyWordFullIdent & other)
{
  TerminatesKeyWordFullIdent tmp(other);
  swap(tmp);
  return *this;
}

void TerminatesKeyWordFullIdent::swap(TerminatesKeyWordFullIdent & other)
{

}

TerminatesKeyWordFullIdent::~TerminatesKeyWordFullIdent()
{

}

void TerminatesKeyWordFullIdent::accept(Visitor *v)
{
  v->visitTerminatesKeyWordFullIdent(this);
}

TerminatesKeyWordFullIdent *TerminatesKeyWordFullIdent::clone() const
{
  return new TerminatesKeyWordFullIdent(*this);
}



/********************   TypeKeyWordFullIdent    ********************/
TypeKeyWordFullIdent::TypeKeyWordFullIdent()
{

}

TypeKeyWordFullIdent::TypeKeyWordFullIdent(const TypeKeyWordFullIdent & other)
{

}

TypeKeyWordFullIdent &TypeKeyWordFullIdent::operator=(const TypeKeyWordFullIdent & other)
{
  TypeKeyWordFullIdent tmp(other);
  swap(tmp);
  return *this;
}

void TypeKeyWordFullIdent::swap(TypeKeyWordFullIdent & other)
{

}

TypeKeyWordFullIdent::~TypeKeyWordFullIdent()
{

}

void TypeKeyWordFullIdent::accept(Visitor *v)
{
  v->visitTypeKeyWordFullIdent(this);
}

TypeKeyWordFullIdent *TypeKeyWordFullIdent::clone() const
{
  return new TypeKeyWordFullIdent(*this);
}



/********************   VariantKeyWordFullIdent    ********************/
VariantKeyWordFullIdent::VariantKeyWordFullIdent()
{

}

VariantKeyWordFullIdent::VariantKeyWordFullIdent(const VariantKeyWordFullIdent & other)
{

}

VariantKeyWordFullIdent &VariantKeyWordFullIdent::operator=(const VariantKeyWordFullIdent & other)
{
  VariantKeyWordFullIdent tmp(other);
  swap(tmp);
  return *this;
}

void VariantKeyWordFullIdent::swap(VariantKeyWordFullIdent & other)
{

}

VariantKeyWordFullIdent::~VariantKeyWordFullIdent()
{

}

void VariantKeyWordFullIdent::accept(Visitor *v)
{
  v->visitVariantKeyWordFullIdent(this);
}

VariantKeyWordFullIdent *VariantKeyWordFullIdent::clone() const
{
  return new VariantKeyWordFullIdent(*this);
}



/********************   IdentifierIdent    ********************/
IdentifierIdent::IdentifierIdent(Ident p1)
{
  ident_ = p1;

}

IdentifierIdent::IdentifierIdent(const IdentifierIdent & other)
{
  ident_ = other.ident_;

}

IdentifierIdent &IdentifierIdent::operator=(const IdentifierIdent & other)
{
  IdentifierIdent tmp(other);
  swap(tmp);
  return *this;
}

void IdentifierIdent::swap(IdentifierIdent & other)
{
  std::swap(ident_, other.ident_);

}

IdentifierIdent::~IdentifierIdent()
{

}

void IdentifierIdent::accept(Visitor *v)
{
  v->visitIdentifierIdent(this);
}

IdentifierIdent *IdentifierIdent::clone() const
{
  return new IdentifierIdent(*this);
}



/********************   BehaviorsKeyWord    ********************/
BehaviorsKeyWord::BehaviorsKeyWord()
{

}

BehaviorsKeyWord::BehaviorsKeyWord(const BehaviorsKeyWord & other)
{

}

BehaviorsKeyWord &BehaviorsKeyWord::operator=(const BehaviorsKeyWord & other)
{
  BehaviorsKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void BehaviorsKeyWord::swap(BehaviorsKeyWord & other)
{

}

BehaviorsKeyWord::~BehaviorsKeyWord()
{

}

void BehaviorsKeyWord::accept(Visitor *v)
{
  v->visitBehaviorsKeyWord(this);
}

BehaviorsKeyWord *BehaviorsKeyWord::clone() const
{
  return new BehaviorsKeyWord(*this);
}



/********************   LabelKeyWord    ********************/
LabelKeyWord::LabelKeyWord()
{

}

LabelKeyWord::LabelKeyWord(const LabelKeyWord & other)
{

}

LabelKeyWord &LabelKeyWord::operator=(const LabelKeyWord & other)
{
  LabelKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void LabelKeyWord::swap(LabelKeyWord & other)
{

}

LabelKeyWord::~LabelKeyWord()
{

}

void LabelKeyWord::accept(Visitor *v)
{
  v->visitLabelKeyWord(this);
}

LabelKeyWord *LabelKeyWord::clone() const
{
  return new LabelKeyWord(*this);
}



/********************   ReadsKeyWord    ********************/
ReadsKeyWord::ReadsKeyWord()
{

}

ReadsKeyWord::ReadsKeyWord(const ReadsKeyWord & other)
{

}

ReadsKeyWord &ReadsKeyWord::operator=(const ReadsKeyWord & other)
{
  ReadsKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void ReadsKeyWord::swap(ReadsKeyWord & other)
{

}

ReadsKeyWord::~ReadsKeyWord()
{

}

void ReadsKeyWord::accept(Visitor *v)
{
  v->visitReadsKeyWord(this);
}

ReadsKeyWord *ReadsKeyWord::clone() const
{
  return new ReadsKeyWord(*this);
}



/********************   WritesKeyWord    ********************/
WritesKeyWord::WritesKeyWord()
{

}

WritesKeyWord::WritesKeyWord(const WritesKeyWord & other)
{

}

WritesKeyWord &WritesKeyWord::operator=(const WritesKeyWord & other)
{
  WritesKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void WritesKeyWord::swap(WritesKeyWord & other)
{

}

WritesKeyWord::~WritesKeyWord()
{

}

void WritesKeyWord::accept(Visitor *v)
{
  v->visitWritesKeyWord(this);
}

WritesKeyWord *WritesKeyWord::clone() const
{
  return new WritesKeyWord(*this);
}



/********************   TypeSpecSimpleIntegerKeyWord    ********************/
TypeSpecSimpleIntegerKeyWord::TypeSpecSimpleIntegerKeyWord()
{

}

TypeSpecSimpleIntegerKeyWord::TypeSpecSimpleIntegerKeyWord(const TypeSpecSimpleIntegerKeyWord & other)
{

}

TypeSpecSimpleIntegerKeyWord &TypeSpecSimpleIntegerKeyWord::operator=(const TypeSpecSimpleIntegerKeyWord & other)
{
  TypeSpecSimpleIntegerKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void TypeSpecSimpleIntegerKeyWord::swap(TypeSpecSimpleIntegerKeyWord & other)
{

}

TypeSpecSimpleIntegerKeyWord::~TypeSpecSimpleIntegerKeyWord()
{

}

void TypeSpecSimpleIntegerKeyWord::accept(Visitor *v)
{
  v->visitTypeSpecSimpleIntegerKeyWord(this);
}

TypeSpecSimpleIntegerKeyWord *TypeSpecSimpleIntegerKeyWord::clone() const
{
  return new TypeSpecSimpleIntegerKeyWord(*this);
}



/********************   TypeSpecSimpleRealKeyWord    ********************/
TypeSpecSimpleRealKeyWord::TypeSpecSimpleRealKeyWord()
{

}

TypeSpecSimpleRealKeyWord::TypeSpecSimpleRealKeyWord(const TypeSpecSimpleRealKeyWord & other)
{

}

TypeSpecSimpleRealKeyWord &TypeSpecSimpleRealKeyWord::operator=(const TypeSpecSimpleRealKeyWord & other)
{
  TypeSpecSimpleRealKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void TypeSpecSimpleRealKeyWord::swap(TypeSpecSimpleRealKeyWord & other)
{

}

TypeSpecSimpleRealKeyWord::~TypeSpecSimpleRealKeyWord()
{

}

void TypeSpecSimpleRealKeyWord::accept(Visitor *v)
{
  v->visitTypeSpecSimpleRealKeyWord(this);
}

TypeSpecSimpleRealKeyWord *TypeSpecSimpleRealKeyWord::clone() const
{
  return new TypeSpecSimpleRealKeyWord(*this);
}



/********************   TypeSpecSimpleBooleanKeyWord    ********************/
TypeSpecSimpleBooleanKeyWord::TypeSpecSimpleBooleanKeyWord()
{

}

TypeSpecSimpleBooleanKeyWord::TypeSpecSimpleBooleanKeyWord(const TypeSpecSimpleBooleanKeyWord & other)
{

}

TypeSpecSimpleBooleanKeyWord &TypeSpecSimpleBooleanKeyWord::operator=(const TypeSpecSimpleBooleanKeyWord & other)
{
  TypeSpecSimpleBooleanKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void TypeSpecSimpleBooleanKeyWord::swap(TypeSpecSimpleBooleanKeyWord & other)
{

}

TypeSpecSimpleBooleanKeyWord::~TypeSpecSimpleBooleanKeyWord()
{

}

void TypeSpecSimpleBooleanKeyWord::accept(Visitor *v)
{
  v->visitTypeSpecSimpleBooleanKeyWord(this);
}

TypeSpecSimpleBooleanKeyWord *TypeSpecSimpleBooleanKeyWord::clone() const
{
  return new TypeSpecSimpleBooleanKeyWord(*this);
}



/********************   TypeSpecSimpleVoidKeyWord    ********************/
TypeSpecSimpleVoidKeyWord::TypeSpecSimpleVoidKeyWord()
{

}

TypeSpecSimpleVoidKeyWord::TypeSpecSimpleVoidKeyWord(const TypeSpecSimpleVoidKeyWord & other)
{

}

TypeSpecSimpleVoidKeyWord &TypeSpecSimpleVoidKeyWord::operator=(const TypeSpecSimpleVoidKeyWord & other)
{
  TypeSpecSimpleVoidKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void TypeSpecSimpleVoidKeyWord::swap(TypeSpecSimpleVoidKeyWord & other)
{

}

TypeSpecSimpleVoidKeyWord::~TypeSpecSimpleVoidKeyWord()
{

}

void TypeSpecSimpleVoidKeyWord::accept(Visitor *v)
{
  v->visitTypeSpecSimpleVoidKeyWord(this);
}

TypeSpecSimpleVoidKeyWord *TypeSpecSimpleVoidKeyWord::clone() const
{
  return new TypeSpecSimpleVoidKeyWord(*this);
}



/********************   TypeSpecSimpleBoolKeyWord    ********************/
TypeSpecSimpleBoolKeyWord::TypeSpecSimpleBoolKeyWord()
{

}

TypeSpecSimpleBoolKeyWord::TypeSpecSimpleBoolKeyWord(const TypeSpecSimpleBoolKeyWord & other)
{

}

TypeSpecSimpleBoolKeyWord &TypeSpecSimpleBoolKeyWord::operator=(const TypeSpecSimpleBoolKeyWord & other)
{
  TypeSpecSimpleBoolKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void TypeSpecSimpleBoolKeyWord::swap(TypeSpecSimpleBoolKeyWord & other)
{

}

TypeSpecSimpleBoolKeyWord::~TypeSpecSimpleBoolKeyWord()
{

}

void TypeSpecSimpleBoolKeyWord::accept(Visitor *v)
{
  v->visitTypeSpecSimpleBoolKeyWord(this);
}

TypeSpecSimpleBoolKeyWord *TypeSpecSimpleBoolKeyWord::clone() const
{
  return new TypeSpecSimpleBoolKeyWord(*this);
}



/********************   TypeSpecSimpleCharKeyWord    ********************/
TypeSpecSimpleCharKeyWord::TypeSpecSimpleCharKeyWord()
{

}

TypeSpecSimpleCharKeyWord::TypeSpecSimpleCharKeyWord(const TypeSpecSimpleCharKeyWord & other)
{

}

TypeSpecSimpleCharKeyWord &TypeSpecSimpleCharKeyWord::operator=(const TypeSpecSimpleCharKeyWord & other)
{
  TypeSpecSimpleCharKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void TypeSpecSimpleCharKeyWord::swap(TypeSpecSimpleCharKeyWord & other)
{

}

TypeSpecSimpleCharKeyWord::~TypeSpecSimpleCharKeyWord()
{

}

void TypeSpecSimpleCharKeyWord::accept(Visitor *v)
{
  v->visitTypeSpecSimpleCharKeyWord(this);
}

TypeSpecSimpleCharKeyWord *TypeSpecSimpleCharKeyWord::clone() const
{
  return new TypeSpecSimpleCharKeyWord(*this);
}



/********************   TypeSpecSimpleSignedCharKeyWord    ********************/
TypeSpecSimpleSignedCharKeyWord::TypeSpecSimpleSignedCharKeyWord()
{

}

TypeSpecSimpleSignedCharKeyWord::TypeSpecSimpleSignedCharKeyWord(const TypeSpecSimpleSignedCharKeyWord & other)
{

}

TypeSpecSimpleSignedCharKeyWord &TypeSpecSimpleSignedCharKeyWord::operator=(const TypeSpecSimpleSignedCharKeyWord & other)
{
  TypeSpecSimpleSignedCharKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void TypeSpecSimpleSignedCharKeyWord::swap(TypeSpecSimpleSignedCharKeyWord & other)
{

}

TypeSpecSimpleSignedCharKeyWord::~TypeSpecSimpleSignedCharKeyWord()
{

}

void TypeSpecSimpleSignedCharKeyWord::accept(Visitor *v)
{
  v->visitTypeSpecSimpleSignedCharKeyWord(this);
}

TypeSpecSimpleSignedCharKeyWord *TypeSpecSimpleSignedCharKeyWord::clone() const
{
  return new TypeSpecSimpleSignedCharKeyWord(*this);
}



/********************   TypeSpecSimpleUnsignedCharKeyWord    ********************/
TypeSpecSimpleUnsignedCharKeyWord::TypeSpecSimpleUnsignedCharKeyWord()
{

}

TypeSpecSimpleUnsignedCharKeyWord::TypeSpecSimpleUnsignedCharKeyWord(const TypeSpecSimpleUnsignedCharKeyWord & other)
{

}

TypeSpecSimpleUnsignedCharKeyWord &TypeSpecSimpleUnsignedCharKeyWord::operator=(const TypeSpecSimpleUnsignedCharKeyWord & other)
{
  TypeSpecSimpleUnsignedCharKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void TypeSpecSimpleUnsignedCharKeyWord::swap(TypeSpecSimpleUnsignedCharKeyWord & other)
{

}

TypeSpecSimpleUnsignedCharKeyWord::~TypeSpecSimpleUnsignedCharKeyWord()
{

}

void TypeSpecSimpleUnsignedCharKeyWord::accept(Visitor *v)
{
  v->visitTypeSpecSimpleUnsignedCharKeyWord(this);
}

TypeSpecSimpleUnsignedCharKeyWord *TypeSpecSimpleUnsignedCharKeyWord::clone() const
{
  return new TypeSpecSimpleUnsignedCharKeyWord(*this);
}



/********************   TypeSpecSimpleIntKeyWord    ********************/
TypeSpecSimpleIntKeyWord::TypeSpecSimpleIntKeyWord()
{

}

TypeSpecSimpleIntKeyWord::TypeSpecSimpleIntKeyWord(const TypeSpecSimpleIntKeyWord & other)
{

}

TypeSpecSimpleIntKeyWord &TypeSpecSimpleIntKeyWord::operator=(const TypeSpecSimpleIntKeyWord & other)
{
  TypeSpecSimpleIntKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void TypeSpecSimpleIntKeyWord::swap(TypeSpecSimpleIntKeyWord & other)
{

}

TypeSpecSimpleIntKeyWord::~TypeSpecSimpleIntKeyWord()
{

}

void TypeSpecSimpleIntKeyWord::accept(Visitor *v)
{
  v->visitTypeSpecSimpleIntKeyWord(this);
}

TypeSpecSimpleIntKeyWord *TypeSpecSimpleIntKeyWord::clone() const
{
  return new TypeSpecSimpleIntKeyWord(*this);
}



/********************   TypeSpecSimpleSignedIntKeyWord    ********************/
TypeSpecSimpleSignedIntKeyWord::TypeSpecSimpleSignedIntKeyWord()
{

}

TypeSpecSimpleSignedIntKeyWord::TypeSpecSimpleSignedIntKeyWord(const TypeSpecSimpleSignedIntKeyWord & other)
{

}

TypeSpecSimpleSignedIntKeyWord &TypeSpecSimpleSignedIntKeyWord::operator=(const TypeSpecSimpleSignedIntKeyWord & other)
{
  TypeSpecSimpleSignedIntKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void TypeSpecSimpleSignedIntKeyWord::swap(TypeSpecSimpleSignedIntKeyWord & other)
{

}

TypeSpecSimpleSignedIntKeyWord::~TypeSpecSimpleSignedIntKeyWord()
{

}

void TypeSpecSimpleSignedIntKeyWord::accept(Visitor *v)
{
  v->visitTypeSpecSimpleSignedIntKeyWord(this);
}

TypeSpecSimpleSignedIntKeyWord *TypeSpecSimpleSignedIntKeyWord::clone() const
{
  return new TypeSpecSimpleSignedIntKeyWord(*this);
}



/********************   TypeSpecSimpleUnsignedIntKeyWord    ********************/
TypeSpecSimpleUnsignedIntKeyWord::TypeSpecSimpleUnsignedIntKeyWord()
{

}

TypeSpecSimpleUnsignedIntKeyWord::TypeSpecSimpleUnsignedIntKeyWord(const TypeSpecSimpleUnsignedIntKeyWord & other)
{

}

TypeSpecSimpleUnsignedIntKeyWord &TypeSpecSimpleUnsignedIntKeyWord::operator=(const TypeSpecSimpleUnsignedIntKeyWord & other)
{
  TypeSpecSimpleUnsignedIntKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void TypeSpecSimpleUnsignedIntKeyWord::swap(TypeSpecSimpleUnsignedIntKeyWord & other)
{

}

TypeSpecSimpleUnsignedIntKeyWord::~TypeSpecSimpleUnsignedIntKeyWord()
{

}

void TypeSpecSimpleUnsignedIntKeyWord::accept(Visitor *v)
{
  v->visitTypeSpecSimpleUnsignedIntKeyWord(this);
}

TypeSpecSimpleUnsignedIntKeyWord *TypeSpecSimpleUnsignedIntKeyWord::clone() const
{
  return new TypeSpecSimpleUnsignedIntKeyWord(*this);
}



/********************   TypeSpecSimpleUnsignedKeyWord    ********************/
TypeSpecSimpleUnsignedKeyWord::TypeSpecSimpleUnsignedKeyWord()
{

}

TypeSpecSimpleUnsignedKeyWord::TypeSpecSimpleUnsignedKeyWord(const TypeSpecSimpleUnsignedKeyWord & other)
{

}

TypeSpecSimpleUnsignedKeyWord &TypeSpecSimpleUnsignedKeyWord::operator=(const TypeSpecSimpleUnsignedKeyWord & other)
{
  TypeSpecSimpleUnsignedKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void TypeSpecSimpleUnsignedKeyWord::swap(TypeSpecSimpleUnsignedKeyWord & other)
{

}

TypeSpecSimpleUnsignedKeyWord::~TypeSpecSimpleUnsignedKeyWord()
{

}

void TypeSpecSimpleUnsignedKeyWord::accept(Visitor *v)
{
  v->visitTypeSpecSimpleUnsignedKeyWord(this);
}

TypeSpecSimpleUnsignedKeyWord *TypeSpecSimpleUnsignedKeyWord::clone() const
{
  return new TypeSpecSimpleUnsignedKeyWord(*this);
}



/********************   TypeSpecSimpleShortKeyWord    ********************/
TypeSpecSimpleShortKeyWord::TypeSpecSimpleShortKeyWord()
{

}

TypeSpecSimpleShortKeyWord::TypeSpecSimpleShortKeyWord(const TypeSpecSimpleShortKeyWord & other)
{

}

TypeSpecSimpleShortKeyWord &TypeSpecSimpleShortKeyWord::operator=(const TypeSpecSimpleShortKeyWord & other)
{
  TypeSpecSimpleShortKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void TypeSpecSimpleShortKeyWord::swap(TypeSpecSimpleShortKeyWord & other)
{

}

TypeSpecSimpleShortKeyWord::~TypeSpecSimpleShortKeyWord()
{

}

void TypeSpecSimpleShortKeyWord::accept(Visitor *v)
{
  v->visitTypeSpecSimpleShortKeyWord(this);
}

TypeSpecSimpleShortKeyWord *TypeSpecSimpleShortKeyWord::clone() const
{
  return new TypeSpecSimpleShortKeyWord(*this);
}



/********************   TypeSpecSimpleSignedShortKeyWord    ********************/
TypeSpecSimpleSignedShortKeyWord::TypeSpecSimpleSignedShortKeyWord()
{

}

TypeSpecSimpleSignedShortKeyWord::TypeSpecSimpleSignedShortKeyWord(const TypeSpecSimpleSignedShortKeyWord & other)
{

}

TypeSpecSimpleSignedShortKeyWord &TypeSpecSimpleSignedShortKeyWord::operator=(const TypeSpecSimpleSignedShortKeyWord & other)
{
  TypeSpecSimpleSignedShortKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void TypeSpecSimpleSignedShortKeyWord::swap(TypeSpecSimpleSignedShortKeyWord & other)
{

}

TypeSpecSimpleSignedShortKeyWord::~TypeSpecSimpleSignedShortKeyWord()
{

}

void TypeSpecSimpleSignedShortKeyWord::accept(Visitor *v)
{
  v->visitTypeSpecSimpleSignedShortKeyWord(this);
}

TypeSpecSimpleSignedShortKeyWord *TypeSpecSimpleSignedShortKeyWord::clone() const
{
  return new TypeSpecSimpleSignedShortKeyWord(*this);
}



/********************   TypeSpecSimpleUnsignedShortKeyWord    ********************/
TypeSpecSimpleUnsignedShortKeyWord::TypeSpecSimpleUnsignedShortKeyWord()
{

}

TypeSpecSimpleUnsignedShortKeyWord::TypeSpecSimpleUnsignedShortKeyWord(const TypeSpecSimpleUnsignedShortKeyWord & other)
{

}

TypeSpecSimpleUnsignedShortKeyWord &TypeSpecSimpleUnsignedShortKeyWord::operator=(const TypeSpecSimpleUnsignedShortKeyWord & other)
{
  TypeSpecSimpleUnsignedShortKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void TypeSpecSimpleUnsignedShortKeyWord::swap(TypeSpecSimpleUnsignedShortKeyWord & other)
{

}

TypeSpecSimpleUnsignedShortKeyWord::~TypeSpecSimpleUnsignedShortKeyWord()
{

}

void TypeSpecSimpleUnsignedShortKeyWord::accept(Visitor *v)
{
  v->visitTypeSpecSimpleUnsignedShortKeyWord(this);
}

TypeSpecSimpleUnsignedShortKeyWord *TypeSpecSimpleUnsignedShortKeyWord::clone() const
{
  return new TypeSpecSimpleUnsignedShortKeyWord(*this);
}



/********************   TypeSpecSimpleShortIntKeyWord    ********************/
TypeSpecSimpleShortIntKeyWord::TypeSpecSimpleShortIntKeyWord()
{

}

TypeSpecSimpleShortIntKeyWord::TypeSpecSimpleShortIntKeyWord(const TypeSpecSimpleShortIntKeyWord & other)
{

}

TypeSpecSimpleShortIntKeyWord &TypeSpecSimpleShortIntKeyWord::operator=(const TypeSpecSimpleShortIntKeyWord & other)
{
  TypeSpecSimpleShortIntKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void TypeSpecSimpleShortIntKeyWord::swap(TypeSpecSimpleShortIntKeyWord & other)
{

}

TypeSpecSimpleShortIntKeyWord::~TypeSpecSimpleShortIntKeyWord()
{

}

void TypeSpecSimpleShortIntKeyWord::accept(Visitor *v)
{
  v->visitTypeSpecSimpleShortIntKeyWord(this);
}

TypeSpecSimpleShortIntKeyWord *TypeSpecSimpleShortIntKeyWord::clone() const
{
  return new TypeSpecSimpleShortIntKeyWord(*this);
}



/********************   TypeSpecSimpleSignedShortIntKeyWord    ********************/
TypeSpecSimpleSignedShortIntKeyWord::TypeSpecSimpleSignedShortIntKeyWord()
{

}

TypeSpecSimpleSignedShortIntKeyWord::TypeSpecSimpleSignedShortIntKeyWord(const TypeSpecSimpleSignedShortIntKeyWord & other)
{

}

TypeSpecSimpleSignedShortIntKeyWord &TypeSpecSimpleSignedShortIntKeyWord::operator=(const TypeSpecSimpleSignedShortIntKeyWord & other)
{
  TypeSpecSimpleSignedShortIntKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void TypeSpecSimpleSignedShortIntKeyWord::swap(TypeSpecSimpleSignedShortIntKeyWord & other)
{

}

TypeSpecSimpleSignedShortIntKeyWord::~TypeSpecSimpleSignedShortIntKeyWord()
{

}

void TypeSpecSimpleSignedShortIntKeyWord::accept(Visitor *v)
{
  v->visitTypeSpecSimpleSignedShortIntKeyWord(this);
}

TypeSpecSimpleSignedShortIntKeyWord *TypeSpecSimpleSignedShortIntKeyWord::clone() const
{
  return new TypeSpecSimpleSignedShortIntKeyWord(*this);
}



/********************   TypeSpecSimpleUnsignedShortIntKeyWord    ********************/
TypeSpecSimpleUnsignedShortIntKeyWord::TypeSpecSimpleUnsignedShortIntKeyWord()
{

}

TypeSpecSimpleUnsignedShortIntKeyWord::TypeSpecSimpleUnsignedShortIntKeyWord(const TypeSpecSimpleUnsignedShortIntKeyWord & other)
{

}

TypeSpecSimpleUnsignedShortIntKeyWord &TypeSpecSimpleUnsignedShortIntKeyWord::operator=(const TypeSpecSimpleUnsignedShortIntKeyWord & other)
{
  TypeSpecSimpleUnsignedShortIntKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void TypeSpecSimpleUnsignedShortIntKeyWord::swap(TypeSpecSimpleUnsignedShortIntKeyWord & other)
{

}

TypeSpecSimpleUnsignedShortIntKeyWord::~TypeSpecSimpleUnsignedShortIntKeyWord()
{

}

void TypeSpecSimpleUnsignedShortIntKeyWord::accept(Visitor *v)
{
  v->visitTypeSpecSimpleUnsignedShortIntKeyWord(this);
}

TypeSpecSimpleUnsignedShortIntKeyWord *TypeSpecSimpleUnsignedShortIntKeyWord::clone() const
{
  return new TypeSpecSimpleUnsignedShortIntKeyWord(*this);
}



/********************   TypeSpecSimpleLongKeyWord    ********************/
TypeSpecSimpleLongKeyWord::TypeSpecSimpleLongKeyWord()
{

}

TypeSpecSimpleLongKeyWord::TypeSpecSimpleLongKeyWord(const TypeSpecSimpleLongKeyWord & other)
{

}

TypeSpecSimpleLongKeyWord &TypeSpecSimpleLongKeyWord::operator=(const TypeSpecSimpleLongKeyWord & other)
{
  TypeSpecSimpleLongKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void TypeSpecSimpleLongKeyWord::swap(TypeSpecSimpleLongKeyWord & other)
{

}

TypeSpecSimpleLongKeyWord::~TypeSpecSimpleLongKeyWord()
{

}

void TypeSpecSimpleLongKeyWord::accept(Visitor *v)
{
  v->visitTypeSpecSimpleLongKeyWord(this);
}

TypeSpecSimpleLongKeyWord *TypeSpecSimpleLongKeyWord::clone() const
{
  return new TypeSpecSimpleLongKeyWord(*this);
}



/********************   TypeSpecSimpleSignedLongKeyWord    ********************/
TypeSpecSimpleSignedLongKeyWord::TypeSpecSimpleSignedLongKeyWord()
{

}

TypeSpecSimpleSignedLongKeyWord::TypeSpecSimpleSignedLongKeyWord(const TypeSpecSimpleSignedLongKeyWord & other)
{

}

TypeSpecSimpleSignedLongKeyWord &TypeSpecSimpleSignedLongKeyWord::operator=(const TypeSpecSimpleSignedLongKeyWord & other)
{
  TypeSpecSimpleSignedLongKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void TypeSpecSimpleSignedLongKeyWord::swap(TypeSpecSimpleSignedLongKeyWord & other)
{

}

TypeSpecSimpleSignedLongKeyWord::~TypeSpecSimpleSignedLongKeyWord()
{

}

void TypeSpecSimpleSignedLongKeyWord::accept(Visitor *v)
{
  v->visitTypeSpecSimpleSignedLongKeyWord(this);
}

TypeSpecSimpleSignedLongKeyWord *TypeSpecSimpleSignedLongKeyWord::clone() const
{
  return new TypeSpecSimpleSignedLongKeyWord(*this);
}



/********************   TypeSpecSimpleUnsignedLongKeyWord    ********************/
TypeSpecSimpleUnsignedLongKeyWord::TypeSpecSimpleUnsignedLongKeyWord()
{

}

TypeSpecSimpleUnsignedLongKeyWord::TypeSpecSimpleUnsignedLongKeyWord(const TypeSpecSimpleUnsignedLongKeyWord & other)
{

}

TypeSpecSimpleUnsignedLongKeyWord &TypeSpecSimpleUnsignedLongKeyWord::operator=(const TypeSpecSimpleUnsignedLongKeyWord & other)
{
  TypeSpecSimpleUnsignedLongKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void TypeSpecSimpleUnsignedLongKeyWord::swap(TypeSpecSimpleUnsignedLongKeyWord & other)
{

}

TypeSpecSimpleUnsignedLongKeyWord::~TypeSpecSimpleUnsignedLongKeyWord()
{

}

void TypeSpecSimpleUnsignedLongKeyWord::accept(Visitor *v)
{
  v->visitTypeSpecSimpleUnsignedLongKeyWord(this);
}

TypeSpecSimpleUnsignedLongKeyWord *TypeSpecSimpleUnsignedLongKeyWord::clone() const
{
  return new TypeSpecSimpleUnsignedLongKeyWord(*this);
}



/********************   TypeSpecSimpleSignedLongIntKeyWord    ********************/
TypeSpecSimpleSignedLongIntKeyWord::TypeSpecSimpleSignedLongIntKeyWord()
{

}

TypeSpecSimpleSignedLongIntKeyWord::TypeSpecSimpleSignedLongIntKeyWord(const TypeSpecSimpleSignedLongIntKeyWord & other)
{

}

TypeSpecSimpleSignedLongIntKeyWord &TypeSpecSimpleSignedLongIntKeyWord::operator=(const TypeSpecSimpleSignedLongIntKeyWord & other)
{
  TypeSpecSimpleSignedLongIntKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void TypeSpecSimpleSignedLongIntKeyWord::swap(TypeSpecSimpleSignedLongIntKeyWord & other)
{

}

TypeSpecSimpleSignedLongIntKeyWord::~TypeSpecSimpleSignedLongIntKeyWord()
{

}

void TypeSpecSimpleSignedLongIntKeyWord::accept(Visitor *v)
{
  v->visitTypeSpecSimpleSignedLongIntKeyWord(this);
}

TypeSpecSimpleSignedLongIntKeyWord *TypeSpecSimpleSignedLongIntKeyWord::clone() const
{
  return new TypeSpecSimpleSignedLongIntKeyWord(*this);
}



/********************   TypeSpecSimpleLongIntKeyWord    ********************/
TypeSpecSimpleLongIntKeyWord::TypeSpecSimpleLongIntKeyWord()
{

}

TypeSpecSimpleLongIntKeyWord::TypeSpecSimpleLongIntKeyWord(const TypeSpecSimpleLongIntKeyWord & other)
{

}

TypeSpecSimpleLongIntKeyWord &TypeSpecSimpleLongIntKeyWord::operator=(const TypeSpecSimpleLongIntKeyWord & other)
{
  TypeSpecSimpleLongIntKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void TypeSpecSimpleLongIntKeyWord::swap(TypeSpecSimpleLongIntKeyWord & other)
{

}

TypeSpecSimpleLongIntKeyWord::~TypeSpecSimpleLongIntKeyWord()
{

}

void TypeSpecSimpleLongIntKeyWord::accept(Visitor *v)
{
  v->visitTypeSpecSimpleLongIntKeyWord(this);
}

TypeSpecSimpleLongIntKeyWord *TypeSpecSimpleLongIntKeyWord::clone() const
{
  return new TypeSpecSimpleLongIntKeyWord(*this);
}



/********************   TypeSpecSimpleUnsignedLongIntKeyWord    ********************/
TypeSpecSimpleUnsignedLongIntKeyWord::TypeSpecSimpleUnsignedLongIntKeyWord()
{

}

TypeSpecSimpleUnsignedLongIntKeyWord::TypeSpecSimpleUnsignedLongIntKeyWord(const TypeSpecSimpleUnsignedLongIntKeyWord & other)
{

}

TypeSpecSimpleUnsignedLongIntKeyWord &TypeSpecSimpleUnsignedLongIntKeyWord::operator=(const TypeSpecSimpleUnsignedLongIntKeyWord & other)
{
  TypeSpecSimpleUnsignedLongIntKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void TypeSpecSimpleUnsignedLongIntKeyWord::swap(TypeSpecSimpleUnsignedLongIntKeyWord & other)
{

}

TypeSpecSimpleUnsignedLongIntKeyWord::~TypeSpecSimpleUnsignedLongIntKeyWord()
{

}

void TypeSpecSimpleUnsignedLongIntKeyWord::accept(Visitor *v)
{
  v->visitTypeSpecSimpleUnsignedLongIntKeyWord(this);
}

TypeSpecSimpleUnsignedLongIntKeyWord *TypeSpecSimpleUnsignedLongIntKeyWord::clone() const
{
  return new TypeSpecSimpleUnsignedLongIntKeyWord(*this);
}



/********************   TypeSpecSimpleLongLongKeyWord    ********************/
TypeSpecSimpleLongLongKeyWord::TypeSpecSimpleLongLongKeyWord()
{

}

TypeSpecSimpleLongLongKeyWord::TypeSpecSimpleLongLongKeyWord(const TypeSpecSimpleLongLongKeyWord & other)
{

}

TypeSpecSimpleLongLongKeyWord &TypeSpecSimpleLongLongKeyWord::operator=(const TypeSpecSimpleLongLongKeyWord & other)
{
  TypeSpecSimpleLongLongKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void TypeSpecSimpleLongLongKeyWord::swap(TypeSpecSimpleLongLongKeyWord & other)
{

}

TypeSpecSimpleLongLongKeyWord::~TypeSpecSimpleLongLongKeyWord()
{

}

void TypeSpecSimpleLongLongKeyWord::accept(Visitor *v)
{
  v->visitTypeSpecSimpleLongLongKeyWord(this);
}

TypeSpecSimpleLongLongKeyWord *TypeSpecSimpleLongLongKeyWord::clone() const
{
  return new TypeSpecSimpleLongLongKeyWord(*this);
}



/********************   TypeSpecSimpleSignedLongLongKeyWord    ********************/
TypeSpecSimpleSignedLongLongKeyWord::TypeSpecSimpleSignedLongLongKeyWord()
{

}

TypeSpecSimpleSignedLongLongKeyWord::TypeSpecSimpleSignedLongLongKeyWord(const TypeSpecSimpleSignedLongLongKeyWord & other)
{

}

TypeSpecSimpleSignedLongLongKeyWord &TypeSpecSimpleSignedLongLongKeyWord::operator=(const TypeSpecSimpleSignedLongLongKeyWord & other)
{
  TypeSpecSimpleSignedLongLongKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void TypeSpecSimpleSignedLongLongKeyWord::swap(TypeSpecSimpleSignedLongLongKeyWord & other)
{

}

TypeSpecSimpleSignedLongLongKeyWord::~TypeSpecSimpleSignedLongLongKeyWord()
{

}

void TypeSpecSimpleSignedLongLongKeyWord::accept(Visitor *v)
{
  v->visitTypeSpecSimpleSignedLongLongKeyWord(this);
}

TypeSpecSimpleSignedLongLongKeyWord *TypeSpecSimpleSignedLongLongKeyWord::clone() const
{
  return new TypeSpecSimpleSignedLongLongKeyWord(*this);
}



/********************   TypeSpecSimpleUnsignedLongLongKeyWord    ********************/
TypeSpecSimpleUnsignedLongLongKeyWord::TypeSpecSimpleUnsignedLongLongKeyWord()
{

}

TypeSpecSimpleUnsignedLongLongKeyWord::TypeSpecSimpleUnsignedLongLongKeyWord(const TypeSpecSimpleUnsignedLongLongKeyWord & other)
{

}

TypeSpecSimpleUnsignedLongLongKeyWord &TypeSpecSimpleUnsignedLongLongKeyWord::operator=(const TypeSpecSimpleUnsignedLongLongKeyWord & other)
{
  TypeSpecSimpleUnsignedLongLongKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void TypeSpecSimpleUnsignedLongLongKeyWord::swap(TypeSpecSimpleUnsignedLongLongKeyWord & other)
{

}

TypeSpecSimpleUnsignedLongLongKeyWord::~TypeSpecSimpleUnsignedLongLongKeyWord()
{

}

void TypeSpecSimpleUnsignedLongLongKeyWord::accept(Visitor *v)
{
  v->visitTypeSpecSimpleUnsignedLongLongKeyWord(this);
}

TypeSpecSimpleUnsignedLongLongKeyWord *TypeSpecSimpleUnsignedLongLongKeyWord::clone() const
{
  return new TypeSpecSimpleUnsignedLongLongKeyWord(*this);
}



/********************   TypeSpecSimpleLongLongIntKeyWord    ********************/
TypeSpecSimpleLongLongIntKeyWord::TypeSpecSimpleLongLongIntKeyWord()
{

}

TypeSpecSimpleLongLongIntKeyWord::TypeSpecSimpleLongLongIntKeyWord(const TypeSpecSimpleLongLongIntKeyWord & other)
{

}

TypeSpecSimpleLongLongIntKeyWord &TypeSpecSimpleLongLongIntKeyWord::operator=(const TypeSpecSimpleLongLongIntKeyWord & other)
{
  TypeSpecSimpleLongLongIntKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void TypeSpecSimpleLongLongIntKeyWord::swap(TypeSpecSimpleLongLongIntKeyWord & other)
{

}

TypeSpecSimpleLongLongIntKeyWord::~TypeSpecSimpleLongLongIntKeyWord()
{

}

void TypeSpecSimpleLongLongIntKeyWord::accept(Visitor *v)
{
  v->visitTypeSpecSimpleLongLongIntKeyWord(this);
}

TypeSpecSimpleLongLongIntKeyWord *TypeSpecSimpleLongLongIntKeyWord::clone() const
{
  return new TypeSpecSimpleLongLongIntKeyWord(*this);
}



/********************   TypeSpecSimpleSignedLongLongIntKeyWord    ********************/
TypeSpecSimpleSignedLongLongIntKeyWord::TypeSpecSimpleSignedLongLongIntKeyWord()
{

}

TypeSpecSimpleSignedLongLongIntKeyWord::TypeSpecSimpleSignedLongLongIntKeyWord(const TypeSpecSimpleSignedLongLongIntKeyWord & other)
{

}

TypeSpecSimpleSignedLongLongIntKeyWord &TypeSpecSimpleSignedLongLongIntKeyWord::operator=(const TypeSpecSimpleSignedLongLongIntKeyWord & other)
{
  TypeSpecSimpleSignedLongLongIntKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void TypeSpecSimpleSignedLongLongIntKeyWord::swap(TypeSpecSimpleSignedLongLongIntKeyWord & other)
{

}

TypeSpecSimpleSignedLongLongIntKeyWord::~TypeSpecSimpleSignedLongLongIntKeyWord()
{

}

void TypeSpecSimpleSignedLongLongIntKeyWord::accept(Visitor *v)
{
  v->visitTypeSpecSimpleSignedLongLongIntKeyWord(this);
}

TypeSpecSimpleSignedLongLongIntKeyWord *TypeSpecSimpleSignedLongLongIntKeyWord::clone() const
{
  return new TypeSpecSimpleSignedLongLongIntKeyWord(*this);
}



/********************   TypeSpecSimpleUnsignedLongLongIntKeyWord    ********************/
TypeSpecSimpleUnsignedLongLongIntKeyWord::TypeSpecSimpleUnsignedLongLongIntKeyWord()
{

}

TypeSpecSimpleUnsignedLongLongIntKeyWord::TypeSpecSimpleUnsignedLongLongIntKeyWord(const TypeSpecSimpleUnsignedLongLongIntKeyWord & other)
{

}

TypeSpecSimpleUnsignedLongLongIntKeyWord &TypeSpecSimpleUnsignedLongLongIntKeyWord::operator=(const TypeSpecSimpleUnsignedLongLongIntKeyWord & other)
{
  TypeSpecSimpleUnsignedLongLongIntKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void TypeSpecSimpleUnsignedLongLongIntKeyWord::swap(TypeSpecSimpleUnsignedLongLongIntKeyWord & other)
{

}

TypeSpecSimpleUnsignedLongLongIntKeyWord::~TypeSpecSimpleUnsignedLongLongIntKeyWord()
{

}

void TypeSpecSimpleUnsignedLongLongIntKeyWord::accept(Visitor *v)
{
  v->visitTypeSpecSimpleUnsignedLongLongIntKeyWord(this);
}

TypeSpecSimpleUnsignedLongLongIntKeyWord *TypeSpecSimpleUnsignedLongLongIntKeyWord::clone() const
{
  return new TypeSpecSimpleUnsignedLongLongIntKeyWord(*this);
}



/********************   TypeSpecSimpleFloatKeyWord    ********************/
TypeSpecSimpleFloatKeyWord::TypeSpecSimpleFloatKeyWord()
{

}

TypeSpecSimpleFloatKeyWord::TypeSpecSimpleFloatKeyWord(const TypeSpecSimpleFloatKeyWord & other)
{

}

TypeSpecSimpleFloatKeyWord &TypeSpecSimpleFloatKeyWord::operator=(const TypeSpecSimpleFloatKeyWord & other)
{
  TypeSpecSimpleFloatKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void TypeSpecSimpleFloatKeyWord::swap(TypeSpecSimpleFloatKeyWord & other)
{

}

TypeSpecSimpleFloatKeyWord::~TypeSpecSimpleFloatKeyWord()
{

}

void TypeSpecSimpleFloatKeyWord::accept(Visitor *v)
{
  v->visitTypeSpecSimpleFloatKeyWord(this);
}

TypeSpecSimpleFloatKeyWord *TypeSpecSimpleFloatKeyWord::clone() const
{
  return new TypeSpecSimpleFloatKeyWord(*this);
}



/********************   TypeSpecSimpleDoubleKeyWord    ********************/
TypeSpecSimpleDoubleKeyWord::TypeSpecSimpleDoubleKeyWord()
{

}

TypeSpecSimpleDoubleKeyWord::TypeSpecSimpleDoubleKeyWord(const TypeSpecSimpleDoubleKeyWord & other)
{

}

TypeSpecSimpleDoubleKeyWord &TypeSpecSimpleDoubleKeyWord::operator=(const TypeSpecSimpleDoubleKeyWord & other)
{
  TypeSpecSimpleDoubleKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void TypeSpecSimpleDoubleKeyWord::swap(TypeSpecSimpleDoubleKeyWord & other)
{

}

TypeSpecSimpleDoubleKeyWord::~TypeSpecSimpleDoubleKeyWord()
{

}

void TypeSpecSimpleDoubleKeyWord::accept(Visitor *v)
{
  v->visitTypeSpecSimpleDoubleKeyWord(this);
}

TypeSpecSimpleDoubleKeyWord *TypeSpecSimpleDoubleKeyWord::clone() const
{
  return new TypeSpecSimpleDoubleKeyWord(*this);
}



/********************   TypeSpecSimpleLongDoubleKeyWord    ********************/
TypeSpecSimpleLongDoubleKeyWord::TypeSpecSimpleLongDoubleKeyWord()
{

}

TypeSpecSimpleLongDoubleKeyWord::TypeSpecSimpleLongDoubleKeyWord(const TypeSpecSimpleLongDoubleKeyWord & other)
{

}

TypeSpecSimpleLongDoubleKeyWord &TypeSpecSimpleLongDoubleKeyWord::operator=(const TypeSpecSimpleLongDoubleKeyWord & other)
{
  TypeSpecSimpleLongDoubleKeyWord tmp(other);
  swap(tmp);
  return *this;
}

void TypeSpecSimpleLongDoubleKeyWord::swap(TypeSpecSimpleLongDoubleKeyWord & other)
{

}

TypeSpecSimpleLongDoubleKeyWord::~TypeSpecSimpleLongDoubleKeyWord()
{

}

void TypeSpecSimpleLongDoubleKeyWord::accept(Visitor *v)
{
  v->visitTypeSpecSimpleLongDoubleKeyWord(this);
}

TypeSpecSimpleLongDoubleKeyWord *TypeSpecSimpleLongDoubleKeyWord::clone() const
{
  return new TypeSpecSimpleLongDoubleKeyWord(*this);
}



/********************   AnAnnotation    ********************/
AnAnnotation::AnAnnotation(Annotation *p1)
{
  annotation_ = p1;

}

AnAnnotation::AnAnnotation(const AnAnnotation & other)
{
  annotation_ = other.annotation_->clone();

}

AnAnnotation &AnAnnotation::operator=(const AnAnnotation & other)
{
  AnAnnotation tmp(other);
  swap(tmp);
  return *this;
}

void AnAnnotation::swap(AnAnnotation & other)
{
  std::swap(annotation_, other.annotation_);

}

AnAnnotation::~AnAnnotation()
{
  delete(annotation_);

}

void AnAnnotation::accept(Visitor *v)
{
  v->visitAnAnnotation(this);
}

AnAnnotation *AnAnnotation::clone() const
{
  return new AnAnnotation(*this);
}



/********************   LoopAnnotation    ********************/
LoopAnnotation::LoopAnnotation(LoopAnnotStack *p1)
{
  loopannotstack_ = p1;

}

LoopAnnotation::LoopAnnotation(const LoopAnnotation & other)
{
  loopannotstack_ = other.loopannotstack_->clone();

}

LoopAnnotation &LoopAnnotation::operator=(const LoopAnnotation & other)
{
  LoopAnnotation tmp(other);
  swap(tmp);
  return *this;
}

void LoopAnnotation::swap(LoopAnnotation & other)
{
  std::swap(loopannotstack_, other.loopannotstack_);

}

LoopAnnotation::~LoopAnnotation()
{
  delete(loopannotstack_);

}

void LoopAnnotation::accept(Visitor *v)
{
  v->visitLoopAnnotation(this);
}

LoopAnnotation *LoopAnnotation::clone() const
{
  return new LoopAnnotation(*this);
}



/********************   LoopAnnotStackInvariant    ********************/
LoopAnnotStackInvariant::LoopAnnotStackInvariant(LoopInvariant *p1, LoopAnnotOpt *p2)
{
  loopinvariant_ = p1;
  loopannotopt_ = p2;

}

LoopAnnotStackInvariant::LoopAnnotStackInvariant(const LoopAnnotStackInvariant & other)
{
  loopinvariant_ = other.loopinvariant_->clone();
  loopannotopt_ = other.loopannotopt_->clone();

}

LoopAnnotStackInvariant &LoopAnnotStackInvariant::operator=(const LoopAnnotStackInvariant & other)
{
  LoopAnnotStackInvariant tmp(other);
  swap(tmp);
  return *this;
}

void LoopAnnotStackInvariant::swap(LoopAnnotStackInvariant & other)
{
  std::swap(loopinvariant_, other.loopinvariant_);
  std::swap(loopannotopt_, other.loopannotopt_);

}

LoopAnnotStackInvariant::~LoopAnnotStackInvariant()
{
  delete(loopinvariant_);
  delete(loopannotopt_);

}

void LoopAnnotStackInvariant::accept(Visitor *v)
{
  v->visitLoopAnnotStackInvariant(this);
}

LoopAnnotStackInvariant *LoopAnnotStackInvariant::clone() const
{
  return new LoopAnnotStackInvariant(*this);
}



/********************   LoopAnnotStackEffects    ********************/
LoopAnnotStackEffects::LoopAnnotStackEffects(LoopEffects *p1, LoopAnnotOpt *p2)
{
  loopeffects_ = p1;
  loopannotopt_ = p2;

}

LoopAnnotStackEffects::LoopAnnotStackEffects(const LoopAnnotStackEffects & other)
{
  loopeffects_ = other.loopeffects_->clone();
  loopannotopt_ = other.loopannotopt_->clone();

}

LoopAnnotStackEffects &LoopAnnotStackEffects::operator=(const LoopAnnotStackEffects & other)
{
  LoopAnnotStackEffects tmp(other);
  swap(tmp);
  return *this;
}

void LoopAnnotStackEffects::swap(LoopAnnotStackEffects & other)
{
  std::swap(loopeffects_, other.loopeffects_);
  std::swap(loopannotopt_, other.loopannotopt_);

}

LoopAnnotStackEffects::~LoopAnnotStackEffects()
{
  delete(loopeffects_);
  delete(loopannotopt_);

}

void LoopAnnotStackEffects::accept(Visitor *v)
{
  v->visitLoopAnnotStackEffects(this);
}

LoopAnnotStackEffects *LoopAnnotStackEffects::clone() const
{
  return new LoopAnnotStackEffects(*this);
}



/********************   LoopAnnotStackAllocation    ********************/
LoopAnnotStackAllocation::LoopAnnotStackAllocation(LoopAllocation *p1, LoopAnnotOpt *p2)
{
  loopallocation_ = p1;
  loopannotopt_ = p2;

}

LoopAnnotStackAllocation::LoopAnnotStackAllocation(const LoopAnnotStackAllocation & other)
{
  loopallocation_ = other.loopallocation_->clone();
  loopannotopt_ = other.loopannotopt_->clone();

}

LoopAnnotStackAllocation &LoopAnnotStackAllocation::operator=(const LoopAnnotStackAllocation & other)
{
  LoopAnnotStackAllocation tmp(other);
  swap(tmp);
  return *this;
}

void LoopAnnotStackAllocation::swap(LoopAnnotStackAllocation & other)
{
  std::swap(loopallocation_, other.loopallocation_);
  std::swap(loopannotopt_, other.loopannotopt_);

}

LoopAnnotStackAllocation::~LoopAnnotStackAllocation()
{
  delete(loopallocation_);
  delete(loopannotopt_);

}

void LoopAnnotStackAllocation::accept(Visitor *v)
{
  v->visitLoopAnnotStackAllocation(this);
}

LoopAnnotStackAllocation *LoopAnnotStackAllocation::clone() const
{
  return new LoopAnnotStackAllocation(*this);
}



/********************   LoopAnnotStackVariant    ********************/
LoopAnnotStackVariant::LoopAnnotStackVariant(LoopVariant *p1, LoopAnnotOpt *p2)
{
  loopvariant_ = p1;
  loopannotopt_ = p2;

}

LoopAnnotStackVariant::LoopAnnotStackVariant(const LoopAnnotStackVariant & other)
{
  loopvariant_ = other.loopvariant_->clone();
  loopannotopt_ = other.loopannotopt_->clone();

}

LoopAnnotStackVariant &LoopAnnotStackVariant::operator=(const LoopAnnotStackVariant & other)
{
  LoopAnnotStackVariant tmp(other);
  swap(tmp);
  return *this;
}

void LoopAnnotStackVariant::swap(LoopAnnotStackVariant & other)
{
  std::swap(loopvariant_, other.loopvariant_);
  std::swap(loopannotopt_, other.loopannotopt_);

}

LoopAnnotStackVariant::~LoopAnnotStackVariant()
{
  delete(loopvariant_);
  delete(loopannotopt_);

}

void LoopAnnotStackVariant::accept(Visitor *v)
{
  v->visitLoopAnnotStackVariant(this);
}

LoopAnnotStackVariant *LoopAnnotStackVariant::clone() const
{
  return new LoopAnnotStackVariant(*this);
}



/********************   NoLoopAnnot    ********************/
NoLoopAnnot::NoLoopAnnot()
{

}

NoLoopAnnot::NoLoopAnnot(const NoLoopAnnot & other)
{

}

NoLoopAnnot &NoLoopAnnot::operator=(const NoLoopAnnot & other)
{
  NoLoopAnnot tmp(other);
  swap(tmp);
  return *this;
}

void NoLoopAnnot::swap(NoLoopAnnot & other)
{

}

NoLoopAnnot::~NoLoopAnnot()
{

}

void NoLoopAnnot::accept(Visitor *v)
{
  v->visitNoLoopAnnot(this);
}

NoLoopAnnot *NoLoopAnnot::clone() const
{
  return new NoLoopAnnot(*this);
}



/********************   SomeLoopAnnot    ********************/
SomeLoopAnnot::SomeLoopAnnot(LoopAnnotStack *p1)
{
  loopannotstack_ = p1;

}

SomeLoopAnnot::SomeLoopAnnot(const SomeLoopAnnot & other)
{
  loopannotstack_ = other.loopannotstack_->clone();

}

SomeLoopAnnot &SomeLoopAnnot::operator=(const SomeLoopAnnot & other)
{
  SomeLoopAnnot tmp(other);
  swap(tmp);
  return *this;
}

void SomeLoopAnnot::swap(SomeLoopAnnot & other)
{
  std::swap(loopannotstack_, other.loopannotstack_);

}

SomeLoopAnnot::~SomeLoopAnnot()
{
  delete(loopannotstack_);

}

void SomeLoopAnnot::accept(Visitor *v)
{
  v->visitSomeLoopAnnot(this);
}

SomeLoopAnnot *SomeLoopAnnot::clone() const
{
  return new SomeLoopAnnot(*this);
}



/********************   SimpleLoopInvariant    ********************/
SimpleLoopInvariant::SimpleLoopInvariant(Lexpr *p1)
{
  lexpr_ = p1;

}

SimpleLoopInvariant::SimpleLoopInvariant(const SimpleLoopInvariant & other)
{
  lexpr_ = other.lexpr_->clone();

}

SimpleLoopInvariant &SimpleLoopInvariant::operator=(const SimpleLoopInvariant & other)
{
  SimpleLoopInvariant tmp(other);
  swap(tmp);
  return *this;
}

void SimpleLoopInvariant::swap(SimpleLoopInvariant & other)
{
  std::swap(lexpr_, other.lexpr_);

}

SimpleLoopInvariant::~SimpleLoopInvariant()
{
  delete(lexpr_);

}

void SimpleLoopInvariant::accept(Visitor *v)
{
  v->visitSimpleLoopInvariant(this);
}

SimpleLoopInvariant *SimpleLoopInvariant::clone() const
{
  return new SimpleLoopInvariant(*this);
}



/********************   CheckLoopInvariant    ********************/
CheckLoopInvariant::CheckLoopInvariant(Lexpr *p1)
{
  lexpr_ = p1;

}

CheckLoopInvariant::CheckLoopInvariant(const CheckLoopInvariant & other)
{
  lexpr_ = other.lexpr_->clone();

}

CheckLoopInvariant &CheckLoopInvariant::operator=(const CheckLoopInvariant & other)
{
  CheckLoopInvariant tmp(other);
  swap(tmp);
  return *this;
}

void CheckLoopInvariant::swap(CheckLoopInvariant & other)
{
  std::swap(lexpr_, other.lexpr_);

}

CheckLoopInvariant::~CheckLoopInvariant()
{
  delete(lexpr_);

}

void CheckLoopInvariant::accept(Visitor *v)
{
  v->visitCheckLoopInvariant(this);
}

CheckLoopInvariant *CheckLoopInvariant::clone() const
{
  return new CheckLoopInvariant(*this);
}



/********************   AdmitLoopInvariant    ********************/
AdmitLoopInvariant::AdmitLoopInvariant(Lexpr *p1)
{
  lexpr_ = p1;

}

AdmitLoopInvariant::AdmitLoopInvariant(const AdmitLoopInvariant & other)
{
  lexpr_ = other.lexpr_->clone();

}

AdmitLoopInvariant &AdmitLoopInvariant::operator=(const AdmitLoopInvariant & other)
{
  AdmitLoopInvariant tmp(other);
  swap(tmp);
  return *this;
}

void AdmitLoopInvariant::swap(AdmitLoopInvariant & other)
{
  std::swap(lexpr_, other.lexpr_);

}

AdmitLoopInvariant::~AdmitLoopInvariant()
{
  delete(lexpr_);

}

void AdmitLoopInvariant::accept(Visitor *v)
{
  v->visitAdmitLoopInvariant(this);
}

AdmitLoopInvariant *AdmitLoopInvariant::clone() const
{
  return new AdmitLoopInvariant(*this);
}



/********************   SimpleLoopAllocation    ********************/
SimpleLoopAllocation::SimpleLoopAllocation(Allocation *p1)
{
  allocation_ = p1;

}

SimpleLoopAllocation::SimpleLoopAllocation(const SimpleLoopAllocation & other)
{
  allocation_ = other.allocation_->clone();

}

SimpleLoopAllocation &SimpleLoopAllocation::operator=(const SimpleLoopAllocation & other)
{
  SimpleLoopAllocation tmp(other);
  swap(tmp);
  return *this;
}

void SimpleLoopAllocation::swap(SimpleLoopAllocation & other)
{
  std::swap(allocation_, other.allocation_);

}

SimpleLoopAllocation::~SimpleLoopAllocation()
{
  delete(allocation_);

}

void SimpleLoopAllocation::accept(Visitor *v)
{
  v->visitSimpleLoopAllocation(this);
}

SimpleLoopAllocation *SimpleLoopAllocation::clone() const
{
  return new SimpleLoopAllocation(*this);
}



/********************   AllocatesZones    ********************/
AllocatesZones::AllocatesZones(Zones *p1)
{
  zones_ = p1;

}

AllocatesZones::AllocatesZones(const AllocatesZones & other)
{
  zones_ = other.zones_->clone();

}

AllocatesZones &AllocatesZones::operator=(const AllocatesZones & other)
{
  AllocatesZones tmp(other);
  swap(tmp);
  return *this;
}

void AllocatesZones::swap(AllocatesZones & other)
{
  std::swap(zones_, other.zones_);

}

AllocatesZones::~AllocatesZones()
{
  delete(zones_);

}

void AllocatesZones::accept(Visitor *v)
{
  v->visitAllocatesZones(this);
}

AllocatesZones *AllocatesZones::clone() const
{
  return new AllocatesZones(*this);
}



/********************   FreesZones    ********************/
FreesZones::FreesZones(Zones *p1)
{
  zones_ = p1;

}

FreesZones::FreesZones(const FreesZones & other)
{
  zones_ = other.zones_->clone();

}

FreesZones &FreesZones::operator=(const FreesZones & other)
{
  FreesZones tmp(other);
  swap(tmp);
  return *this;
}

void FreesZones::swap(FreesZones & other)
{
  std::swap(zones_, other.zones_);

}

FreesZones::~FreesZones()
{
  delete(zones_);

}

void FreesZones::accept(Visitor *v)
{
  v->visitFreesZones(this);
}

FreesZones *FreesZones::clone() const
{
  return new FreesZones(*this);
}



/********************   SimpleLoopVariant    ********************/
SimpleLoopVariant::SimpleLoopVariant(Variant *p1)
{
  variant_ = p1;

}

SimpleLoopVariant::SimpleLoopVariant(const SimpleLoopVariant & other)
{
  variant_ = other.variant_->clone();

}

SimpleLoopVariant &SimpleLoopVariant::operator=(const SimpleLoopVariant & other)
{
  SimpleLoopVariant tmp(other);
  swap(tmp);
  return *this;
}

void SimpleLoopVariant::swap(SimpleLoopVariant & other)
{
  std::swap(variant_, other.variant_);

}

SimpleLoopVariant::~SimpleLoopVariant()
{
  delete(variant_);

}

void SimpleLoopVariant::accept(Visitor *v)
{
  v->visitSimpleLoopVariant(this);
}

SimpleLoopVariant *SimpleLoopVariant::clone() const
{
  return new SimpleLoopVariant(*this);
}



/********************   LoopAssigns    ********************/
LoopAssigns::LoopAssigns(Assigns *p1)
{
  assigns_ = p1;

}

LoopAssigns::LoopAssigns(const LoopAssigns & other)
{
  assigns_ = other.assigns_->clone();

}

LoopAssigns &LoopAssigns::operator=(const LoopAssigns & other)
{
  LoopAssigns tmp(other);
  swap(tmp);
  return *this;
}

void LoopAssigns::swap(LoopAssigns & other)
{
  std::swap(assigns_, other.assigns_);

}

LoopAssigns::~LoopAssigns()
{
  delete(assigns_);

}

void LoopAssigns::accept(Visitor *v)
{
  v->visitLoopAssigns(this);
}

LoopAssigns *LoopAssigns::clone() const
{
  return new LoopAssigns(*this);
}



/********************   ForVariant    ********************/
ForVariant::ForVariant(Lexpr *p1, AnyIdentifier *p2)
{
  lexpr_ = p1;
  anyidentifier_ = p2;

}

ForVariant::ForVariant(const ForVariant & other)
{
  lexpr_ = other.lexpr_->clone();
  anyidentifier_ = other.anyidentifier_->clone();

}

ForVariant &ForVariant::operator=(const ForVariant & other)
{
  ForVariant tmp(other);
  swap(tmp);
  return *this;
}

void ForVariant::swap(ForVariant & other)
{
  std::swap(lexpr_, other.lexpr_);
  std::swap(anyidentifier_, other.anyidentifier_);

}

ForVariant::~ForVariant()
{
  delete(lexpr_);
  delete(anyidentifier_);

}

void ForVariant::accept(Visitor *v)
{
  v->visitForVariant(this);
}

ForVariant *ForVariant::clone() const
{
  return new ForVariant(*this);
}



/********************   LexprVariant    ********************/
LexprVariant::LexprVariant(Lexpr *p1)
{
  lexpr_ = p1;

}

LexprVariant::LexprVariant(const LexprVariant & other)
{
  lexpr_ = other.lexpr_->clone();

}

LexprVariant &LexprVariant::operator=(const LexprVariant & other)
{
  LexprVariant tmp(other);
  swap(tmp);
  return *this;
}

void LexprVariant::swap(LexprVariant & other)
{
  std::swap(lexpr_, other.lexpr_);

}

LexprVariant::~LexprVariant()
{
  delete(lexpr_);

}

void LexprVariant::accept(Visitor *v)
{
  v->visitLexprVariant(this);
}

LexprVariant *LexprVariant::clone() const
{
  return new LexprVariant(*this);
}




/********************   ListLexpr    ********************/

void ListLexpr::accept(Visitor *v)
{
  v->visitListLexpr(this);
}

ListLexpr *ListLexpr::clone() const
{
  return new ListLexpr(*this);
}

ListLexpr* consListLexpr(Lexpr* x, ListLexpr* xs) {
  xs->insert(xs->begin(), x);
  return xs;
}


/********************   ListLexprRelInner    ********************/

void ListLexprRelInner::accept(Visitor *v)
{
  v->visitListLexprRelInner(this);
}

ListLexprRelInner *ListLexprRelInner::clone() const
{
  return new ListLexprRelInner(*this);
}

ListLexprRelInner* consListLexprRelInner(LexprRelInner* x, ListLexprRelInner* xs) {
  xs->insert(xs->begin(), x);
  return xs;
}


/********************   ListBindersReentrance    ********************/

void ListBindersReentrance::accept(Visitor *v)
{
  v->visitListBindersReentrance(this);
}

ListBindersReentrance *ListBindersReentrance::clone() const
{
  return new ListBindersReentrance(*this);
}

ListBindersReentrance* consListBindersReentrance(BindersReentrance* x, ListBindersReentrance* xs) {
  xs->insert(xs->begin(), x);
  return xs;
}


/********************   ListStars    ********************/

void ListStars::accept(Visitor *v)
{
  v->visitListStars(this);
}

ListStars *ListStars::clone() const
{
  return new ListStars(*this);
}

ListStars* consListStars(Stars* x, ListStars* xs) {
  xs->insert(xs->begin(), x);
  return xs;
}


/********************   ListLabelName    ********************/

void ListLabelName::accept(Visitor *v)
{
  v->visitListLabelName(this);
}

ListLabelName *ListLabelName::clone() const
{
  return new ListLabelName(*this);
}

ListLabelName* consListLabelName(LabelName* x, ListLabelName* xs) {
  xs->insert(xs->begin(), x);
  return xs;
}


/********************   ListFullIdentifier    ********************/

void ListFullIdentifier::accept(Visitor *v)
{
  v->visitListFullIdentifier(this);
}

ListFullIdentifier *ListFullIdentifier::clone() const
{
  return new ListFullIdentifier(*this);
}

ListFullIdentifier* consListFullIdentifier(FullIdentifier* x, ListFullIdentifier* xs) {
  xs->insert(xs->begin(), x);
  return xs;
}




}
