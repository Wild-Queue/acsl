/* File generated by the BNF Converter (bnfc 2.9.4.1). */

/*** Pretty Printer and Abstract Syntax Viewer ***/

#include <string>
#include "Printer.H"
#define INDENT_WIDTH 2

namespace partial_bnfc_acsl
{
//You may wish to change render
void PrintAbsyn::render(Char c)
{
  if (c == '{')
  {
     onEmptyLine();
     bufAppend(c);
     _n_ = _n_ + INDENT_WIDTH;
     bufAppend('\n');
     indent();
  }
  else if (c == '(' || c == '[')
     bufAppend(c);
  else if (c == ')' || c == ']')
  {
     removeTrailingWhitespace();
     bufAppend(c);
     bufAppend(' ');
  }
  else if (c == '}')
  {
     _n_ = _n_ - INDENT_WIDTH;
     onEmptyLine();
     bufAppend(c);
     bufAppend('\n');
     indent();
  }
  else if (c == ',')
  {
     removeTrailingWhitespace();
     bufAppend(c);
     bufAppend(' ');
  }
  else if (c == ';')
  {
     removeTrailingWhitespace();
     bufAppend(c);
     bufAppend('\n');
     indent();
  }
  else if (c == ' ') bufAppend(c);
  else if (c == 0) return;
  else
  {
     bufAppend(c);
     bufAppend(' ');
  }
}

void PrintAbsyn::render(String s)
{
  render(s.c_str());
}

bool allIsSpace(const char *s)
{
  char c;
  while ((c = *s++))
    if (! isspace(c)) return false;
  return true;
}

void PrintAbsyn::render(const char *s)
{
  if (*s) /* C string not empty */
  {
    if (allIsSpace(s)) {
      backup();
      bufAppend(s);
    } else {
      bufAppend(s);
      bufAppend(' ');
    }
  }
}

void PrintAbsyn::indent()
{
  int n = _n_;
  while (--n >= 0)
    bufAppend(' ');
}

void PrintAbsyn::backup()
{
  if (cur_ && buf_[cur_ - 1] == ' ')
    buf_[--cur_] = 0;
}

void PrintAbsyn::removeTrailingSpaces()
{
  while (cur_ && buf_[cur_ - 1] == ' ') --cur_;
  buf_[cur_] = 0;
}

void PrintAbsyn::removeTrailingWhitespace()
{
  while (cur_ && (buf_[cur_ - 1] == ' ' || buf_[cur_ - 1] == '\n')) --cur_;
  buf_[cur_] = 0;
}

void PrintAbsyn::onEmptyLine()
{
  removeTrailingSpaces();
  if (cur_ && buf_[cur_ - 1 ] != '\n') bufAppend('\n');
  indent();
}

PrintAbsyn::PrintAbsyn(void)
{
  _i_ = 0; _n_ = 0;
  buf_ = 0;
  bufReset();
}

PrintAbsyn::~PrintAbsyn(void)
{
}

char *PrintAbsyn::print(Visitable *v)
{
  _i_ = 0; _n_ = 0;
  bufReset();
  v->accept(this);
  return buf_;
}

void PrintAbsyn::visitProgram(Program *p) {} //abstract class

void PrintAbsyn::visitAnnotProgram(AnnotProgram *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->annot_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitAnnotationProgram(AnnotationProgram *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->logicptreeannot_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitAnnot(Annot *p) {} //abstract class

void PrintAbsyn::visitCodeAnnot(CodeAnnot *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->code_annot_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitCode_Annot(Code_Annot *p) {} //abstract class

void PrintAbsyn::visitCodeAnnotContract(CodeAnnotContract *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->contract_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitContract(Contract *p) {} //abstract class

void PrintAbsyn::visitSimpleContract(SimpleContract *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->requires_->accept(this);
  _i_ = 0; p->terminates_->accept(this);
  _i_ = 0; p->decreases_->accept(this);
  _i_ = 0; p->simpleclauses_->accept(this);
  _i_ = 0; p->behaviors_->accept(this);
  _i_ = 0; p->completeordisjoint_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitClausesRequiresContract(ClausesRequiresContract *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->requires_->accept(this);
  _i_ = 0; p->terminates_->accept(this);
  _i_ = 0; p->decreases_->accept(this);
  _i_ = 0; p->nesimpleclauses_->accept(this);
  render("requires");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitClausesTerminatesContract(ClausesTerminatesContract *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->requires_->accept(this);
  _i_ = 0; p->terminates_->accept(this);
  _i_ = 0; p->decreases_->accept(this);
  _i_ = 0; p->nesimpleclauses_->accept(this);
  render("terminates");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitClausesDecreasesContract(ClausesDecreasesContract *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->requires_->accept(this);
  _i_ = 0; p->terminates_->accept(this);
  _i_ = 0; p->decreases_->accept(this);
  _i_ = 0; p->nesimpleclauses_->accept(this);
  render("decreases");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitRequires(Requires *p) {} //abstract class

void PrintAbsyn::visitNoRequires(NoRequires *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);


  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitSomeRequires(SomeRequires *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->nerequires_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitNERequires(NERequires *p) {} //abstract class

void PrintAbsyn::visitSimpleRequires(SimpleRequires *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("requires");
  _i_ = 0; p->lexpr_->accept(this);
  render(';');
  _i_ = 0; p->requires_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitCheckRequires(CheckRequires *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("check");
  render("requires");
  _i_ = 0; p->lexpr_->accept(this);
  render(';');
  _i_ = 0; p->requires_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitAdimtRequires(AdimtRequires *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("admit");
  render("requires");
  _i_ = 0; p->lexpr_->accept(this);
  render(';');
  _i_ = 0; p->requires_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTerminates(Terminates *p) {} //abstract class

void PrintAbsyn::visitNoTerminate(NoTerminate *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);


  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitDecreases(Decreases *p) {} //abstract class

void PrintAbsyn::visitNoDecreases(NoDecreases *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);


  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitSimpleClauses(SimpleClauses *p) {} //abstract class

void PrintAbsyn::visitNoSimpleClauses(NoSimpleClauses *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);


  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitSomeSimpleClauses(SomeSimpleClauses *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->nesimpleclauses_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitNESimpleClauses(NESimpleClauses *p) {} //abstract class

void PrintAbsyn::visitPostCondSimpleClauses(PostCondSimpleClauses *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->postcond_->accept(this);
  _i_ = 0; p->lexpr_->accept(this);
  render(';');
  _i_ = 0; p->simpleclauses_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitAssignsSimpleClauses(AssignsSimpleClauses *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("assigns");
  _i_ = 0; p->assigns_->accept(this);
  render(';');
  _i_ = 0; p->simpleclauses_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitAssigns(Assigns *p) {} //abstract class

void PrintAbsyn::visitAssignZone(AssignZone *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->zones_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitAssignZoneFromZone(AssignZoneFromZone *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; visitListLexpr(p->listlexpr_);
  render("\\from");
  _i_ = 0; p->zones_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitZones(Zones *p) {} //abstract class

void PrintAbsyn::visitSomeZone(SomeZone *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; visitListLexpr(p->listlexpr_);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitNoZone(NoZone *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\nothing");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitBehaviors(Behaviors *p) {} //abstract class

void PrintAbsyn::visitNoBehaviors(NoBehaviors *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);


  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitCompleteOrDisjoint(CompleteOrDisjoint *p) {} //abstract class

void PrintAbsyn::visitNoComplDisj(NoComplDisj *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);


  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitLexpr(Lexpr *p) {} //abstract class

void PrintAbsyn::visitImplLexpr(ImplLexpr *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 1; p->lexpr_1->accept(this);
  render("==>");
  _i_ = 0; p->lexpr_2->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitIffLexpr(IffLexpr *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 1; p->lexpr_1->accept(this);
  render("<==>");
  _i_ = 0; p->lexpr_2->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitOrLexpr(OrLexpr *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 1; p->lexpr_1->accept(this);
  render("||");
  _i_ = 0; p->lexpr_2->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitAndLexpr(AndLexpr *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 1; p->lexpr_1->accept(this);
  render("&&");
  _i_ = 0; p->lexpr_2->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitHatHatLexpr(HatHatLexpr *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 1; p->lexpr_1->accept(this);
  render("^^");
  _i_ = 0; p->lexpr_2->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitAmpLexpr(AmpLexpr *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 1; p->lexpr_1->accept(this);
  render('&');
  _i_ = 0; p->lexpr_2->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitPipeLexpr(PipeLexpr *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 1; p->lexpr_1->accept(this);
  render('|');
  _i_ = 0; p->lexpr_2->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitHatLexpr(HatLexpr *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 1; p->lexpr_1->accept(this);
  render('^');
  _i_ = 0; p->lexpr_2->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitBimpliesLexpr(BimpliesLexpr *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 1; p->lexpr_1->accept(this);
  render("-->");
  _i_ = 0; p->lexpr_2->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitBiffLexpr(BiffLexpr *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 1; p->lexpr_1->accept(this);
  render("<-->");
  _i_ = 0; p->lexpr_2->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitInLexpr(InLexpr *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 1; p->lexpr_1->accept(this);
  render("\\in");
  _i_ = 0; p->lexpr_2->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTernaryLexpr(TernaryLexpr *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->lexpr_1->accept(this);
  render('?');
  _i_ = 0; p->lexpr_2->accept(this);
  render(':');
  _i_ = 0; p->lexpr_3->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitRelationLexpr(RelationLexpr *p)
{
  int oldi = _i_;
  if (oldi > 1) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 3; p->lexpr_1->accept(this);
  _i_ = 0; visitListLexprRelInner(p->listlexprrelinner_);
  _i_ = 0; p->relation_->accept(this);
  _i_ = 2; p->lexpr_2->accept(this);

  if (oldi > 1) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitBinderLexpr(BinderLexpr *p)
{
  int oldi = _i_;
  if (oldi > 2) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->lexprbinder_->accept(this);

  if (oldi > 2) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitNotBinderLexpr(NotBinderLexpr *p)
{
  int oldi = _i_;
  if (oldi > 2) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render('!');
  _i_ = 0; p->lexprbinder_->accept(this);

  if (oldi > 2) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTrueLexpr(TrueLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\true");

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitFalseLexpr(FalseLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\false");

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitPointerLexpr(PointerLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\object_pointer");
  _i_ = 1; p->optlabel_->accept(this);
  render('(');
  _i_ = 0; p->lexpr_->accept(this);
  render(')');

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitValidLexpr(ValidLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\valid");
  _i_ = 1; p->optlabel_->accept(this);
  render('(');
  _i_ = 0; p->lexpr_->accept(this);
  render(')');

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitValidReadLexpr(ValidReadLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\valid_read");
  _i_ = 1; p->optlabel_->accept(this);
  render('(');
  _i_ = 0; p->lexpr_->accept(this);
  render(')');

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitValidFuncLexpr(ValidFuncLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\valid_function");
  render('(');
  _i_ = 0; p->lexpr_->accept(this);
  render(')');

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitValidIndxLexpr(ValidIndxLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\valid_index");
  _i_ = 1; p->optlabel_->accept(this);
  render('(');
  _i_ = 0; p->lexpr_1->accept(this);
  render(',');
  _i_ = 0; p->lexpr_2->accept(this);
  render(')');

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitValidRangeLexpr(ValidRangeLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\valid_range");
  _i_ = 1; p->optlabel_->accept(this);
  render('(');
  _i_ = 0; p->lexpr_1->accept(this);
  render(',');
  _i_ = 0; p->lexpr_2->accept(this);
  render(',');
  _i_ = 0; p->lexpr_3->accept(this);
  render(')');

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitInitializedLexpr(InitializedLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\initialized");
  _i_ = 1; p->optlabel_->accept(this);
  render('(');
  _i_ = 0; p->lexpr_->accept(this);
  render(')');

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitDanglingLexpr(DanglingLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\dangling");
  _i_ = 1; p->optlabel_->accept(this);
  render('(');
  _i_ = 0; p->lexpr_->accept(this);
  render(')');

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitFreshLexpr(FreshLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\fresh");
  _i_ = 2; p->optlabel_->accept(this);
  render('(');
  _i_ = 0; p->lexpr_1->accept(this);
  render(',');
  _i_ = 0; p->lexpr_2->accept(this);
  render(')');

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitBaseAddrLexpr(BaseAddrLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\base_addr");
  _i_ = 1; p->optlabel_->accept(this);
  render('(');
  _i_ = 0; p->lexpr_->accept(this);
  render(')');

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitBlockLengthLexpr(BlockLengthLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\block_length");
  _i_ = 1; p->optlabel_->accept(this);
  render('(');
  _i_ = 0; p->lexpr_->accept(this);
  render(')');

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitOffsetLexpr(OffsetLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\offset");
  _i_ = 1; p->optlabel_->accept(this);
  render('(');
  _i_ = 0; p->lexpr_->accept(this);
  render(')');

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitAllocableLexpr(AllocableLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\allocable");
  _i_ = 1; p->optlabel_->accept(this);
  render('(');
  _i_ = 0; p->lexpr_->accept(this);
  render(')');

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitFreeableLexpr(FreeableLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\freeable");
  _i_ = 1; p->optlabel_->accept(this);
  render('(');
  _i_ = 0; p->lexpr_->accept(this);
  render(')');

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitAllocationLexpr(AllocationLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\allocation");
  _i_ = 1; p->optlabel_->accept(this);
  render('(');
  _i_ = 0; p->lexpr_->accept(this);
  render(')');

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitAutomaticLexpr(AutomaticLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\automatic");

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitDynamicLexpr(DynamicLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\dynamic");

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitRegisterLexpr(RegisterLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\register");

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitStaticLexpr(StaticLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\static");

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitUnallocatedLexpr(UnallocatedLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\unallocated");

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitNullLexpr(NullLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\null");

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitLexprIntConst(LexprIntConst *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  visitInteger(p->integer_);

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitLexprFloatConst(LexprFloatConst *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  visitDouble(p->double_);

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitLexprStringConst(LexprStringConst *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  visitString(p->string_);

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitAddLexpr(AddLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 3; p->lexpr_1->accept(this);
  render('+');
  _i_ = 3; p->lexpr_2->accept(this);

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitSubtrLexpr(SubtrLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 3; p->lexpr_1->accept(this);
  render('-');
  _i_ = 3; p->lexpr_2->accept(this);

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitMultLexpr(MultLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 3; p->lexpr_1->accept(this);
  render('*');
  _i_ = 3; p->lexpr_2->accept(this);

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitDivLexpr(DivLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 3; p->lexpr_1->accept(this);
  render('/');
  _i_ = 3; p->lexpr_2->accept(this);

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitModLexpr(ModLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 3; p->lexpr_1->accept(this);
  render('%');
  _i_ = 3; p->lexpr_2->accept(this);

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitSquaresRangeLexpr(SquaresRangeLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 3; p->lexpr_->accept(this);
  render('[');
  _i_ = 0; p->range_->accept(this);
  render(']');

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitSquaresLexpr(SquaresLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 3; p->lexpr_1->accept(this);
  render('[');
  _i_ = 0; p->lexpr_2->accept(this);
  render(']');

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitSizeOfLexpr(SizeOfLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("sizeof");
  render('(');
  _i_ = 0; p->lexpr_->accept(this);
  render(')');

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitOldLexpr(OldLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\old");
  render('(');
  _i_ = 0; p->lexpr_->accept(this);
  render(')');

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitAtLexpr(AtLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\at");
  render('(');
  _i_ = 0; p->lexpr_->accept(this);
  render(',');
  _i_ = 0; p->labelname_->accept(this);
  render(')');

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitResultLexpr(ResultLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\result");

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitSeparatedLexpr(SeparatedLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\separated");
  render('(');
  _i_ = 0; visitListLexpr(p->listlexpr_);
  render(')');

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitFullIdParenLexpr(FullIdParenLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->fullidentifier_->accept(this);
  render('(');
  _i_ = 0; visitListLexpr(p->listlexpr_);
  render(')');

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitFullId(FullId *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->fullidentifier_->accept(this);

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitPiLexpr(PiLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\pi");

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitParenRangeLexpr(ParenRangeLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render('(');
  _i_ = 0; p->range_->accept(this);
  render(')');

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitListLexpr(ListLexpr *listlexpr)
{
  iterListLexpr(listlexpr->begin(), listlexpr->end());
}

void PrintAbsyn::iterListLexpr(ListLexpr::const_iterator i, ListLexpr::const_iterator j)
{
  if (i == j) return;
  if (i == j-1)
  { /* last */
    (*i)->accept(this);
  }
  else
  { /* cons */
    (*i)->accept(this); render(','); iterListLexpr(i+1, j);
  }
}

void PrintAbsyn::visitLexprRelInner(LexprRelInner *p) {} //abstract class

void PrintAbsyn::visitRelInnerLexpr(RelInnerLexpr *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->relation_->accept(this);
  _i_ = 3; p->lexpr_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitListLexprRelInner(ListLexprRelInner *listlexprrelinner)
{
  iterListLexprRelInner(listlexprrelinner->begin(), listlexprrelinner->end());
}

void PrintAbsyn::iterListLexprRelInner(ListLexprRelInner::const_iterator i, ListLexprRelInner::const_iterator j)
{
  if (i == j) return;
  { /* cons */
    (*i)->accept(this); iterListLexprRelInner(i+1, j);
  }
}

void PrintAbsyn::visitRelation(Relation *p) {} //abstract class

void PrintAbsyn::visitLessRel(LessRel *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render('<');

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitGreaterRel(GreaterRel *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render('>');

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitLessEqRel(LessEqRel *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("<=");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitGreaterEqRel(GreaterEqRel *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render(">=");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitEqRel(EqRel *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("==");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitNotEqRel(NotEqRel *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("!=");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitLexprBinder(LexprBinder *p) {} //abstract class

void PrintAbsyn::visitForallBinderLexpr(ForallBinderLexpr *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\forall");
  _i_ = 0; p->binders_->accept(this);
  render(';');
  _i_ = 0; p->lexpr_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitExistBinderLexpr(ExistBinderLexpr *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\exists");
  _i_ = 0; p->binders_->accept(this);
  render(';');
  _i_ = 0; p->lexpr_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitLambdaBinderLexpr(LambdaBinderLexpr *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\lambda");
  _i_ = 0; p->binders_->accept(this);
  render(';');
  _i_ = 0; p->lexpr_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitBinders(Binders *p) {} //abstract class

void PrintAbsyn::visitTheBinders(TheBinders *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->typespecoftypename_->accept(this);
  _i_ = 0; p->varspec_->accept(this);
  _i_ = 0; visitListBindersReentrance(p->listbindersreentrance_);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecOFTYPENAME(TypeSpecOFTYPENAME *p) {} //abstract class

void PrintAbsyn::visitTypeSpecTYPENAME(TypeSpecTYPENAME *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  visitIdent(p->ident_);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecSimpleFromTypenameTypeSpec(TypeSpecSimpleFromTypenameTypeSpec *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->typespecsimple_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitBindersReentrance(BindersReentrance *p) {} //abstract class

void PrintAbsyn::visitBindersReentranceDeclSpec(BindersReentranceDeclSpec *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render(',');
  _i_ = 0; p->typespecoftypename_->accept(this);
  _i_ = 0; p->varspec_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitBindersReentranceVarSpec(BindersReentranceVarSpec *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render(',');
  _i_ = 0; p->varspec_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitListBindersReentrance(ListBindersReentrance *listbindersreentrance)
{
  iterListBindersReentrance(listbindersreentrance->begin(), listbindersreentrance->end());
}

void PrintAbsyn::iterListBindersReentrance(ListBindersReentrance::const_iterator i, ListBindersReentrance::const_iterator j)
{
  if (i == j) return;
  { /* cons */
    (*i)->accept(this); iterListBindersReentrance(i+1, j);
  }
}

void PrintAbsyn::visitVarSpec(VarSpec *p) {} //abstract class

void PrintAbsyn::visitStartVarSpec(StartVarSpec *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; visitListStars(p->liststars_);
  _i_ = 1; p->varspec_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitSimpleSpec(SimpleSpec *p)
{
  int oldi = _i_;
  if (oldi > 1) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->fullidentifier_->accept(this);

  if (oldi > 1) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitArraySpec(ArraySpec *p)
{
  int oldi = _i_;
  if (oldi > 1) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 1; p->varspec_->accept(this);
  render('[');
  _i_ = 0; p->arraysize_->accept(this);
  render(']');

  if (oldi > 1) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitStars(Stars *p) {} //abstract class

void PrintAbsyn::visitStar(Star *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render('*');

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitListStars(ListStars *liststars)
{
  iterListStars(liststars->begin(), liststars->end());
}

void PrintAbsyn::iterListStars(ListStars::const_iterator i, ListStars::const_iterator j)
{
  if (i == j) return;
  if (i == j-1)
  { /* last */
    (*i)->accept(this);
  }
  else
  { /* cons */
    (*i)->accept(this); iterListStars(i+1, j);
  }
}

void PrintAbsyn::visitArraySize(ArraySize *p) {} //abstract class

void PrintAbsyn::visitIntConstArraySize(IntConstArraySize *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  visitInteger(p->integer_);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitSomeArraySize(SomeArraySize *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->fullidentifier_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitNoSize(NoSize *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);


  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitOptLabel(OptLabel *p) {} //abstract class

void PrintAbsyn::visitOptLabelOne(OptLabelOne *p)
{
  int oldi = _i_;
  if (oldi > 1) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->optlabellist_->accept(this);

  if (oldi > 1) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitOptLabelTwo(OptLabelTwo *p)
{
  int oldi = _i_;
  if (oldi > 2) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->optlabellist_->accept(this);

  if (oldi > 2) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitOptLabelList(OptLabelList *p) {} //abstract class

void PrintAbsyn::visitNoLableList(NoLableList *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);


  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitLableList(LableList *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render('{');
  _i_ = 0; visitListLabelName(p->listlabelname_);
  render('}');

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitLabelName(LabelName *p) {} //abstract class

void PrintAbsyn::visitLableName(LableName *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->anyidentifier_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitListLabelName(ListLabelName *listlabelname)
{
  iterListLabelName(listlabelname->begin(), listlabelname->end());
}

void PrintAbsyn::iterListLabelName(ListLabelName::const_iterator i, ListLabelName::const_iterator j)
{
  if (i == j) return;
  if (i == j-1)
  { /* last */
    (*i)->accept(this);
  }
  else
  { /* cons */
    (*i)->accept(this); render(','); iterListLabelName(i+1, j);
  }
}

void PrintAbsyn::visitRange(Range *p) {} //abstract class

void PrintAbsyn::visitLexprRange(LexprRange *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->lexproption_1->accept(this);
  render("..");
  _i_ = 0; p->lexproption_2->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitLexprOption(LexprOption *p) {} //abstract class

void PrintAbsyn::visitNoLexprOption(NoLexprOption *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);


  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitSomeLexprOption(SomeLexprOption *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->lexpr_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitAnyIdentifier(AnyIdentifier *p) {} //abstract class

void PrintAbsyn::visitSimpleIdentifierAny(SimpleIdentifierAny *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->identifier_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitPostCond(PostCond *p) {} //abstract class

void PrintAbsyn::visitEnsuresKeyWord(EnsuresKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("ensures");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitExitsKeyWord(ExitsKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("exits");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitBreaksKeyWord(BreaksKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("breaks");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitContinuesKeyWord(ContinuesKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("continues");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitReturnsKeyWord(ReturnsKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("returns");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitCheckEnsuresKeyWord(CheckEnsuresKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("check");
  render("ensures");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitCheckExitsKeyWord(CheckExitsKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("check");
  render("exits");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitCheckBreaksKeyWord(CheckBreaksKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("check");
  render("breaks");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitCheckContinuesKeyWord(CheckContinuesKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("check");
  render("continues");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitCheckReturnsKeyWord(CheckReturnsKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("check");
  render("returns");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitAdmitEnsuresKeyWord(AdmitEnsuresKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("admit");
  render("ensures");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitAdmitExitsKeyWord(AdmitExitsKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("admit");
  render("exits");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitAdmitBreaksKeyWord(AdmitBreaksKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("admit");
  render("breaks");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitAdmitContinuesKeyWord(AdmitContinuesKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("admit");
  render("continues");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitAdmitReturnsKeyWord(AdmitReturnsKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("admit");
  render("returns");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitFullIdentifier(FullIdentifier *p) {} //abstract class

void PrintAbsyn::visitSimpleIdentifierFull(SimpleIdentifierFull *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->identifier_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitAdmitKeyWordFullIdent(AdmitKeyWordFullIdent *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("admit");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitAllocatesKeyWordFullIdent(AllocatesKeyWordFullIdent *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("allocates");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitAssertKeyWordFullIdent(AssertKeyWordFullIdent *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("assert");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitAssignsKeyWordFullIdent(AssignsKeyWordFullIdent *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("assigns");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitAssumesKeyWordFullIdent(AssumesKeyWordFullIdent *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("assumes");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitAtKeyWordFullIdent(AtKeyWordFullIdent *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("at");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitAxiomKeyWordFullIdent(AxiomKeyWordFullIdent *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("axiom");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitAxiomaticKeyWordFullIdent(AxiomaticKeyWordFullIdent *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("axiomatic");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitBehaviorKeyWordFullIdent(BehaviorKeyWordFullIdent *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("behavior");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitBreaksKeyWordFullIdent(BreaksKeyWordFullIdent *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("breaks");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitCheckKeyWordFullIdent(CheckKeyWordFullIdent *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("check");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitCompleteKeyWordFullIdent(CompleteKeyWordFullIdent *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("complete");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitContinuesKeyWordFullIdent(ContinuesKeyWordFullIdent *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("continues");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitContractKeyWordFullIdent(ContractKeyWordFullIdent *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("contract");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitDecreasesKeyWordFullIdent(DecreasesKeyWordFullIdent *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("decreases");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitDisjointKeyWordFullIdent(DisjointKeyWordFullIdent *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("disjoint");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitEnsuresKeyWordFullIdent(EnsuresKeyWordFullIdent *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("ensures");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitExitsKeyWordFullIdent(ExitsKeyWordFullIdent *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("exits");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitFreesKeyWordFullIdent(FreesKeyWordFullIdent *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("frees");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitFunctionKeyWordFullIdent(FunctionKeyWordFullIdent *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("function");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitGlobalKeyWordFullIdent(GlobalKeyWordFullIdent *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("global");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitImpactKeyWordFullIdent(ImpactKeyWordFullIdent *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("impact");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitInductiveKeyWordFullIdent(InductiveKeyWordFullIdent *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("inductive");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitIncludeKeyWordFullIdent(IncludeKeyWordFullIdent *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("include");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitInvariantKeyWordFullIdent(InvariantKeyWordFullIdent *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("invariant");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitLemmaKeyWordFullIdent(LemmaKeyWordFullIdent *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("lemma");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitLetKeyWordFullIdent(LetKeyWordFullIdent *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("let");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitLogicKeyWordFullIdent(LogicKeyWordFullIdent *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("logic");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitLoopKeyWordFullIdent(LoopKeyWordFullIdent *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("loop");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitModelKeyWordFullIdent(ModelKeyWordFullIdent *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("model");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitModuleKeyWordFullIdent(ModuleKeyWordFullIdent *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("module");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitPragmaKeyWordFullIdent(PragmaKeyWordFullIdent *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("pragma");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitPredicateKeyWordFullIdent(PredicateKeyWordFullIdent *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("predicate");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitRequiresKeyWordFullIdent(RequiresKeyWordFullIdent *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("requires");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitReturnsKeyWordFullIdent(ReturnsKeyWordFullIdent *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("returns");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitSliceKeyWordFullIdent(SliceKeyWordFullIdent *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("slice");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTerminatesKeyWordFullIdent(TerminatesKeyWordFullIdent *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("terminates");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeKeyWordFullIdent(TypeKeyWordFullIdent *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("type");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitVariantKeyWordFullIdent(VariantKeyWordFullIdent *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("variant");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitListFullIdentifier(ListFullIdentifier *listfullidentifier)
{
  iterListFullIdentifier(listfullidentifier->begin(), listfullidentifier->end());
}

void PrintAbsyn::iterListFullIdentifier(ListFullIdentifier::const_iterator i, ListFullIdentifier::const_iterator j)
{
  if (i == j) return;
  if (i == j-1)
  { /* last */
    (*i)->accept(this);
  }
  else
  { /* cons */
    (*i)->accept(this); render(','); iterListFullIdentifier(i+1, j);
  }
}

void PrintAbsyn::visitIdentifier(Identifier *p) {} //abstract class

void PrintAbsyn::visitIdentifierIdent(IdentifierIdent *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  visitIdent(p->ident_);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitBehaviorsKeyWord(BehaviorsKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("behaviors");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitLabelKeyWord(LabelKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("label");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitReadsKeyWord(ReadsKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("reads");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitWritesKeyWord(WritesKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("writes");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecSimple(TypeSpecSimple *p) {} //abstract class

void PrintAbsyn::visitTypeSpecSimpleIntegerKeyWord(TypeSpecSimpleIntegerKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("integer");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecSimpleRealKeyWord(TypeSpecSimpleRealKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("real");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecSimpleBooleanKeyWord(TypeSpecSimpleBooleanKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("boolean");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecSimpleVoidKeyWord(TypeSpecSimpleVoidKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("void");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecSimpleBoolKeyWord(TypeSpecSimpleBoolKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("_Bool");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecSimpleCharKeyWord(TypeSpecSimpleCharKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("char");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecSimpleSignedCharKeyWord(TypeSpecSimpleSignedCharKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("signed");
  render("char");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecSimpleUnsignedCharKeyWord(TypeSpecSimpleUnsignedCharKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("unsigned");
  render("char");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecSimpleIntKeyWord(TypeSpecSimpleIntKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("int");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecSimpleSignedIntKeyWord(TypeSpecSimpleSignedIntKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("signed");
  render("int");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecSimpleUnsignedIntKeyWord(TypeSpecSimpleUnsignedIntKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("unsigned");
  render("int");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecSimpleUnsignedKeyWord(TypeSpecSimpleUnsignedKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("unsigned");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecSimpleShortKeyWord(TypeSpecSimpleShortKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("short");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecSimpleSignedShortKeyWord(TypeSpecSimpleSignedShortKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("signed");
  render("short");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecSimpleUnsignedShortKeyWord(TypeSpecSimpleUnsignedShortKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("unsigned");
  render("short");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecSimpleShortIntKeyWord(TypeSpecSimpleShortIntKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("short");
  render("int");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecSimpleSignedShortIntKeyWord(TypeSpecSimpleSignedShortIntKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("signed");
  render("short");
  render("int");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecSimpleUnsignedShortIntKeyWord(TypeSpecSimpleUnsignedShortIntKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("unsigned");
  render("short");
  render("int");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecSimpleLongKeyWord(TypeSpecSimpleLongKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("long");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecSimpleSignedLongKeyWord(TypeSpecSimpleSignedLongKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("signed");
  render("long");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecSimpleUnsignedLongKeyWord(TypeSpecSimpleUnsignedLongKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("unsigned");
  render("long");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecSimpleSignedLongIntKeyWord(TypeSpecSimpleSignedLongIntKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("signed");
  render("long");
  render("int");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecSimpleLongIntKeyWord(TypeSpecSimpleLongIntKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("long");
  render("int");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecSimpleUnsignedLongIntKeyWord(TypeSpecSimpleUnsignedLongIntKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("unsigned");
  render("long");
  render("int");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecSimpleLongLongKeyWord(TypeSpecSimpleLongLongKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("long");
  render("long");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecSimpleSignedLongLongKeyWord(TypeSpecSimpleSignedLongLongKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("signed");
  render("long");
  render("long");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecSimpleUnsignedLongLongKeyWord(TypeSpecSimpleUnsignedLongLongKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("unsigned");
  render("long");
  render("long");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecSimpleLongLongIntKeyWord(TypeSpecSimpleLongLongIntKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("long");
  render("long");
  render("int");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecSimpleSignedLongLongIntKeyWord(TypeSpecSimpleSignedLongLongIntKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("signed");
  render("long");
  render("long");
  render("int");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecSimpleUnsignedLongLongIntKeyWord(TypeSpecSimpleUnsignedLongLongIntKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("unsigned");
  render("long");
  render("long");
  render("int");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecSimpleFloatKeyWord(TypeSpecSimpleFloatKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("float");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecSimpleDoubleKeyWord(TypeSpecSimpleDoubleKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("double");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecSimpleLongDoubleKeyWord(TypeSpecSimpleLongDoubleKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("long");
  render("double");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitLogicPTreeAnnot(LogicPTreeAnnot *p) {} //abstract class

void PrintAbsyn::visitAnAnnotation(AnAnnotation *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->annotation_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitAnnotation(Annotation *p) {} //abstract class

void PrintAbsyn::visitLoopAnnotation(LoopAnnotation *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->loopannotstack_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitLoopAnnotStack(LoopAnnotStack *p) {} //abstract class

void PrintAbsyn::visitLoopAnnotStackInvariant(LoopAnnotStackInvariant *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->loopinvariant_->accept(this);
  _i_ = 0; p->loopannotopt_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitLoopAnnotStackEffects(LoopAnnotStackEffects *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->loopeffects_->accept(this);
  _i_ = 0; p->loopannotopt_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitLoopAnnotStackAllocation(LoopAnnotStackAllocation *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->loopallocation_->accept(this);
  _i_ = 0; p->loopannotopt_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitLoopAnnotStackVariant(LoopAnnotStackVariant *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->loopvariant_->accept(this);
  _i_ = 0; p->loopannotopt_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitLoopAnnotOpt(LoopAnnotOpt *p) {} //abstract class

void PrintAbsyn::visitNoLoopAnnot(NoLoopAnnot *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);


  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitSomeLoopAnnot(SomeLoopAnnot *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->loopannotstack_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitLoopInvariant(LoopInvariant *p) {} //abstract class

void PrintAbsyn::visitSimpleLoopInvariant(SimpleLoopInvariant *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("loop");
  render("invariant");
  _i_ = 0; p->lexpr_->accept(this);
  render(';');

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitCheckLoopInvariant(CheckLoopInvariant *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("check");
  render("loop");
  render("invariant");
  _i_ = 0; p->lexpr_->accept(this);
  render(';');

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitAdmitLoopInvariant(AdmitLoopInvariant *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("admit");
  render("loop");
  render("invariant");
  _i_ = 0; p->lexpr_->accept(this);
  render(';');

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitLoopAllocation(LoopAllocation *p) {} //abstract class

void PrintAbsyn::visitSimpleLoopAllocation(SimpleLoopAllocation *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("loop");
  _i_ = 0; p->allocation_->accept(this);
  render(';');

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitAllocation(Allocation *p) {} //abstract class

void PrintAbsyn::visitAllocatesZones(AllocatesZones *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("allocates");
  _i_ = 0; p->zones_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitFreesZones(FreesZones *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("frees");
  _i_ = 0; p->zones_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitLoopVariant(LoopVariant *p) {} //abstract class

void PrintAbsyn::visitSimpleLoopVariant(SimpleLoopVariant *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("loop");
  render("variant");
  _i_ = 0; p->variant_->accept(this);
  render(';');

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitLoopEffects(LoopEffects *p) {} //abstract class

void PrintAbsyn::visitLoopAssigns(LoopAssigns *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("loop");
  render("assigns");
  _i_ = 0; p->assigns_->accept(this);
  render(';');

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitVariant(Variant *p) {} //abstract class

void PrintAbsyn::visitForVariant(ForVariant *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->lexpr_->accept(this);
  render("for");
  _i_ = 0; p->anyidentifier_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitLexprVariant(LexprVariant *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->lexpr_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitInteger(Integer i)
{
  char tmp[20];
  sprintf(tmp, "%d", i);
  render(tmp);
}

void PrintAbsyn::visitDouble(Double d)
{
  char tmp[24];
  sprintf(tmp, "%.15g", d);
  render(tmp);
}

void PrintAbsyn::visitChar(Char c)
{
  char tmp[4];
  sprintf(tmp, "'%c'", c);
  render(tmp);
}

void PrintAbsyn::visitString(String s)
{
  bufAppend('\"');
  bufAppend(s);
  bufAppend('\"');
  bufAppend(' ');
}

void PrintAbsyn::visitIdent(String s)
{
  render(s);
}

ShowAbsyn::ShowAbsyn(void)
{
  buf_ = 0;
  bufReset();
}

ShowAbsyn::~ShowAbsyn(void)
{
}

char *ShowAbsyn::show(Visitable *v)
{
  bufReset();
  v->accept(this);
  return buf_;
}

void ShowAbsyn::visitProgram(Program *p) {} //abstract class

void ShowAbsyn::visitAnnotProgram(AnnotProgram *p)
{
  bufAppend('(');
  bufAppend("AnnotProgram");
  bufAppend(' ');
  bufAppend('[');
  if (p->annot_)  p->annot_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitAnnotationProgram(AnnotationProgram *p)
{
  bufAppend('(');
  bufAppend("AnnotationProgram");
  bufAppend(' ');
  bufAppend('[');
  if (p->logicptreeannot_)  p->logicptreeannot_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitAnnot(Annot *p) {} //abstract class

void ShowAbsyn::visitCodeAnnot(CodeAnnot *p)
{
  bufAppend('(');
  bufAppend("CodeAnnot");
  bufAppend(' ');
  bufAppend('[');
  if (p->code_annot_)  p->code_annot_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitCode_Annot(Code_Annot *p) {} //abstract class

void ShowAbsyn::visitCodeAnnotContract(CodeAnnotContract *p)
{
  bufAppend('(');
  bufAppend("CodeAnnotContract");
  bufAppend(' ');
  bufAppend('[');
  if (p->contract_)  p->contract_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitContract(Contract *p) {} //abstract class

void ShowAbsyn::visitSimpleContract(SimpleContract *p)
{
  bufAppend('(');
  bufAppend("SimpleContract");
  bufAppend(' ');
  bufAppend('[');
  if (p->requires_)  p->requires_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->terminates_)  p->terminates_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->decreases_)  p->decreases_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->simpleclauses_)  p->simpleclauses_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->behaviors_)  p->behaviors_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->completeordisjoint_)  p->completeordisjoint_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitClausesRequiresContract(ClausesRequiresContract *p)
{
  bufAppend('(');
  bufAppend("ClausesRequiresContract");
  bufAppend(' ');
  bufAppend('[');
  if (p->requires_)  p->requires_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->terminates_)  p->terminates_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->decreases_)  p->decreases_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->nesimpleclauses_)  p->nesimpleclauses_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend(')');
}
void ShowAbsyn::visitClausesTerminatesContract(ClausesTerminatesContract *p)
{
  bufAppend('(');
  bufAppend("ClausesTerminatesContract");
  bufAppend(' ');
  bufAppend('[');
  if (p->requires_)  p->requires_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->terminates_)  p->terminates_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->decreases_)  p->decreases_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->nesimpleclauses_)  p->nesimpleclauses_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend(')');
}
void ShowAbsyn::visitClausesDecreasesContract(ClausesDecreasesContract *p)
{
  bufAppend('(');
  bufAppend("ClausesDecreasesContract");
  bufAppend(' ');
  bufAppend('[');
  if (p->requires_)  p->requires_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->terminates_)  p->terminates_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->decreases_)  p->decreases_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->nesimpleclauses_)  p->nesimpleclauses_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend(')');
}
void ShowAbsyn::visitRequires(Requires *p) {} //abstract class

void ShowAbsyn::visitNoRequires(NoRequires *p)
{
  bufAppend("NoRequires");
}
void ShowAbsyn::visitSomeRequires(SomeRequires *p)
{
  bufAppend('(');
  bufAppend("SomeRequires");
  bufAppend(' ');
  bufAppend('[');
  if (p->nerequires_)  p->nerequires_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitNERequires(NERequires *p) {} //abstract class

void ShowAbsyn::visitSimpleRequires(SimpleRequires *p)
{
  bufAppend('(');
  bufAppend("SimpleRequires");
  bufAppend(' ');
  bufAppend('[');
  if (p->lexpr_)  p->lexpr_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->requires_)  p->requires_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitCheckRequires(CheckRequires *p)
{
  bufAppend('(');
  bufAppend("CheckRequires");
  bufAppend(' ');
  bufAppend('[');
  if (p->lexpr_)  p->lexpr_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->requires_)  p->requires_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitAdimtRequires(AdimtRequires *p)
{
  bufAppend('(');
  bufAppend("AdimtRequires");
  bufAppend(' ');
  bufAppend('[');
  if (p->lexpr_)  p->lexpr_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->requires_)  p->requires_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitTerminates(Terminates *p) {} //abstract class

void ShowAbsyn::visitNoTerminate(NoTerminate *p)
{
  bufAppend("NoTerminate");
}
void ShowAbsyn::visitDecreases(Decreases *p) {} //abstract class

void ShowAbsyn::visitNoDecreases(NoDecreases *p)
{
  bufAppend("NoDecreases");
}
void ShowAbsyn::visitSimpleClauses(SimpleClauses *p) {} //abstract class

void ShowAbsyn::visitNoSimpleClauses(NoSimpleClauses *p)
{
  bufAppend("NoSimpleClauses");
}
void ShowAbsyn::visitSomeSimpleClauses(SomeSimpleClauses *p)
{
  bufAppend('(');
  bufAppend("SomeSimpleClauses");
  bufAppend(' ');
  bufAppend('[');
  if (p->nesimpleclauses_)  p->nesimpleclauses_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitNESimpleClauses(NESimpleClauses *p) {} //abstract class

void ShowAbsyn::visitPostCondSimpleClauses(PostCondSimpleClauses *p)
{
  bufAppend('(');
  bufAppend("PostCondSimpleClauses");
  bufAppend(' ');
  bufAppend('[');
  if (p->postcond_)  p->postcond_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->lexpr_)  p->lexpr_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->simpleclauses_)  p->simpleclauses_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitAssignsSimpleClauses(AssignsSimpleClauses *p)
{
  bufAppend('(');
  bufAppend("AssignsSimpleClauses");
  bufAppend(' ');
  bufAppend('[');
  if (p->assigns_)  p->assigns_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->simpleclauses_)  p->simpleclauses_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitAssigns(Assigns *p) {} //abstract class

void ShowAbsyn::visitAssignZone(AssignZone *p)
{
  bufAppend('(');
  bufAppend("AssignZone");
  bufAppend(' ');
  bufAppend('[');
  if (p->zones_)  p->zones_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitAssignZoneFromZone(AssignZoneFromZone *p)
{
  bufAppend('(');
  bufAppend("AssignZoneFromZone");
  bufAppend(' ');
  bufAppend('[');
  if (p->listlexpr_)  p->listlexpr_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->zones_)  p->zones_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitZones(Zones *p) {} //abstract class

void ShowAbsyn::visitSomeZone(SomeZone *p)
{
  bufAppend('(');
  bufAppend("SomeZone");
  bufAppend(' ');
  bufAppend('[');
  if (p->listlexpr_)  p->listlexpr_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitNoZone(NoZone *p)
{
  bufAppend("NoZone");
}
void ShowAbsyn::visitBehaviors(Behaviors *p) {} //abstract class

void ShowAbsyn::visitNoBehaviors(NoBehaviors *p)
{
  bufAppend("NoBehaviors");
}
void ShowAbsyn::visitCompleteOrDisjoint(CompleteOrDisjoint *p) {} //abstract class

void ShowAbsyn::visitNoComplDisj(NoComplDisj *p)
{
  bufAppend("NoComplDisj");
}
void ShowAbsyn::visitLexpr(Lexpr *p) {} //abstract class

void ShowAbsyn::visitImplLexpr(ImplLexpr *p)
{
  bufAppend('(');
  bufAppend("ImplLexpr");
  bufAppend(' ');
  p->lexpr_1->accept(this);
  bufAppend(' ');
  p->lexpr_2->accept(this);
  bufAppend(')');
}
void ShowAbsyn::visitIffLexpr(IffLexpr *p)
{
  bufAppend('(');
  bufAppend("IffLexpr");
  bufAppend(' ');
  p->lexpr_1->accept(this);
  bufAppend(' ');
  p->lexpr_2->accept(this);
  bufAppend(')');
}
void ShowAbsyn::visitOrLexpr(OrLexpr *p)
{
  bufAppend('(');
  bufAppend("OrLexpr");
  bufAppend(' ');
  p->lexpr_1->accept(this);
  bufAppend(' ');
  p->lexpr_2->accept(this);
  bufAppend(')');
}
void ShowAbsyn::visitAndLexpr(AndLexpr *p)
{
  bufAppend('(');
  bufAppend("AndLexpr");
  bufAppend(' ');
  p->lexpr_1->accept(this);
  bufAppend(' ');
  p->lexpr_2->accept(this);
  bufAppend(')');
}
void ShowAbsyn::visitHatHatLexpr(HatHatLexpr *p)
{
  bufAppend('(');
  bufAppend("HatHatLexpr");
  bufAppend(' ');
  p->lexpr_1->accept(this);
  bufAppend(' ');
  p->lexpr_2->accept(this);
  bufAppend(')');
}
void ShowAbsyn::visitAmpLexpr(AmpLexpr *p)
{
  bufAppend('(');
  bufAppend("AmpLexpr");
  bufAppend(' ');
  p->lexpr_1->accept(this);
  bufAppend(' ');
  p->lexpr_2->accept(this);
  bufAppend(')');
}
void ShowAbsyn::visitPipeLexpr(PipeLexpr *p)
{
  bufAppend('(');
  bufAppend("PipeLexpr");
  bufAppend(' ');
  p->lexpr_1->accept(this);
  bufAppend(' ');
  p->lexpr_2->accept(this);
  bufAppend(')');
}
void ShowAbsyn::visitHatLexpr(HatLexpr *p)
{
  bufAppend('(');
  bufAppend("HatLexpr");
  bufAppend(' ');
  p->lexpr_1->accept(this);
  bufAppend(' ');
  p->lexpr_2->accept(this);
  bufAppend(')');
}
void ShowAbsyn::visitBimpliesLexpr(BimpliesLexpr *p)
{
  bufAppend('(');
  bufAppend("BimpliesLexpr");
  bufAppend(' ');
  p->lexpr_1->accept(this);
  bufAppend(' ');
  p->lexpr_2->accept(this);
  bufAppend(')');
}
void ShowAbsyn::visitBiffLexpr(BiffLexpr *p)
{
  bufAppend('(');
  bufAppend("BiffLexpr");
  bufAppend(' ');
  p->lexpr_1->accept(this);
  bufAppend(' ');
  p->lexpr_2->accept(this);
  bufAppend(')');
}
void ShowAbsyn::visitInLexpr(InLexpr *p)
{
  bufAppend('(');
  bufAppend("InLexpr");
  bufAppend(' ');
  p->lexpr_1->accept(this);
  bufAppend(' ');
  p->lexpr_2->accept(this);
  bufAppend(')');
}
void ShowAbsyn::visitTernaryLexpr(TernaryLexpr *p)
{
  bufAppend('(');
  bufAppend("TernaryLexpr");
  bufAppend(' ');
  p->lexpr_1->accept(this);
  bufAppend(' ');
  p->lexpr_2->accept(this);
  bufAppend(' ');
  p->lexpr_3->accept(this);
  bufAppend(')');
}
void ShowAbsyn::visitRelationLexpr(RelationLexpr *p)
{
  bufAppend('(');
  bufAppend("RelationLexpr");
  bufAppend(' ');
  p->lexpr_1->accept(this);
  bufAppend(' ');
  bufAppend('[');
  if (p->listlexprrelinner_)  p->listlexprrelinner_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->relation_)  p->relation_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  p->lexpr_2->accept(this);
  bufAppend(')');
}
void ShowAbsyn::visitBinderLexpr(BinderLexpr *p)
{
  bufAppend('(');
  bufAppend("BinderLexpr");
  bufAppend(' ');
  bufAppend('[');
  if (p->lexprbinder_)  p->lexprbinder_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitNotBinderLexpr(NotBinderLexpr *p)
{
  bufAppend('(');
  bufAppend("NotBinderLexpr");
  bufAppend(' ');
  bufAppend('[');
  if (p->lexprbinder_)  p->lexprbinder_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitTrueLexpr(TrueLexpr *p)
{
  bufAppend("TrueLexpr");
}
void ShowAbsyn::visitFalseLexpr(FalseLexpr *p)
{
  bufAppend("FalseLexpr");
}
void ShowAbsyn::visitPointerLexpr(PointerLexpr *p)
{
  bufAppend('(');
  bufAppend("PointerLexpr");
  bufAppend(' ');
  bufAppend('[');
  if (p->optlabel_)  p->optlabel_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->lexpr_)  p->lexpr_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend(')');
}
void ShowAbsyn::visitValidLexpr(ValidLexpr *p)
{
  bufAppend('(');
  bufAppend("ValidLexpr");
  bufAppend(' ');
  bufAppend('[');
  if (p->optlabel_)  p->optlabel_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->lexpr_)  p->lexpr_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend(')');
}
void ShowAbsyn::visitValidReadLexpr(ValidReadLexpr *p)
{
  bufAppend('(');
  bufAppend("ValidReadLexpr");
  bufAppend(' ');
  bufAppend('[');
  if (p->optlabel_)  p->optlabel_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->lexpr_)  p->lexpr_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend(')');
}
void ShowAbsyn::visitValidFuncLexpr(ValidFuncLexpr *p)
{
  bufAppend('(');
  bufAppend("ValidFuncLexpr");
  bufAppend(' ');
  bufAppend('[');
  if (p->lexpr_)  p->lexpr_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend(')');
}
void ShowAbsyn::visitValidIndxLexpr(ValidIndxLexpr *p)
{
  bufAppend('(');
  bufAppend("ValidIndxLexpr");
  bufAppend(' ');
  bufAppend('[');
  if (p->optlabel_)  p->optlabel_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  p->lexpr_1->accept(this);
  bufAppend(' ');
  p->lexpr_2->accept(this);
  bufAppend(' ');
  bufAppend(')');
}
void ShowAbsyn::visitValidRangeLexpr(ValidRangeLexpr *p)
{
  bufAppend('(');
  bufAppend("ValidRangeLexpr");
  bufAppend(' ');
  bufAppend('[');
  if (p->optlabel_)  p->optlabel_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  p->lexpr_1->accept(this);
  bufAppend(' ');
  p->lexpr_2->accept(this);
  bufAppend(' ');
  p->lexpr_3->accept(this);
  bufAppend(' ');
  bufAppend(')');
}
void ShowAbsyn::visitInitializedLexpr(InitializedLexpr *p)
{
  bufAppend('(');
  bufAppend("InitializedLexpr");
  bufAppend(' ');
  bufAppend('[');
  if (p->optlabel_)  p->optlabel_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->lexpr_)  p->lexpr_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend(')');
}
void ShowAbsyn::visitDanglingLexpr(DanglingLexpr *p)
{
  bufAppend('(');
  bufAppend("DanglingLexpr");
  bufAppend(' ');
  bufAppend('[');
  if (p->optlabel_)  p->optlabel_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->lexpr_)  p->lexpr_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend(')');
}
void ShowAbsyn::visitFreshLexpr(FreshLexpr *p)
{
  bufAppend('(');
  bufAppend("FreshLexpr");
  bufAppend(' ');
  bufAppend('[');
  if (p->optlabel_)  p->optlabel_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  p->lexpr_1->accept(this);
  bufAppend(' ');
  p->lexpr_2->accept(this);
  bufAppend(' ');
  bufAppend(')');
}
void ShowAbsyn::visitBaseAddrLexpr(BaseAddrLexpr *p)
{
  bufAppend('(');
  bufAppend("BaseAddrLexpr");
  bufAppend(' ');
  bufAppend('[');
  if (p->optlabel_)  p->optlabel_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->lexpr_)  p->lexpr_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend(')');
}
void ShowAbsyn::visitBlockLengthLexpr(BlockLengthLexpr *p)
{
  bufAppend('(');
  bufAppend("BlockLengthLexpr");
  bufAppend(' ');
  bufAppend('[');
  if (p->optlabel_)  p->optlabel_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->lexpr_)  p->lexpr_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend(')');
}
void ShowAbsyn::visitOffsetLexpr(OffsetLexpr *p)
{
  bufAppend('(');
  bufAppend("OffsetLexpr");
  bufAppend(' ');
  bufAppend('[');
  if (p->optlabel_)  p->optlabel_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->lexpr_)  p->lexpr_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend(')');
}
void ShowAbsyn::visitAllocableLexpr(AllocableLexpr *p)
{
  bufAppend('(');
  bufAppend("AllocableLexpr");
  bufAppend(' ');
  bufAppend('[');
  if (p->optlabel_)  p->optlabel_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->lexpr_)  p->lexpr_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend(')');
}
void ShowAbsyn::visitFreeableLexpr(FreeableLexpr *p)
{
  bufAppend('(');
  bufAppend("FreeableLexpr");
  bufAppend(' ');
  bufAppend('[');
  if (p->optlabel_)  p->optlabel_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->lexpr_)  p->lexpr_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend(')');
}
void ShowAbsyn::visitAllocationLexpr(AllocationLexpr *p)
{
  bufAppend('(');
  bufAppend("AllocationLexpr");
  bufAppend(' ');
  bufAppend('[');
  if (p->optlabel_)  p->optlabel_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->lexpr_)  p->lexpr_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend(')');
}
void ShowAbsyn::visitAutomaticLexpr(AutomaticLexpr *p)
{
  bufAppend("AutomaticLexpr");
}
void ShowAbsyn::visitDynamicLexpr(DynamicLexpr *p)
{
  bufAppend("DynamicLexpr");
}
void ShowAbsyn::visitRegisterLexpr(RegisterLexpr *p)
{
  bufAppend("RegisterLexpr");
}
void ShowAbsyn::visitStaticLexpr(StaticLexpr *p)
{
  bufAppend("StaticLexpr");
}
void ShowAbsyn::visitUnallocatedLexpr(UnallocatedLexpr *p)
{
  bufAppend("UnallocatedLexpr");
}
void ShowAbsyn::visitNullLexpr(NullLexpr *p)
{
  bufAppend("NullLexpr");
}
void ShowAbsyn::visitLexprIntConst(LexprIntConst *p)
{
  bufAppend('(');
  bufAppend("LexprIntConst");
  bufAppend(' ');
  visitInteger(p->integer_);
  bufAppend(')');
}
void ShowAbsyn::visitLexprFloatConst(LexprFloatConst *p)
{
  bufAppend('(');
  bufAppend("LexprFloatConst");
  bufAppend(' ');
  visitDouble(p->double_);
  bufAppend(')');
}
void ShowAbsyn::visitLexprStringConst(LexprStringConst *p)
{
  bufAppend('(');
  bufAppend("LexprStringConst");
  bufAppend(' ');
  visitString(p->string_);
  bufAppend(')');
}
void ShowAbsyn::visitAddLexpr(AddLexpr *p)
{
  bufAppend('(');
  bufAppend("AddLexpr");
  bufAppend(' ');
  p->lexpr_1->accept(this);
  bufAppend(' ');
  p->lexpr_2->accept(this);
  bufAppend(')');
}
void ShowAbsyn::visitSubtrLexpr(SubtrLexpr *p)
{
  bufAppend('(');
  bufAppend("SubtrLexpr");
  bufAppend(' ');
  p->lexpr_1->accept(this);
  bufAppend(' ');
  p->lexpr_2->accept(this);
  bufAppend(')');
}
void ShowAbsyn::visitMultLexpr(MultLexpr *p)
{
  bufAppend('(');
  bufAppend("MultLexpr");
  bufAppend(' ');
  p->lexpr_1->accept(this);
  bufAppend(' ');
  p->lexpr_2->accept(this);
  bufAppend(')');
}
void ShowAbsyn::visitDivLexpr(DivLexpr *p)
{
  bufAppend('(');
  bufAppend("DivLexpr");
  bufAppend(' ');
  p->lexpr_1->accept(this);
  bufAppend(' ');
  p->lexpr_2->accept(this);
  bufAppend(')');
}
void ShowAbsyn::visitModLexpr(ModLexpr *p)
{
  bufAppend('(');
  bufAppend("ModLexpr");
  bufAppend(' ');
  p->lexpr_1->accept(this);
  bufAppend(' ');
  p->lexpr_2->accept(this);
  bufAppend(')');
}
void ShowAbsyn::visitSquaresRangeLexpr(SquaresRangeLexpr *p)
{
  bufAppend('(');
  bufAppend("SquaresRangeLexpr");
  bufAppend(' ');
  bufAppend('[');
  if (p->lexpr_)  p->lexpr_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->range_)  p->range_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend(')');
}
void ShowAbsyn::visitSquaresLexpr(SquaresLexpr *p)
{
  bufAppend('(');
  bufAppend("SquaresLexpr");
  bufAppend(' ');
  p->lexpr_1->accept(this);
  bufAppend(' ');
  p->lexpr_2->accept(this);
  bufAppend(' ');
  bufAppend(')');
}
void ShowAbsyn::visitSizeOfLexpr(SizeOfLexpr *p)
{
  bufAppend('(');
  bufAppend("SizeOfLexpr");
  bufAppend(' ');
  bufAppend('[');
  if (p->lexpr_)  p->lexpr_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend(')');
}
void ShowAbsyn::visitOldLexpr(OldLexpr *p)
{
  bufAppend('(');
  bufAppend("OldLexpr");
  bufAppend(' ');
  bufAppend('[');
  if (p->lexpr_)  p->lexpr_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend(')');
}
void ShowAbsyn::visitAtLexpr(AtLexpr *p)
{
  bufAppend('(');
  bufAppend("AtLexpr");
  bufAppend(' ');
  bufAppend('[');
  if (p->lexpr_)  p->lexpr_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->labelname_)  p->labelname_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend(')');
}
void ShowAbsyn::visitResultLexpr(ResultLexpr *p)
{
  bufAppend("ResultLexpr");
}
void ShowAbsyn::visitSeparatedLexpr(SeparatedLexpr *p)
{
  bufAppend('(');
  bufAppend("SeparatedLexpr");
  bufAppend(' ');
  bufAppend('[');
  if (p->listlexpr_)  p->listlexpr_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend(')');
}
void ShowAbsyn::visitFullIdParenLexpr(FullIdParenLexpr *p)
{
  bufAppend('(');
  bufAppend("FullIdParenLexpr");
  bufAppend(' ');
  bufAppend('[');
  if (p->fullidentifier_)  p->fullidentifier_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->listlexpr_)  p->listlexpr_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend(')');
}
void ShowAbsyn::visitFullId(FullId *p)
{
  bufAppend('(');
  bufAppend("FullId");
  bufAppend(' ');
  bufAppend('[');
  if (p->fullidentifier_)  p->fullidentifier_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitPiLexpr(PiLexpr *p)
{
  bufAppend("PiLexpr");
}
void ShowAbsyn::visitParenRangeLexpr(ParenRangeLexpr *p)
{
  bufAppend('(');
  bufAppend("ParenRangeLexpr");
  bufAppend(' ');
  bufAppend('[');
  if (p->range_)  p->range_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend(')');
}
void ShowAbsyn::visitListLexpr(ListLexpr *listlexpr)
{
  for (ListLexpr::const_iterator i = listlexpr->begin() ; i != listlexpr->end() ; ++i)
  {
    (*i)->accept(this);
    if (i != listlexpr->end() - 1) bufAppend(", ");
  }
}

void ShowAbsyn::visitLexprRelInner(LexprRelInner *p) {} //abstract class

void ShowAbsyn::visitRelInnerLexpr(RelInnerLexpr *p)
{
  bufAppend('(');
  bufAppend("RelInnerLexpr");
  bufAppend(' ');
  bufAppend('[');
  if (p->relation_)  p->relation_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->lexpr_)  p->lexpr_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitListLexprRelInner(ListLexprRelInner *listlexprrelinner)
{
  for (ListLexprRelInner::const_iterator i = listlexprrelinner->begin() ; i != listlexprrelinner->end() ; ++i)
  {
    (*i)->accept(this);
    if (i != listlexprrelinner->end() - 1) bufAppend(", ");
  }
}

void ShowAbsyn::visitRelation(Relation *p) {} //abstract class

void ShowAbsyn::visitLessRel(LessRel *p)
{
  bufAppend("LessRel");
}
void ShowAbsyn::visitGreaterRel(GreaterRel *p)
{
  bufAppend("GreaterRel");
}
void ShowAbsyn::visitLessEqRel(LessEqRel *p)
{
  bufAppend("LessEqRel");
}
void ShowAbsyn::visitGreaterEqRel(GreaterEqRel *p)
{
  bufAppend("GreaterEqRel");
}
void ShowAbsyn::visitEqRel(EqRel *p)
{
  bufAppend("EqRel");
}
void ShowAbsyn::visitNotEqRel(NotEqRel *p)
{
  bufAppend("NotEqRel");
}
void ShowAbsyn::visitLexprBinder(LexprBinder *p) {} //abstract class

void ShowAbsyn::visitForallBinderLexpr(ForallBinderLexpr *p)
{
  bufAppend('(');
  bufAppend("ForallBinderLexpr");
  bufAppend(' ');
  bufAppend('[');
  if (p->binders_)  p->binders_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->lexpr_)  p->lexpr_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitExistBinderLexpr(ExistBinderLexpr *p)
{
  bufAppend('(');
  bufAppend("ExistBinderLexpr");
  bufAppend(' ');
  bufAppend('[');
  if (p->binders_)  p->binders_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->lexpr_)  p->lexpr_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitLambdaBinderLexpr(LambdaBinderLexpr *p)
{
  bufAppend('(');
  bufAppend("LambdaBinderLexpr");
  bufAppend(' ');
  bufAppend('[');
  if (p->binders_)  p->binders_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->lexpr_)  p->lexpr_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitBinders(Binders *p) {} //abstract class

void ShowAbsyn::visitTheBinders(TheBinders *p)
{
  bufAppend('(');
  bufAppend("TheBinders");
  bufAppend(' ');
  bufAppend('[');
  if (p->typespecoftypename_)  p->typespecoftypename_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->varspec_)  p->varspec_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->listbindersreentrance_)  p->listbindersreentrance_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitTypeSpecOFTYPENAME(TypeSpecOFTYPENAME *p) {} //abstract class

void ShowAbsyn::visitTypeSpecTYPENAME(TypeSpecTYPENAME *p)
{
  bufAppend('(');
  bufAppend("TypeSpecTYPENAME");
  bufAppend(' ');
  visitIdent(p->ident_);
  bufAppend(')');
}
void ShowAbsyn::visitTypeSpecSimpleFromTypenameTypeSpec(TypeSpecSimpleFromTypenameTypeSpec *p)
{
  bufAppend('(');
  bufAppend("TypeSpecSimpleFromTypenameTypeSpec");
  bufAppend(' ');
  bufAppend('[');
  if (p->typespecsimple_)  p->typespecsimple_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitBindersReentrance(BindersReentrance *p) {} //abstract class

void ShowAbsyn::visitBindersReentranceDeclSpec(BindersReentranceDeclSpec *p)
{
  bufAppend('(');
  bufAppend("BindersReentranceDeclSpec");
  bufAppend(' ');
  bufAppend('[');
  if (p->typespecoftypename_)  p->typespecoftypename_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->varspec_)  p->varspec_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitBindersReentranceVarSpec(BindersReentranceVarSpec *p)
{
  bufAppend('(');
  bufAppend("BindersReentranceVarSpec");
  bufAppend(' ');
  bufAppend('[');
  if (p->varspec_)  p->varspec_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitListBindersReentrance(ListBindersReentrance *listbindersreentrance)
{
  for (ListBindersReentrance::const_iterator i = listbindersreentrance->begin() ; i != listbindersreentrance->end() ; ++i)
  {
    (*i)->accept(this);
    if (i != listbindersreentrance->end() - 1) bufAppend(", ");
  }
}

void ShowAbsyn::visitVarSpec(VarSpec *p) {} //abstract class

void ShowAbsyn::visitStartVarSpec(StartVarSpec *p)
{
  bufAppend('(');
  bufAppend("StartVarSpec");
  bufAppend(' ');
  bufAppend('[');
  if (p->liststars_)  p->liststars_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->varspec_)  p->varspec_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitSimpleSpec(SimpleSpec *p)
{
  bufAppend('(');
  bufAppend("SimpleSpec");
  bufAppend(' ');
  bufAppend('[');
  if (p->fullidentifier_)  p->fullidentifier_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitArraySpec(ArraySpec *p)
{
  bufAppend('(');
  bufAppend("ArraySpec");
  bufAppend(' ');
  bufAppend('[');
  if (p->varspec_)  p->varspec_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->arraysize_)  p->arraysize_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend(')');
}
void ShowAbsyn::visitStars(Stars *p) {} //abstract class

void ShowAbsyn::visitStar(Star *p)
{
  bufAppend("Star");
}
void ShowAbsyn::visitListStars(ListStars *liststars)
{
  for (ListStars::const_iterator i = liststars->begin() ; i != liststars->end() ; ++i)
  {
    (*i)->accept(this);
    if (i != liststars->end() - 1) bufAppend(", ");
  }
}

void ShowAbsyn::visitArraySize(ArraySize *p) {} //abstract class

void ShowAbsyn::visitIntConstArraySize(IntConstArraySize *p)
{
  bufAppend('(');
  bufAppend("IntConstArraySize");
  bufAppend(' ');
  visitInteger(p->integer_);
  bufAppend(')');
}
void ShowAbsyn::visitSomeArraySize(SomeArraySize *p)
{
  bufAppend('(');
  bufAppend("SomeArraySize");
  bufAppend(' ');
  bufAppend('[');
  if (p->fullidentifier_)  p->fullidentifier_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitNoSize(NoSize *p)
{
  bufAppend("NoSize");
}
void ShowAbsyn::visitOptLabel(OptLabel *p) {} //abstract class

void ShowAbsyn::visitOptLabelOne(OptLabelOne *p)
{
  bufAppend('(');
  bufAppend("OptLabelOne");
  bufAppend(' ');
  bufAppend('[');
  if (p->optlabellist_)  p->optlabellist_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitOptLabelTwo(OptLabelTwo *p)
{
  bufAppend('(');
  bufAppend("OptLabelTwo");
  bufAppend(' ');
  bufAppend('[');
  if (p->optlabellist_)  p->optlabellist_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitOptLabelList(OptLabelList *p) {} //abstract class

void ShowAbsyn::visitNoLableList(NoLableList *p)
{
  bufAppend("NoLableList");
}
void ShowAbsyn::visitLableList(LableList *p)
{
  bufAppend('(');
  bufAppend("LableList");
  bufAppend(' ');
  bufAppend('[');
  if (p->listlabelname_)  p->listlabelname_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend(')');
}
void ShowAbsyn::visitLabelName(LabelName *p) {} //abstract class

void ShowAbsyn::visitLableName(LableName *p)
{
  bufAppend('(');
  bufAppend("LableName");
  bufAppend(' ');
  bufAppend('[');
  if (p->anyidentifier_)  p->anyidentifier_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitListLabelName(ListLabelName *listlabelname)
{
  for (ListLabelName::const_iterator i = listlabelname->begin() ; i != listlabelname->end() ; ++i)
  {
    (*i)->accept(this);
    if (i != listlabelname->end() - 1) bufAppend(", ");
  }
}

void ShowAbsyn::visitRange(Range *p) {} //abstract class

void ShowAbsyn::visitLexprRange(LexprRange *p)
{
  bufAppend('(');
  bufAppend("LexprRange");
  bufAppend(' ');
  p->lexproption_1->accept(this);
  bufAppend(' ');
  p->lexproption_2->accept(this);
  bufAppend(')');
}
void ShowAbsyn::visitLexprOption(LexprOption *p) {} //abstract class

void ShowAbsyn::visitNoLexprOption(NoLexprOption *p)
{
  bufAppend("NoLexprOption");
}
void ShowAbsyn::visitSomeLexprOption(SomeLexprOption *p)
{
  bufAppend('(');
  bufAppend("SomeLexprOption");
  bufAppend(' ');
  bufAppend('[');
  if (p->lexpr_)  p->lexpr_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitAnyIdentifier(AnyIdentifier *p) {} //abstract class

void ShowAbsyn::visitSimpleIdentifierAny(SimpleIdentifierAny *p)
{
  bufAppend('(');
  bufAppend("SimpleIdentifierAny");
  bufAppend(' ');
  bufAppend('[');
  if (p->identifier_)  p->identifier_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitPostCond(PostCond *p) {} //abstract class

void ShowAbsyn::visitEnsuresKeyWord(EnsuresKeyWord *p)
{
  bufAppend("EnsuresKeyWord");
}
void ShowAbsyn::visitExitsKeyWord(ExitsKeyWord *p)
{
  bufAppend("ExitsKeyWord");
}
void ShowAbsyn::visitBreaksKeyWord(BreaksKeyWord *p)
{
  bufAppend("BreaksKeyWord");
}
void ShowAbsyn::visitContinuesKeyWord(ContinuesKeyWord *p)
{
  bufAppend("ContinuesKeyWord");
}
void ShowAbsyn::visitReturnsKeyWord(ReturnsKeyWord *p)
{
  bufAppend("ReturnsKeyWord");
}
void ShowAbsyn::visitCheckEnsuresKeyWord(CheckEnsuresKeyWord *p)
{
  bufAppend("CheckEnsuresKeyWord");
}
void ShowAbsyn::visitCheckExitsKeyWord(CheckExitsKeyWord *p)
{
  bufAppend("CheckExitsKeyWord");
}
void ShowAbsyn::visitCheckBreaksKeyWord(CheckBreaksKeyWord *p)
{
  bufAppend("CheckBreaksKeyWord");
}
void ShowAbsyn::visitCheckContinuesKeyWord(CheckContinuesKeyWord *p)
{
  bufAppend("CheckContinuesKeyWord");
}
void ShowAbsyn::visitCheckReturnsKeyWord(CheckReturnsKeyWord *p)
{
  bufAppend("CheckReturnsKeyWord");
}
void ShowAbsyn::visitAdmitEnsuresKeyWord(AdmitEnsuresKeyWord *p)
{
  bufAppend("AdmitEnsuresKeyWord");
}
void ShowAbsyn::visitAdmitExitsKeyWord(AdmitExitsKeyWord *p)
{
  bufAppend("AdmitExitsKeyWord");
}
void ShowAbsyn::visitAdmitBreaksKeyWord(AdmitBreaksKeyWord *p)
{
  bufAppend("AdmitBreaksKeyWord");
}
void ShowAbsyn::visitAdmitContinuesKeyWord(AdmitContinuesKeyWord *p)
{
  bufAppend("AdmitContinuesKeyWord");
}
void ShowAbsyn::visitAdmitReturnsKeyWord(AdmitReturnsKeyWord *p)
{
  bufAppend("AdmitReturnsKeyWord");
}
void ShowAbsyn::visitFullIdentifier(FullIdentifier *p) {} //abstract class

void ShowAbsyn::visitSimpleIdentifierFull(SimpleIdentifierFull *p)
{
  bufAppend('(');
  bufAppend("SimpleIdentifierFull");
  bufAppend(' ');
  bufAppend('[');
  if (p->identifier_)  p->identifier_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitAdmitKeyWordFullIdent(AdmitKeyWordFullIdent *p)
{
  bufAppend("AdmitKeyWordFullIdent");
}
void ShowAbsyn::visitAllocatesKeyWordFullIdent(AllocatesKeyWordFullIdent *p)
{
  bufAppend("AllocatesKeyWordFullIdent");
}
void ShowAbsyn::visitAssertKeyWordFullIdent(AssertKeyWordFullIdent *p)
{
  bufAppend("AssertKeyWordFullIdent");
}
void ShowAbsyn::visitAssignsKeyWordFullIdent(AssignsKeyWordFullIdent *p)
{
  bufAppend("AssignsKeyWordFullIdent");
}
void ShowAbsyn::visitAssumesKeyWordFullIdent(AssumesKeyWordFullIdent *p)
{
  bufAppend("AssumesKeyWordFullIdent");
}
void ShowAbsyn::visitAtKeyWordFullIdent(AtKeyWordFullIdent *p)
{
  bufAppend("AtKeyWordFullIdent");
}
void ShowAbsyn::visitAxiomKeyWordFullIdent(AxiomKeyWordFullIdent *p)
{
  bufAppend("AxiomKeyWordFullIdent");
}
void ShowAbsyn::visitAxiomaticKeyWordFullIdent(AxiomaticKeyWordFullIdent *p)
{
  bufAppend("AxiomaticKeyWordFullIdent");
}
void ShowAbsyn::visitBehaviorKeyWordFullIdent(BehaviorKeyWordFullIdent *p)
{
  bufAppend("BehaviorKeyWordFullIdent");
}
void ShowAbsyn::visitBreaksKeyWordFullIdent(BreaksKeyWordFullIdent *p)
{
  bufAppend("BreaksKeyWordFullIdent");
}
void ShowAbsyn::visitCheckKeyWordFullIdent(CheckKeyWordFullIdent *p)
{
  bufAppend("CheckKeyWordFullIdent");
}
void ShowAbsyn::visitCompleteKeyWordFullIdent(CompleteKeyWordFullIdent *p)
{
  bufAppend("CompleteKeyWordFullIdent");
}
void ShowAbsyn::visitContinuesKeyWordFullIdent(ContinuesKeyWordFullIdent *p)
{
  bufAppend("ContinuesKeyWordFullIdent");
}
void ShowAbsyn::visitContractKeyWordFullIdent(ContractKeyWordFullIdent *p)
{
  bufAppend("ContractKeyWordFullIdent");
}
void ShowAbsyn::visitDecreasesKeyWordFullIdent(DecreasesKeyWordFullIdent *p)
{
  bufAppend("DecreasesKeyWordFullIdent");
}
void ShowAbsyn::visitDisjointKeyWordFullIdent(DisjointKeyWordFullIdent *p)
{
  bufAppend("DisjointKeyWordFullIdent");
}
void ShowAbsyn::visitEnsuresKeyWordFullIdent(EnsuresKeyWordFullIdent *p)
{
  bufAppend("EnsuresKeyWordFullIdent");
}
void ShowAbsyn::visitExitsKeyWordFullIdent(ExitsKeyWordFullIdent *p)
{
  bufAppend("ExitsKeyWordFullIdent");
}
void ShowAbsyn::visitFreesKeyWordFullIdent(FreesKeyWordFullIdent *p)
{
  bufAppend("FreesKeyWordFullIdent");
}
void ShowAbsyn::visitFunctionKeyWordFullIdent(FunctionKeyWordFullIdent *p)
{
  bufAppend("FunctionKeyWordFullIdent");
}
void ShowAbsyn::visitGlobalKeyWordFullIdent(GlobalKeyWordFullIdent *p)
{
  bufAppend("GlobalKeyWordFullIdent");
}
void ShowAbsyn::visitImpactKeyWordFullIdent(ImpactKeyWordFullIdent *p)
{
  bufAppend("ImpactKeyWordFullIdent");
}
void ShowAbsyn::visitInductiveKeyWordFullIdent(InductiveKeyWordFullIdent *p)
{
  bufAppend("InductiveKeyWordFullIdent");
}
void ShowAbsyn::visitIncludeKeyWordFullIdent(IncludeKeyWordFullIdent *p)
{
  bufAppend("IncludeKeyWordFullIdent");
}
void ShowAbsyn::visitInvariantKeyWordFullIdent(InvariantKeyWordFullIdent *p)
{
  bufAppend("InvariantKeyWordFullIdent");
}
void ShowAbsyn::visitLemmaKeyWordFullIdent(LemmaKeyWordFullIdent *p)
{
  bufAppend("LemmaKeyWordFullIdent");
}
void ShowAbsyn::visitLetKeyWordFullIdent(LetKeyWordFullIdent *p)
{
  bufAppend("LetKeyWordFullIdent");
}
void ShowAbsyn::visitLogicKeyWordFullIdent(LogicKeyWordFullIdent *p)
{
  bufAppend("LogicKeyWordFullIdent");
}
void ShowAbsyn::visitLoopKeyWordFullIdent(LoopKeyWordFullIdent *p)
{
  bufAppend("LoopKeyWordFullIdent");
}
void ShowAbsyn::visitModelKeyWordFullIdent(ModelKeyWordFullIdent *p)
{
  bufAppend("ModelKeyWordFullIdent");
}
void ShowAbsyn::visitModuleKeyWordFullIdent(ModuleKeyWordFullIdent *p)
{
  bufAppend("ModuleKeyWordFullIdent");
}
void ShowAbsyn::visitPragmaKeyWordFullIdent(PragmaKeyWordFullIdent *p)
{
  bufAppend("PragmaKeyWordFullIdent");
}
void ShowAbsyn::visitPredicateKeyWordFullIdent(PredicateKeyWordFullIdent *p)
{
  bufAppend("PredicateKeyWordFullIdent");
}
void ShowAbsyn::visitRequiresKeyWordFullIdent(RequiresKeyWordFullIdent *p)
{
  bufAppend("RequiresKeyWordFullIdent");
}
void ShowAbsyn::visitReturnsKeyWordFullIdent(ReturnsKeyWordFullIdent *p)
{
  bufAppend("ReturnsKeyWordFullIdent");
}
void ShowAbsyn::visitSliceKeyWordFullIdent(SliceKeyWordFullIdent *p)
{
  bufAppend("SliceKeyWordFullIdent");
}
void ShowAbsyn::visitTerminatesKeyWordFullIdent(TerminatesKeyWordFullIdent *p)
{
  bufAppend("TerminatesKeyWordFullIdent");
}
void ShowAbsyn::visitTypeKeyWordFullIdent(TypeKeyWordFullIdent *p)
{
  bufAppend("TypeKeyWordFullIdent");
}
void ShowAbsyn::visitVariantKeyWordFullIdent(VariantKeyWordFullIdent *p)
{
  bufAppend("VariantKeyWordFullIdent");
}
void ShowAbsyn::visitListFullIdentifier(ListFullIdentifier *listfullidentifier)
{
  for (ListFullIdentifier::const_iterator i = listfullidentifier->begin() ; i != listfullidentifier->end() ; ++i)
  {
    (*i)->accept(this);
    if (i != listfullidentifier->end() - 1) bufAppend(", ");
  }
}

void ShowAbsyn::visitIdentifier(Identifier *p) {} //abstract class

void ShowAbsyn::visitIdentifierIdent(IdentifierIdent *p)
{
  bufAppend('(');
  bufAppend("IdentifierIdent");
  bufAppend(' ');
  visitIdent(p->ident_);
  bufAppend(')');
}
void ShowAbsyn::visitBehaviorsKeyWord(BehaviorsKeyWord *p)
{
  bufAppend("BehaviorsKeyWord");
}
void ShowAbsyn::visitLabelKeyWord(LabelKeyWord *p)
{
  bufAppend("LabelKeyWord");
}
void ShowAbsyn::visitReadsKeyWord(ReadsKeyWord *p)
{
  bufAppend("ReadsKeyWord");
}
void ShowAbsyn::visitWritesKeyWord(WritesKeyWord *p)
{
  bufAppend("WritesKeyWord");
}
void ShowAbsyn::visitTypeSpecSimple(TypeSpecSimple *p) {} //abstract class

void ShowAbsyn::visitTypeSpecSimpleIntegerKeyWord(TypeSpecSimpleIntegerKeyWord *p)
{
  bufAppend("TypeSpecSimpleIntegerKeyWord");
}
void ShowAbsyn::visitTypeSpecSimpleRealKeyWord(TypeSpecSimpleRealKeyWord *p)
{
  bufAppend("TypeSpecSimpleRealKeyWord");
}
void ShowAbsyn::visitTypeSpecSimpleBooleanKeyWord(TypeSpecSimpleBooleanKeyWord *p)
{
  bufAppend("TypeSpecSimpleBooleanKeyWord");
}
void ShowAbsyn::visitTypeSpecSimpleVoidKeyWord(TypeSpecSimpleVoidKeyWord *p)
{
  bufAppend("TypeSpecSimpleVoidKeyWord");
}
void ShowAbsyn::visitTypeSpecSimpleBoolKeyWord(TypeSpecSimpleBoolKeyWord *p)
{
  bufAppend("TypeSpecSimpleBoolKeyWord");
}
void ShowAbsyn::visitTypeSpecSimpleCharKeyWord(TypeSpecSimpleCharKeyWord *p)
{
  bufAppend("TypeSpecSimpleCharKeyWord");
}
void ShowAbsyn::visitTypeSpecSimpleSignedCharKeyWord(TypeSpecSimpleSignedCharKeyWord *p)
{
  bufAppend("TypeSpecSimpleSignedCharKeyWord");
}
void ShowAbsyn::visitTypeSpecSimpleUnsignedCharKeyWord(TypeSpecSimpleUnsignedCharKeyWord *p)
{
  bufAppend("TypeSpecSimpleUnsignedCharKeyWord");
}
void ShowAbsyn::visitTypeSpecSimpleIntKeyWord(TypeSpecSimpleIntKeyWord *p)
{
  bufAppend("TypeSpecSimpleIntKeyWord");
}
void ShowAbsyn::visitTypeSpecSimpleSignedIntKeyWord(TypeSpecSimpleSignedIntKeyWord *p)
{
  bufAppend("TypeSpecSimpleSignedIntKeyWord");
}
void ShowAbsyn::visitTypeSpecSimpleUnsignedIntKeyWord(TypeSpecSimpleUnsignedIntKeyWord *p)
{
  bufAppend("TypeSpecSimpleUnsignedIntKeyWord");
}
void ShowAbsyn::visitTypeSpecSimpleUnsignedKeyWord(TypeSpecSimpleUnsignedKeyWord *p)
{
  bufAppend("TypeSpecSimpleUnsignedKeyWord");
}
void ShowAbsyn::visitTypeSpecSimpleShortKeyWord(TypeSpecSimpleShortKeyWord *p)
{
  bufAppend("TypeSpecSimpleShortKeyWord");
}
void ShowAbsyn::visitTypeSpecSimpleSignedShortKeyWord(TypeSpecSimpleSignedShortKeyWord *p)
{
  bufAppend("TypeSpecSimpleSignedShortKeyWord");
}
void ShowAbsyn::visitTypeSpecSimpleUnsignedShortKeyWord(TypeSpecSimpleUnsignedShortKeyWord *p)
{
  bufAppend("TypeSpecSimpleUnsignedShortKeyWord");
}
void ShowAbsyn::visitTypeSpecSimpleShortIntKeyWord(TypeSpecSimpleShortIntKeyWord *p)
{
  bufAppend("TypeSpecSimpleShortIntKeyWord");
}
void ShowAbsyn::visitTypeSpecSimpleSignedShortIntKeyWord(TypeSpecSimpleSignedShortIntKeyWord *p)
{
  bufAppend("TypeSpecSimpleSignedShortIntKeyWord");
}
void ShowAbsyn::visitTypeSpecSimpleUnsignedShortIntKeyWord(TypeSpecSimpleUnsignedShortIntKeyWord *p)
{
  bufAppend("TypeSpecSimpleUnsignedShortIntKeyWord");
}
void ShowAbsyn::visitTypeSpecSimpleLongKeyWord(TypeSpecSimpleLongKeyWord *p)
{
  bufAppend("TypeSpecSimpleLongKeyWord");
}
void ShowAbsyn::visitTypeSpecSimpleSignedLongKeyWord(TypeSpecSimpleSignedLongKeyWord *p)
{
  bufAppend("TypeSpecSimpleSignedLongKeyWord");
}
void ShowAbsyn::visitTypeSpecSimpleUnsignedLongKeyWord(TypeSpecSimpleUnsignedLongKeyWord *p)
{
  bufAppend("TypeSpecSimpleUnsignedLongKeyWord");
}
void ShowAbsyn::visitTypeSpecSimpleSignedLongIntKeyWord(TypeSpecSimpleSignedLongIntKeyWord *p)
{
  bufAppend("TypeSpecSimpleSignedLongIntKeyWord");
}
void ShowAbsyn::visitTypeSpecSimpleLongIntKeyWord(TypeSpecSimpleLongIntKeyWord *p)
{
  bufAppend("TypeSpecSimpleLongIntKeyWord");
}
void ShowAbsyn::visitTypeSpecSimpleUnsignedLongIntKeyWord(TypeSpecSimpleUnsignedLongIntKeyWord *p)
{
  bufAppend("TypeSpecSimpleUnsignedLongIntKeyWord");
}
void ShowAbsyn::visitTypeSpecSimpleLongLongKeyWord(TypeSpecSimpleLongLongKeyWord *p)
{
  bufAppend("TypeSpecSimpleLongLongKeyWord");
}
void ShowAbsyn::visitTypeSpecSimpleSignedLongLongKeyWord(TypeSpecSimpleSignedLongLongKeyWord *p)
{
  bufAppend("TypeSpecSimpleSignedLongLongKeyWord");
}
void ShowAbsyn::visitTypeSpecSimpleUnsignedLongLongKeyWord(TypeSpecSimpleUnsignedLongLongKeyWord *p)
{
  bufAppend("TypeSpecSimpleUnsignedLongLongKeyWord");
}
void ShowAbsyn::visitTypeSpecSimpleLongLongIntKeyWord(TypeSpecSimpleLongLongIntKeyWord *p)
{
  bufAppend("TypeSpecSimpleLongLongIntKeyWord");
}
void ShowAbsyn::visitTypeSpecSimpleSignedLongLongIntKeyWord(TypeSpecSimpleSignedLongLongIntKeyWord *p)
{
  bufAppend("TypeSpecSimpleSignedLongLongIntKeyWord");
}
void ShowAbsyn::visitTypeSpecSimpleUnsignedLongLongIntKeyWord(TypeSpecSimpleUnsignedLongLongIntKeyWord *p)
{
  bufAppend("TypeSpecSimpleUnsignedLongLongIntKeyWord");
}
void ShowAbsyn::visitTypeSpecSimpleFloatKeyWord(TypeSpecSimpleFloatKeyWord *p)
{
  bufAppend("TypeSpecSimpleFloatKeyWord");
}
void ShowAbsyn::visitTypeSpecSimpleDoubleKeyWord(TypeSpecSimpleDoubleKeyWord *p)
{
  bufAppend("TypeSpecSimpleDoubleKeyWord");
}
void ShowAbsyn::visitTypeSpecSimpleLongDoubleKeyWord(TypeSpecSimpleLongDoubleKeyWord *p)
{
  bufAppend("TypeSpecSimpleLongDoubleKeyWord");
}
void ShowAbsyn::visitLogicPTreeAnnot(LogicPTreeAnnot *p) {} //abstract class

void ShowAbsyn::visitAnAnnotation(AnAnnotation *p)
{
  bufAppend('(');
  bufAppend("AnAnnotation");
  bufAppend(' ');
  bufAppend('[');
  if (p->annotation_)  p->annotation_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitAnnotation(Annotation *p) {} //abstract class

void ShowAbsyn::visitLoopAnnotation(LoopAnnotation *p)
{
  bufAppend('(');
  bufAppend("LoopAnnotation");
  bufAppend(' ');
  bufAppend('[');
  if (p->loopannotstack_)  p->loopannotstack_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitLoopAnnotStack(LoopAnnotStack *p) {} //abstract class

void ShowAbsyn::visitLoopAnnotStackInvariant(LoopAnnotStackInvariant *p)
{
  bufAppend('(');
  bufAppend("LoopAnnotStackInvariant");
  bufAppend(' ');
  bufAppend('[');
  if (p->loopinvariant_)  p->loopinvariant_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->loopannotopt_)  p->loopannotopt_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitLoopAnnotStackEffects(LoopAnnotStackEffects *p)
{
  bufAppend('(');
  bufAppend("LoopAnnotStackEffects");
  bufAppend(' ');
  bufAppend('[');
  if (p->loopeffects_)  p->loopeffects_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->loopannotopt_)  p->loopannotopt_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitLoopAnnotStackAllocation(LoopAnnotStackAllocation *p)
{
  bufAppend('(');
  bufAppend("LoopAnnotStackAllocation");
  bufAppend(' ');
  bufAppend('[');
  if (p->loopallocation_)  p->loopallocation_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->loopannotopt_)  p->loopannotopt_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitLoopAnnotStackVariant(LoopAnnotStackVariant *p)
{
  bufAppend('(');
  bufAppend("LoopAnnotStackVariant");
  bufAppend(' ');
  bufAppend('[');
  if (p->loopvariant_)  p->loopvariant_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->loopannotopt_)  p->loopannotopt_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitLoopAnnotOpt(LoopAnnotOpt *p) {} //abstract class

void ShowAbsyn::visitNoLoopAnnot(NoLoopAnnot *p)
{
  bufAppend("NoLoopAnnot");
}
void ShowAbsyn::visitSomeLoopAnnot(SomeLoopAnnot *p)
{
  bufAppend('(');
  bufAppend("SomeLoopAnnot");
  bufAppend(' ');
  bufAppend('[');
  if (p->loopannotstack_)  p->loopannotstack_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitLoopInvariant(LoopInvariant *p) {} //abstract class

void ShowAbsyn::visitSimpleLoopInvariant(SimpleLoopInvariant *p)
{
  bufAppend('(');
  bufAppend("SimpleLoopInvariant");
  bufAppend(' ');
  bufAppend('[');
  if (p->lexpr_)  p->lexpr_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend(')');
}
void ShowAbsyn::visitCheckLoopInvariant(CheckLoopInvariant *p)
{
  bufAppend('(');
  bufAppend("CheckLoopInvariant");
  bufAppend(' ');
  bufAppend('[');
  if (p->lexpr_)  p->lexpr_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend(')');
}
void ShowAbsyn::visitAdmitLoopInvariant(AdmitLoopInvariant *p)
{
  bufAppend('(');
  bufAppend("AdmitLoopInvariant");
  bufAppend(' ');
  bufAppend('[');
  if (p->lexpr_)  p->lexpr_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend(')');
}
void ShowAbsyn::visitLoopAllocation(LoopAllocation *p) {} //abstract class

void ShowAbsyn::visitSimpleLoopAllocation(SimpleLoopAllocation *p)
{
  bufAppend('(');
  bufAppend("SimpleLoopAllocation");
  bufAppend(' ');
  bufAppend('[');
  if (p->allocation_)  p->allocation_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend(')');
}
void ShowAbsyn::visitAllocation(Allocation *p) {} //abstract class

void ShowAbsyn::visitAllocatesZones(AllocatesZones *p)
{
  bufAppend('(');
  bufAppend("AllocatesZones");
  bufAppend(' ');
  bufAppend('[');
  if (p->zones_)  p->zones_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitFreesZones(FreesZones *p)
{
  bufAppend('(');
  bufAppend("FreesZones");
  bufAppend(' ');
  bufAppend('[');
  if (p->zones_)  p->zones_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitLoopVariant(LoopVariant *p) {} //abstract class

void ShowAbsyn::visitSimpleLoopVariant(SimpleLoopVariant *p)
{
  bufAppend('(');
  bufAppend("SimpleLoopVariant");
  bufAppend(' ');
  bufAppend('[');
  if (p->variant_)  p->variant_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend(')');
}
void ShowAbsyn::visitLoopEffects(LoopEffects *p) {} //abstract class

void ShowAbsyn::visitLoopAssigns(LoopAssigns *p)
{
  bufAppend('(');
  bufAppend("LoopAssigns");
  bufAppend(' ');
  bufAppend('[');
  if (p->assigns_)  p->assigns_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend(')');
}
void ShowAbsyn::visitVariant(Variant *p) {} //abstract class

void ShowAbsyn::visitForVariant(ForVariant *p)
{
  bufAppend('(');
  bufAppend("ForVariant");
  bufAppend(' ');
  bufAppend('[');
  if (p->lexpr_)  p->lexpr_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->anyidentifier_)  p->anyidentifier_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitLexprVariant(LexprVariant *p)
{
  bufAppend('(');
  bufAppend("LexprVariant");
  bufAppend(' ');
  bufAppend('[');
  if (p->lexpr_)  p->lexpr_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitInteger(Integer i)
{
  char tmp[20];
  sprintf(tmp, "%d", i);
  bufAppend(tmp);
}
void ShowAbsyn::visitDouble(Double d)
{
  char tmp[24];
  sprintf(tmp, "%.15g", d);
  bufAppend(tmp);
}
void ShowAbsyn::visitChar(Char c)
{
  bufAppend('\'');
  bufAppend(c);
  bufAppend('\'');
}
void ShowAbsyn::visitString(String s)
{
  bufAppend('\"');
  bufAppend(s);
  bufAppend('\"');
}
void ShowAbsyn::visitIdent(String s)
{
  bufAppend('\"');
  bufAppend(s);
  bufAppend('\"');
}

}
