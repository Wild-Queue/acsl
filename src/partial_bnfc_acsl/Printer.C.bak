/* File generated by the BNF Converter (bnfc 2.9.4.1). */

/*** Pretty Printer and Abstract Syntax Viewer ***/

#include <string>
#include "Printer.H"
#define INDENT_WIDTH 2

namespace partial_bnfc_acsl
{
//You may wish to change render
void PrintAbsyn::render(Char c)
{
  if (c == '{')
  {
     onEmptyLine();
     bufAppend(c);
     _n_ = _n_ + INDENT_WIDTH;
     bufAppend('\n');
     indent();
  }
  else if (c == '(' || c == '[')
     bufAppend(c);
  else if (c == ')' || c == ']')
  {
     removeTrailingWhitespace();
     bufAppend(c);
     bufAppend(' ');
  }
  else if (c == '}')
  {
     _n_ = _n_ - INDENT_WIDTH;
     onEmptyLine();
     bufAppend(c);
     bufAppend('\n');
     indent();
  }
  else if (c == ',')
  {
     removeTrailingWhitespace();
     bufAppend(c);
     bufAppend(' ');
  }
  else if (c == ';')
  {
     removeTrailingWhitespace();
     bufAppend(c);
     bufAppend('\n');
     indent();
  }
  else if (c == ' ') bufAppend(c);
  else if (c == 0) return;
  else
  {
     bufAppend(c);
     bufAppend(' ');
  }
}

void PrintAbsyn::render(String s)
{
  render(s.c_str());
}

bool allIsSpace(const char *s)
{
  char c;
  while ((c = *s++))
    if (! isspace(c)) return false;
  return true;
}

void PrintAbsyn::render(const char *s)
{
  if (*s) /* C string not empty */
  {
    if (allIsSpace(s)) {
      backup();
      bufAppend(s);
    } else {
      bufAppend(s);
      bufAppend(' ');
    }
  }
}

void PrintAbsyn::indent()
{
  int n = _n_;
  while (--n >= 0)
    bufAppend(' ');
}

void PrintAbsyn::backup()
{
  if (cur_ && buf_[cur_ - 1] == ' ')
    buf_[--cur_] = 0;
}

void PrintAbsyn::removeTrailingSpaces()
{
  while (cur_ && buf_[cur_ - 1] == ' ') --cur_;
  buf_[cur_] = 0;
}

void PrintAbsyn::removeTrailingWhitespace()
{
  while (cur_ && (buf_[cur_ - 1] == ' ' || buf_[cur_ - 1] == '\n')) --cur_;
  buf_[cur_] = 0;
}

void PrintAbsyn::onEmptyLine()
{
  removeTrailingSpaces();
  if (cur_ && buf_[cur_ - 1 ] != '\n') bufAppend('\n');
  indent();
}

PrintAbsyn::PrintAbsyn(void)
{
  _i_ = 0; _n_ = 0;
  buf_ = 0;
  bufReset();
}

PrintAbsyn::~PrintAbsyn(void)
{
}

char *PrintAbsyn::print(Visitable *v)
{
  _i_ = 0; _n_ = 0;
  bufReset();
  v->accept(this);
  return buf_;
}

void PrintAbsyn::visitProgram(Program *p) {} //abstract class

void PrintAbsyn::visitAProgram(AProgram *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->annot_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitAnnot(Annot *p) {} //abstract class

void PrintAbsyn::visitCodeAnnot(CodeAnnot *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->code_annot_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitListAnnot(ListAnnot *listannot)
{
  iterListAnnot(listannot->begin(), listannot->end());
}

void PrintAbsyn::iterListAnnot(ListAnnot::const_iterator i, ListAnnot::const_iterator j)
{
  if (i == j) return;
  { /* cons */
    (*i)->accept(this); iterListAnnot(i+1, j);
  }
}

void PrintAbsyn::visitCode_Annot(Code_Annot *p) {} //abstract class

void PrintAbsyn::visitCodeAnnotContract(CodeAnnotContract *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->contract_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitContract(Contract *p) {} //abstract class

void PrintAbsyn::visitSimpleContract(SimpleContract *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->requires_->accept(this);
  _i_ = 0; p->terminates_->accept(this);
  _i_ = 0; p->decreases_->accept(this);
  _i_ = 0; p->simpleclauses_->accept(this);
  _i_ = 0; p->behaviors_->accept(this);
  _i_ = 0; p->completeordisjoint_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitRequires(Requires *p) {} //abstract class

void PrintAbsyn::visitNoRequires(NoRequires *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);


  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitSomeRequires(SomeRequires *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->nerequires_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitNERequires(NERequires *p) {} //abstract class

void PrintAbsyn::visitSimpleRequires(SimpleRequires *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("requires");
  _i_ = 0; p->lexpr_->accept(this);
  render(';');
  _i_ = 0; p->requires_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitCheckRequires(CheckRequires *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("check");
  render("requires");
  _i_ = 0; p->lexpr_->accept(this);
  render(';');
  _i_ = 0; p->requires_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitAdimtRequires(AdimtRequires *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("admit");
  render("requires");
  _i_ = 0; p->lexpr_->accept(this);
  render(';');
  _i_ = 0; p->requires_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTerminates(Terminates *p) {} //abstract class

void PrintAbsyn::visitNoTerminate(NoTerminate *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);


  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitDecreases(Decreases *p) {} //abstract class

void PrintAbsyn::visitNoDecreases(NoDecreases *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);


  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitSimpleClauses(SimpleClauses *p) {} //abstract class

void PrintAbsyn::visitNoSimpleClauses(NoSimpleClauses *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);


  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitSomeSimpleClauses(SomeSimpleClauses *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->nesimpleclauses_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitNESimpleClauses(NESimpleClauses *p) {} //abstract class

void PrintAbsyn::visitPostCondSimpleClauses(PostCondSimpleClauses *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->postcond_->accept(this);
  _i_ = 0; p->lexpr_->accept(this);
  render(';');
  _i_ = 0; p->simpleclauses_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitBehaviors(Behaviors *p) {} //abstract class

void PrintAbsyn::visitNoBehaviors(NoBehaviors *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);


  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitCompleteOrDisjoint(CompleteOrDisjoint *p) {} //abstract class

void PrintAbsyn::visitNoComplDisj(NoComplDisj *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);


  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitLexpr(Lexpr *p) {} //abstract class

void PrintAbsyn::visitNoLexpr(NoLexpr *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);


  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitImplLexpr(ImplLexpr *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->lexpr_1->accept(this);
  render("==>");
  _i_ = 1; p->lexpr_2->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitIffLexpr(IffLexpr *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->lexpr_1->accept(this);
  render("<==>");
  _i_ = 1; p->lexpr_2->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitOrLexpr(OrLexpr *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->lexpr_1->accept(this);
  render("||");
  _i_ = 1; p->lexpr_2->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitAndLexpr(AndLexpr *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->lexpr_1->accept(this);
  render("&&");
  _i_ = 1; p->lexpr_2->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitHatHatLexpr(HatHatLexpr *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->lexpr_1->accept(this);
  render("^^");
  _i_ = 1; p->lexpr_2->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitAmpLexpr(AmpLexpr *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->lexpr_1->accept(this);
  render('&');
  _i_ = 1; p->lexpr_2->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitPipeLexpr(PipeLexpr *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->lexpr_1->accept(this);
  render('|');
  _i_ = 1; p->lexpr_2->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitHatLexpr(HatLexpr *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->lexpr_1->accept(this);
  render('^');
  _i_ = 1; p->lexpr_2->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitBimpliesLexpr(BimpliesLexpr *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->lexpr_1->accept(this);
  render("-->");
  _i_ = 1; p->lexpr_2->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitBiffLexpr(BiffLexpr *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->lexpr_1->accept(this);
  render("<-->");
  _i_ = 1; p->lexpr_2->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitInLexpr(InLexpr *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->lexpr_1->accept(this);
  render("\\in");
  _i_ = 1; p->lexpr_2->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTernaryLexpr(TernaryLexpr *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->lexpr_1->accept(this);
  render('?');
  _i_ = 0; p->lexpr_2->accept(this);
  render(':');
  _i_ = 0; p->lexpr_3->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitRelationLexpr(RelationLexpr *p)
{
  int oldi = _i_;
  if (oldi > 1) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 3; p->lexpr_1->accept(this);
  _i_ = 0; visitListLexprRelInner(p->listlexprrelinner_);
  _i_ = 0; p->relation_->accept(this);
  _i_ = 2; p->lexpr_2->accept(this);

  if (oldi > 1) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitNotLexprInner(NotLexprInner *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render('!');
  _i_ = 3; p->lexpr_->accept(this);

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTrueLexpr(TrueLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\true");

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitFalseLexpr(FalseLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\false");

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitAutomaticLexpr(AutomaticLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\automatic");

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitDynamicLexpr(DynamicLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\dynamic");

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitRegisterLexpr(RegisterLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\register");

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitStaticLexpr(StaticLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\static");

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitUnallocatedLexpr(UnallocatedLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\unallocated");

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitNullLexpr(NullLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\null");

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitLexprIntConst(LexprIntConst *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  visitInteger(p->integer_);

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitLexprFloatConst(LexprFloatConst *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  visitDouble(p->double_);

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitLexprStringConst(LexprStringConst *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  visitString(p->string_);

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitAddLexpr(AddLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 3; p->lexpr_1->accept(this);
  render('+');
  _i_ = 3; p->lexpr_2->accept(this);

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitSubtrLexpr(SubtrLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 3; p->lexpr_1->accept(this);
  render('-');
  _i_ = 3; p->lexpr_2->accept(this);

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitMultLexpr(MultLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 3; p->lexpr_1->accept(this);
  render('*');
  _i_ = 3; p->lexpr_2->accept(this);

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitDivLexpr(DivLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 3; p->lexpr_1->accept(this);
  render('/');
  _i_ = 3; p->lexpr_2->accept(this);

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitModLexpr(ModLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 3; p->lexpr_1->accept(this);
  render('%');
  _i_ = 3; p->lexpr_2->accept(this);

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitStarHatLexpr(StarHatLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 3; p->lexpr_1->accept(this);
  render("*^");
  _i_ = 3; p->lexpr_2->accept(this);

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitSquaresLexpr(SquaresLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 3; p->lexpr_1->accept(this);
  render('[');
  _i_ = 0; p->lexpr_2->accept(this);
  render(']');

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitMinusLexpr(MinusLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render('-');
  _i_ = 3; p->lexpr_->accept(this);

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitPlusLexpr(PlusLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render('+');
  _i_ = 3; p->lexpr_->accept(this);

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTildeLexpr(TildeLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render('~');
  _i_ = 3; p->lexpr_->accept(this);

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitStarLexpr(StarLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render('*');
  _i_ = 3; p->lexpr_->accept(this);

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitAmpUnaryLexpr(AmpUnaryLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render('&');
  _i_ = 3; p->lexpr_->accept(this);

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitSizeOfLexpr(SizeOfLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("sizeof");
  render('(');
  _i_ = 0; p->lexpr_->accept(this);
  render(')');

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitOldLexpr(OldLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\old");
  render('(');
  _i_ = 0; p->lexpr_->accept(this);
  render(')');

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitResultLexpr(ResultLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\result");

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitSeparatedLexpr(SeparatedLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\separated");
  render('(');
  _i_ = 0; visitListLexpr(p->listlexpr_);
  render(')');

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitFullIdParenLexpr(FullIdParenLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->fullidentifier_->accept(this);
  render('(');
  _i_ = 0; visitListLexpr(p->listlexpr_);
  render(')');

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitFullId(FullId *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->fullidentifier_->accept(this);

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitPiLexpr(PiLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\pi");

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitLessLessLexpr(LessLessLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 3; p->lexpr_1->accept(this);
  render(">>");
  _i_ = 3; p->lexpr_2->accept(this);

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitGreaterGreaterLexpr(GreaterGreaterLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 3; p->lexpr_1->accept(this);
  render("<<");
  _i_ = 3; p->lexpr_2->accept(this);

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeOfLexpr(TypeOfLexpr *p)
{
  int oldi = _i_;
  if (oldi > 3) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("\\typeof");
  render('(');
  _i_ = 0; p->lexpr_->accept(this);
  render(')');

  if (oldi > 3) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitListLexpr(ListLexpr *listlexpr)
{
  iterListLexpr(listlexpr->begin(), listlexpr->end());
}

void PrintAbsyn::iterListLexpr(ListLexpr::const_iterator i, ListLexpr::const_iterator j)
{
  if (i == j) return;
  if (i == j-1)
  { /* last */
    (*i)->accept(this);
  }
  else
  { /* cons */
    (*i)->accept(this); render(','); iterListLexpr(i+1, j);
  }
}

void PrintAbsyn::visitLexprRelInner(LexprRelInner *p) {} //abstract class

void PrintAbsyn::visitRelInnerLexpr(RelInnerLexpr *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->relation_->accept(this);
  _i_ = 3; p->lexpr_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitListLexprRelInner(ListLexprRelInner *listlexprrelinner)
{
  iterListLexprRelInner(listlexprrelinner->begin(), listlexprrelinner->end());
}

void PrintAbsyn::iterListLexprRelInner(ListLexprRelInner::const_iterator i, ListLexprRelInner::const_iterator j)
{
  if (i == j) return;
  { /* cons */
    (*i)->accept(this); iterListLexprRelInner(i+1, j);
  }
}

void PrintAbsyn::visitRelation(Relation *p) {} //abstract class

void PrintAbsyn::visitLessRel(LessRel *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render('<');

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitGreaterRel(GreaterRel *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render('>');

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitLessEqRel(LessEqRel *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("<=");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitGreaterEqRel(GreaterEqRel *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render(">=");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitEqRel(EqRel *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("==");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitNotEqRel(NotEqRel *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("!=");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitPostCond(PostCond *p) {} //abstract class

void PrintAbsyn::visitEnsuresKeyWord(EnsuresKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("ensures");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitExitsKeyWord(ExitsKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("exits");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitBreaksKeyWord(BreaksKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("breaks");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitContinuesKeyWord(ContinuesKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("continues");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitReturnsKeyWord(ReturnsKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("returns");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitCheckEnsuresKeyWord(CheckEnsuresKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("check");
  render("ensures");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitCheckExitsKeyWord(CheckExitsKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("check");
  render("exits");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitCheckBreaksKeyWord(CheckBreaksKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("check");
  render("breaks");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitCheckContinuesKeyWord(CheckContinuesKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("check");
  render("continues");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitCheckReturnsKeyWord(CheckReturnsKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("check");
  render("returns");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitAdmitEnsuresKeyWord(AdmitEnsuresKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("admit");
  render("ensures");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitAdmitExitsKeyWord(AdmitExitsKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("admit");
  render("exits");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitAdmitBreaksKeyWord(AdmitBreaksKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("admit");
  render("breaks");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitAdmitContinuesKeyWord(AdmitContinuesKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("admit");
  render("continues");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitAdmitReturnsKeyWord(AdmitReturnsKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  render("admit");
  render("returns");

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitFullIdentifier(FullIdentifier *p) {} //abstract class

void PrintAbsyn::visitSimpleIdentifierFull(SimpleIdentifierFull *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  _i_ = 0; p->identifier_->accept(this);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitListFullIdentifier(ListFullIdentifier *listfullidentifier)
{
  iterListFullIdentifier(listfullidentifier->begin(), listfullidentifier->end());
}

void PrintAbsyn::iterListFullIdentifier(ListFullIdentifier::const_iterator i, ListFullIdentifier::const_iterator j)
{
  if (i == j) return;
  if (i == j-1)
  { /* last */
    (*i)->accept(this);
  }
  else
  { /* cons */
    (*i)->accept(this); render(','); iterListFullIdentifier(i+1, j);
  }
}

void PrintAbsyn::visitIdentifier(Identifier *p) {} //abstract class

void PrintAbsyn::visitIdentifierIdent(IdentifierIdent *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAL_BNFC_ACSL__L_PAREN);

  visitIdent(p->ident_);

  if (oldi > 0) render(PARTIAL_BNFC_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitInteger(Integer i)
{
  char tmp[20];
  sprintf(tmp, "%d", i);
  render(tmp);
}

void PrintAbsyn::visitDouble(Double d)
{
  char tmp[24];
  sprintf(tmp, "%.15g", d);
  render(tmp);
}

void PrintAbsyn::visitChar(Char c)
{
  char tmp[4];
  sprintf(tmp, "'%c'", c);
  render(tmp);
}

void PrintAbsyn::visitString(String s)
{
  bufAppend('\"');
  bufAppend(s);
  bufAppend('\"');
  bufAppend(' ');
}

void PrintAbsyn::visitIdent(String s)
{
  render(s);
}

ShowAbsyn::ShowAbsyn(void)
{
  buf_ = 0;
  bufReset();
}

ShowAbsyn::~ShowAbsyn(void)
{
}

char *ShowAbsyn::show(Visitable *v)
{
  bufReset();
  v->accept(this);
  return buf_;
}

void ShowAbsyn::visitProgram(Program *p) {} //abstract class

void ShowAbsyn::visitAProgram(AProgram *p)
{
  bufAppend('(');
  bufAppend("AProgram");
  bufAppend(' ');
  bufAppend('[');
  if (p->annot_)  p->annot_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitAnnot(Annot *p) {} //abstract class

void ShowAbsyn::visitCodeAnnot(CodeAnnot *p)
{
  bufAppend('(');
  bufAppend("CodeAnnot");
  bufAppend(' ');
  bufAppend('[');
  if (p->code_annot_)  p->code_annot_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitListAnnot(ListAnnot *listannot)
{
  for (ListAnnot::const_iterator i = listannot->begin() ; i != listannot->end() ; ++i)
  {
    (*i)->accept(this);
    if (i != listannot->end() - 1) bufAppend(", ");
  }
}

void ShowAbsyn::visitCode_Annot(Code_Annot *p) {} //abstract class

void ShowAbsyn::visitCodeAnnotContract(CodeAnnotContract *p)
{
  bufAppend('(');
  bufAppend("CodeAnnotContract");
  bufAppend(' ');
  bufAppend('[');
  if (p->contract_)  p->contract_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitContract(Contract *p) {} //abstract class

void ShowAbsyn::visitSimpleContract(SimpleContract *p)
{
  bufAppend('(');
  bufAppend("SimpleContract");
  bufAppend(' ');
  bufAppend('[');
  if (p->requires_)  p->requires_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->terminates_)  p->terminates_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->decreases_)  p->decreases_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->simpleclauses_)  p->simpleclauses_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->behaviors_)  p->behaviors_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->completeordisjoint_)  p->completeordisjoint_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitRequires(Requires *p) {} //abstract class

void ShowAbsyn::visitNoRequires(NoRequires *p)
{
  bufAppend("NoRequires");
}
void ShowAbsyn::visitSomeRequires(SomeRequires *p)
{
  bufAppend('(');
  bufAppend("SomeRequires");
  bufAppend(' ');
  bufAppend('[');
  if (p->nerequires_)  p->nerequires_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitNERequires(NERequires *p) {} //abstract class

void ShowAbsyn::visitSimpleRequires(SimpleRequires *p)
{
  bufAppend('(');
  bufAppend("SimpleRequires");
  bufAppend(' ');
  bufAppend('[');
  if (p->lexpr_)  p->lexpr_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->requires_)  p->requires_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitCheckRequires(CheckRequires *p)
{
  bufAppend('(');
  bufAppend("CheckRequires");
  bufAppend(' ');
  bufAppend('[');
  if (p->lexpr_)  p->lexpr_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->requires_)  p->requires_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitAdimtRequires(AdimtRequires *p)
{
  bufAppend('(');
  bufAppend("AdimtRequires");
  bufAppend(' ');
  bufAppend('[');
  if (p->lexpr_)  p->lexpr_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->requires_)  p->requires_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitTerminates(Terminates *p) {} //abstract class

void ShowAbsyn::visitNoTerminate(NoTerminate *p)
{
  bufAppend("NoTerminate");
}
void ShowAbsyn::visitDecreases(Decreases *p) {} //abstract class

void ShowAbsyn::visitNoDecreases(NoDecreases *p)
{
  bufAppend("NoDecreases");
}
void ShowAbsyn::visitSimpleClauses(SimpleClauses *p) {} //abstract class

void ShowAbsyn::visitNoSimpleClauses(NoSimpleClauses *p)
{
  bufAppend("NoSimpleClauses");
}
void ShowAbsyn::visitSomeSimpleClauses(SomeSimpleClauses *p)
{
  bufAppend('(');
  bufAppend("SomeSimpleClauses");
  bufAppend(' ');
  bufAppend('[');
  if (p->nesimpleclauses_)  p->nesimpleclauses_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitNESimpleClauses(NESimpleClauses *p) {} //abstract class

void ShowAbsyn::visitPostCondSimpleClauses(PostCondSimpleClauses *p)
{
  bufAppend('(');
  bufAppend("PostCondSimpleClauses");
  bufAppend(' ');
  bufAppend('[');
  if (p->postcond_)  p->postcond_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->lexpr_)  p->lexpr_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->simpleclauses_)  p->simpleclauses_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitBehaviors(Behaviors *p) {} //abstract class

void ShowAbsyn::visitNoBehaviors(NoBehaviors *p)
{
  bufAppend("NoBehaviors");
}
void ShowAbsyn::visitCompleteOrDisjoint(CompleteOrDisjoint *p) {} //abstract class

void ShowAbsyn::visitNoComplDisj(NoComplDisj *p)
{
  bufAppend("NoComplDisj");
}
void ShowAbsyn::visitLexpr(Lexpr *p) {} //abstract class

void ShowAbsyn::visitNoLexpr(NoLexpr *p)
{
  bufAppend("NoLexpr");
}
void ShowAbsyn::visitImplLexpr(ImplLexpr *p)
{
  bufAppend('(');
  bufAppend("ImplLexpr");
  bufAppend(' ');
  p->lexpr_1->accept(this);
  bufAppend(' ');
  p->lexpr_2->accept(this);
  bufAppend(')');
}
void ShowAbsyn::visitIffLexpr(IffLexpr *p)
{
  bufAppend('(');
  bufAppend("IffLexpr");
  bufAppend(' ');
  p->lexpr_1->accept(this);
  bufAppend(' ');
  p->lexpr_2->accept(this);
  bufAppend(')');
}
void ShowAbsyn::visitOrLexpr(OrLexpr *p)
{
  bufAppend('(');
  bufAppend("OrLexpr");
  bufAppend(' ');
  p->lexpr_1->accept(this);
  bufAppend(' ');
  p->lexpr_2->accept(this);
  bufAppend(')');
}
void ShowAbsyn::visitAndLexpr(AndLexpr *p)
{
  bufAppend('(');
  bufAppend("AndLexpr");
  bufAppend(' ');
  p->lexpr_1->accept(this);
  bufAppend(' ');
  p->lexpr_2->accept(this);
  bufAppend(')');
}
void ShowAbsyn::visitHatHatLexpr(HatHatLexpr *p)
{
  bufAppend('(');
  bufAppend("HatHatLexpr");
  bufAppend(' ');
  p->lexpr_1->accept(this);
  bufAppend(' ');
  p->lexpr_2->accept(this);
  bufAppend(')');
}
void ShowAbsyn::visitAmpLexpr(AmpLexpr *p)
{
  bufAppend('(');
  bufAppend("AmpLexpr");
  bufAppend(' ');
  p->lexpr_1->accept(this);
  bufAppend(' ');
  p->lexpr_2->accept(this);
  bufAppend(')');
}
void ShowAbsyn::visitPipeLexpr(PipeLexpr *p)
{
  bufAppend('(');
  bufAppend("PipeLexpr");
  bufAppend(' ');
  p->lexpr_1->accept(this);
  bufAppend(' ');
  p->lexpr_2->accept(this);
  bufAppend(')');
}
void ShowAbsyn::visitHatLexpr(HatLexpr *p)
{
  bufAppend('(');
  bufAppend("HatLexpr");
  bufAppend(' ');
  p->lexpr_1->accept(this);
  bufAppend(' ');
  p->lexpr_2->accept(this);
  bufAppend(')');
}
void ShowAbsyn::visitBimpliesLexpr(BimpliesLexpr *p)
{
  bufAppend('(');
  bufAppend("BimpliesLexpr");
  bufAppend(' ');
  p->lexpr_1->accept(this);
  bufAppend(' ');
  p->lexpr_2->accept(this);
  bufAppend(')');
}
void ShowAbsyn::visitBiffLexpr(BiffLexpr *p)
{
  bufAppend('(');
  bufAppend("BiffLexpr");
  bufAppend(' ');
  p->lexpr_1->accept(this);
  bufAppend(' ');
  p->lexpr_2->accept(this);
  bufAppend(')');
}
void ShowAbsyn::visitInLexpr(InLexpr *p)
{
  bufAppend('(');
  bufAppend("InLexpr");
  bufAppend(' ');
  p->lexpr_1->accept(this);
  bufAppend(' ');
  p->lexpr_2->accept(this);
  bufAppend(')');
}
void ShowAbsyn::visitTernaryLexpr(TernaryLexpr *p)
{
  bufAppend('(');
  bufAppend("TernaryLexpr");
  bufAppend(' ');
  p->lexpr_1->accept(this);
  bufAppend(' ');
  p->lexpr_2->accept(this);
  bufAppend(' ');
  p->lexpr_3->accept(this);
  bufAppend(')');
}
void ShowAbsyn::visitRelationLexpr(RelationLexpr *p)
{
  bufAppend('(');
  bufAppend("RelationLexpr");
  bufAppend(' ');
  p->lexpr_1->accept(this);
  bufAppend(' ');
  bufAppend('[');
  if (p->listlexprrelinner_)  p->listlexprrelinner_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->relation_)  p->relation_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  p->lexpr_2->accept(this);
  bufAppend(')');
}
void ShowAbsyn::visitNotLexprInner(NotLexprInner *p)
{
  bufAppend('(');
  bufAppend("NotLexprInner");
  bufAppend(' ');
  bufAppend('[');
  if (p->lexpr_)  p->lexpr_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitTrueLexpr(TrueLexpr *p)
{
  bufAppend("TrueLexpr");
}
void ShowAbsyn::visitFalseLexpr(FalseLexpr *p)
{
  bufAppend("FalseLexpr");
}
void ShowAbsyn::visitAutomaticLexpr(AutomaticLexpr *p)
{
  bufAppend("AutomaticLexpr");
}
void ShowAbsyn::visitDynamicLexpr(DynamicLexpr *p)
{
  bufAppend("DynamicLexpr");
}
void ShowAbsyn::visitRegisterLexpr(RegisterLexpr *p)
{
  bufAppend("RegisterLexpr");
}
void ShowAbsyn::visitStaticLexpr(StaticLexpr *p)
{
  bufAppend("StaticLexpr");
}
void ShowAbsyn::visitUnallocatedLexpr(UnallocatedLexpr *p)
{
  bufAppend("UnallocatedLexpr");
}
void ShowAbsyn::visitNullLexpr(NullLexpr *p)
{
  bufAppend("NullLexpr");
}
void ShowAbsyn::visitLexprIntConst(LexprIntConst *p)
{
  bufAppend('(');
  bufAppend("LexprIntConst");
  bufAppend(' ');
  visitInteger(p->integer_);
  bufAppend(')');
}
void ShowAbsyn::visitLexprFloatConst(LexprFloatConst *p)
{
  bufAppend('(');
  bufAppend("LexprFloatConst");
  bufAppend(' ');
  visitDouble(p->double_);
  bufAppend(')');
}
void ShowAbsyn::visitLexprStringConst(LexprStringConst *p)
{
  bufAppend('(');
  bufAppend("LexprStringConst");
  bufAppend(' ');
  visitString(p->string_);
  bufAppend(')');
}
void ShowAbsyn::visitAddLexpr(AddLexpr *p)
{
  bufAppend('(');
  bufAppend("AddLexpr");
  bufAppend(' ');
  p->lexpr_1->accept(this);
  bufAppend(' ');
  p->lexpr_2->accept(this);
  bufAppend(')');
}
void ShowAbsyn::visitSubtrLexpr(SubtrLexpr *p)
{
  bufAppend('(');
  bufAppend("SubtrLexpr");
  bufAppend(' ');
  p->lexpr_1->accept(this);
  bufAppend(' ');
  p->lexpr_2->accept(this);
  bufAppend(')');
}
void ShowAbsyn::visitMultLexpr(MultLexpr *p)
{
  bufAppend('(');
  bufAppend("MultLexpr");
  bufAppend(' ');
  p->lexpr_1->accept(this);
  bufAppend(' ');
  p->lexpr_2->accept(this);
  bufAppend(')');
}
void ShowAbsyn::visitDivLexpr(DivLexpr *p)
{
  bufAppend('(');
  bufAppend("DivLexpr");
  bufAppend(' ');
  p->lexpr_1->accept(this);
  bufAppend(' ');
  p->lexpr_2->accept(this);
  bufAppend(')');
}
void ShowAbsyn::visitModLexpr(ModLexpr *p)
{
  bufAppend('(');
  bufAppend("ModLexpr");
  bufAppend(' ');
  p->lexpr_1->accept(this);
  bufAppend(' ');
  p->lexpr_2->accept(this);
  bufAppend(')');
}
void ShowAbsyn::visitStarHatLexpr(StarHatLexpr *p)
{
  bufAppend('(');
  bufAppend("StarHatLexpr");
  bufAppend(' ');
  p->lexpr_1->accept(this);
  bufAppend(' ');
  p->lexpr_2->accept(this);
  bufAppend(')');
}
void ShowAbsyn::visitSquaresLexpr(SquaresLexpr *p)
{
  bufAppend('(');
  bufAppend("SquaresLexpr");
  bufAppend(' ');
  p->lexpr_1->accept(this);
  bufAppend(' ');
  p->lexpr_2->accept(this);
  bufAppend(' ');
  bufAppend(')');
}
void ShowAbsyn::visitMinusLexpr(MinusLexpr *p)
{
  bufAppend('(');
  bufAppend("MinusLexpr");
  bufAppend(' ');
  bufAppend('[');
  if (p->lexpr_)  p->lexpr_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitPlusLexpr(PlusLexpr *p)
{
  bufAppend('(');
  bufAppend("PlusLexpr");
  bufAppend(' ');
  bufAppend('[');
  if (p->lexpr_)  p->lexpr_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitTildeLexpr(TildeLexpr *p)
{
  bufAppend('(');
  bufAppend("TildeLexpr");
  bufAppend(' ');
  bufAppend('[');
  if (p->lexpr_)  p->lexpr_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitStarLexpr(StarLexpr *p)
{
  bufAppend('(');
  bufAppend("StarLexpr");
  bufAppend(' ');
  bufAppend('[');
  if (p->lexpr_)  p->lexpr_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitAmpUnaryLexpr(AmpUnaryLexpr *p)
{
  bufAppend('(');
  bufAppend("AmpUnaryLexpr");
  bufAppend(' ');
  bufAppend('[');
  if (p->lexpr_)  p->lexpr_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitSizeOfLexpr(SizeOfLexpr *p)
{
  bufAppend('(');
  bufAppend("SizeOfLexpr");
  bufAppend(' ');
  bufAppend('[');
  if (p->lexpr_)  p->lexpr_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend(')');
}
void ShowAbsyn::visitOldLexpr(OldLexpr *p)
{
  bufAppend('(');
  bufAppend("OldLexpr");
  bufAppend(' ');
  bufAppend('[');
  if (p->lexpr_)  p->lexpr_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend(')');
}
void ShowAbsyn::visitResultLexpr(ResultLexpr *p)
{
  bufAppend("ResultLexpr");
}
void ShowAbsyn::visitSeparatedLexpr(SeparatedLexpr *p)
{
  bufAppend('(');
  bufAppend("SeparatedLexpr");
  bufAppend(' ');
  bufAppend('[');
  if (p->listlexpr_)  p->listlexpr_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend(')');
}
void ShowAbsyn::visitFullIdParenLexpr(FullIdParenLexpr *p)
{
  bufAppend('(');
  bufAppend("FullIdParenLexpr");
  bufAppend(' ');
  bufAppend('[');
  if (p->fullidentifier_)  p->fullidentifier_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->listlexpr_)  p->listlexpr_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend(')');
}
void ShowAbsyn::visitFullId(FullId *p)
{
  bufAppend('(');
  bufAppend("FullId");
  bufAppend(' ');
  bufAppend('[');
  if (p->fullidentifier_)  p->fullidentifier_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitPiLexpr(PiLexpr *p)
{
  bufAppend("PiLexpr");
}
void ShowAbsyn::visitLessLessLexpr(LessLessLexpr *p)
{
  bufAppend('(');
  bufAppend("LessLessLexpr");
  bufAppend(' ');
  p->lexpr_1->accept(this);
  bufAppend(' ');
  p->lexpr_2->accept(this);
  bufAppend(')');
}
void ShowAbsyn::visitGreaterGreaterLexpr(GreaterGreaterLexpr *p)
{
  bufAppend('(');
  bufAppend("GreaterGreaterLexpr");
  bufAppend(' ');
  p->lexpr_1->accept(this);
  bufAppend(' ');
  p->lexpr_2->accept(this);
  bufAppend(')');
}
void ShowAbsyn::visitTypeOfLexpr(TypeOfLexpr *p)
{
  bufAppend('(');
  bufAppend("TypeOfLexpr");
  bufAppend(' ');
  bufAppend('[');
  if (p->lexpr_)  p->lexpr_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend(')');
}
void ShowAbsyn::visitListLexpr(ListLexpr *listlexpr)
{
  for (ListLexpr::const_iterator i = listlexpr->begin() ; i != listlexpr->end() ; ++i)
  {
    (*i)->accept(this);
    if (i != listlexpr->end() - 1) bufAppend(", ");
  }
}

void ShowAbsyn::visitLexprRelInner(LexprRelInner *p) {} //abstract class

void ShowAbsyn::visitRelInnerLexpr(RelInnerLexpr *p)
{
  bufAppend('(');
  bufAppend("RelInnerLexpr");
  bufAppend(' ');
  bufAppend('[');
  if (p->relation_)  p->relation_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->lexpr_)  p->lexpr_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitListLexprRelInner(ListLexprRelInner *listlexprrelinner)
{
  for (ListLexprRelInner::const_iterator i = listlexprrelinner->begin() ; i != listlexprrelinner->end() ; ++i)
  {
    (*i)->accept(this);
    if (i != listlexprrelinner->end() - 1) bufAppend(", ");
  }
}

void ShowAbsyn::visitRelation(Relation *p) {} //abstract class

void ShowAbsyn::visitLessRel(LessRel *p)
{
  bufAppend("LessRel");
}
void ShowAbsyn::visitGreaterRel(GreaterRel *p)
{
  bufAppend("GreaterRel");
}
void ShowAbsyn::visitLessEqRel(LessEqRel *p)
{
  bufAppend("LessEqRel");
}
void ShowAbsyn::visitGreaterEqRel(GreaterEqRel *p)
{
  bufAppend("GreaterEqRel");
}
void ShowAbsyn::visitEqRel(EqRel *p)
{
  bufAppend("EqRel");
}
void ShowAbsyn::visitNotEqRel(NotEqRel *p)
{
  bufAppend("NotEqRel");
}
void ShowAbsyn::visitPostCond(PostCond *p) {} //abstract class

void ShowAbsyn::visitEnsuresKeyWord(EnsuresKeyWord *p)
{
  bufAppend("EnsuresKeyWord");
}
void ShowAbsyn::visitExitsKeyWord(ExitsKeyWord *p)
{
  bufAppend("ExitsKeyWord");
}
void ShowAbsyn::visitBreaksKeyWord(BreaksKeyWord *p)
{
  bufAppend("BreaksKeyWord");
}
void ShowAbsyn::visitContinuesKeyWord(ContinuesKeyWord *p)
{
  bufAppend("ContinuesKeyWord");
}
void ShowAbsyn::visitReturnsKeyWord(ReturnsKeyWord *p)
{
  bufAppend("ReturnsKeyWord");
}
void ShowAbsyn::visitCheckEnsuresKeyWord(CheckEnsuresKeyWord *p)
{
  bufAppend("CheckEnsuresKeyWord");
}
void ShowAbsyn::visitCheckExitsKeyWord(CheckExitsKeyWord *p)
{
  bufAppend("CheckExitsKeyWord");
}
void ShowAbsyn::visitCheckBreaksKeyWord(CheckBreaksKeyWord *p)
{
  bufAppend("CheckBreaksKeyWord");
}
void ShowAbsyn::visitCheckContinuesKeyWord(CheckContinuesKeyWord *p)
{
  bufAppend("CheckContinuesKeyWord");
}
void ShowAbsyn::visitCheckReturnsKeyWord(CheckReturnsKeyWord *p)
{
  bufAppend("CheckReturnsKeyWord");
}
void ShowAbsyn::visitAdmitEnsuresKeyWord(AdmitEnsuresKeyWord *p)
{
  bufAppend("AdmitEnsuresKeyWord");
}
void ShowAbsyn::visitAdmitExitsKeyWord(AdmitExitsKeyWord *p)
{
  bufAppend("AdmitExitsKeyWord");
}
void ShowAbsyn::visitAdmitBreaksKeyWord(AdmitBreaksKeyWord *p)
{
  bufAppend("AdmitBreaksKeyWord");
}
void ShowAbsyn::visitAdmitContinuesKeyWord(AdmitContinuesKeyWord *p)
{
  bufAppend("AdmitContinuesKeyWord");
}
void ShowAbsyn::visitAdmitReturnsKeyWord(AdmitReturnsKeyWord *p)
{
  bufAppend("AdmitReturnsKeyWord");
}
void ShowAbsyn::visitFullIdentifier(FullIdentifier *p) {} //abstract class

void ShowAbsyn::visitSimpleIdentifierFull(SimpleIdentifierFull *p)
{
  bufAppend('(');
  bufAppend("SimpleIdentifierFull");
  bufAppend(' ');
  bufAppend('[');
  if (p->identifier_)  p->identifier_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitListFullIdentifier(ListFullIdentifier *listfullidentifier)
{
  for (ListFullIdentifier::const_iterator i = listfullidentifier->begin() ; i != listfullidentifier->end() ; ++i)
  {
    (*i)->accept(this);
    if (i != listfullidentifier->end() - 1) bufAppend(", ");
  }
}

void ShowAbsyn::visitIdentifier(Identifier *p) {} //abstract class

void ShowAbsyn::visitIdentifierIdent(IdentifierIdent *p)
{
  bufAppend('(');
  bufAppend("IdentifierIdent");
  bufAppend(' ');
  visitIdent(p->ident_);
  bufAppend(')');
}
void ShowAbsyn::visitInteger(Integer i)
{
  char tmp[20];
  sprintf(tmp, "%d", i);
  bufAppend(tmp);
}
void ShowAbsyn::visitDouble(Double d)
{
  char tmp[24];
  sprintf(tmp, "%.15g", d);
  bufAppend(tmp);
}
void ShowAbsyn::visitChar(Char c)
{
  bufAppend('\'');
  bufAppend(c);
  bufAppend('\'');
}
void ShowAbsyn::visitString(String s)
{
  bufAppend('\"');
  bufAppend(s);
  bufAppend('\"');
}
void ShowAbsyn::visitIdent(String s)
{
  bufAppend('\"');
  bufAppend(s);
  bufAppend('\"');
}

}
