/* File generated by the BNF Converter (bnfc 2.9.4.1). */

#ifndef ACSL_PARSER_HEADER_FILE
#define ACSL_PARSER_HEADER_FILE

#include<vector>
#include<string>
#include<cstdio>
#include "Absyn.H"

namespace acsl
{
Program* pProgram(FILE *inp);
Program* pProgram(const char *str);
Globals* pGlobals(FILE *inp);
Globals* pGlobals(const char *str);
Global* pGlobal(FILE *inp);
Global* pGlobal(const char *str);
FunctionDef* pFunctionDef(FILE *inp);
FunctionDef* pFunctionDef(const char *str);
FunctionDefStart* pFunctionDefStart(FILE *inp);
FunctionDefStart* pFunctionDefStart(const char *str);
DeclSpecList* pDeclSpecList(FILE *inp);
DeclSpecList* pDeclSpecList(const char *str);
DeclSpecListNoNamed* pDeclSpecListNoNamed(FILE *inp);
DeclSpecListNoNamed* pDeclSpecListNoNamed(const char *str);
TypeSpec* pTypeSpec(FILE *inp);
TypeSpec* pTypeSpec(const char *str);
Declarator* pDeclarator(FILE *inp);
Declarator* pDeclarator(const char *str);
PointerOpt* pPointerOpt(FILE *inp);
PointerOpt* pPointerOpt(const char *str);
DirectDecl* pDirectDecl(FILE *inp);
DirectDecl* pDirectDecl(const char *str);
AttributesWithAsm* pAttributesWithAsm(FILE *inp);
AttributesWithAsm* pAttributesWithAsm(const char *str);
RestParList* pRestParList(FILE *inp);
RestParList* pRestParList(const char *str);
ParameterDecl* pParameterDecl(FILE *inp);
ParameterDecl* pParameterDecl(const char *str);
ListParameterDecl* pListParameterDecl(FILE *inp);
ListParameterDecl* pListParameterDecl(const char *str);
GhostParameterOpt* pGhostParameterOpt(FILE *inp);
GhostParameterOpt* pGhostParameterOpt(const char *str);
IdOrTypename* pIdOrTypename(FILE *inp);
IdOrTypename* pIdOrTypename(const char *str);
IdOrTypenameAsId* pIdOrTypenameAsId(FILE *inp);
IdOrTypenameAsId* pIdOrTypenameAsId(const char *str);
Declaration* pDeclaration(FILE *inp);
Declaration* pDeclaration(const char *str);
DeclAndInitDeclAttrList* pDeclAndInitDeclAttrList(FILE *inp);
DeclAndInitDeclAttrList* pDeclAndInitDeclAttrList(const char *str);
InitDeclaratorAttr* pInitDeclaratorAttr(FILE *inp);
InitDeclaratorAttr* pInitDeclaratorAttr(const char *str);
ListInitDeclaratorAttr* pListInitDeclaratorAttr(FILE *inp);
ListInitDeclaratorAttr* pListInitDeclaratorAttr(const char *str);
InitDeclarator* pInitDeclarator(FILE *inp);
InitDeclarator* pInitDeclarator(const char *str);
StructDeclList* pStructDeclList(FILE *inp);
StructDeclList* pStructDeclList(const char *str);
FieldDecl* pFieldDecl(FILE *inp);
FieldDecl* pFieldDecl(const char *str);
ListFieldDecl* pListFieldDecl(FILE *inp);
ListFieldDecl* pListFieldDecl(const char *str);
Attribute* pAttribute(FILE *inp);
Attribute* pAttribute(const char *str);
ListAttribute* pListAttribute(FILE *inp);
ListAttribute* pListAttribute(const char *str);
Block* pBlock(FILE *inp);
Block* pBlock(const char *str);
BlockAttrs* pBlockAttrs(FILE *inp);
BlockAttrs* pBlockAttrs(const char *str);
BlockElement* pBlockElement(FILE *inp);
BlockElement* pBlockElement(const char *str);
ListBlockElement* pListBlockElement(FILE *inp);
ListBlockElement* pListBlockElement(const char *str);
Statement* pStatement(FILE *inp);
Statement* pStatement(const char *str);
ForClause* pForClause(FILE *inp);
ForClause* pForClause(const char *str);
Attr* pAttr(FILE *inp);
Attr* pAttr(const char *str);
ListAttr* pListAttr(FILE *inp);
ListAttr* pListAttr(const char *str);
Attr* pAttr1(FILE *inp);
Attr* pAttr1(const char *str);
Attr* pAttr2(FILE *inp);
Attr* pAttr2(const char *str);
Attr* pAttr3(FILE *inp);
Attr* pAttr3(const char *str);
Attr* pAttr4(FILE *inp);
Attr* pAttr4(const char *str);
Attr* pAttr5(FILE *inp);
Attr* pAttr5(const char *str);
Attr* pAttr6(FILE *inp);
Attr* pAttr6(const char *str);
Attr* pAttr7(FILE *inp);
Attr* pAttr7(const char *str);
Attr* pAttr8(FILE *inp);
Attr* pAttr8(const char *str);
Attr* pAttr9(FILE *inp);
Attr* pAttr9(const char *str);
Attr* pAttr10(FILE *inp);
Attr* pAttr10(const char *str);
Attr* pAttr11(FILE *inp);
Attr* pAttr11(const char *str);
Attr* pAttr12(FILE *inp);
Attr* pAttr12(const char *str);
Attr* pAttr13(FILE *inp);
Attr* pAttr13(const char *str);
Attr* pAttr14(FILE *inp);
Attr* pAttr14(const char *str);
BasicAttribute* pBasicAttribute(FILE *inp);
BasicAttribute* pBasicAttribute(const char *str);
AnnotatedStmt* pAnnotatedStmt(FILE *inp);
AnnotatedStmt* pAnnotatedStmt(const char *str);
ElsePart* pElsePart(FILE *inp);
ElsePart* pElsePart(const char *str);
OptExpression* pOptExpression(FILE *inp);
OptExpression* pOptExpression(const char *str);
Expression* pExpression(FILE *inp);
Expression* pExpression(const char *str);
ListExpression* pListExpression(FILE *inp);
ListExpression* pListExpression(const char *str);
AssignExpr* pAssignExpr(FILE *inp);
AssignExpr* pAssignExpr(const char *str);
AssignExpr* pAssignExpr1(FILE *inp);
AssignExpr* pAssignExpr1(const char *str);
AssignExpr* pAssignExpr2(FILE *inp);
AssignExpr* pAssignExpr2(const char *str);
AssignExpr* pAssignExpr3(FILE *inp);
AssignExpr* pAssignExpr3(const char *str);
AssignExpr* pAssignExpr4(FILE *inp);
AssignExpr* pAssignExpr4(const char *str);
AssignExpr* pAssignExpr5(FILE *inp);
AssignExpr* pAssignExpr5(const char *str);
AssignExpr* pAssignExpr6(FILE *inp);
AssignExpr* pAssignExpr6(const char *str);
AssignExpr* pAssignExpr7(FILE *inp);
AssignExpr* pAssignExpr7(const char *str);
AssignExpr* pAssignExpr8(FILE *inp);
AssignExpr* pAssignExpr8(const char *str);
AssignExpr* pAssignExpr9(FILE *inp);
AssignExpr* pAssignExpr9(const char *str);
AssignExpr* pAssignExpr10(FILE *inp);
AssignExpr* pAssignExpr10(const char *str);
AssignExpr* pAssignExpr11(FILE *inp);
AssignExpr* pAssignExpr11(const char *str);
AssignExpr* pAssignExpr12(FILE *inp);
AssignExpr* pAssignExpr12(const char *str);
AssignExpr* pAssignExpr13(FILE *inp);
AssignExpr* pAssignExpr13(const char *str);
AssignExpr* pAssignExpr14(FILE *inp);
AssignExpr* pAssignExpr14(const char *str);
AssignExpr* pAssignExpr15(FILE *inp);
AssignExpr* pAssignExpr15(const char *str);
Constant* pConstant(FILE *inp);
Constant* pConstant(const char *str);
TypeName* pTypeName(FILE *inp);
TypeName* pTypeName(const char *str);
ACSLProgram* pACSLProgram(FILE *inp);
ACSLProgram* pACSLProgram(const char *str);
Annot* pAnnot(FILE *inp);
Annot* pAnnot(const char *str);
Code_Annot* pCode_Annot(FILE *inp);
Code_Annot* pCode_Annot(const char *str);
Contract* pContract(FILE *inp);
Contract* pContract(const char *str);
Requires* pRequires(FILE *inp);
Requires* pRequires(const char *str);
NERequires* pNERequires(FILE *inp);
NERequires* pNERequires(const char *str);
Terminates* pTerminates(FILE *inp);
Terminates* pTerminates(const char *str);
Decreases* pDecreases(FILE *inp);
Decreases* pDecreases(const char *str);
SimpleClauses* pSimpleClauses(FILE *inp);
SimpleClauses* pSimpleClauses(const char *str);
NESimpleClauses* pNESimpleClauses(FILE *inp);
NESimpleClauses* pNESimpleClauses(const char *str);
Assigns* pAssigns(FILE *inp);
Assigns* pAssigns(const char *str);
Zones* pZones(FILE *inp);
Zones* pZones(const char *str);
Behaviors* pBehaviors(FILE *inp);
Behaviors* pBehaviors(const char *str);
CompleteOrDisjoint* pCompleteOrDisjoint(FILE *inp);
CompleteOrDisjoint* pCompleteOrDisjoint(const char *str);
Lexpr* pLexpr(FILE *inp);
Lexpr* pLexpr(const char *str);
ListLexpr* pListLexpr(FILE *inp);
ListLexpr* pListLexpr(const char *str);
Lexpr* pLexpr1(FILE *inp);
Lexpr* pLexpr1(const char *str);
LexprRelInner* pLexprRelInner(FILE *inp);
LexprRelInner* pLexprRelInner(const char *str);
ListLexprRelInner* pListLexprRelInner(FILE *inp);
ListLexprRelInner* pListLexprRelInner(const char *str);
Relation* pRelation(FILE *inp);
Relation* pRelation(const char *str);
Lexpr* pLexpr2(FILE *inp);
Lexpr* pLexpr2(const char *str);
LexprBinder* pLexprBinder(FILE *inp);
LexprBinder* pLexprBinder(const char *str);
Binders* pBinders(FILE *inp);
Binders* pBinders(const char *str);
TypeSpecOFTYPENAME* pTypeSpecOFTYPENAME(FILE *inp);
TypeSpecOFTYPENAME* pTypeSpecOFTYPENAME(const char *str);
BindersReentrance* pBindersReentrance(FILE *inp);
BindersReentrance* pBindersReentrance(const char *str);
ListBindersReentrance* pListBindersReentrance(FILE *inp);
ListBindersReentrance* pListBindersReentrance(const char *str);
VarSpec* pVarSpec(FILE *inp);
VarSpec* pVarSpec(const char *str);
Stars* pStars(FILE *inp);
Stars* pStars(const char *str);
ListStars* pListStars(FILE *inp);
ListStars* pListStars(const char *str);
VarSpec* pVarSpec1(FILE *inp);
VarSpec* pVarSpec1(const char *str);
ArraySize* pArraySize(FILE *inp);
ArraySize* pArraySize(const char *str);
Lexpr* pLexpr3(FILE *inp);
Lexpr* pLexpr3(const char *str);
OptLabel* pOptLabel1(FILE *inp);
OptLabel* pOptLabel1(const char *str);
OptLabel* pOptLabel2(FILE *inp);
OptLabel* pOptLabel2(const char *str);
OptLabelList* pOptLabelList(FILE *inp);
OptLabelList* pOptLabelList(const char *str);
LabelName* pLabelName(FILE *inp);
LabelName* pLabelName(const char *str);
ListLabelName* pListLabelName(FILE *inp);
ListLabelName* pListLabelName(const char *str);
Range* pRange(FILE *inp);
Range* pRange(const char *str);
LexprOption* pLexprOption(FILE *inp);
LexprOption* pLexprOption(const char *str);
AnyIdentifier* pAnyIdentifier(FILE *inp);
AnyIdentifier* pAnyIdentifier(const char *str);
PostCond* pPostCond(FILE *inp);
PostCond* pPostCond(const char *str);
FullIdentifier* pFullIdentifier(FILE *inp);
FullIdentifier* pFullIdentifier(const char *str);
ListFullIdentifier* pListFullIdentifier(FILE *inp);
ListFullIdentifier* pListFullIdentifier(const char *str);
Identifier* pIdentifier(FILE *inp);
Identifier* pIdentifier(const char *str);
TypeSpecSimple* pTypeSpecSimple(FILE *inp);
TypeSpecSimple* pTypeSpecSimple(const char *str);
LogicPTreeAnnot* pLogicPTreeAnnot(FILE *inp);
LogicPTreeAnnot* pLogicPTreeAnnot(const char *str);
Annotation* pAnnotation(FILE *inp);
Annotation* pAnnotation(const char *str);
LoopAnnotStack* pLoopAnnotStack(FILE *inp);
LoopAnnotStack* pLoopAnnotStack(const char *str);
LoopAnnotOpt* pLoopAnnotOpt(FILE *inp);
LoopAnnotOpt* pLoopAnnotOpt(const char *str);
LoopInvariant* pLoopInvariant(FILE *inp);
LoopInvariant* pLoopInvariant(const char *str);
LoopVariant* pLoopVariant(FILE *inp);
LoopVariant* pLoopVariant(const char *str);
LoopEffects* pLoopEffects(FILE *inp);
LoopEffects* pLoopEffects(const char *str);
Variant* pVariant(FILE *inp);
Variant* pVariant(const char *str);
}

#endif
