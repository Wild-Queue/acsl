/* File generated by the BNF Converter (bnfc 2.9.4.1). */

/*** Visitor Design Pattern Skeleton. ***/
/* This implements the common visitor design pattern.
   Note that this method uses Visitor-traversal of lists, so
   List->accept() does NOT traverse the list. This allows different
   algorithms to use context information differently. */

#include "Skeleton.H"


namespace acsl
{
void Skeleton::visitProgram(Program *t) {} //abstract class
void Skeleton::visitGlobals(Globals *t) {} //abstract class
void Skeleton::visitGlobal(Global *t) {} //abstract class
void Skeleton::visitFunctionDef(FunctionDef *t) {} //abstract class
void Skeleton::visitFunctionDefStart(FunctionDefStart *t) {} //abstract class
void Skeleton::visitDeclSpecList(DeclSpecList *t) {} //abstract class
void Skeleton::visitDeclSpecListNoNamed(DeclSpecListNoNamed *t) {} //abstract class
void Skeleton::visitTypeSpec(TypeSpec *t) {} //abstract class
void Skeleton::visitDeclarator(Declarator *t) {} //abstract class
void Skeleton::visitPointerOpt(PointerOpt *t) {} //abstract class
void Skeleton::visitDirectDecl(DirectDecl *t) {} //abstract class
void Skeleton::visitAttributesWithAsm(AttributesWithAsm *t) {} //abstract class
void Skeleton::visitRestParList(RestParList *t) {} //abstract class
void Skeleton::visitParameterDecl(ParameterDecl *t) {} //abstract class
void Skeleton::visitGhostParameterOpt(GhostParameterOpt *t) {} //abstract class
void Skeleton::visitIdOrTypename(IdOrTypename *t) {} //abstract class
void Skeleton::visitIdOrTypenameAsId(IdOrTypenameAsId *t) {} //abstract class
void Skeleton::visitDeclaration(Declaration *t) {} //abstract class
void Skeleton::visitDeclAndInitDeclAttrList(DeclAndInitDeclAttrList *t) {} //abstract class
void Skeleton::visitInitDeclaratorAttr(InitDeclaratorAttr *t) {} //abstract class
void Skeleton::visitInitDeclarator(InitDeclarator *t) {} //abstract class
void Skeleton::visitStructDeclList(StructDeclList *t) {} //abstract class
void Skeleton::visitFieldDecl(FieldDecl *t) {} //abstract class
void Skeleton::visitAttribute(Attribute *t) {} //abstract class
void Skeleton::visitBlock(Block *t) {} //abstract class
void Skeleton::visitBlockAttrs(BlockAttrs *t) {} //abstract class
void Skeleton::visitBlockElement(BlockElement *t) {} //abstract class
void Skeleton::visitStatement(Statement *t) {} //abstract class
void Skeleton::visitForClause(ForClause *t) {} //abstract class
void Skeleton::visitAttr(Attr *t) {} //abstract class
void Skeleton::visitBasicAttribute(BasicAttribute *t) {} //abstract class
void Skeleton::visitAnnotatedStmt(AnnotatedStmt *t) {} //abstract class
void Skeleton::visitElsePart(ElsePart *t) {} //abstract class
void Skeleton::visitOptExpression(OptExpression *t) {} //abstract class
void Skeleton::visitExpression(Expression *t) {} //abstract class
void Skeleton::visitAssignExpr(AssignExpr *t) {} //abstract class
void Skeleton::visitConstant(Constant *t) {} //abstract class
void Skeleton::visitTypeName(TypeName *t) {} //abstract class
void Skeleton::visitACSLProgram(ACSLProgram *t) {} //abstract class
void Skeleton::visitAnnot(Annot *t) {} //abstract class
void Skeleton::visitCode_Annot(Code_Annot *t) {} //abstract class
void Skeleton::visitContract(Contract *t) {} //abstract class
void Skeleton::visitRequires(Requires *t) {} //abstract class
void Skeleton::visitNERequires(NERequires *t) {} //abstract class
void Skeleton::visitTerminates(Terminates *t) {} //abstract class
void Skeleton::visitDecreases(Decreases *t) {} //abstract class
void Skeleton::visitSimpleClauses(SimpleClauses *t) {} //abstract class
void Skeleton::visitNESimpleClauses(NESimpleClauses *t) {} //abstract class
void Skeleton::visitAssigns(Assigns *t) {} //abstract class
void Skeleton::visitZones(Zones *t) {} //abstract class
void Skeleton::visitBehaviors(Behaviors *t) {} //abstract class
void Skeleton::visitCompleteOrDisjoint(CompleteOrDisjoint *t) {} //abstract class
void Skeleton::visitLexpr(Lexpr *t) {} //abstract class
void Skeleton::visitLexprRelInner(LexprRelInner *t) {} //abstract class
void Skeleton::visitRelation(Relation *t) {} //abstract class
void Skeleton::visitLexprBinder(LexprBinder *t) {} //abstract class
void Skeleton::visitBinders(Binders *t) {} //abstract class
void Skeleton::visitTypeSpecOFTYPENAME(TypeSpecOFTYPENAME *t) {} //abstract class
void Skeleton::visitBindersReentrance(BindersReentrance *t) {} //abstract class
void Skeleton::visitVarSpec(VarSpec *t) {} //abstract class
void Skeleton::visitStars(Stars *t) {} //abstract class
void Skeleton::visitArraySize(ArraySize *t) {} //abstract class
void Skeleton::visitOptLabel(OptLabel *t) {} //abstract class
void Skeleton::visitOptLabelList(OptLabelList *t) {} //abstract class
void Skeleton::visitLabelName(LabelName *t) {} //abstract class
void Skeleton::visitRange(Range *t) {} //abstract class
void Skeleton::visitLexprOption(LexprOption *t) {} //abstract class
void Skeleton::visitAnyIdentifier(AnyIdentifier *t) {} //abstract class
void Skeleton::visitPostCond(PostCond *t) {} //abstract class
void Skeleton::visitFullIdentifier(FullIdentifier *t) {} //abstract class
void Skeleton::visitIdentifier(Identifier *t) {} //abstract class
void Skeleton::visitTypeSpecSimple(TypeSpecSimple *t) {} //abstract class
void Skeleton::visitLogicPTreeAnnot(LogicPTreeAnnot *t) {} //abstract class
void Skeleton::visitAnnotation(Annotation *t) {} //abstract class
void Skeleton::visitLoopAnnotStack(LoopAnnotStack *t) {} //abstract class
void Skeleton::visitLoopAnnotOpt(LoopAnnotOpt *t) {} //abstract class
void Skeleton::visitLoopInvariant(LoopInvariant *t) {} //abstract class
void Skeleton::visitLoopVariant(LoopVariant *t) {} //abstract class
void Skeleton::visitLoopEffects(LoopEffects *t) {} //abstract class
void Skeleton::visitVariant(Variant *t) {} //abstract class

void Skeleton::visitAProgram(AProgram *a_program)
{
  /* Code For AProgram Goes Here */

  if (a_program->globals_) a_program->globals_->accept(this);

}

void Skeleton::visitNoGlobals(NoGlobals *no_globals)
{
  /* Code For NoGlobals Goes Here */


}

void Skeleton::visitSimpleGlobals(SimpleGlobals *simple_globals)
{
  /* Code For SimpleGlobals Goes Here */

  if (simple_globals->global_) simple_globals->global_->accept(this);
  if (simple_globals->globals_) simple_globals->globals_->accept(this);

}

void Skeleton::visitSemiColonGlobals(SemiColonGlobals *semi_colon_globals)
{
  /* Code For SemiColonGlobals Goes Here */

  if (semi_colon_globals->globals_) semi_colon_globals->globals_->accept(this);

}

void Skeleton::visitGlobalsFunctionDef(GlobalsFunctionDef *globals_function_def)
{
  /* Code For GlobalsFunctionDef Goes Here */

  if (globals_function_def->functiondef_) globals_function_def->functiondef_->accept(this);

}

void Skeleton::visitGlobalsDeclataion(GlobalsDeclataion *globals_declataion)
{
  /* Code For GlobalsDeclataion Goes Here */

  if (globals_declataion->declaration_) globals_declataion->declaration_->accept(this);

}

void Skeleton::visitSimpleFunctionDef(SimpleFunctionDef *simple_function_def)
{
  /* Code For SimpleFunctionDef Goes Here */

  if (simple_function_def->functiondefstart_) simple_function_def->functiondefstart_->accept(this);
  if (simple_function_def->block_) simple_function_def->block_->accept(this);

}

void Skeleton::visitFunctionDefSpec(FunctionDefSpec *function_def_spec)
{
  /* Code For FunctionDefSpec Goes Here */

  if (function_def_spec->acslprogram_) function_def_spec->acslprogram_->accept(this);
  if (function_def_spec->functiondefstart_) function_def_spec->functiondefstart_->accept(this);
  if (function_def_spec->block_) function_def_spec->block_->accept(this);

}

void Skeleton::visitFunctionDefStartDeclarator(FunctionDefStartDeclarator *function_def_start_declarator)
{
  /* Code For FunctionDefStartDeclarator Goes Here */

  if (function_def_start_declarator->declspeclist_) function_def_start_declarator->declspeclist_->accept(this);
  if (function_def_start_declarator->declarator_) function_def_start_declarator->declarator_->accept(this);

}

void Skeleton::visitDeclSpecTypeSpec(DeclSpecTypeSpec *decl_spec_type_spec)
{
  /* Code For DeclSpecTypeSpec Goes Here */

  if (decl_spec_type_spec->typespec_) decl_spec_type_spec->typespec_->accept(this);

}

void Skeleton::visitDeclSpecTypeSpecNext(DeclSpecTypeSpecNext *decl_spec_type_spec_next)
{
  /* Code For DeclSpecTypeSpecNext Goes Here */

  if (decl_spec_type_spec_next->typespec_) decl_spec_type_spec_next->typespec_->accept(this);
  if (decl_spec_type_spec_next->declspeclistnonamed_) decl_spec_type_spec_next->declspeclistnonamed_->accept(this);

}

void Skeleton::visitDeclSpecNoNamedTypeSpec(DeclSpecNoNamedTypeSpec *decl_spec_no_named_type_spec)
{
  /* Code For DeclSpecNoNamedTypeSpec Goes Here */

  if (decl_spec_no_named_type_spec->typespec_) decl_spec_no_named_type_spec->typespec_->accept(this);

}

void Skeleton::visitDeclSpecNoNamedTypeSpecNext(DeclSpecNoNamedTypeSpecNext *decl_spec_no_named_type_spec_next)
{
  /* Code For DeclSpecNoNamedTypeSpecNext Goes Here */

  if (decl_spec_no_named_type_spec_next->typespec_) decl_spec_no_named_type_spec_next->typespec_->accept(this);
  if (decl_spec_no_named_type_spec_next->declspeclistnonamed_) decl_spec_no_named_type_spec_next->declspeclistnonamed_->accept(this);

}

void Skeleton::visitTypeSpecVoidKeyWord(TypeSpecVoidKeyWord *type_spec_void_key_word)
{
  /* Code For TypeSpecVoidKeyWord Goes Here */


}

void Skeleton::visitTypeSpecCharKeyWord(TypeSpecCharKeyWord *type_spec_char_key_word)
{
  /* Code For TypeSpecCharKeyWord Goes Here */


}

void Skeleton::visitTypeSpecBoolKeyWord(TypeSpecBoolKeyWord *type_spec_bool_key_word)
{
  /* Code For TypeSpecBoolKeyWord Goes Here */


}

void Skeleton::visitTypeSpecShortKeyWord(TypeSpecShortKeyWord *type_spec_short_key_word)
{
  /* Code For TypeSpecShortKeyWord Goes Here */


}

void Skeleton::visitTypeSpecInt32KeyWord(TypeSpecInt32KeyWord *type_spec_int_key_word)
{
  /* Code For TypeSpecInt32KeyWord Goes Here */


}

void Skeleton::visitTypeSpecIntKeyWord(TypeSpecIntKeyWord *type_spec_int_key_word)
{
  /* Code For TypeSpecIntKeyWord Goes Here */


}

void Skeleton::visitTypeSpecSizeTKeyWord(TypeSpecSizeTKeyWord *type_spec_size_t_key_word)
{
  /* Code For TypeSpecSizeTKeyWord Goes Here */


}

void Skeleton::visitTypeSpecLongKeyWord(TypeSpecLongKeyWord *type_spec_long_key_word)
{
  /* Code For TypeSpecLongKeyWord Goes Here */


}

void Skeleton::visitTypeSpecInt64KeyWord(TypeSpecInt64KeyWord *type_spec_int_key_word)
{
  /* Code For TypeSpecInt64KeyWord Goes Here */


}

void Skeleton::visitTypeSpecFloatKeyWord(TypeSpecFloatKeyWord *type_spec_float_key_word)
{
  /* Code For TypeSpecFloatKeyWord Goes Here */


}

void Skeleton::visitTypeSpecDoubleKeyWord(TypeSpecDoubleKeyWord *type_spec_double_key_word)
{
  /* Code For TypeSpecDoubleKeyWord Goes Here */


}

void Skeleton::visitTypeSpecSignedKeyWord(TypeSpecSignedKeyWord *type_spec_signed_key_word)
{
  /* Code For TypeSpecSignedKeyWord Goes Here */

  visitSIGNED(type_spec_signed_key_word->signed_);

}

void Skeleton::visitTypeSpecUnsignedKeyWord(TypeSpecUnsignedKeyWord *type_spec_unsigned_key_word)
{
  /* Code For TypeSpecUnsignedKeyWord Goes Here */


}

void Skeleton::visitStructId(StructId *struct_id)
{
  /* Code For StructId Goes Here */

  if (struct_id->idortypename_) struct_id->idortypename_->accept(this);

}

void Skeleton::visitStructIdBraces(StructIdBraces *struct_id_braces)
{
  /* Code For StructIdBraces Goes Here */

  if (struct_id_braces->idortypename_) struct_id_braces->idortypename_->accept(this);
  visitLBRACE(struct_id_braces->lbrace_);
  if (struct_id_braces->structdecllist_) struct_id_braces->structdecllist_->accept(this);
  visitRBRACE(struct_id_braces->rbrace_);

}

void Skeleton::visitStructBraces(StructBraces *struct_braces)
{
  /* Code For StructBraces Goes Here */

  visitLBRACE(struct_braces->lbrace_);
  if (struct_braces->structdecllist_) struct_braces->structdecllist_->accept(this);
  visitRBRACE(struct_braces->rbrace_);

}

void Skeleton::visitADeclarator(ADeclarator *a_declarator)
{
  /* Code For ADeclarator Goes Here */

  if (a_declarator->pointeropt_) a_declarator->pointeropt_->accept(this);
  if (a_declarator->directdecl_) a_declarator->directdecl_->accept(this);
  if (a_declarator->attributeswithasm_) a_declarator->attributeswithasm_->accept(this);

}

void Skeleton::visitNoPointer(NoPointer *no_pointer)
{
  /* Code For NoPointer Goes Here */


}

void Skeleton::visitSomePointer(SomePointer *some_pointer)
{
  /* Code For SomePointer Goes Here */

  if (some_pointer->listattribute_) some_pointer->listattribute_->accept(this);
  if (some_pointer->pointeropt_) some_pointer->pointeropt_->accept(this);

}

void Skeleton::visitDirectDeclIdTypename(DirectDeclIdTypename *direct_decl_id_typename)
{
  /* Code For DirectDeclIdTypename Goes Here */

  if (direct_decl_id_typename->idortypename_) direct_decl_id_typename->idortypename_->accept(this);

}

void Skeleton::visitDirectDeclGhostParam(DirectDeclGhostParam *direct_decl_ghost_param)
{
  /* Code For DirectDeclGhostParam Goes Here */

  if (direct_decl_ghost_param->directdecl_) direct_decl_ghost_param->directdecl_->accept(this);
  if (direct_decl_ghost_param->ghostparameteropt_) direct_decl_ghost_param->ghostparameteropt_->accept(this);

}

void Skeleton::visitDirectDeclGhostRestParParam(DirectDeclGhostRestParParam *direct_decl_ghost_rest_par_param)
{
  /* Code For DirectDeclGhostRestParParam Goes Here */

  if (direct_decl_ghost_rest_par_param->directdecl_) direct_decl_ghost_rest_par_param->directdecl_->accept(this);
  if (direct_decl_ghost_rest_par_param->restparlist_) direct_decl_ghost_rest_par_param->restparlist_->accept(this);
  if (direct_decl_ghost_rest_par_param->ghostparameteropt_) direct_decl_ghost_rest_par_param->ghostparameteropt_->accept(this);

}

void Skeleton::visitEmptyAttrWithASM(EmptyAttrWithASM *empty_attr_with_asm)
{
  /* Code For EmptyAttrWithASM Goes Here */


}

void Skeleton::visitSimpleParameterDecl(SimpleParameterDecl *simple_parameter_decl)
{
  /* Code For SimpleParameterDecl Goes Here */

  if (simple_parameter_decl->listparameterdecl_) simple_parameter_decl->listparameterdecl_->accept(this);

}

void Skeleton::visitParameterDeclSpecDeclarator(ParameterDeclSpecDeclarator *parameter_decl_spec_declarator)
{
  /* Code For ParameterDeclSpecDeclarator Goes Here */

  if (parameter_decl_spec_declarator->declspeclist_) parameter_decl_spec_declarator->declspeclist_->accept(this);
  if (parameter_decl_spec_declarator->declarator_) parameter_decl_spec_declarator->declarator_->accept(this);

}

void Skeleton::visitParameterDeclSpec(ParameterDeclSpec *parameter_decl_spec)
{
  /* Code For ParameterDeclSpec Goes Here */

  if (parameter_decl_spec->declspeclist_) parameter_decl_spec->declspeclist_->accept(this);

}

void Skeleton::visitParameterDeclPar(ParameterDeclPar *parameter_decl_par)
{
  /* Code For ParameterDeclPar Goes Here */

  if (parameter_decl_par->parameterdecl_) parameter_decl_par->parameterdecl_->accept(this);

}

void Skeleton::visitNoGhostParameter(NoGhostParameter *no_ghost_parameter)
{
  /* Code For NoGhostParameter Goes Here */


}

void Skeleton::visitIdTypename(IdTypename *id_typename)
{
  /* Code For IdTypename Goes Here */

  if (id_typename->idortypenameasid_) id_typename->idortypenameasid_->accept(this);

}

void Skeleton::visitIdOrTypenameAsIdIdentifier(IdOrTypenameAsIdIdentifier *id_or_typename_as_id_identifier)
{
  /* Code For IdOrTypenameAsIdIdentifier Goes Here */

  visitIdent(id_or_typename_as_id_identifier->ident_);

}

void Skeleton::visitDeclSpecInitDecl(DeclSpecInitDecl *decl_spec_init_decl)
{
  /* Code For DeclSpecInitDecl Goes Here */

  if (decl_spec_init_decl->declspeclist_) decl_spec_init_decl->declspeclist_->accept(this);
  if (decl_spec_init_decl->declandinitdeclattrlist_) decl_spec_init_decl->declandinitdeclattrlist_->accept(this);

}

void Skeleton::visitDeclSpec(DeclSpec *decl_spec)
{
  /* Code For DeclSpec Goes Here */

  if (decl_spec->declspeclist_) decl_spec->declspeclist_->accept(this);

}

void Skeleton::visitSpecDeclSpecInitDecl(SpecDeclSpecInitDecl *spec_decl_spec_init_decl)
{
  /* Code For SpecDeclSpecInitDecl Goes Here */

  if (spec_decl_spec_init_decl->acslprogram_) spec_decl_spec_init_decl->acslprogram_->accept(this);
  if (spec_decl_spec_init_decl->declspeclist_) spec_decl_spec_init_decl->declspeclist_->accept(this);
  if (spec_decl_spec_init_decl->declandinitdeclattrlist_) spec_decl_spec_init_decl->declandinitdeclattrlist_->accept(this);

}

void Skeleton::visitSpecDeclSpec(SpecDeclSpec *spec_decl_spec)
{
  /* Code For SpecDeclSpec Goes Here */

  if (spec_decl_spec->acslprogram_) spec_decl_spec->acslprogram_->accept(this);
  if (spec_decl_spec->declspeclist_) spec_decl_spec->declspeclist_->accept(this);

}

void Skeleton::visitInitDeclaration(InitDeclaration *init_declaration)
{
  /* Code For InitDeclaration Goes Here */

  if (init_declaration->initdeclarator_) init_declaration->initdeclarator_->accept(this);

}

void Skeleton::visitInitDeclarationWithAttr(InitDeclarationWithAttr *init_declaration_with_attr)
{
  /* Code For InitDeclarationWithAttr Goes Here */

  if (init_declaration_with_attr->initdeclarator_) init_declaration_with_attr->initdeclarator_->accept(this);
  if (init_declaration_with_attr->listinitdeclaratorattr_) init_declaration_with_attr->listinitdeclaratorattr_->accept(this);

}

void Skeleton::visitInitDeclaratorAttribute(InitDeclaratorAttribute *init_declarator_attribute)
{
  /* Code For InitDeclaratorAttribute Goes Here */

  if (init_declarator_attribute->initdeclarator_) init_declarator_attribute->initdeclarator_->accept(this);

}

void Skeleton::visitSimpleInitDeclarator(SimpleInitDeclarator *simple_init_declarator)
{
  /* Code For SimpleInitDeclarator Goes Here */

  if (simple_init_declarator->declarator_) simple_init_declarator->declarator_->accept(this);

}

void Skeleton::visitEmptyStructDecl(EmptyStructDecl *empty_struct_decl)
{
  /* Code For EmptyStructDecl Goes Here */


}

void Skeleton::visitDeclSpecStructDecl(DeclSpecStructDecl *decl_spec_struct_decl)
{
  /* Code For DeclSpecStructDecl Goes Here */

  if (decl_spec_struct_decl->declspeclist_) decl_spec_struct_decl->declspeclist_->accept(this);
  if (decl_spec_struct_decl->structdecllist_) decl_spec_struct_decl->structdecllist_->accept(this);

}

void Skeleton::visitSemicolonStructDecl(SemicolonStructDecl *semicolon_struct_decl)
{
  /* Code For SemicolonStructDecl Goes Here */

  if (semicolon_struct_decl->structdecllist_) semicolon_struct_decl->structdecllist_->accept(this);

}

void Skeleton::visitSpecFieldDeclStructDecl(SpecFieldDeclStructDecl *spec_field_decl_struct_decl)
{
  /* Code For SpecFieldDeclStructDecl Goes Here */

  if (spec_field_decl_struct_decl->declspeclist_) spec_field_decl_struct_decl->declspeclist_->accept(this);
  if (spec_field_decl_struct_decl->listfielddecl_) spec_field_decl_struct_decl->listfielddecl_->accept(this);
  if (spec_field_decl_struct_decl->structdecllist_) spec_field_decl_struct_decl->structdecllist_->accept(this);

}

void Skeleton::visitFieldDeclDeclarator(FieldDeclDeclarator *field_decl_declarator)
{
  /* Code For FieldDeclDeclarator Goes Here */

  if (field_decl_declarator->declarator_) field_decl_declarator->declarator_->accept(this);

}

void Skeleton::visitAttributeConst(AttributeConst *attribute_const)
{
  /* Code For AttributeConst Goes Here */

  visitCONST(attribute_const->const_);

}

void Skeleton::visitABlock(ABlock *a_block)
{
  /* Code For ABlock Goes Here */

  visitLBRACE(a_block->lbrace_);
  if (a_block->blockattrs_) a_block->blockattrs_->accept(this);
  if (a_block->listblockelement_) a_block->listblockelement_->accept(this);
  visitRBRACE(a_block->rbrace_);

}

void Skeleton::visitNoBlockAttrs(NoBlockAttrs *no_block_attrs)
{
  /* Code For NoBlockAttrs Goes Here */


}

void Skeleton::visitSomeBlockAttrs(SomeBlockAttrs *some_block_attrs)
{
  /* Code For SomeBlockAttrs Goes Here */

  visitBLOCKATTRIBUTE(some_block_attrs->blockattribute_);
  if (some_block_attrs->listattr_) some_block_attrs->listattr_->accept(this);

}

void Skeleton::visitDeclarationElement(DeclarationElement *declaration_element)
{
  /* Code For DeclarationElement Goes Here */

  if (declaration_element->declaration_) declaration_element->declaration_->accept(this);

}

void Skeleton::visitStatementElement(StatementElement *statement_element)
{
  /* Code For StatementElement Goes Here */

  if (statement_element->statement_) statement_element->statement_->accept(this);

}

void Skeleton::visitSemicolonStatement(SemicolonStatement *semicolon_statement)
{
  /* Code For SemicolonStatement Goes Here */


}

void Skeleton::visitSpecStatement(SpecStatement *spec_statement)
{
  /* Code For SpecStatement Goes Here */

  if (spec_statement->acslprogram_) spec_statement->acslprogram_->accept(this);
  if (spec_statement->annotatedstmt_) spec_statement->annotatedstmt_->accept(this);

}

void Skeleton::visitExprsStatement(ExprsStatement *exprs_statement)
{
  /* Code For ExprsStatement Goes Here */

  if (exprs_statement->listexpression_) exprs_statement->listexpression_->accept(this);

}

void Skeleton::visitBlockStatement(BlockStatement *block_statement)
{
  /* Code For BlockStatement Goes Here */

  if (block_statement->block_) block_statement->block_->accept(this);

}

void Skeleton::visitIfStatement(IfStatement *if_statement)
{
  /* Code For IfStatement Goes Here */

  if (if_statement->listexpression_) if_statement->listexpression_->accept(this);
  if (if_statement->annotatedstmt_) if_statement->annotatedstmt_->accept(this);
  if (if_statement->elsepart_) if_statement->elsepart_->accept(this);

}

void Skeleton::visitSwitchStatement(SwitchStatement *switch_statement)
{
  /* Code For SwitchStatement Goes Here */

  if (switch_statement->listexpression_) switch_statement->listexpression_->accept(this);
  if (switch_statement->annotatedstmt_) switch_statement->annotatedstmt_->accept(this);

}

void Skeleton::visitWhileStatement(WhileStatement *while_statement)
{
  /* Code For WhileStatement Goes Here */

  if (while_statement->listexpression_) while_statement->listexpression_->accept(this);
  if (while_statement->annotatedstmt_) while_statement->annotatedstmt_->accept(this);

}

void Skeleton::visitForStatement(ForStatement *for_statement)
{
  /* Code For ForStatement Goes Here */

  if (for_statement->forclause_) for_statement->forclause_->accept(this);
  if (for_statement->optexpression_1) for_statement->optexpression_1->accept(this);
  if (for_statement->optexpression_2) for_statement->optexpression_2->accept(this);
  if (for_statement->annotatedstmt_) for_statement->annotatedstmt_->accept(this);

}

void Skeleton::visitCaseStatement(CaseStatement *case_statement)
{
  /* Code For CaseStatement Goes Here */

  if (case_statement->expression_) case_statement->expression_->accept(this);
  if (case_statement->annotatedstmt_) case_statement->annotatedstmt_->accept(this);

}

void Skeleton::visitCaseSliceStatement(CaseSliceStatement *case_slice_statement)
{
  /* Code For CaseSliceStatement Goes Here */

  if (case_slice_statement->expression_1) case_slice_statement->expression_1->accept(this);
  if (case_slice_statement->expression_2) case_slice_statement->expression_2->accept(this);
  if (case_slice_statement->annotatedstmt_) case_slice_statement->annotatedstmt_->accept(this);

}

void Skeleton::visitDefaultStatement(DefaultStatement *default_statement)
{
  /* Code For DefaultStatement Goes Here */

  if (default_statement->annotatedstmt_) default_statement->annotatedstmt_->accept(this);

}

void Skeleton::visitEmptyReturnStatement(EmptyReturnStatement *empty_return_statement)
{
  /* Code For EmptyReturnStatement Goes Here */


}

void Skeleton::visitReturnStatement(ReturnStatement *return_statement)
{
  /* Code For ReturnStatement Goes Here */

  if (return_statement->listexpression_) return_statement->listexpression_->accept(this);

}

void Skeleton::visitBreakStatement(BreakStatement *break_statement)
{
  /* Code For BreakStatement Goes Here */


}

void Skeleton::visitContinueStatement(ContinueStatement *continue_statement)
{
  /* Code For ContinueStatement Goes Here */


}

void Skeleton::visitForClauseExpression(ForClauseExpression *for_clause_expression)
{
  /* Code For ForClauseExpression Goes Here */

  if (for_clause_expression->optexpression_) for_clause_expression->optexpression_->accept(this);

}

void Skeleton::visitForClauseDeclaration(ForClauseDeclaration *for_clause_declaration)
{
  /* Code For ForClauseDeclaration Goes Here */

  if (for_clause_declaration->declaration_) for_clause_declaration->declaration_->accept(this);

}

void Skeleton::visitAnAttr(AnAttr *an_attr)
{
  /* Code For AnAttr Goes Here */

  if (an_attr->attr_1) an_attr->attr_1->accept(this);
  if (an_attr->attr_2) an_attr->attr_2->accept(this);

}

void Skeleton::visitTernaryCond(TernaryCond *ternary_cond)
{
  /* Code For TernaryCond Goes Here */

  if (ternary_cond->attr_1) ternary_cond->attr_1->accept(this);
  if (ternary_cond->attr_2) ternary_cond->attr_2->accept(this);
  if (ternary_cond->attr_3) ternary_cond->attr_3->accept(this);

}

void Skeleton::visitOr(Or *or_)
{
  /* Code For Or Goes Here */

  if (or_->attr_1) or_->attr_1->accept(this);
  if (or_->attr_2) or_->attr_2->accept(this);

}

void Skeleton::visitAnd(And *and_)
{
  /* Code For And Goes Here */

  if (and_->attr_1) and_->attr_1->accept(this);
  if (and_->attr_2) and_->attr_2->accept(this);

}

void Skeleton::visitBitOr(BitOr *bit_or)
{
  /* Code For BitOr Goes Here */

  if (bit_or->attr_1) bit_or->attr_1->accept(this);
  if (bit_or->attr_2) bit_or->attr_2->accept(this);

}

void Skeleton::visitXor(Xor *xor_)
{
  /* Code For Xor Goes Here */

  if (xor_->attr_1) xor_->attr_1->accept(this);
  if (xor_->attr_2) xor_->attr_2->accept(this);

}

void Skeleton::visitBitAnd(BitAnd *bit_and)
{
  /* Code For BitAnd Goes Here */

  if (bit_and->attr_1) bit_and->attr_1->accept(this);
  if (bit_and->attr_2) bit_and->attr_2->accept(this);

}

void Skeleton::visitEqualEqual(EqualEqual *equal_equal)
{
  /* Code For EqualEqual Goes Here */

  if (equal_equal->attr_1) equal_equal->attr_1->accept(this);
  if (equal_equal->attr_2) equal_equal->attr_2->accept(this);

}

void Skeleton::visitNotEqual(NotEqual *not_equal)
{
  /* Code For NotEqual Goes Here */

  if (not_equal->attr_1) not_equal->attr_1->accept(this);
  if (not_equal->attr_2) not_equal->attr_2->accept(this);

}

void Skeleton::visitLess(Less *less)
{
  /* Code For Less Goes Here */

  if (less->attr_1) less->attr_1->accept(this);
  if (less->attr_2) less->attr_2->accept(this);

}

void Skeleton::visitGreater(Greater *greater)
{
  /* Code For Greater Goes Here */

  if (greater->attr_1) greater->attr_1->accept(this);
  if (greater->attr_2) greater->attr_2->accept(this);

}

void Skeleton::visitLessEqual(LessEqual *less_equal)
{
  /* Code For LessEqual Goes Here */

  if (less_equal->attr_1) less_equal->attr_1->accept(this);
  if (less_equal->attr_2) less_equal->attr_2->accept(this);

}

void Skeleton::visitGreaterEqual(GreaterEqual *greater_equal)
{
  /* Code For GreaterEqual Goes Here */

  if (greater_equal->attr_1) greater_equal->attr_1->accept(this);
  if (greater_equal->attr_2) greater_equal->attr_2->accept(this);

}

void Skeleton::visitLeftShiftOp(LeftShiftOp *left_shift_op)
{
  /* Code For LeftShiftOp Goes Here */

  if (left_shift_op->attr_1) left_shift_op->attr_1->accept(this);
  if (left_shift_op->attr_2) left_shift_op->attr_2->accept(this);

}

void Skeleton::visitRightShiftOp(RightShiftOp *right_shift_op)
{
  /* Code For RightShiftOp Goes Here */

  if (right_shift_op->attr_1) right_shift_op->attr_1->accept(this);
  if (right_shift_op->attr_2) right_shift_op->attr_2->accept(this);

}

void Skeleton::visitAddOp(AddOp *add_op)
{
  /* Code For AddOp Goes Here */

  if (add_op->attr_1) add_op->attr_1->accept(this);
  if (add_op->attr_2) add_op->attr_2->accept(this);

}

void Skeleton::visitSubOp(SubOp *sub_op)
{
  /* Code For SubOp Goes Here */

  if (sub_op->attr_1) sub_op->attr_1->accept(this);
  if (sub_op->attr_2) sub_op->attr_2->accept(this);

}

void Skeleton::visitMultOp(MultOp *mult_op)
{
  /* Code For MultOp Goes Here */

  if (mult_op->attr_1) mult_op->attr_1->accept(this);
  if (mult_op->attr_2) mult_op->attr_2->accept(this);

}

void Skeleton::visitDivOp(DivOp *div_op)
{
  /* Code For DivOp Goes Here */

  if (div_op->attr_1) div_op->attr_1->accept(this);
  if (div_op->attr_2) div_op->attr_2->accept(this);

}

void Skeleton::visitModOp(ModOp *mod_op)
{
  /* Code For ModOp Goes Here */

  if (mod_op->attr_1) mod_op->attr_1->accept(this);
  if (mod_op->attr_2) mod_op->attr_2->accept(this);

}

void Skeleton::visitPlusUnaryAttr(PlusUnaryAttr *plus_unary_attr)
{
  /* Code For PlusUnaryAttr Goes Here */

  if (plus_unary_attr->attr_) plus_unary_attr->attr_->accept(this);

}

void Skeleton::visitMinusUnaryAttr(MinusUnaryAttr *minus_unary_attr)
{
  /* Code For MinusUnaryAttr Goes Here */

  if (minus_unary_attr->attr_) minus_unary_attr->attr_->accept(this);

}

void Skeleton::visitMultUnaryAttr(MultUnaryAttr *mult_unary_attr)
{
  /* Code For MultUnaryAttr Goes Here */

  if (mult_unary_attr->attr_) mult_unary_attr->attr_->accept(this);

}

void Skeleton::visitAmpUnaryAttr(AmpUnaryAttr *amp_unary_attr)
{
  /* Code For AmpUnaryAttr Goes Here */

  if (amp_unary_attr->attr_) amp_unary_attr->attr_->accept(this);

}

void Skeleton::visitNotUnaryAttr(NotUnaryAttr *not_unary_attr)
{
  /* Code For NotUnaryAttr Goes Here */

  if (not_unary_attr->attr_) not_unary_attr->attr_->accept(this);

}

void Skeleton::visitTildeUnaryAttr(TildeUnaryAttr *tilde_unary_attr)
{
  /* Code For TildeUnaryAttr Goes Here */

  if (tilde_unary_attr->attr_) tilde_unary_attr->attr_->accept(this);

}

void Skeleton::visitFuncationCall(FuncationCall *funcation_call)
{
  /* Code For FuncationCall Goes Here */

  if (funcation_call->idortypenameasid_) funcation_call->idortypenameasid_->accept(this);
  if (funcation_call->listattr_) funcation_call->listattr_->accept(this);

}

void Skeleton::visitProcedureCall(ProcedureCall *procedure_call)
{
  /* Code For ProcedureCall Goes Here */

  if (procedure_call->idortypenameasid_) procedure_call->idortypenameasid_->accept(this);

}

void Skeleton::visitArrowAttr(ArrowAttr *arrow_attr)
{
  /* Code For ArrowAttr Goes Here */

  if (arrow_attr->attr_) arrow_attr->attr_->accept(this);
  if (arrow_attr->idortypename_) arrow_attr->idortypename_->accept(this);

}

void Skeleton::visitDotAttr(DotAttr *dot_attr)
{
  /* Code For DotAttr Goes Here */

  if (dot_attr->attr_) dot_attr->attr_->accept(this);
  if (dot_attr->idortypename_) dot_attr->idortypename_->accept(this);

}

void Skeleton::visitArrayAttr(ArrayAttr *array_attr)
{
  /* Code For ArrayAttr Goes Here */

  if (array_attr->attr_1) array_attr->attr_1->accept(this);
  visitLBRACKET(array_attr->lbracket_);
  if (array_attr->attr_2) array_attr->attr_2->accept(this);
  visitRBRACKET(array_attr->rbracket_);

}

void Skeleton::visitBasicAttr(BasicAttr *basic_attr)
{
  /* Code For BasicAttr Goes Here */

  if (basic_attr->basicattribute_) basic_attr->basicattribute_->accept(this);

}

void Skeleton::visitBasicAttrConsInt(BasicAttrConsInt *basic_attr_cons_int)
{
  /* Code For BasicAttrConsInt Goes Here */

  visitInteger(basic_attr_cons_int->integer_);

}

void Skeleton::visitBasicAttrConsFloat(BasicAttrConsFloat *basic_attr_cons_float)
{
  /* Code For BasicAttrConsFloat Goes Here */

  visitDouble(basic_attr_cons_float->double_);

}

void Skeleton::visitAnnotatedStatement(AnnotatedStatement *annotated_statement)
{
  /* Code For AnnotatedStatement Goes Here */

  if (annotated_statement->statement_) annotated_statement->statement_->accept(this);

}

void Skeleton::visitNoElsePart(NoElsePart *no_else_part)
{
  /* Code For NoElsePart Goes Here */


}

void Skeleton::visitSimpleElsePart(SimpleElsePart *simple_else_part)
{
  /* Code For SimpleElsePart Goes Here */

  if (simple_else_part->annotatedstmt_) simple_else_part->annotatedstmt_->accept(this);

}

void Skeleton::visitNoExpression(NoExpression *no_expression)
{
  /* Code For NoExpression Goes Here */


}

void Skeleton::visitSomeExpression(SomeExpression *some_expression)
{
  /* Code For SomeExpression Goes Here */

  if (some_expression->listexpression_) some_expression->listexpression_->accept(this);

}

void Skeleton::visitAssignmentExpr(AssignmentExpr *assignment_expr)
{
  /* Code For AssignmentExpr Goes Here */

  if (assignment_expr->assignexpr_) assignment_expr->assignexpr_->accept(this);

}

void Skeleton::visitEqAssignExpr(EqAssignExpr *eq_assign_expr)
{
  /* Code For EqAssignExpr Goes Here */

  if (eq_assign_expr->assignexpr_1) eq_assign_expr->assignexpr_1->accept(this);
  if (eq_assign_expr->assignexpr_2) eq_assign_expr->assignexpr_2->accept(this);

}

void Skeleton::visitPlusEqAssignExpr(PlusEqAssignExpr *plus_eq_assign_expr)
{
  /* Code For PlusEqAssignExpr Goes Here */

  if (plus_eq_assign_expr->assignexpr_1) plus_eq_assign_expr->assignexpr_1->accept(this);
  if (plus_eq_assign_expr->assignexpr_2) plus_eq_assign_expr->assignexpr_2->accept(this);

}

void Skeleton::visitMinusEqAssignExpr(MinusEqAssignExpr *minus_eq_assign_expr)
{
  /* Code For MinusEqAssignExpr Goes Here */

  if (minus_eq_assign_expr->assignexpr_1) minus_eq_assign_expr->assignexpr_1->accept(this);
  if (minus_eq_assign_expr->assignexpr_2) minus_eq_assign_expr->assignexpr_2->accept(this);

}

void Skeleton::visitMultEqAssignExpr(MultEqAssignExpr *mult_eq_assign_expr)
{
  /* Code For MultEqAssignExpr Goes Here */

  if (mult_eq_assign_expr->assignexpr_1) mult_eq_assign_expr->assignexpr_1->accept(this);
  if (mult_eq_assign_expr->assignexpr_2) mult_eq_assign_expr->assignexpr_2->accept(this);

}

void Skeleton::visitDivEqAssignExpr(DivEqAssignExpr *div_eq_assign_expr)
{
  /* Code For DivEqAssignExpr Goes Here */

  if (div_eq_assign_expr->assignexpr_1) div_eq_assign_expr->assignexpr_1->accept(this);
  if (div_eq_assign_expr->assignexpr_2) div_eq_assign_expr->assignexpr_2->accept(this);

}

void Skeleton::visitModEqAssignExpr(ModEqAssignExpr *mod_eq_assign_expr)
{
  /* Code For ModEqAssignExpr Goes Here */

  if (mod_eq_assign_expr->assignexpr_1) mod_eq_assign_expr->assignexpr_1->accept(this);
  if (mod_eq_assign_expr->assignexpr_2) mod_eq_assign_expr->assignexpr_2->accept(this);

}

void Skeleton::visitAndEqAssignExpr(AndEqAssignExpr *and_eq_assign_expr)
{
  /* Code For AndEqAssignExpr Goes Here */

  if (and_eq_assign_expr->assignexpr_1) and_eq_assign_expr->assignexpr_1->accept(this);
  if (and_eq_assign_expr->assignexpr_2) and_eq_assign_expr->assignexpr_2->accept(this);

}

void Skeleton::visitOrEqAssignExpr(OrEqAssignExpr *or_eq_assign_expr)
{
  /* Code For OrEqAssignExpr Goes Here */

  if (or_eq_assign_expr->assignexpr_1) or_eq_assign_expr->assignexpr_1->accept(this);
  if (or_eq_assign_expr->assignexpr_2) or_eq_assign_expr->assignexpr_2->accept(this);

}

void Skeleton::visitXorEqAssignExpr(XorEqAssignExpr *xor_eq_assign_expr)
{
  /* Code For XorEqAssignExpr Goes Here */

  if (xor_eq_assign_expr->assignexpr_1) xor_eq_assign_expr->assignexpr_1->accept(this);
  if (xor_eq_assign_expr->assignexpr_2) xor_eq_assign_expr->assignexpr_2->accept(this);

}

void Skeleton::visitLeftShiftEqAssignExpr(LeftShiftEqAssignExpr *left_shift_eq_assign_expr)
{
  /* Code For LeftShiftEqAssignExpr Goes Here */

  if (left_shift_eq_assign_expr->assignexpr_1) left_shift_eq_assign_expr->assignexpr_1->accept(this);
  if (left_shift_eq_assign_expr->assignexpr_2) left_shift_eq_assign_expr->assignexpr_2->accept(this);

}

void Skeleton::visitRightShiftEqAssignExpr(RightShiftEqAssignExpr *right_shift_eq_assign_expr)
{
  /* Code For RightShiftEqAssignExpr Goes Here */

  if (right_shift_eq_assign_expr->assignexpr_1) right_shift_eq_assign_expr->assignexpr_1->accept(this);
  if (right_shift_eq_assign_expr->assignexpr_2) right_shift_eq_assign_expr->assignexpr_2->accept(this);

}

void Skeleton::visitTernaryCondExpr(TernaryCondExpr *ternary_cond_expr)
{
  /* Code For TernaryCondExpr Goes Here */

  if (ternary_cond_expr->assignexpr_1) ternary_cond_expr->assignexpr_1->accept(this);
  if (ternary_cond_expr->optexpression_) ternary_cond_expr->optexpression_->accept(this);
  if (ternary_cond_expr->assignexpr_2) ternary_cond_expr->assignexpr_2->accept(this);

}

void Skeleton::visitOrExpr(OrExpr *or_expr)
{
  /* Code For OrExpr Goes Here */

  if (or_expr->assignexpr_1) or_expr->assignexpr_1->accept(this);
  if (or_expr->assignexpr_2) or_expr->assignexpr_2->accept(this);

}

void Skeleton::visitAndExpr(AndExpr *and_expr)
{
  /* Code For AndExpr Goes Here */

  if (and_expr->assignexpr_1) and_expr->assignexpr_1->accept(this);
  if (and_expr->assignexpr_2) and_expr->assignexpr_2->accept(this);

}

void Skeleton::visitBitOrExpr(BitOrExpr *bit_or_expr)
{
  /* Code For BitOrExpr Goes Here */

  if (bit_or_expr->assignexpr_1) bit_or_expr->assignexpr_1->accept(this);
  if (bit_or_expr->assignexpr_2) bit_or_expr->assignexpr_2->accept(this);

}

void Skeleton::visitBitXorExpr(BitXorExpr *bit_xor_expr)
{
  /* Code For BitXorExpr Goes Here */

  if (bit_xor_expr->assignexpr_1) bit_xor_expr->assignexpr_1->accept(this);
  if (bit_xor_expr->assignexpr_2) bit_xor_expr->assignexpr_2->accept(this);

}

void Skeleton::visitBitAndExpr(BitAndExpr *bit_and_expr)
{
  /* Code For BitAndExpr Goes Here */

  if (bit_and_expr->assignexpr_1) bit_and_expr->assignexpr_1->accept(this);
  if (bit_and_expr->assignexpr_2) bit_and_expr->assignexpr_2->accept(this);

}

void Skeleton::visitEqExpr(EqExpr *eq_expr)
{
  /* Code For EqExpr Goes Here */

  if (eq_expr->assignexpr_1) eq_expr->assignexpr_1->accept(this);
  if (eq_expr->assignexpr_2) eq_expr->assignexpr_2->accept(this);

}

void Skeleton::visitNotEqExpr(NotEqExpr *not_eq_expr)
{
  /* Code For NotEqExpr Goes Here */

  if (not_eq_expr->assignexpr_1) not_eq_expr->assignexpr_1->accept(this);
  if (not_eq_expr->assignexpr_2) not_eq_expr->assignexpr_2->accept(this);

}

void Skeleton::visitLessExpr(LessExpr *less_expr)
{
  /* Code For LessExpr Goes Here */

  if (less_expr->assignexpr_1) less_expr->assignexpr_1->accept(this);
  if (less_expr->assignexpr_2) less_expr->assignexpr_2->accept(this);

}

void Skeleton::visitGreaterExpr(GreaterExpr *greater_expr)
{
  /* Code For GreaterExpr Goes Here */

  if (greater_expr->assignexpr_1) greater_expr->assignexpr_1->accept(this);
  if (greater_expr->assignexpr_2) greater_expr->assignexpr_2->accept(this);

}

void Skeleton::visitLessEqualExpr(LessEqualExpr *less_equal_expr)
{
  /* Code For LessEqualExpr Goes Here */

  if (less_equal_expr->assignexpr_1) less_equal_expr->assignexpr_1->accept(this);
  if (less_equal_expr->assignexpr_2) less_equal_expr->assignexpr_2->accept(this);

}

void Skeleton::visitGreaterEqualExpr(GreaterEqualExpr *greater_equal_expr)
{
  /* Code For GreaterEqualExpr Goes Here */

  if (greater_equal_expr->assignexpr_1) greater_equal_expr->assignexpr_1->accept(this);
  if (greater_equal_expr->assignexpr_2) greater_equal_expr->assignexpr_2->accept(this);

}

void Skeleton::visitLeftShiftExpr(LeftShiftExpr *left_shift_expr)
{
  /* Code For LeftShiftExpr Goes Here */

  if (left_shift_expr->assignexpr_1) left_shift_expr->assignexpr_1->accept(this);
  if (left_shift_expr->assignexpr_2) left_shift_expr->assignexpr_2->accept(this);

}

void Skeleton::visitRightShiftExpr(RightShiftExpr *right_shift_expr)
{
  /* Code For RightShiftExpr Goes Here */

  if (right_shift_expr->assignexpr_1) right_shift_expr->assignexpr_1->accept(this);
  if (right_shift_expr->assignexpr_2) right_shift_expr->assignexpr_2->accept(this);

}

void Skeleton::visitPlusExpr(PlusExpr *plus_expr)
{
  /* Code For PlusExpr Goes Here */

  if (plus_expr->assignexpr_1) plus_expr->assignexpr_1->accept(this);
  if (plus_expr->assignexpr_2) plus_expr->assignexpr_2->accept(this);

}

void Skeleton::visitMinusExpr(MinusExpr *minus_expr)
{
  /* Code For MinusExpr Goes Here */

  if (minus_expr->assignexpr_1) minus_expr->assignexpr_1->accept(this);
  if (minus_expr->assignexpr_2) minus_expr->assignexpr_2->accept(this);

}

void Skeleton::visitMulsExpr(MulsExpr *muls_expr)
{
  /* Code For MulsExpr Goes Here */

  if (muls_expr->assignexpr_1) muls_expr->assignexpr_1->accept(this);
  if (muls_expr->assignexpr_2) muls_expr->assignexpr_2->accept(this);

}

void Skeleton::visitDivExpr(DivExpr *div_expr)
{
  /* Code For DivExpr Goes Here */

  if (div_expr->assignexpr_1) div_expr->assignexpr_1->accept(this);
  if (div_expr->assignexpr_2) div_expr->assignexpr_2->accept(this);

}

void Skeleton::visitModExpr(ModExpr *mod_expr)
{
  /* Code For ModExpr Goes Here */

  if (mod_expr->assignexpr_1) mod_expr->assignexpr_1->accept(this);
  if (mod_expr->assignexpr_2) mod_expr->assignexpr_2->accept(this);

}

void Skeleton::visitCastExpr(CastExpr *cast_expr)
{
  /* Code For CastExpr Goes Here */

  if (cast_expr->typename_) cast_expr->typename_->accept(this);
  if (cast_expr->assignexpr_) cast_expr->assignexpr_->accept(this);

}

void Skeleton::visitUnaryExprPlusPlus(UnaryExprPlusPlus *unary_expr_plus_plus)
{
  /* Code For UnaryExprPlusPlus Goes Here */

  if (unary_expr_plus_plus->assignexpr_) unary_expr_plus_plus->assignexpr_->accept(this);

}

void Skeleton::visitUnaryExprMinusMinus(UnaryExprMinusMinus *unary_expr_minus_minus)
{
  /* Code For UnaryExprMinusMinus Goes Here */

  if (unary_expr_minus_minus->assignexpr_) unary_expr_minus_minus->assignexpr_->accept(this);

}

void Skeleton::visitUnaryExprPlus(UnaryExprPlus *unary_expr_plus)
{
  /* Code For UnaryExprPlus Goes Here */

  if (unary_expr_plus->assignexpr_) unary_expr_plus->assignexpr_->accept(this);

}

void Skeleton::visitUnaryExprMinus(UnaryExprMinus *unary_expr_minus)
{
  /* Code For UnaryExprMinus Goes Here */

  if (unary_expr_minus->assignexpr_) unary_expr_minus->assignexpr_->accept(this);

}

void Skeleton::visitUnaryExprMult(UnaryExprMult *unary_expr_mult)
{
  /* Code For UnaryExprMult Goes Here */

  if (unary_expr_mult->assignexpr_) unary_expr_mult->assignexpr_->accept(this);

}

void Skeleton::visitUnaryExprAmp(UnaryExprAmp *unary_expr_amp)
{
  /* Code For UnaryExprAmp Goes Here */

  if (unary_expr_amp->assignexpr_) unary_expr_amp->assignexpr_->accept(this);

}

void Skeleton::visitUnaryExprNot(UnaryExprNot *unary_expr_not)
{
  /* Code For UnaryExprNot Goes Here */

  if (unary_expr_not->assignexpr_) unary_expr_not->assignexpr_->accept(this);

}

void Skeleton::visitUnaryExprTilde(UnaryExprTilde *unary_expr_tilde)
{
  /* Code For UnaryExprTilde Goes Here */

  if (unary_expr_tilde->assignexpr_) unary_expr_tilde->assignexpr_->accept(this);

}

void Skeleton::visitUnaryExprAddress(UnaryExprAddress *unary_expr_address)
{
  /* Code For UnaryExprAddress Goes Here */

  if (unary_expr_address->idortypenameasid_) unary_expr_address->idortypenameasid_->accept(this);

}

void Skeleton::visitBracketsPostfixExpression(BracketsPostfixExpression *brackets_postfix_expression)
{
  /* Code For BracketsPostfixExpression Goes Here */

  if (brackets_postfix_expression->assignexpr_) brackets_postfix_expression->assignexpr_->accept(this);
  visitLBRACKET(brackets_postfix_expression->lbracket_);
  if (brackets_postfix_expression->listexpression_) brackets_postfix_expression->listexpression_->accept(this);
  visitRBRACKET(brackets_postfix_expression->rbracket_);

}

void Skeleton::visitDotPostfixExpression(DotPostfixExpression *dot_postfix_expression)
{
  /* Code For DotPostfixExpression Goes Here */

  if (dot_postfix_expression->assignexpr_) dot_postfix_expression->assignexpr_->accept(this);
  if (dot_postfix_expression->idortypename_) dot_postfix_expression->idortypename_->accept(this);

}

void Skeleton::visitArrowPostfixExpression(ArrowPostfixExpression *arrow_postfix_expression)
{
  /* Code For ArrowPostfixExpression Goes Here */

  if (arrow_postfix_expression->assignexpr_) arrow_postfix_expression->assignexpr_->accept(this);
  if (arrow_postfix_expression->idortypename_) arrow_postfix_expression->idortypename_->accept(this);

}

void Skeleton::visitPlusPlusPostfixExpression(PlusPlusPostfixExpression *plus_plus_postfix_expression)
{
  /* Code For PlusPlusPostfixExpression Goes Here */

  if (plus_plus_postfix_expression->assignexpr_) plus_plus_postfix_expression->assignexpr_->accept(this);

}

void Skeleton::visitMinusMinusPostfixExpression(MinusMinusPostfixExpression *minus_minus_postfix_expression)
{
  /* Code For MinusMinusPostfixExpression Goes Here */

  if (minus_minus_postfix_expression->assignexpr_) minus_minus_postfix_expression->assignexpr_->accept(this);

}

void Skeleton::visitIdentifierPrimaryExpression(IdentifierPrimaryExpression *identifier_primary_expression)
{
  /* Code For IdentifierPrimaryExpression Goes Here */

  visitIdent(identifier_primary_expression->ident_);

}

void Skeleton::visitConstantPrimaryExpressin(ConstantPrimaryExpressin *constant_primary_expressin)
{
  /* Code For ConstantPrimaryExpressin Goes Here */

  if (constant_primary_expressin->constant_) constant_primary_expressin->constant_->accept(this);

}

void Skeleton::visitCommaExpressionPrimaryExpressin(CommaExpressionPrimaryExpressin *comma_expression_primary_expressin)
{
  /* Code For CommaExpressionPrimaryExpressin Goes Here */

  if (comma_expression_primary_expressin->listexpression_) comma_expression_primary_expressin->listexpression_->accept(this);

}

void Skeleton::visitBlockPrimaryExpressin(BlockPrimaryExpressin *block_primary_expressin)
{
  /* Code For BlockPrimaryExpressin Goes Here */

  if (block_primary_expressin->block_) block_primary_expressin->block_->accept(this);

}

void Skeleton::visitConstantInt(ConstantInt *constant_int)
{
  /* Code For ConstantInt Goes Here */

  visitInteger(constant_int->integer_);

}

void Skeleton::visitConstantFloat(ConstantFloat *constant_float)
{
  /* Code For ConstantFloat Goes Here */

  visitDouble(constant_float->double_);

}

void Skeleton::visitConstantChar(ConstantChar *constant_char)
{
  /* Code For ConstantChar Goes Here */

  visitChar(constant_char->char_);

}

void Skeleton::visitTypeNameDeclSpecList(TypeNameDeclSpecList *type_name_decl_spec_list)
{
  /* Code For TypeNameDeclSpecList Goes Here */

  if (type_name_decl_spec_list->declspeclist_) type_name_decl_spec_list->declspeclist_->accept(this);

}

void Skeleton::visitAnnotProgram(AnnotProgram *annot_program)
{
  /* Code For AnnotProgram Goes Here */

  if (annot_program->annot_) annot_program->annot_->accept(this);

}

void Skeleton::visitAnnotationProgram(AnnotationProgram *annotation_program)
{
  /* Code For AnnotationProgram Goes Here */

  if (annotation_program->logicptreeannot_) annotation_program->logicptreeannot_->accept(this);

}

void Skeleton::visitCodeAnnot(CodeAnnot *code_annot)
{
  /* Code For CodeAnnot Goes Here */

  if (code_annot->code_annot_) code_annot->code_annot_->accept(this);

}

void Skeleton::visitCodeAnnotContract(CodeAnnotContract *code_annot_contract)
{
  /* Code For CodeAnnotContract Goes Here */

  if (code_annot_contract->contract_) code_annot_contract->contract_->accept(this);

}

void Skeleton::visitSimpleContract(SimpleContract *simple_contract)
{
  /* Code For SimpleContract Goes Here */

  if (simple_contract->requires_) simple_contract->requires_->accept(this);
  if (simple_contract->terminates_) simple_contract->terminates_->accept(this);
  if (simple_contract->decreases_) simple_contract->decreases_->accept(this);
  if (simple_contract->simpleclauses_) simple_contract->simpleclauses_->accept(this);
  if (simple_contract->behaviors_) simple_contract->behaviors_->accept(this);
  if (simple_contract->completeordisjoint_) simple_contract->completeordisjoint_->accept(this);

}

void Skeleton::visitNoRequires(NoRequires *no_requires)
{
  /* Code For NoRequires Goes Here */


}

void Skeleton::visitSomeRequires(SomeRequires *some_requires)
{
  /* Code For SomeRequires Goes Here */

  if (some_requires->nerequires_) some_requires->nerequires_->accept(this);

}

void Skeleton::visitSimpleRequires(SimpleRequires *simple_requires)
{
  /* Code For SimpleRequires Goes Here */

  if (simple_requires->lexpr_) simple_requires->lexpr_->accept(this);
  if (simple_requires->requires_) simple_requires->requires_->accept(this);

}

void Skeleton::visitCheckRequires(CheckRequires *check_requires)
{
  /* Code For CheckRequires Goes Here */

  if (check_requires->lexpr_) check_requires->lexpr_->accept(this);
  if (check_requires->requires_) check_requires->requires_->accept(this);

}

void Skeleton::visitAdimtRequires(AdimtRequires *adimt_requires)
{
  /* Code For AdimtRequires Goes Here */

  if (adimt_requires->lexpr_) adimt_requires->lexpr_->accept(this);
  if (adimt_requires->requires_) adimt_requires->requires_->accept(this);

}

void Skeleton::visitNoTerminate(NoTerminate *no_terminate)
{
  /* Code For NoTerminate Goes Here */


}

void Skeleton::visitNoDecreases(NoDecreases *no_decreases)
{
  /* Code For NoDecreases Goes Here */


}

void Skeleton::visitNoSimpleClauses(NoSimpleClauses *no_simple_clauses)
{
  /* Code For NoSimpleClauses Goes Here */


}

void Skeleton::visitSomeSimpleClauses(SomeSimpleClauses *some_simple_clauses)
{
  /* Code For SomeSimpleClauses Goes Here */

  if (some_simple_clauses->nesimpleclauses_) some_simple_clauses->nesimpleclauses_->accept(this);

}

void Skeleton::visitPostCondSimpleClauses(PostCondSimpleClauses *post_cond_simple_clauses)
{
  /* Code For PostCondSimpleClauses Goes Here */

  if (post_cond_simple_clauses->postcond_) post_cond_simple_clauses->postcond_->accept(this);
  if (post_cond_simple_clauses->lexpr_) post_cond_simple_clauses->lexpr_->accept(this);
  if (post_cond_simple_clauses->simpleclauses_) post_cond_simple_clauses->simpleclauses_->accept(this);

}

void Skeleton::visitAssignsSimpleClauses(AssignsSimpleClauses *assigns_simple_clauses)
{
  /* Code For AssignsSimpleClauses Goes Here */

  if (assigns_simple_clauses->assigns_) assigns_simple_clauses->assigns_->accept(this);
  if (assigns_simple_clauses->simpleclauses_) assigns_simple_clauses->simpleclauses_->accept(this);

}

void Skeleton::visitAssignZone(AssignZone *assign_zone)
{
  /* Code For AssignZone Goes Here */

  if (assign_zone->zones_) assign_zone->zones_->accept(this);

}

void Skeleton::visitAssignZoneFromZone(AssignZoneFromZone *assign_zone_from_zone)
{
  /* Code For AssignZoneFromZone Goes Here */

  if (assign_zone_from_zone->listlexpr_) assign_zone_from_zone->listlexpr_->accept(this);
  if (assign_zone_from_zone->zones_) assign_zone_from_zone->zones_->accept(this);

}

void Skeleton::visitSomeZone(SomeZone *some_zone)
{
  /* Code For SomeZone Goes Here */

  if (some_zone->listlexpr_) some_zone->listlexpr_->accept(this);

}

void Skeleton::visitNoZone(NoZone *no_zone)
{
  /* Code For NoZone Goes Here */


}

void Skeleton::visitNoBehaviors(NoBehaviors *no_behaviors)
{
  /* Code For NoBehaviors Goes Here */


}

void Skeleton::visitNoComplDisj(NoComplDisj *no_compl_disj)
{
  /* Code For NoComplDisj Goes Here */


}

void Skeleton::visitImplLexpr(ImplLexpr *impl_lexpr)
{
  /* Code For ImplLexpr Goes Here */

  if (impl_lexpr->lexpr_1) impl_lexpr->lexpr_1->accept(this);
  if (impl_lexpr->lexpr_2) impl_lexpr->lexpr_2->accept(this);

}

void Skeleton::visitIffLexpr(IffLexpr *iff_lexpr)
{
  /* Code For IffLexpr Goes Here */

  if (iff_lexpr->lexpr_1) iff_lexpr->lexpr_1->accept(this);
  if (iff_lexpr->lexpr_2) iff_lexpr->lexpr_2->accept(this);

}

void Skeleton::visitOrLexpr(OrLexpr *or_lexpr)
{
  /* Code For OrLexpr Goes Here */

  if (or_lexpr->lexpr_1) or_lexpr->lexpr_1->accept(this);
  if (or_lexpr->lexpr_2) or_lexpr->lexpr_2->accept(this);

}

void Skeleton::visitAndLexpr(AndLexpr *and_lexpr)
{
  /* Code For AndLexpr Goes Here */

  if (and_lexpr->lexpr_1) and_lexpr->lexpr_1->accept(this);
  if (and_lexpr->lexpr_2) and_lexpr->lexpr_2->accept(this);

}

void Skeleton::visitHatHatLexpr(HatHatLexpr *hat_hat_lexpr)
{
  /* Code For HatHatLexpr Goes Here */

  if (hat_hat_lexpr->lexpr_1) hat_hat_lexpr->lexpr_1->accept(this);
  if (hat_hat_lexpr->lexpr_2) hat_hat_lexpr->lexpr_2->accept(this);

}

void Skeleton::visitRelationLexpr(RelationLexpr *relation_lexpr)
{
  /* Code For RelationLexpr Goes Here */

  if (relation_lexpr->lexpr_1) relation_lexpr->lexpr_1->accept(this);
  if (relation_lexpr->listlexprrelinner_) relation_lexpr->listlexprrelinner_->accept(this);
  if (relation_lexpr->relation_) relation_lexpr->relation_->accept(this);
  if (relation_lexpr->lexpr_2) relation_lexpr->lexpr_2->accept(this);

}

void Skeleton::visitBinderLexpr(BinderLexpr *binder_lexpr)
{
  /* Code For BinderLexpr Goes Here */

  if (binder_lexpr->lexprbinder_) binder_lexpr->lexprbinder_->accept(this);

}

void Skeleton::visitNotBinderLexpr(NotBinderLexpr *not_binder_lexpr)
{
  /* Code For NotBinderLexpr Goes Here */

  if (not_binder_lexpr->lexprbinder_) not_binder_lexpr->lexprbinder_->accept(this);

}

void Skeleton::visitTrueLexpr(TrueLexpr *true_lexpr)
{
  /* Code For TrueLexpr Goes Here */


}

void Skeleton::visitFalseLexpr(FalseLexpr *false_lexpr)
{
  /* Code For FalseLexpr Goes Here */


}

void Skeleton::visitValidLexpr(ValidLexpr *valid_lexpr)
{
  /* Code For ValidLexpr Goes Here */

  if (valid_lexpr->optlabel_) valid_lexpr->optlabel_->accept(this);
  if (valid_lexpr->lexpr_) valid_lexpr->lexpr_->accept(this);

}

void Skeleton::visitAutomaticLexpr(AutomaticLexpr *automatic_lexpr)
{
  /* Code For AutomaticLexpr Goes Here */


}

void Skeleton::visitDynamicLexpr(DynamicLexpr *dynamic_lexpr)
{
  /* Code For DynamicLexpr Goes Here */


}

void Skeleton::visitRegisterLexpr(RegisterLexpr *register_lexpr)
{
  /* Code For RegisterLexpr Goes Here */


}

void Skeleton::visitStaticLexpr(StaticLexpr *static_lexpr)
{
  /* Code For StaticLexpr Goes Here */


}

void Skeleton::visitUnallocatedLexpr(UnallocatedLexpr *unallocated_lexpr)
{
  /* Code For UnallocatedLexpr Goes Here */


}

void Skeleton::visitNullLexpr(NullLexpr *null_lexpr)
{
  /* Code For NullLexpr Goes Here */


}

void Skeleton::visitLexprIntConst(LexprIntConst *lexpr_int_const)
{
  /* Code For LexprIntConst Goes Here */

  visitInteger(lexpr_int_const->integer_);

}

void Skeleton::visitLexprFloatConst(LexprFloatConst *lexpr_float_const)
{
  /* Code For LexprFloatConst Goes Here */

  visitDouble(lexpr_float_const->double_);

}

void Skeleton::visitLexprStringConst(LexprStringConst *lexpr_string_const)
{
  /* Code For LexprStringConst Goes Here */

  visitString(lexpr_string_const->string_);

}

void Skeleton::visitAddLexpr(AddLexpr *add_lexpr)
{
  /* Code For AddLexpr Goes Here */

  if (add_lexpr->lexpr_1) add_lexpr->lexpr_1->accept(this);
  if (add_lexpr->lexpr_2) add_lexpr->lexpr_2->accept(this);

}

void Skeleton::visitSubtrLexpr(SubtrLexpr *subtr_lexpr)
{
  /* Code For SubtrLexpr Goes Here */

  if (subtr_lexpr->lexpr_1) subtr_lexpr->lexpr_1->accept(this);
  if (subtr_lexpr->lexpr_2) subtr_lexpr->lexpr_2->accept(this);

}

void Skeleton::visitSquaresRangeLexpr(SquaresRangeLexpr *squares_range_lexpr)
{
  /* Code For SquaresRangeLexpr Goes Here */

  if (squares_range_lexpr->lexpr_) squares_range_lexpr->lexpr_->accept(this);
  if (squares_range_lexpr->range_) squares_range_lexpr->range_->accept(this);

}

void Skeleton::visitSquaresLexpr(SquaresLexpr *squares_lexpr)
{
  /* Code For SquaresLexpr Goes Here */

  if (squares_lexpr->lexpr_1) squares_lexpr->lexpr_1->accept(this);
  if (squares_lexpr->lexpr_2) squares_lexpr->lexpr_2->accept(this);

}

void Skeleton::visitSeparatedLexpr(SeparatedLexpr *separated_lexpr)
{
  /* Code For SeparatedLexpr Goes Here */

  if (separated_lexpr->listlexpr_) separated_lexpr->listlexpr_->accept(this);

}

void Skeleton::visitFullIdParenLexpr(FullIdParenLexpr *full_id_paren_lexpr)
{
  /* Code For FullIdParenLexpr Goes Here */

  if (full_id_paren_lexpr->fullidentifier_) full_id_paren_lexpr->fullidentifier_->accept(this);
  if (full_id_paren_lexpr->listlexpr_) full_id_paren_lexpr->listlexpr_->accept(this);

}

void Skeleton::visitFullId(FullId *full_id)
{
  /* Code For FullId Goes Here */

  if (full_id->fullidentifier_) full_id->fullidentifier_->accept(this);

}

void Skeleton::visitPiLexpr(PiLexpr *pi_lexpr)
{
  /* Code For PiLexpr Goes Here */


}

void Skeleton::visitParenRangeLexpr(ParenRangeLexpr *paren_range_lexpr)
{
  /* Code For ParenRangeLexpr Goes Here */

  if (paren_range_lexpr->range_) paren_range_lexpr->range_->accept(this);

}

void Skeleton::visitRelInnerLexpr(RelInnerLexpr *rel_inner_lexpr)
{
  /* Code For RelInnerLexpr Goes Here */

  if (rel_inner_lexpr->relation_) rel_inner_lexpr->relation_->accept(this);
  if (rel_inner_lexpr->lexpr_) rel_inner_lexpr->lexpr_->accept(this);

}

void Skeleton::visitLessRel(LessRel *less_rel)
{
  /* Code For LessRel Goes Here */


}

void Skeleton::visitGreaterRel(GreaterRel *greater_rel)
{
  /* Code For GreaterRel Goes Here */


}

void Skeleton::visitLessEqRel(LessEqRel *less_eq_rel)
{
  /* Code For LessEqRel Goes Here */


}

void Skeleton::visitGreaterEqRel(GreaterEqRel *greater_eq_rel)
{
  /* Code For GreaterEqRel Goes Here */


}

void Skeleton::visitEqRel(EqRel *eq_rel)
{
  /* Code For EqRel Goes Here */


}

void Skeleton::visitNotEqRel(NotEqRel *not_eq_rel)
{
  /* Code For NotEqRel Goes Here */


}

void Skeleton::visitForallBinderLexpr(ForallBinderLexpr *forall_binder_lexpr)
{
  /* Code For ForallBinderLexpr Goes Here */

  if (forall_binder_lexpr->binders_) forall_binder_lexpr->binders_->accept(this);
  if (forall_binder_lexpr->lexpr_) forall_binder_lexpr->lexpr_->accept(this);

}

void Skeleton::visitExistBinderLexpr(ExistBinderLexpr *exist_binder_lexpr)
{
  /* Code For ExistBinderLexpr Goes Here */

  if (exist_binder_lexpr->binders_) exist_binder_lexpr->binders_->accept(this);
  if (exist_binder_lexpr->lexpr_) exist_binder_lexpr->lexpr_->accept(this);

}

void Skeleton::visitLambdaBinderLexpr(LambdaBinderLexpr *lambda_binder_lexpr)
{
  /* Code For LambdaBinderLexpr Goes Here */

  if (lambda_binder_lexpr->binders_) lambda_binder_lexpr->binders_->accept(this);
  if (lambda_binder_lexpr->lexpr_) lambda_binder_lexpr->lexpr_->accept(this);

}

void Skeleton::visitTheBinders(TheBinders *the_binders)
{
  /* Code For TheBinders Goes Here */

  if (the_binders->typespecoftypename_) the_binders->typespecoftypename_->accept(this);
  if (the_binders->varspec_) the_binders->varspec_->accept(this);
  if (the_binders->listbindersreentrance_) the_binders->listbindersreentrance_->accept(this);

}

void Skeleton::visitTypeSpecTYPENAME(TypeSpecTYPENAME *type_spec_typename)
{
  /* Code For TypeSpecTYPENAME Goes Here */

  visitIdent(type_spec_typename->ident_);

}

void Skeleton::visitTypeSpecSimpleFromTypenameTypeSpec(TypeSpecSimpleFromTypenameTypeSpec *type_spec_simple_from_typename_type_spec)
{
  /* Code For TypeSpecSimpleFromTypenameTypeSpec Goes Here */

  if (type_spec_simple_from_typename_type_spec->typespecsimple_) type_spec_simple_from_typename_type_spec->typespecsimple_->accept(this);

}

void Skeleton::visitBindersReentranceDeclSpec(BindersReentranceDeclSpec *binders_reentrance_decl_spec)
{
  /* Code For BindersReentranceDeclSpec Goes Here */

  if (binders_reentrance_decl_spec->typespecoftypename_) binders_reentrance_decl_spec->typespecoftypename_->accept(this);
  if (binders_reentrance_decl_spec->varspec_) binders_reentrance_decl_spec->varspec_->accept(this);

}

void Skeleton::visitBindersReentranceVarSpec(BindersReentranceVarSpec *binders_reentrance_var_spec)
{
  /* Code For BindersReentranceVarSpec Goes Here */

  if (binders_reentrance_var_spec->varspec_) binders_reentrance_var_spec->varspec_->accept(this);

}

void Skeleton::visitStartVarSpec(StartVarSpec *start_var_spec)
{
  /* Code For StartVarSpec Goes Here */

  if (start_var_spec->liststars_) start_var_spec->liststars_->accept(this);
  if (start_var_spec->varspec_) start_var_spec->varspec_->accept(this);

}

void Skeleton::visitSimpleSpec(SimpleSpec *simple_spec)
{
  /* Code For SimpleSpec Goes Here */

  if (simple_spec->fullidentifier_) simple_spec->fullidentifier_->accept(this);

}

void Skeleton::visitArraySpec(ArraySpec *array_spec)
{
  /* Code For ArraySpec Goes Here */

  if (array_spec->varspec_) array_spec->varspec_->accept(this);
  if (array_spec->arraysize_) array_spec->arraysize_->accept(this);

}

void Skeleton::visitStar(Star *star)
{
  /* Code For Star Goes Here */


}

void Skeleton::visitIntConstArraySize(IntConstArraySize *int_const_array_size)
{
  /* Code For IntConstArraySize Goes Here */

  visitInteger(int_const_array_size->integer_);

}

void Skeleton::visitSomeArraySize(SomeArraySize *some_array_size)
{
  /* Code For SomeArraySize Goes Here */

  if (some_array_size->fullidentifier_) some_array_size->fullidentifier_->accept(this);

}

void Skeleton::visitNoSize(NoSize *no_size)
{
  /* Code For NoSize Goes Here */


}

void Skeleton::visitOptLabelOne(OptLabelOne *opt_label_one)
{
  /* Code For OptLabelOne Goes Here */

  if (opt_label_one->optlabellist_) opt_label_one->optlabellist_->accept(this);

}

void Skeleton::visitOptLabelTwo(OptLabelTwo *opt_label_two)
{
  /* Code For OptLabelTwo Goes Here */

  if (opt_label_two->optlabellist_) opt_label_two->optlabellist_->accept(this);

}

void Skeleton::visitNoLableList(NoLableList *no_lable_list)
{
  /* Code For NoLableList Goes Here */


}

void Skeleton::visitLableList(LableList *lable_list)
{
  /* Code For LableList Goes Here */

  if (lable_list->listlabelname_) lable_list->listlabelname_->accept(this);

}

void Skeleton::visitLableName(LableName *lable_name)
{
  /* Code For LableName Goes Here */

  if (lable_name->anyidentifier_) lable_name->anyidentifier_->accept(this);

}

void Skeleton::visitLexprRange(LexprRange *lexpr_range)
{
  /* Code For LexprRange Goes Here */

  if (lexpr_range->lexproption_1) lexpr_range->lexproption_1->accept(this);
  if (lexpr_range->lexproption_2) lexpr_range->lexproption_2->accept(this);

}

void Skeleton::visitNoLexprOption(NoLexprOption *no_lexpr_option)
{
  /* Code For NoLexprOption Goes Here */


}

void Skeleton::visitSomeLexprOption(SomeLexprOption *some_lexpr_option)
{
  /* Code For SomeLexprOption Goes Here */

  if (some_lexpr_option->lexpr_) some_lexpr_option->lexpr_->accept(this);

}

void Skeleton::visitSimpleIdentifierAny(SimpleIdentifierAny *simple_identifier_any)
{
  /* Code For SimpleIdentifierAny Goes Here */

  if (simple_identifier_any->identifier_) simple_identifier_any->identifier_->accept(this);

}

void Skeleton::visitEnsuresKeyWord(EnsuresKeyWord *ensures_key_word)
{
  /* Code For EnsuresKeyWord Goes Here */


}

void Skeleton::visitExitsKeyWord(ExitsKeyWord *exits_key_word)
{
  /* Code For ExitsKeyWord Goes Here */


}

void Skeleton::visitBreaksKeyWord(BreaksKeyWord *breaks_key_word)
{
  /* Code For BreaksKeyWord Goes Here */


}

void Skeleton::visitContinuesKeyWord(ContinuesKeyWord *continues_key_word)
{
  /* Code For ContinuesKeyWord Goes Here */


}

void Skeleton::visitReturnsKeyWord(ReturnsKeyWord *returns_key_word)
{
  /* Code For ReturnsKeyWord Goes Here */


}

void Skeleton::visitCheckEnsuresKeyWord(CheckEnsuresKeyWord *check_ensures_key_word)
{
  /* Code For CheckEnsuresKeyWord Goes Here */


}

void Skeleton::visitCheckExitsKeyWord(CheckExitsKeyWord *check_exits_key_word)
{
  /* Code For CheckExitsKeyWord Goes Here */


}

void Skeleton::visitCheckBreaksKeyWord(CheckBreaksKeyWord *check_breaks_key_word)
{
  /* Code For CheckBreaksKeyWord Goes Here */


}

void Skeleton::visitCheckContinuesKeyWord(CheckContinuesKeyWord *check_continues_key_word)
{
  /* Code For CheckContinuesKeyWord Goes Here */


}

void Skeleton::visitCheckReturnsKeyWord(CheckReturnsKeyWord *check_returns_key_word)
{
  /* Code For CheckReturnsKeyWord Goes Here */


}

void Skeleton::visitAdmitEnsuresKeyWord(AdmitEnsuresKeyWord *admit_ensures_key_word)
{
  /* Code For AdmitEnsuresKeyWord Goes Here */


}

void Skeleton::visitAdmitExitsKeyWord(AdmitExitsKeyWord *admit_exits_key_word)
{
  /* Code For AdmitExitsKeyWord Goes Here */


}

void Skeleton::visitAdmitBreaksKeyWord(AdmitBreaksKeyWord *admit_breaks_key_word)
{
  /* Code For AdmitBreaksKeyWord Goes Here */


}

void Skeleton::visitAdmitContinuesKeyWord(AdmitContinuesKeyWord *admit_continues_key_word)
{
  /* Code For AdmitContinuesKeyWord Goes Here */


}

void Skeleton::visitAdmitReturnsKeyWord(AdmitReturnsKeyWord *admit_returns_key_word)
{
  /* Code For AdmitReturnsKeyWord Goes Here */


}

void Skeleton::visitSimpleIdentifierFull(SimpleIdentifierFull *simple_identifier_full)
{
  /* Code For SimpleIdentifierFull Goes Here */

  if (simple_identifier_full->identifier_) simple_identifier_full->identifier_->accept(this);

}

void Skeleton::visitIdentifierIdent(IdentifierIdent *identifier_ident)
{
  /* Code For IdentifierIdent Goes Here */

  visitIdent(identifier_ident->ident_);

}

void Skeleton::visitTypeSpecSimpleIntegerKeyWord(TypeSpecSimpleIntegerKeyWord *type_spec_simple_integer_key_word)
{
  /* Code For TypeSpecSimpleIntegerKeyWord Goes Here */


}

void Skeleton::visitTypeSpecSimpleRealKeyWord(TypeSpecSimpleRealKeyWord *type_spec_simple_real_key_word)
{
  /* Code For TypeSpecSimpleRealKeyWord Goes Here */


}

void Skeleton::visitTypeSpecSimpleBooleanKeyWord(TypeSpecSimpleBooleanKeyWord *type_spec_simple_boolean_key_word)
{
  /* Code For TypeSpecSimpleBooleanKeyWord Goes Here */


}

void Skeleton::visitTypeSpecSimpleVoidKeyWord(TypeSpecSimpleVoidKeyWord *type_spec_simple_void_key_word)
{
  /* Code For TypeSpecSimpleVoidKeyWord Goes Here */


}

void Skeleton::visitTypeSpecSimpleBoolKeyWord(TypeSpecSimpleBoolKeyWord *type_spec_simple_bool_key_word)
{
  /* Code For TypeSpecSimpleBoolKeyWord Goes Here */


}

void Skeleton::visitTypeSpecSimpleCharKeyWord(TypeSpecSimpleCharKeyWord *type_spec_simple_char_key_word)
{
  /* Code For TypeSpecSimpleCharKeyWord Goes Here */


}

void Skeleton::visitTypeSpecSimpleIntKeyWord(TypeSpecSimpleIntKeyWord *type_spec_simple_int_key_word)
{
  /* Code For TypeSpecSimpleIntKeyWord Goes Here */


}

void Skeleton::visitTypeSpecSimpleDoubleKeyWord(TypeSpecSimpleDoubleKeyWord *type_spec_simple_double_key_word)
{
  /* Code For TypeSpecSimpleDoubleKeyWord Goes Here */


}

void Skeleton::visitTypeSpecSimpleLongDoubleKeyWord(TypeSpecSimpleLongDoubleKeyWord *type_spec_simple_long_double_key_word)
{
  /* Code For TypeSpecSimpleLongDoubleKeyWord Goes Here */


}

void Skeleton::visitAnAnnotation(AnAnnotation *an_annotation)
{
  /* Code For AnAnnotation Goes Here */

  if (an_annotation->annotation_) an_annotation->annotation_->accept(this);

}

void Skeleton::visitLoopAnnotation(LoopAnnotation *loop_annotation)
{
  /* Code For LoopAnnotation Goes Here */

  if (loop_annotation->loopannotstack_) loop_annotation->loopannotstack_->accept(this);

}

void Skeleton::visitLoopAnnotStackInvariant(LoopAnnotStackInvariant *loop_annot_stack_invariant)
{
  /* Code For LoopAnnotStackInvariant Goes Here */

  if (loop_annot_stack_invariant->loopinvariant_) loop_annot_stack_invariant->loopinvariant_->accept(this);
  if (loop_annot_stack_invariant->loopannotopt_) loop_annot_stack_invariant->loopannotopt_->accept(this);

}

void Skeleton::visitLoopAnnotStackEffects(LoopAnnotStackEffects *loop_annot_stack_effects)
{
  /* Code For LoopAnnotStackEffects Goes Here */

  if (loop_annot_stack_effects->loopeffects_) loop_annot_stack_effects->loopeffects_->accept(this);
  if (loop_annot_stack_effects->loopannotopt_) loop_annot_stack_effects->loopannotopt_->accept(this);

}

void Skeleton::visitLoopAnnotStackVariant(LoopAnnotStackVariant *loop_annot_stack_variant)
{
  /* Code For LoopAnnotStackVariant Goes Here */

  if (loop_annot_stack_variant->loopvariant_) loop_annot_stack_variant->loopvariant_->accept(this);
  if (loop_annot_stack_variant->loopannotopt_) loop_annot_stack_variant->loopannotopt_->accept(this);

}

void Skeleton::visitNoLoopAnnot(NoLoopAnnot *no_loop_annot)
{
  /* Code For NoLoopAnnot Goes Here */


}

void Skeleton::visitSomeLoopAnnot(SomeLoopAnnot *some_loop_annot)
{
  /* Code For SomeLoopAnnot Goes Here */

  if (some_loop_annot->loopannotstack_) some_loop_annot->loopannotstack_->accept(this);

}

void Skeleton::visitSimpleLoopInvariant(SimpleLoopInvariant *simple_loop_invariant)
{
  /* Code For SimpleLoopInvariant Goes Here */

  if (simple_loop_invariant->lexpr_) simple_loop_invariant->lexpr_->accept(this);

}

void Skeleton::visitCheckLoopInvariant(CheckLoopInvariant *check_loop_invariant)
{
  /* Code For CheckLoopInvariant Goes Here */

  if (check_loop_invariant->lexpr_) check_loop_invariant->lexpr_->accept(this);

}

void Skeleton::visitAdmitLoopInvariant(AdmitLoopInvariant *admit_loop_invariant)
{
  /* Code For AdmitLoopInvariant Goes Here */

  if (admit_loop_invariant->lexpr_) admit_loop_invariant->lexpr_->accept(this);

}

void Skeleton::visitSimpleLoopVariant(SimpleLoopVariant *simple_loop_variant)
{
  /* Code For SimpleLoopVariant Goes Here */

  if (simple_loop_variant->variant_) simple_loop_variant->variant_->accept(this);

}

void Skeleton::visitLoopAssigns(LoopAssigns *loop_assigns)
{
  /* Code For LoopAssigns Goes Here */

  if (loop_assigns->assigns_) loop_assigns->assigns_->accept(this);

}

void Skeleton::visitForVariant(ForVariant *for_variant)
{
  /* Code For ForVariant Goes Here */

  if (for_variant->lexpr_) for_variant->lexpr_->accept(this);
  if (for_variant->anyidentifier_) for_variant->anyidentifier_->accept(this);

}

void Skeleton::visitLexprVariant(LexprVariant *lexpr_variant)
{
  /* Code For LexprVariant Goes Here */

  if (lexpr_variant->lexpr_) lexpr_variant->lexpr_->accept(this);

}


void Skeleton::visitListParameterDecl(ListParameterDecl *list_parameter_decl)
{
  for (ListParameterDecl::iterator i = list_parameter_decl->begin() ; i != list_parameter_decl->end() ; ++i)
  {
    (*i)->accept(this);
  }
}

void Skeleton::visitListInitDeclaratorAttr(ListInitDeclaratorAttr *list_init_declarator_attr)
{
  for (ListInitDeclaratorAttr::iterator i = list_init_declarator_attr->begin() ; i != list_init_declarator_attr->end() ; ++i)
  {
    (*i)->accept(this);
  }
}

void Skeleton::visitListFieldDecl(ListFieldDecl *list_field_decl)
{
  for (ListFieldDecl::iterator i = list_field_decl->begin() ; i != list_field_decl->end() ; ++i)
  {
    (*i)->accept(this);
  }
}

void Skeleton::visitListAttribute(ListAttribute *list_attribute)
{
  for (ListAttribute::iterator i = list_attribute->begin() ; i != list_attribute->end() ; ++i)
  {
    (*i)->accept(this);
  }
}

void Skeleton::visitListBlockElement(ListBlockElement *list_block_element)
{
  for (ListBlockElement::iterator i = list_block_element->begin() ; i != list_block_element->end() ; ++i)
  {
    (*i)->accept(this);
  }
}

void Skeleton::visitListAttr(ListAttr *list_attr)
{
  for (ListAttr::iterator i = list_attr->begin() ; i != list_attr->end() ; ++i)
  {
    (*i)->accept(this);
  }
}

void Skeleton::visitListExpression(ListExpression *list_expression)
{
  for (ListExpression::iterator i = list_expression->begin() ; i != list_expression->end() ; ++i)
  {
    (*i)->accept(this);
  }
}

void Skeleton::visitListLexpr(ListLexpr *list_lexpr)
{
  for (ListLexpr::iterator i = list_lexpr->begin() ; i != list_lexpr->end() ; ++i)
  {
    (*i)->accept(this);
  }
}

void Skeleton::visitListLexprRelInner(ListLexprRelInner *list_lexpr_rel_inner)
{
  for (ListLexprRelInner::iterator i = list_lexpr_rel_inner->begin() ; i != list_lexpr_rel_inner->end() ; ++i)
  {
    (*i)->accept(this);
  }
}

void Skeleton::visitListBindersReentrance(ListBindersReentrance *list_binders_reentrance)
{
  for (ListBindersReentrance::iterator i = list_binders_reentrance->begin() ; i != list_binders_reentrance->end() ; ++i)
  {
    (*i)->accept(this);
  }
}

void Skeleton::visitListStars(ListStars *list_stars)
{
  for (ListStars::iterator i = list_stars->begin() ; i != list_stars->end() ; ++i)
  {
    (*i)->accept(this);
  }
}

void Skeleton::visitListLabelName(ListLabelName *list_label_name)
{
  for (ListLabelName::iterator i = list_label_name->begin() ; i != list_label_name->end() ; ++i)
  {
    (*i)->accept(this);
  }
}

void Skeleton::visitListFullIdentifier(ListFullIdentifier *list_full_identifier)
{
  for (ListFullIdentifier::iterator i = list_full_identifier->begin() ; i != list_full_identifier->end() ; ++i)
  {
    (*i)->accept(this);
  }
}


void Skeleton::visitInteger(Integer x)
{
  /* Code for Integer Goes Here */
}

void Skeleton::visitChar(Char x)
{
  /* Code for Char Goes Here */
}

void Skeleton::visitDouble(Double x)
{
  /* Code for Double Goes Here */
}

void Skeleton::visitString(String x)
{
  /* Code for String Goes Here */
}

void Skeleton::visitIdent(Ident x)
{
  /* Code for Ident Goes Here */
}

void Skeleton::visitSIGNED(SIGNED x)
{
  /* Code for SIGNED Goes Here */
}

void Skeleton::visitLBRACE(LBRACE x)
{
  /* Code for LBRACE Goes Here */
}

void Skeleton::visitRBRACE(RBRACE x)
{
  /* Code for RBRACE Goes Here */
}

void Skeleton::visitCONST(CONST x)
{
  /* Code for CONST Goes Here */
}

void Skeleton::visitRESTRICT(RESTRICT x)
{
  /* Code for RESTRICT Goes Here */
}

void Skeleton::visitVOLATILE(VOLATILE x)
{
  /* Code for VOLATILE Goes Here */
}

void Skeleton::visitBLOCKATTRIBUTE(BLOCKATTRIBUTE x)
{
  /* Code for BLOCKATTRIBUTE Goes Here */
}

void Skeleton::visitLBRACKET(LBRACKET x)
{
  /* Code for LBRACKET Goes Here */
}

void Skeleton::visitRBRACKET(RBRACKET x)
{
  /* Code for RBRACKET Goes Here */
}


}
