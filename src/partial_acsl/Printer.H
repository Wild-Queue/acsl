/* File generated by the BNF Converter (bnfc 2.9.4.1). */

#ifndef PARTIAL_ACSL_PRINTER_HEADER
#define PARTIAL_ACSL_PRINTER_HEADER

#include "Absyn.H"
#include <stdio.h>
#include <stddef.h>
#include <string.h>
#include <stdlib.h>

namespace partial_acsl
{
/* Certain applications may improve performance by changing the buffer size */
#define PARTIAL_ACSL_BUFFER_INITIAL 2000
/* You may wish to change _L_PAREN or _R_PAREN */
#define PARTIAL_ACSL__L_PAREN '('
#define PARTIAL_ACSL__R_PAREN ')'

class PrintAbsyn : public Visitor
{
 protected:
  int _n_, _i_;
  /* The following are simple heuristics for rendering terminals */
  /* You may wish to change them */
  void render(Char c);
  void render(String s);
  void render(const char *s);
  void indent(void);
  void backup(void);
  void onEmptyLine(void);
  void removeTrailingSpaces(void);
  void removeTrailingWhitespace(void);
 public:
  PrintAbsyn(void);
  ~PrintAbsyn(void);
  char *print(Visitable *v);

  void visitProgram(Program *p); /* abstract class */
  void visitAProgram(AProgram *p);
  void visitGlobals(Globals *p); /* abstract class */
  void visitNoGlobals(NoGlobals *p);
  void visitSimpleGlobals(SimpleGlobals *p);
  void visitSemiColonGlobals(SemiColonGlobals *p);
  void visitGlobal(Global *p); /* abstract class */
  void visitGlobalsDeclataion(GlobalsDeclataion *p);
  void visitGlobalsFunctionDef(GlobalsFunctionDef *p);
  void visitFunctionDef(FunctionDef *p); /* abstract class */
  void visitSimpleFunctionDef(SimpleFunctionDef *p);
  void visitFunctionDefStart(FunctionDefStart *p); /* abstract class */
  void visitFunctionDefStartDeclarator(FunctionDefStartDeclarator *p);
  void visitDeclSpecList(DeclSpecList *p); /* abstract class */
  void visitDeclSpecTypeSpec(DeclSpecTypeSpec *p);
  void visitDeclSpecTypeSpecNext(DeclSpecTypeSpecNext *p);
  void visitDeclSpecListNoNamed(DeclSpecListNoNamed *p); /* abstract class */
  void visitDeclSpecNoNamedTypeSpec(DeclSpecNoNamedTypeSpec *p);
  void visitDeclSpecNoNamedTypeSpecNext(DeclSpecNoNamedTypeSpecNext *p);
  void visitTypeSpec(TypeSpec *p); /* abstract class */
  void visitTypeSpecVoidKeyWord(TypeSpecVoidKeyWord *p);
  void visitTypeSpecCharKeyWord(TypeSpecCharKeyWord *p);
  void visitTypeSpecBoolKeyWord(TypeSpecBoolKeyWord *p);
  void visitTypeSpecShortKeyWord(TypeSpecShortKeyWord *p);
  void visitTypeSpecInt32KeyWord(TypeSpecInt32KeyWord *p);
  void visitTypeSpecIntKeyWord(TypeSpecIntKeyWord *p);
  void visitTypeSpecLongKeyWord(TypeSpecLongKeyWord *p);
  void visitTypeSpecInt64KeyWord(TypeSpecInt64KeyWord *p);
  void visitTypeSpecFloatKeyWord(TypeSpecFloatKeyWord *p);
  void visitTypeSpecDoubleKeyWord(TypeSpecDoubleKeyWord *p);
  void visitTypeSpecSignedKeyWord(TypeSpecSignedKeyWord *p);
  void visitTypeSpecUnsignedKeyWord(TypeSpecUnsignedKeyWord *p);
  void visitStructId(StructId *p);
  void visitStructIdBraces(StructIdBraces *p);
  void visitStructBraces(StructBraces *p);
  void visitDeclarator(Declarator *p); /* abstract class */
  void visitADeclarator(ADeclarator *p);
  void visitPointerOpt(PointerOpt *p); /* abstract class */
  void visitNoPointer(NoPointer *p);
  void visitSomePointer(SomePointer *p);
  void visitDirectDecl(DirectDecl *p); /* abstract class */
  void visitDirectDeclIdTypename(DirectDeclIdTypename *p);
  void visitDirectDeclGhostParam(DirectDeclGhostParam *p);
  void visitDirectDeclGhostRestParParam(DirectDeclGhostRestParParam *p);
  void visitAttributesWithAsm(AttributesWithAsm *p); /* abstract class */
  void visitEmptyAttrWithASM(EmptyAttrWithASM *p);
  void visitRestParList(RestParList *p); /* abstract class */
  void visitSimpleParameterDecl(SimpleParameterDecl *p);
  void visitParameterDecl(ParameterDecl *p); /* abstract class */
  void visitParameterDeclSpecDeclarator(ParameterDeclSpecDeclarator *p);
  void visitParameterDeclSpec(ParameterDeclSpec *p);
  void visitParameterDeclPar(ParameterDeclPar *p);
  void visitListParameterDecl(ListParameterDecl *p);
  void iterListParameterDecl(ListParameterDecl::const_iterator i, ListParameterDecl::const_iterator j);
  void visitGhostParameterOpt(GhostParameterOpt *p); /* abstract class */
  void visitNoGhostParameter(NoGhostParameter *p);
  void visitIdOrTypename(IdOrTypename *p); /* abstract class */
  void visitIdTypename(IdTypename *p);
  void visitIdOrTypenameAsId(IdOrTypenameAsId *p); /* abstract class */
  void visitIdOrTypenameAsIdIdentifier(IdOrTypenameAsIdIdentifier *p);
  void visitDeclaration(Declaration *p); /* abstract class */
  void visitDeclSpecInitDecl(DeclSpecInitDecl *p);
  void visitDeclSpec(DeclSpec *p);
  void visitDeclAndInitDeclAttrList(DeclAndInitDeclAttrList *p); /* abstract class */
  void visitInitDeclaration(InitDeclaration *p);
  void visitInitDeclarationWithAttr(InitDeclarationWithAttr *p);
  void visitInitDeclaratorAttr(InitDeclaratorAttr *p); /* abstract class */
  void visitInitDeclaratorAttribute(InitDeclaratorAttribute *p);
  void visitListInitDeclaratorAttr(ListInitDeclaratorAttr *p);
  void iterListInitDeclaratorAttr(ListInitDeclaratorAttr::const_iterator i, ListInitDeclaratorAttr::const_iterator j);
  void visitInitDeclarator(InitDeclarator *p); /* abstract class */
  void visitSimpleInitDeclarator(SimpleInitDeclarator *p);
  void visitStructDeclList(StructDeclList *p); /* abstract class */
  void visitEmptyStructDecl(EmptyStructDecl *p);
  void visitDeclSpecStructDecl(DeclSpecStructDecl *p);
  void visitSemicolonStructDecl(SemicolonStructDecl *p);
  void visitSpecFieldDeclStructDecl(SpecFieldDeclStructDecl *p);
  void visitFieldDecl(FieldDecl *p); /* abstract class */
  void visitFieldDeclDeclarator(FieldDeclDeclarator *p);
  void visitListFieldDecl(ListFieldDecl *p);
  void iterListFieldDecl(ListFieldDecl::const_iterator i, ListFieldDecl::const_iterator j);
  void visitAttribute(Attribute *p); /* abstract class */
  void visitAttributeConst(AttributeConst *p);
  void visitListAttribute(ListAttribute *p);
  void iterListAttribute(ListAttribute::const_iterator i, ListAttribute::const_iterator j);
  void visitBlock(Block *p); /* abstract class */
  void visitABlock(ABlock *p);
  void visitBlockAttrs(BlockAttrs *p); /* abstract class */
  void visitNoBlockAttrs(NoBlockAttrs *p);
  void visitSomeBlockAttrs(SomeBlockAttrs *p);
  void visitBlockElement(BlockElement *p); /* abstract class */
  void visitDeclarationElement(DeclarationElement *p);
  void visitStatementElement(StatementElement *p);
  void visitListBlockElement(ListBlockElement *p);
  void iterListBlockElement(ListBlockElement::const_iterator i, ListBlockElement::const_iterator j);
  void visitStatement(Statement *p); /* abstract class */
  void visitSemicolonStatement(SemicolonStatement *p);
  void visitExprsStatement(ExprsStatement *p);
  void visitBlockStatement(BlockStatement *p);
  void visitIfStatement(IfStatement *p);
  void visitSwitchStatement(SwitchStatement *p);
  void visitWhileStatement(WhileStatement *p);
  void visitCaseStatement(CaseStatement *p);
  void visitCaseSliceStatement(CaseSliceStatement *p);
  void visitDefaultStatement(DefaultStatement *p);
  void visitEmptyReturnStatement(EmptyReturnStatement *p);
  void visitBreakStatement(BreakStatement *p);
  void visitContinueStatement(ContinueStatement *p);
  void visitAttr(Attr *p); /* abstract class */
  void visitAnAttr(AnAttr *p);
  void visitTernaryCond(TernaryCond *p);
  void visitOr(Or *p);
  void visitAnd(And *p);
  void visitBitOr(BitOr *p);
  void visitXor(Xor *p);
  void visitBitAnd(BitAnd *p);
  void visitEqualEqual(EqualEqual *p);
  void visitNotEqual(NotEqual *p);
  void visitLess(Less *p);
  void visitGreater(Greater *p);
  void visitLessEqual(LessEqual *p);
  void visitGreaterEqual(GreaterEqual *p);
  void visitLeftShiftOp(LeftShiftOp *p);
  void visitRightShiftOp(RightShiftOp *p);
  void visitAddOp(AddOp *p);
  void visitSubOp(SubOp *p);
  void visitMultOp(MultOp *p);
  void visitDivOp(DivOp *p);
  void visitModOp(ModOp *p);
  void visitPlusUnaryAttr(PlusUnaryAttr *p);
  void visitMinusUnaryAttr(MinusUnaryAttr *p);
  void visitMultUnaryAttr(MultUnaryAttr *p);
  void visitAmpUnaryAttr(AmpUnaryAttr *p);
  void visitNotUnaryAttr(NotUnaryAttr *p);
  void visitTildeUnaryAttr(TildeUnaryAttr *p);
  void visitFuncationCall(FuncationCall *p);
  void visitProcedureCall(ProcedureCall *p);
  void visitArrowAttr(ArrowAttr *p);
  void visitDotAttr(DotAttr *p);
  void visitArrayAttr(ArrayAttr *p);
  void visitBasicAttr(BasicAttr *p);
  void visitListAttr(ListAttr *p);
  void iterListAttr(ListAttr::const_iterator i, ListAttr::const_iterator j);
  void visitBasicAttribute(BasicAttribute *p); /* abstract class */
  void visitBasicAttrConsInt(BasicAttrConsInt *p);
  void visitBasicAttrConsFloat(BasicAttrConsFloat *p);
  void visitListBasicAttribute(ListBasicAttribute *p);
  void iterListBasicAttribute(ListBasicAttribute::const_iterator i, ListBasicAttribute::const_iterator j);
  void visitAnnotatedStmt(AnnotatedStmt *p); /* abstract class */
  void visitAnnotatedStatement(AnnotatedStatement *p);
  void visitElsePart(ElsePart *p); /* abstract class */
  void visitNoElsePart(NoElsePart *p);
  void visitSimpleElsePart(SimpleElsePart *p);
  void visitOptExpression(OptExpression *p); /* abstract class */
  void visitNoExpression(NoExpression *p);
  void visitSomeExpression(SomeExpression *p);
  void visitExpression(Expression *p); /* abstract class */
  void visitAssignmentExpr(AssignmentExpr *p);
  void visitListExpression(ListExpression *p);
  void iterListExpression(ListExpression::const_iterator i, ListExpression::const_iterator j);
  void visitAssignExpr(AssignExpr *p); /* abstract class */
  void visitEqAssignExpr(EqAssignExpr *p);
  void visitPlusEqAssignExpr(PlusEqAssignExpr *p);
  void visitMinusEqAssignExpr(MinusEqAssignExpr *p);
  void visitMultEqAssignExpr(MultEqAssignExpr *p);
  void visitDivEqAssignExpr(DivEqAssignExpr *p);
  void visitModEqAssignExpr(ModEqAssignExpr *p);
  void visitAndEqAssignExpr(AndEqAssignExpr *p);
  void visitOrEqAssignExpr(OrEqAssignExpr *p);
  void visitXorEqAssignExpr(XorEqAssignExpr *p);
  void visitLeftShiftEqAssignExpr(LeftShiftEqAssignExpr *p);
  void visitRightShiftEqAssignExpr(RightShiftEqAssignExpr *p);
  void visitTernaryCondExpr(TernaryCondExpr *p);
  void visitOrExpr(OrExpr *p);
  void visitAndExpr(AndExpr *p);
  void visitBitOrExpr(BitOrExpr *p);
  void visitBitXorExpr(BitXorExpr *p);
  void visitBitAndExpr(BitAndExpr *p);
  void visitEqExpr(EqExpr *p);
  void visitNotEqExpr(NotEqExpr *p);
  void visitLessExpr(LessExpr *p);
  void visitGreaterExpr(GreaterExpr *p);
  void visitLessEqualExpr(LessEqualExpr *p);
  void visitGreaterEqualExpr(GreaterEqualExpr *p);
  void visitLeftShiftExpr(LeftShiftExpr *p);
  void visitRightShiftExpr(RightShiftExpr *p);
  void visitPlusExpr(PlusExpr *p);
  void visitMinusExpr(MinusExpr *p);
  void visitMulsExpr(MulsExpr *p);
  void visitDivExpr(DivExpr *p);
  void visitModExpr(ModExpr *p);
  void visitCastExpr(CastExpr *p);
  void visitUnaryExprPlusPlus(UnaryExprPlusPlus *p);
  void visitUnaryExprMinusMinus(UnaryExprMinusMinus *p);
  void visitUnaryExprPlus(UnaryExprPlus *p);
  void visitUnaryExprMinus(UnaryExprMinus *p);
  void visitUnaryExprMult(UnaryExprMult *p);
  void visitUnaryExprAmp(UnaryExprAmp *p);
  void visitUnaryExprNot(UnaryExprNot *p);
  void visitUnaryExprTilde(UnaryExprTilde *p);
  void visitUnaryExprAddress(UnaryExprAddress *p);
  void visitDotPostfixExpression(DotPostfixExpression *p);
  void visitArrowPostfixExpression(ArrowPostfixExpression *p);
  void visitPlusPlusPostfixExpression(PlusPlusPostfixExpression *p);
  void visitMinusMinusPostfixExpression(MinusMinusPostfixExpression *p);
  void visitIdentifierPrimaryExpression(IdentifierPrimaryExpression *p);
  void visitConstantPrimaryExpressin(ConstantPrimaryExpressin *p);
  void visitCommaExpressionPrimaryExpressin(CommaExpressionPrimaryExpressin *p);
  void visitBlockPrimaryExpressin(BlockPrimaryExpressin *p);
  void visitConstant(Constant *p); /* abstract class */
  void visitConstantInt(ConstantInt *p);
  void visitConstantFloat(ConstantFloat *p);
  void visitConstantChar(ConstantChar *p);
  void visitTypeName(TypeName *p); /* abstract class */
  void visitTypeNameDeclSpecList(TypeNameDeclSpecList *p);

  void visitInteger(Integer i);
  void visitDouble(Double d);
  void visitChar(Char c);
  void visitString(String s);
  void visitIdent(String s);
  void visitSIGNED(String s);
  void visitLBRACE(String s);
  void visitRBRACE(String s);
  void visitCONST(String s);
  void visitRESTRICT(String s);
  void visitVOLATILE(String s);
  void visitBLOCKATTRIBUTE(String s);
  void visitLBRACKET(String s);
  void visitRBRACKET(String s);
 protected:
  char *buf_;
  size_t cur_, buf_size;

  void inline bufAppend(const char *s)
  {
    size_t end = cur_ + strlen(s);
    if (end >= buf_size) {
      do buf_size *= 2; /* Double the buffer size */
      while (end >= buf_size);
      resizeBuffer();
    }
    strcpy(&buf_[cur_], s);
    cur_ = end;
  }

  void inline bufAppend(const char c)
  {
    if (cur_ + 1 >= buf_size)
    {
      buf_size *= 2; /* Double the buffer size */
      resizeBuffer();
    }
    buf_[cur_] = c;
    buf_[++cur_] = 0;
  }

  void inline bufAppend(String str)
  {
    const char *s = str.c_str();
    bufAppend(s);
  }
  void inline bufReset(void)
  {
    if (buf_) delete[] buf_;
    buf_size = PARTIAL_ACSL_BUFFER_INITIAL;
    buf_ = new char[buf_size];
    memset(buf_, 0, buf_size);
    cur_ = 0;
  }

  void inline resizeBuffer(void)
  {
    char *temp = new char[buf_size];
    if (buf_)
    {
      strcpy(temp, buf_);
      delete[] buf_;
    }
    buf_ = temp;
  }
};



class ShowAbsyn : public Visitor
{
 public:
  ShowAbsyn(void);
  ~ShowAbsyn(void);
  char *show(Visitable *v);

  void visitProgram(Program *p); /* abstract class */
  void visitAProgram(AProgram *p);
  void visitGlobals(Globals *p); /* abstract class */
  void visitNoGlobals(NoGlobals *p);
  void visitSimpleGlobals(SimpleGlobals *p);
  void visitSemiColonGlobals(SemiColonGlobals *p);
  void visitGlobal(Global *p); /* abstract class */
  void visitGlobalsDeclataion(GlobalsDeclataion *p);
  void visitGlobalsFunctionDef(GlobalsFunctionDef *p);
  void visitFunctionDef(FunctionDef *p); /* abstract class */
  void visitSimpleFunctionDef(SimpleFunctionDef *p);
  void visitFunctionDefStart(FunctionDefStart *p); /* abstract class */
  void visitFunctionDefStartDeclarator(FunctionDefStartDeclarator *p);
  void visitDeclSpecList(DeclSpecList *p); /* abstract class */
  void visitDeclSpecTypeSpec(DeclSpecTypeSpec *p);
  void visitDeclSpecTypeSpecNext(DeclSpecTypeSpecNext *p);
  void visitDeclSpecListNoNamed(DeclSpecListNoNamed *p); /* abstract class */
  void visitDeclSpecNoNamedTypeSpec(DeclSpecNoNamedTypeSpec *p);
  void visitDeclSpecNoNamedTypeSpecNext(DeclSpecNoNamedTypeSpecNext *p);
  void visitTypeSpec(TypeSpec *p); /* abstract class */
  void visitTypeSpecVoidKeyWord(TypeSpecVoidKeyWord *p);
  void visitTypeSpecCharKeyWord(TypeSpecCharKeyWord *p);
  void visitTypeSpecBoolKeyWord(TypeSpecBoolKeyWord *p);
  void visitTypeSpecShortKeyWord(TypeSpecShortKeyWord *p);
  void visitTypeSpecInt32KeyWord(TypeSpecInt32KeyWord *p);
  void visitTypeSpecIntKeyWord(TypeSpecIntKeyWord *p);
  void visitTypeSpecLongKeyWord(TypeSpecLongKeyWord *p);
  void visitTypeSpecInt64KeyWord(TypeSpecInt64KeyWord *p);
  void visitTypeSpecFloatKeyWord(TypeSpecFloatKeyWord *p);
  void visitTypeSpecDoubleKeyWord(TypeSpecDoubleKeyWord *p);
  void visitTypeSpecSignedKeyWord(TypeSpecSignedKeyWord *p);
  void visitTypeSpecUnsignedKeyWord(TypeSpecUnsignedKeyWord *p);
  void visitStructId(StructId *p);
  void visitStructIdBraces(StructIdBraces *p);
  void visitStructBraces(StructBraces *p);
  void visitDeclarator(Declarator *p); /* abstract class */
  void visitADeclarator(ADeclarator *p);
  void visitPointerOpt(PointerOpt *p); /* abstract class */
  void visitNoPointer(NoPointer *p);
  void visitSomePointer(SomePointer *p);
  void visitDirectDecl(DirectDecl *p); /* abstract class */
  void visitDirectDeclIdTypename(DirectDeclIdTypename *p);
  void visitDirectDeclGhostParam(DirectDeclGhostParam *p);
  void visitDirectDeclGhostRestParParam(DirectDeclGhostRestParParam *p);
  void visitAttributesWithAsm(AttributesWithAsm *p); /* abstract class */
  void visitEmptyAttrWithASM(EmptyAttrWithASM *p);
  void visitRestParList(RestParList *p); /* abstract class */
  void visitSimpleParameterDecl(SimpleParameterDecl *p);
  void visitParameterDecl(ParameterDecl *p); /* abstract class */
  void visitParameterDeclSpecDeclarator(ParameterDeclSpecDeclarator *p);
  void visitParameterDeclSpec(ParameterDeclSpec *p);
  void visitParameterDeclPar(ParameterDeclPar *p);
  void visitListParameterDecl(ListParameterDecl *p);
  void iterListParameterDecl(ListParameterDecl::const_iterator i, ListParameterDecl::const_iterator j);
  void visitGhostParameterOpt(GhostParameterOpt *p); /* abstract class */
  void visitNoGhostParameter(NoGhostParameter *p);
  void visitIdOrTypename(IdOrTypename *p); /* abstract class */
  void visitIdTypename(IdTypename *p);
  void visitIdOrTypenameAsId(IdOrTypenameAsId *p); /* abstract class */
  void visitIdOrTypenameAsIdIdentifier(IdOrTypenameAsIdIdentifier *p);
  void visitDeclaration(Declaration *p); /* abstract class */
  void visitDeclSpecInitDecl(DeclSpecInitDecl *p);
  void visitDeclSpec(DeclSpec *p);
  void visitDeclAndInitDeclAttrList(DeclAndInitDeclAttrList *p); /* abstract class */
  void visitInitDeclaration(InitDeclaration *p);
  void visitInitDeclarationWithAttr(InitDeclarationWithAttr *p);
  void visitInitDeclaratorAttr(InitDeclaratorAttr *p); /* abstract class */
  void visitInitDeclaratorAttribute(InitDeclaratorAttribute *p);
  void visitListInitDeclaratorAttr(ListInitDeclaratorAttr *p);
  void iterListInitDeclaratorAttr(ListInitDeclaratorAttr::const_iterator i, ListInitDeclaratorAttr::const_iterator j);
  void visitInitDeclarator(InitDeclarator *p); /* abstract class */
  void visitSimpleInitDeclarator(SimpleInitDeclarator *p);
  void visitStructDeclList(StructDeclList *p); /* abstract class */
  void visitEmptyStructDecl(EmptyStructDecl *p);
  void visitDeclSpecStructDecl(DeclSpecStructDecl *p);
  void visitSemicolonStructDecl(SemicolonStructDecl *p);
  void visitSpecFieldDeclStructDecl(SpecFieldDeclStructDecl *p);
  void visitFieldDecl(FieldDecl *p); /* abstract class */
  void visitFieldDeclDeclarator(FieldDeclDeclarator *p);
  void visitListFieldDecl(ListFieldDecl *p);
  void iterListFieldDecl(ListFieldDecl::const_iterator i, ListFieldDecl::const_iterator j);
  void visitAttribute(Attribute *p); /* abstract class */
  void visitAttributeConst(AttributeConst *p);
  void visitListAttribute(ListAttribute *p);
  void iterListAttribute(ListAttribute::const_iterator i, ListAttribute::const_iterator j);
  void visitBlock(Block *p); /* abstract class */
  void visitABlock(ABlock *p);
  void visitBlockAttrs(BlockAttrs *p); /* abstract class */
  void visitNoBlockAttrs(NoBlockAttrs *p);
  void visitSomeBlockAttrs(SomeBlockAttrs *p);
  void visitBlockElement(BlockElement *p); /* abstract class */
  void visitDeclarationElement(DeclarationElement *p);
  void visitStatementElement(StatementElement *p);
  void visitListBlockElement(ListBlockElement *p);
  void iterListBlockElement(ListBlockElement::const_iterator i, ListBlockElement::const_iterator j);
  void visitStatement(Statement *p); /* abstract class */
  void visitSemicolonStatement(SemicolonStatement *p);
  void visitExprsStatement(ExprsStatement *p);
  void visitBlockStatement(BlockStatement *p);
  void visitIfStatement(IfStatement *p);
  void visitSwitchStatement(SwitchStatement *p);
  void visitWhileStatement(WhileStatement *p);
  void visitCaseStatement(CaseStatement *p);
  void visitCaseSliceStatement(CaseSliceStatement *p);
  void visitDefaultStatement(DefaultStatement *p);
  void visitEmptyReturnStatement(EmptyReturnStatement *p);
  void visitBreakStatement(BreakStatement *p);
  void visitContinueStatement(ContinueStatement *p);
  void visitAttr(Attr *p); /* abstract class */
  void visitAnAttr(AnAttr *p);
  void visitTernaryCond(TernaryCond *p);
  void visitOr(Or *p);
  void visitAnd(And *p);
  void visitBitOr(BitOr *p);
  void visitXor(Xor *p);
  void visitBitAnd(BitAnd *p);
  void visitEqualEqual(EqualEqual *p);
  void visitNotEqual(NotEqual *p);
  void visitLess(Less *p);
  void visitGreater(Greater *p);
  void visitLessEqual(LessEqual *p);
  void visitGreaterEqual(GreaterEqual *p);
  void visitLeftShiftOp(LeftShiftOp *p);
  void visitRightShiftOp(RightShiftOp *p);
  void visitAddOp(AddOp *p);
  void visitSubOp(SubOp *p);
  void visitMultOp(MultOp *p);
  void visitDivOp(DivOp *p);
  void visitModOp(ModOp *p);
  void visitPlusUnaryAttr(PlusUnaryAttr *p);
  void visitMinusUnaryAttr(MinusUnaryAttr *p);
  void visitMultUnaryAttr(MultUnaryAttr *p);
  void visitAmpUnaryAttr(AmpUnaryAttr *p);
  void visitNotUnaryAttr(NotUnaryAttr *p);
  void visitTildeUnaryAttr(TildeUnaryAttr *p);
  void visitFuncationCall(FuncationCall *p);
  void visitProcedureCall(ProcedureCall *p);
  void visitArrowAttr(ArrowAttr *p);
  void visitDotAttr(DotAttr *p);
  void visitArrayAttr(ArrayAttr *p);
  void visitBasicAttr(BasicAttr *p);
  void visitListAttr(ListAttr *p);
  void iterListAttr(ListAttr::const_iterator i, ListAttr::const_iterator j);
  void visitBasicAttribute(BasicAttribute *p); /* abstract class */
  void visitBasicAttrConsInt(BasicAttrConsInt *p);
  void visitBasicAttrConsFloat(BasicAttrConsFloat *p);
  void visitListBasicAttribute(ListBasicAttribute *p);
  void iterListBasicAttribute(ListBasicAttribute::const_iterator i, ListBasicAttribute::const_iterator j);
  void visitAnnotatedStmt(AnnotatedStmt *p); /* abstract class */
  void visitAnnotatedStatement(AnnotatedStatement *p);
  void visitElsePart(ElsePart *p); /* abstract class */
  void visitNoElsePart(NoElsePart *p);
  void visitSimpleElsePart(SimpleElsePart *p);
  void visitOptExpression(OptExpression *p); /* abstract class */
  void visitNoExpression(NoExpression *p);
  void visitSomeExpression(SomeExpression *p);
  void visitExpression(Expression *p); /* abstract class */
  void visitAssignmentExpr(AssignmentExpr *p);
  void visitListExpression(ListExpression *p);
  void iterListExpression(ListExpression::const_iterator i, ListExpression::const_iterator j);
  void visitAssignExpr(AssignExpr *p); /* abstract class */
  void visitEqAssignExpr(EqAssignExpr *p);
  void visitPlusEqAssignExpr(PlusEqAssignExpr *p);
  void visitMinusEqAssignExpr(MinusEqAssignExpr *p);
  void visitMultEqAssignExpr(MultEqAssignExpr *p);
  void visitDivEqAssignExpr(DivEqAssignExpr *p);
  void visitModEqAssignExpr(ModEqAssignExpr *p);
  void visitAndEqAssignExpr(AndEqAssignExpr *p);
  void visitOrEqAssignExpr(OrEqAssignExpr *p);
  void visitXorEqAssignExpr(XorEqAssignExpr *p);
  void visitLeftShiftEqAssignExpr(LeftShiftEqAssignExpr *p);
  void visitRightShiftEqAssignExpr(RightShiftEqAssignExpr *p);
  void visitTernaryCondExpr(TernaryCondExpr *p);
  void visitOrExpr(OrExpr *p);
  void visitAndExpr(AndExpr *p);
  void visitBitOrExpr(BitOrExpr *p);
  void visitBitXorExpr(BitXorExpr *p);
  void visitBitAndExpr(BitAndExpr *p);
  void visitEqExpr(EqExpr *p);
  void visitNotEqExpr(NotEqExpr *p);
  void visitLessExpr(LessExpr *p);
  void visitGreaterExpr(GreaterExpr *p);
  void visitLessEqualExpr(LessEqualExpr *p);
  void visitGreaterEqualExpr(GreaterEqualExpr *p);
  void visitLeftShiftExpr(LeftShiftExpr *p);
  void visitRightShiftExpr(RightShiftExpr *p);
  void visitPlusExpr(PlusExpr *p);
  void visitMinusExpr(MinusExpr *p);
  void visitMulsExpr(MulsExpr *p);
  void visitDivExpr(DivExpr *p);
  void visitModExpr(ModExpr *p);
  void visitCastExpr(CastExpr *p);
  void visitUnaryExprPlusPlus(UnaryExprPlusPlus *p);
  void visitUnaryExprMinusMinus(UnaryExprMinusMinus *p);
  void visitUnaryExprPlus(UnaryExprPlus *p);
  void visitUnaryExprMinus(UnaryExprMinus *p);
  void visitUnaryExprMult(UnaryExprMult *p);
  void visitUnaryExprAmp(UnaryExprAmp *p);
  void visitUnaryExprNot(UnaryExprNot *p);
  void visitUnaryExprTilde(UnaryExprTilde *p);
  void visitUnaryExprAddress(UnaryExprAddress *p);
  void visitDotPostfixExpression(DotPostfixExpression *p);
  void visitArrowPostfixExpression(ArrowPostfixExpression *p);
  void visitPlusPlusPostfixExpression(PlusPlusPostfixExpression *p);
  void visitMinusMinusPostfixExpression(MinusMinusPostfixExpression *p);
  void visitIdentifierPrimaryExpression(IdentifierPrimaryExpression *p);
  void visitConstantPrimaryExpressin(ConstantPrimaryExpressin *p);
  void visitCommaExpressionPrimaryExpressin(CommaExpressionPrimaryExpressin *p);
  void visitBlockPrimaryExpressin(BlockPrimaryExpressin *p);
  void visitConstant(Constant *p); /* abstract class */
  void visitConstantInt(ConstantInt *p);
  void visitConstantFloat(ConstantFloat *p);
  void visitConstantChar(ConstantChar *p);
  void visitTypeName(TypeName *p); /* abstract class */
  void visitTypeNameDeclSpecList(TypeNameDeclSpecList *p);

  void visitInteger(Integer i);
  void visitDouble(Double d);
  void visitChar(Char c);
  void visitString(String s);
  void visitIdent(String s);
  void visitSIGNED(String s);
  void visitLBRACE(String s);
  void visitRBRACE(String s);
  void visitCONST(String s);
  void visitRESTRICT(String s);
  void visitVOLATILE(String s);
  void visitBLOCKATTRIBUTE(String s);
  void visitLBRACKET(String s);
  void visitRBRACKET(String s);
 protected:
  char *buf_;
  size_t cur_, buf_size;

  void inline bufAppend(const char *s)
  {
    size_t end = cur_ + strlen(s);
    if (end >= buf_size) {
      do buf_size *= 2; /* Double the buffer size */
      while (end >= buf_size);
      resizeBuffer();
    }
    strcpy(&buf_[cur_], s);
    cur_ = end;
  }

  void inline bufAppend(const char c)
  {
    if (cur_ + 1 >= buf_size)
    {
      buf_size *= 2; /* Double the buffer size */
      resizeBuffer();
    }
    buf_[cur_] = c;
    buf_[++cur_] = 0;
  }

  void inline bufAppend(String str)
  {
    const char *s = str.c_str();
    bufAppend(s);
  }
  void inline bufReset(void)
  {
    if (buf_) delete[] buf_;
    buf_size = PARTIAL_ACSL_BUFFER_INITIAL;
    buf_ = new char[buf_size];
    memset(buf_, 0, buf_size);
    cur_ = 0;
  }

  void inline resizeBuffer(void)
  {
    char *temp = new char[buf_size];
    if (buf_)
    {
      strcpy(temp, buf_);
      delete[] buf_;
    }
    buf_ = temp;
  }
};


}

#endif

