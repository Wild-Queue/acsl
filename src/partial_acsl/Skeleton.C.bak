/* File generated by the BNF Converter (bnfc 2.9.4.1). */

/*** Visitor Design Pattern Skeleton. ***/
/* This implements the common visitor design pattern.
   Note that this method uses Visitor-traversal of lists, so
   List->accept() does NOT traverse the list. This allows different
   algorithms to use context information differently. */

#include "Skeleton.H"


namespace partial_acsl
{
void Skeleton::visitProgram(Program *t) {} //abstract class
void Skeleton::visitGlobals(Globals *t) {} //abstract class
void Skeleton::visitGlobal(Global *t) {} //abstract class
void Skeleton::visitFunctionDef(FunctionDef *t) {} //abstract class
void Skeleton::visitFunctionDefStart(FunctionDefStart *t) {} //abstract class
void Skeleton::visitDeclSpecList(DeclSpecList *t) {} //abstract class
void Skeleton::visitDeclSpecListNoNamed(DeclSpecListNoNamed *t) {} //abstract class
void Skeleton::visitDeclSpecWOType(DeclSpecWOType *t) {} //abstract class
void Skeleton::visitTypeSpec(TypeSpec *t) {} //abstract class
void Skeleton::visitEnumerator(Enumerator *t) {} //abstract class
void Skeleton::visitMaybeComma(MaybeComma *t) {} //abstract class
void Skeleton::visitDeclarator(Declarator *t) {} //abstract class
void Skeleton::visitPointerOpt(PointerOpt *t) {} //abstract class
void Skeleton::visitDirectDecl(DirectDecl *t) {} //abstract class
void Skeleton::visitAttributesOrStatic(AttributesOrStatic *t) {} //abstract class
void Skeleton::visitCommaExpressionOpt(CommaExpressionOpt *t) {} //abstract class
void Skeleton::visitAttributesWithAsm(AttributesWithAsm *t) {} //abstract class
void Skeleton::visitRestParList(RestParList *t) {} //abstract class
void Skeleton::visitMaybeThreeDots(MaybeThreeDots *t) {} //abstract class
void Skeleton::visitParameterDecl(ParameterDecl *t) {} //abstract class
void Skeleton::visitGhostParameterOpt(GhostParameterOpt *t) {} //abstract class
void Skeleton::visitIdOrTypename(IdOrTypename *t) {} //abstract class
void Skeleton::visitIdOrTypenameAsId(IdOrTypenameAsId *t) {} //abstract class
void Skeleton::visitDeclaration(Declaration *t) {} //abstract class
void Skeleton::visitDeclAndInitDeclAttrList(DeclAndInitDeclAttrList *t) {} //abstract class
void Skeleton::visitInitDeclaratorAttr(InitDeclaratorAttr *t) {} //abstract class
void Skeleton::visitInitDeclarator(InitDeclarator *t) {} //abstract class
void Skeleton::visitInitExpression(InitExpression *t) {} //abstract class
void Skeleton::visitStructDeclList(StructDeclList *t) {} //abstract class
void Skeleton::visitFieldDecl(FieldDecl *t) {} //abstract class
void Skeleton::visitAttribute(Attribute *t) {} //abstract class
void Skeleton::visitBlock(Block *t) {} //abstract class
void Skeleton::visitBlockAttrs(BlockAttrs *t) {} //abstract class
void Skeleton::visitBlockElement(BlockElement *t) {} //abstract class
void Skeleton::visitStatement(Statement *t) {} //abstract class
void Skeleton::visitOptLoopAnnotations(OptLoopAnnotations *t) {} //abstract class
void Skeleton::visitForClause(ForClause *t) {} //abstract class
void Skeleton::visitAttr(Attr *t) {} //abstract class
void Skeleton::visitBasicAttribute(BasicAttribute *t) {} //abstract class
void Skeleton::visitAnnotatedStmt(AnnotatedStmt *t) {} //abstract class
void Skeleton::visitElsePart(ElsePart *t) {} //abstract class
void Skeleton::visitOptExpression(OptExpression *t) {} //abstract class
void Skeleton::visitExpression(Expression *t) {} //abstract class
void Skeleton::visitAssignExpr(AssignExpr *t) {} //abstract class
void Skeleton::visitConstant(Constant *t) {} //abstract class
void Skeleton::visitTypeName(TypeName *t) {} //abstract class
void Skeleton::visitArguments(Arguments *t) {} //abstract class

void Skeleton::visitAProgram(AProgram *a_program)
{
  /* Code For AProgram Goes Here */

  if (a_program->globals_) a_program->globals_->accept(this);

}

void Skeleton::visitNoGlobals(NoGlobals *no_globals)
{
  /* Code For NoGlobals Goes Here */


}

void Skeleton::visitSimpleGlobals(SimpleGlobals *simple_globals)
{
  /* Code For SimpleGlobals Goes Here */

  if (simple_globals->global_) simple_globals->global_->accept(this);
  if (simple_globals->globals_) simple_globals->globals_->accept(this);

}

void Skeleton::visitSemiColonGlobals(SemiColonGlobals *semi_colon_globals)
{
  /* Code For SemiColonGlobals Goes Here */

  if (semi_colon_globals->globals_) semi_colon_globals->globals_->accept(this);

}

void Skeleton::visitGlobalsDeclataion(GlobalsDeclataion *globals_declataion)
{
  /* Code For GlobalsDeclataion Goes Here */

  if (globals_declataion->declaration_) globals_declataion->declaration_->accept(this);

}

void Skeleton::visitGlobalsFunctionDef(GlobalsFunctionDef *globals_function_def)
{
  /* Code For GlobalsFunctionDef Goes Here */

  if (globals_function_def->functiondef_) globals_function_def->functiondef_->accept(this);

}

void Skeleton::visitSimpleFunctionDef(SimpleFunctionDef *simple_function_def)
{
  /* Code For SimpleFunctionDef Goes Here */

  if (simple_function_def->functiondefstart_) simple_function_def->functiondefstart_->accept(this);
  if (simple_function_def->block_) simple_function_def->block_->accept(this);

}

void Skeleton::visitFunctionDefStartDeclarator(FunctionDefStartDeclarator *function_def_start_declarator)
{
  /* Code For FunctionDefStartDeclarator Goes Here */

  if (function_def_start_declarator->declspeclist_) function_def_start_declarator->declspeclist_->accept(this);
  if (function_def_start_declarator->declarator_) function_def_start_declarator->declarator_->accept(this);

}

void Skeleton::visitDeclSpecWoType(DeclSpecWoType *decl_spec_wo_type)
{
  /* Code For DeclSpecWoType Goes Here */

  if (decl_spec_wo_type->declspecwotype_) decl_spec_wo_type->declspecwotype_->accept(this);

}

void Skeleton::visitDeclSpecWoTypeNext(DeclSpecWoTypeNext *decl_spec_wo_type_next)
{
  /* Code For DeclSpecWoTypeNext Goes Here */

  if (decl_spec_wo_type_next->declspecwotype_) decl_spec_wo_type_next->declspecwotype_->accept(this);
  if (decl_spec_wo_type_next->declspeclist_) decl_spec_wo_type_next->declspeclist_->accept(this);

}

void Skeleton::visitDeclSpecTypeSpec(DeclSpecTypeSpec *decl_spec_type_spec)
{
  /* Code For DeclSpecTypeSpec Goes Here */

  if (decl_spec_type_spec->typespec_) decl_spec_type_spec->typespec_->accept(this);

}

void Skeleton::visitDeclSpecTypeSpecNext(DeclSpecTypeSpecNext *decl_spec_type_spec_next)
{
  /* Code For DeclSpecTypeSpecNext Goes Here */

  if (decl_spec_type_spec_next->typespec_) decl_spec_type_spec_next->typespec_->accept(this);
  if (decl_spec_type_spec_next->declspeclistnonamed_) decl_spec_type_spec_next->declspeclistnonamed_->accept(this);

}

void Skeleton::visitDeclSpecNoNamedWOType(DeclSpecNoNamedWOType *decl_spec_no_named_wo_type)
{
  /* Code For DeclSpecNoNamedWOType Goes Here */

  if (decl_spec_no_named_wo_type->declspecwotype_) decl_spec_no_named_wo_type->declspecwotype_->accept(this);

}

void Skeleton::visitDeclSpecNoNamedWOTypeNext(DeclSpecNoNamedWOTypeNext *decl_spec_no_named_wo_type_next)
{
  /* Code For DeclSpecNoNamedWOTypeNext Goes Here */

  if (decl_spec_no_named_wo_type_next->declspecwotype_) decl_spec_no_named_wo_type_next->declspecwotype_->accept(this);
  if (decl_spec_no_named_wo_type_next->declspeclistnonamed_) decl_spec_no_named_wo_type_next->declspeclistnonamed_->accept(this);

}

void Skeleton::visitDeclSpecNoNamedTypeSpec(DeclSpecNoNamedTypeSpec *decl_spec_no_named_type_spec)
{
  /* Code For DeclSpecNoNamedTypeSpec Goes Here */

  if (decl_spec_no_named_type_spec->typespec_) decl_spec_no_named_type_spec->typespec_->accept(this);

}

void Skeleton::visitDeclSpecNoNamedTypeSpecNext(DeclSpecNoNamedTypeSpecNext *decl_spec_no_named_type_spec_next)
{
  /* Code For DeclSpecNoNamedTypeSpecNext Goes Here */

  if (decl_spec_no_named_type_spec_next->typespec_) decl_spec_no_named_type_spec_next->typespec_->accept(this);
  if (decl_spec_no_named_type_spec_next->declspeclistnonamed_) decl_spec_no_named_type_spec_next->declspeclistnonamed_->accept(this);

}

void Skeleton::visitDeclSpecWOTypeTypedefKeyWord(DeclSpecWOTypeTypedefKeyWord *decl_spec_wo_type_typedef_key_word)
{
  /* Code For DeclSpecWOTypeTypedefKeyWord Goes Here */


}

void Skeleton::visitDeclSpecWOTypeExternKeyWord(DeclSpecWOTypeExternKeyWord *decl_spec_wo_type_extern_key_word)
{
  /* Code For DeclSpecWOTypeExternKeyWord Goes Here */


}

void Skeleton::visitDeclSpecWOTypeStaticKeyWord(DeclSpecWOTypeStaticKeyWord *decl_spec_wo_type_static_key_word)
{
  /* Code For DeclSpecWOTypeStaticKeyWord Goes Here */


}

void Skeleton::visitDeclSpecWOTypeAutoKeyWord(DeclSpecWOTypeAutoKeyWord *decl_spec_wo_type_auto_key_word)
{
  /* Code For DeclSpecWOTypeAutoKeyWord Goes Here */


}

void Skeleton::visitDeclSpecWOTypeRegisterKeyWord(DeclSpecWOTypeRegisterKeyWord *decl_spec_wo_type_register_key_word)
{
  /* Code For DeclSpecWOTypeRegisterKeyWord Goes Here */


}

void Skeleton::visitTypeSpecVoidKeyWord(TypeSpecVoidKeyWord *type_spec_void_key_word)
{
  /* Code For TypeSpecVoidKeyWord Goes Here */


}

void Skeleton::visitTypeSpecCharKeyWord(TypeSpecCharKeyWord *type_spec_char_key_word)
{
  /* Code For TypeSpecCharKeyWord Goes Here */


}

void Skeleton::visitTypeSpecBoolKeyWord(TypeSpecBoolKeyWord *type_spec_bool_key_word)
{
  /* Code For TypeSpecBoolKeyWord Goes Here */

  visitBOOL(type_spec_bool_key_word->bool_);

}

void Skeleton::visitTypeSpecShortKeyWord(TypeSpecShortKeyWord *type_spec_short_key_word)
{
  /* Code For TypeSpecShortKeyWord Goes Here */


}

void Skeleton::visitTypeSpecInt32KeyWord(TypeSpecInt32KeyWord *type_spec_int_key_word)
{
  /* Code For TypeSpecInt32KeyWord Goes Here */


}

void Skeleton::visitTypeSpecIntKeyWord(TypeSpecIntKeyWord *type_spec_int_key_word)
{
  /* Code For TypeSpecIntKeyWord Goes Here */


}

void Skeleton::visitTypeSpecSizeTKeyWord(TypeSpecSizeTKeyWord *type_spec_size_t_key_word)
{
  /* Code For TypeSpecSizeTKeyWord Goes Here */


}

void Skeleton::visitTypeSpecLongKeyWord(TypeSpecLongKeyWord *type_spec_long_key_word)
{
  /* Code For TypeSpecLongKeyWord Goes Here */


}

void Skeleton::visitTypeSpecInt64KeyWord(TypeSpecInt64KeyWord *type_spec_int_key_word)
{
  /* Code For TypeSpecInt64KeyWord Goes Here */


}

void Skeleton::visitTypeSpecFloatKeyWord(TypeSpecFloatKeyWord *type_spec_float_key_word)
{
  /* Code For TypeSpecFloatKeyWord Goes Here */


}

void Skeleton::visitTypeSpecDoubleKeyWord(TypeSpecDoubleKeyWord *type_spec_double_key_word)
{
  /* Code For TypeSpecDoubleKeyWord Goes Here */


}

void Skeleton::visitTypeSpecSignedKeyWord(TypeSpecSignedKeyWord *type_spec_signed_key_word)
{
  /* Code For TypeSpecSignedKeyWord Goes Here */

  visitSIGNED(type_spec_signed_key_word->signed_);

}

void Skeleton::visitTypeSpecUnsignedKeyWord(TypeSpecUnsignedKeyWord *type_spec_unsigned_key_word)
{
  /* Code For TypeSpecUnsignedKeyWord Goes Here */


}

void Skeleton::visitStructId(StructId *struct_id)
{
  /* Code For StructId Goes Here */

  if (struct_id->idortypename_) struct_id->idortypename_->accept(this);

}

void Skeleton::visitStructIdBraces(StructIdBraces *struct_id_braces)
{
  /* Code For StructIdBraces Goes Here */

  if (struct_id_braces->idortypename_) struct_id_braces->idortypename_->accept(this);
  if (struct_id_braces->structdecllist_) struct_id_braces->structdecllist_->accept(this);

}

void Skeleton::visitStructBraces(StructBraces *struct_braces)
{
  /* Code For StructBraces Goes Here */

  if (struct_braces->structdecllist_) struct_braces->structdecllist_->accept(this);

}

void Skeleton::visitUnionId(UnionId *union_id)
{
  /* Code For UnionId Goes Here */

  if (union_id->idortypename_) union_id->idortypename_->accept(this);

}

void Skeleton::visitUnionIdBraces(UnionIdBraces *union_id_braces)
{
  /* Code For UnionIdBraces Goes Here */

  if (union_id_braces->idortypename_) union_id_braces->idortypename_->accept(this);
  if (union_id_braces->structdecllist_) union_id_braces->structdecllist_->accept(this);

}

void Skeleton::visitUnionBraces(UnionBraces *union_braces)
{
  /* Code For UnionBraces Goes Here */

  if (union_braces->structdecllist_) union_braces->structdecllist_->accept(this);

}

void Skeleton::visitEnumId(EnumId *enum_id)
{
  /* Code For EnumId Goes Here */

  if (enum_id->idortypename_) enum_id->idortypename_->accept(this);

}

void Skeleton::visitEnumIdBraces(EnumIdBraces *enum_id_braces)
{
  /* Code For EnumIdBraces Goes Here */

  if (enum_id_braces->idortypename_) enum_id_braces->idortypename_->accept(this);
  if (enum_id_braces->listenumerator_) enum_id_braces->listenumerator_->accept(this);
  if (enum_id_braces->maybecomma_) enum_id_braces->maybecomma_->accept(this);

}

void Skeleton::visitEnumBraces(EnumBraces *enum_braces)
{
  /* Code For EnumBraces Goes Here */

  if (enum_braces->listenumerator_) enum_braces->listenumerator_->accept(this);
  if (enum_braces->maybecomma_) enum_braces->maybecomma_->accept(this);

}

void Skeleton::visitIdentEnumerator(IdentEnumerator *ident_enumerator)
{
  /* Code For IdentEnumerator Goes Here */

  visitIdent(ident_enumerator->ident_);

}

void Skeleton::visitIdentAssignExpr(IdentAssignExpr *ident_assign_expr)
{
  /* Code For IdentAssignExpr Goes Here */

  visitIdent(ident_assign_expr->ident_);
  if (ident_assign_expr->expression_) ident_assign_expr->expression_->accept(this);

}

void Skeleton::visitNoComa(NoComa *no_coma)
{
  /* Code For NoComa Goes Here */


}

void Skeleton::visitComa(Coma *coma)
{
  /* Code For Coma Goes Here */


}

void Skeleton::visitADeclarator(ADeclarator *a_declarator)
{
  /* Code For ADeclarator Goes Here */

  if (a_declarator->pointeropt_) a_declarator->pointeropt_->accept(this);
  if (a_declarator->directdecl_) a_declarator->directdecl_->accept(this);
  if (a_declarator->attributeswithasm_) a_declarator->attributeswithasm_->accept(this);

}

void Skeleton::visitNoPointer(NoPointer *no_pointer)
{
  /* Code For NoPointer Goes Here */


}

void Skeleton::visitSomePointer(SomePointer *some_pointer)
{
  /* Code For SomePointer Goes Here */

  if (some_pointer->listattribute_) some_pointer->listattribute_->accept(this);
  if (some_pointer->pointeropt_) some_pointer->pointeropt_->accept(this);

}

void Skeleton::visitDirectDeclIdTypename(DirectDeclIdTypename *direct_decl_id_typename)
{
  /* Code For DirectDeclIdTypename Goes Here */

  if (direct_decl_id_typename->idortypename_) direct_decl_id_typename->idortypename_->accept(this);

}

void Skeleton::visitDirectDeclAttrStatic(DirectDeclAttrStatic *direct_decl_attr_static)
{
  /* Code For DirectDeclAttrStatic Goes Here */

  if (direct_decl_attr_static->directdecl_) direct_decl_attr_static->directdecl_->accept(this);
  if (direct_decl_attr_static->attributesorstatic_) direct_decl_attr_static->attributesorstatic_->accept(this);

}

void Skeleton::visitDirectDeclGhostParam(DirectDeclGhostParam *direct_decl_ghost_param)
{
  /* Code For DirectDeclGhostParam Goes Here */

  if (direct_decl_ghost_param->directdecl_) direct_decl_ghost_param->directdecl_->accept(this);
  if (direct_decl_ghost_param->ghostparameteropt_) direct_decl_ghost_param->ghostparameteropt_->accept(this);

}

void Skeleton::visitDirectDeclGhostRestParParam(DirectDeclGhostRestParParam *direct_decl_ghost_rest_par_param)
{
  /* Code For DirectDeclGhostRestParParam Goes Here */

  if (direct_decl_ghost_rest_par_param->directdecl_) direct_decl_ghost_rest_par_param->directdecl_->accept(this);
  if (direct_decl_ghost_rest_par_param->restparlist_) direct_decl_ghost_rest_par_param->restparlist_->accept(this);
  if (direct_decl_ghost_rest_par_param->ghostparameteropt_) direct_decl_ghost_rest_par_param->ghostparameteropt_->accept(this);

}

void Skeleton::visitAttributesCommaExpression(AttributesCommaExpression *attributes_comma_expression)
{
  /* Code For AttributesCommaExpression Goes Here */

  if (attributes_comma_expression->listattribute_) attributes_comma_expression->listattribute_->accept(this);
  if (attributes_comma_expression->commaexpressionopt_) attributes_comma_expression->commaexpressionopt_->accept(this);

}

void Skeleton::visitNoCommaExpression(NoCommaExpression *no_comma_expression)
{
  /* Code For NoCommaExpression Goes Here */


}

void Skeleton::visitSomeCommaExpression(SomeCommaExpression *some_comma_expression)
{
  /* Code For SomeCommaExpression Goes Here */

  if (some_comma_expression->listexpression_) some_comma_expression->listexpression_->accept(this);

}

void Skeleton::visitEmptyAttrWithASM(EmptyAttrWithASM *empty_attr_with_asm)
{
  /* Code For EmptyAttrWithASM Goes Here */


}

void Skeleton::visitSimpleParameterDecl(SimpleParameterDecl *simple_parameter_decl)
{
  /* Code For SimpleParameterDecl Goes Here */

  if (simple_parameter_decl->listparameterdecl_) simple_parameter_decl->listparameterdecl_->accept(this);
  if (simple_parameter_decl->maybethreedots_) simple_parameter_decl->maybethreedots_->accept(this);

}

void Skeleton::visitNoThreeDots(NoThreeDots *no_three_dots)
{
  /* Code For NoThreeDots Goes Here */


}

void Skeleton::visitThreeDots(ThreeDots *three_dots)
{
  /* Code For ThreeDots Goes Here */


}

void Skeleton::visitParameterDeclSpecDeclarator(ParameterDeclSpecDeclarator *parameter_decl_spec_declarator)
{
  /* Code For ParameterDeclSpecDeclarator Goes Here */

  if (parameter_decl_spec_declarator->pointeropt_) parameter_decl_spec_declarator->pointeropt_->accept(this);
  if (parameter_decl_spec_declarator->declspeclist_) parameter_decl_spec_declarator->declspeclist_->accept(this);
  if (parameter_decl_spec_declarator->declarator_) parameter_decl_spec_declarator->declarator_->accept(this);

}

void Skeleton::visitParameterDeclSpec(ParameterDeclSpec *parameter_decl_spec)
{
  /* Code For ParameterDeclSpec Goes Here */

  if (parameter_decl_spec->pointeropt_) parameter_decl_spec->pointeropt_->accept(this);
  if (parameter_decl_spec->declspeclist_) parameter_decl_spec->declspeclist_->accept(this);

}

void Skeleton::visitNoGhostParameter(NoGhostParameter *no_ghost_parameter)
{
  /* Code For NoGhostParameter Goes Here */


}

void Skeleton::visitIdTypename(IdTypename *id_typename)
{
  /* Code For IdTypename Goes Here */

  if (id_typename->idortypenameasid_) id_typename->idortypenameasid_->accept(this);

}

void Skeleton::visitIdOrTypenameAsIdIdentifier(IdOrTypenameAsIdIdentifier *id_or_typename_as_id_identifier)
{
  /* Code For IdOrTypenameAsIdIdentifier Goes Here */

  visitIdent(id_or_typename_as_id_identifier->ident_);

}

void Skeleton::visitDeclSpecInitDecl(DeclSpecInitDecl *decl_spec_init_decl)
{
  /* Code For DeclSpecInitDecl Goes Here */

  if (decl_spec_init_decl->declspeclist_) decl_spec_init_decl->declspeclist_->accept(this);
  if (decl_spec_init_decl->declandinitdeclattrlist_) decl_spec_init_decl->declandinitdeclattrlist_->accept(this);

}

void Skeleton::visitDeclSpec(DeclSpec *decl_spec)
{
  /* Code For DeclSpec Goes Here */

  if (decl_spec->declspeclist_) decl_spec->declspeclist_->accept(this);

}

void Skeleton::visitInitDeclaration(InitDeclaration *init_declaration)
{
  /* Code For InitDeclaration Goes Here */

  if (init_declaration->initdeclarator_) init_declaration->initdeclarator_->accept(this);

}

void Skeleton::visitInitDeclarationWithAttr(InitDeclarationWithAttr *init_declaration_with_attr)
{
  /* Code For InitDeclarationWithAttr Goes Here */

  if (init_declaration_with_attr->initdeclarator_) init_declaration_with_attr->initdeclarator_->accept(this);
  if (init_declaration_with_attr->listinitdeclaratorattr_) init_declaration_with_attr->listinitdeclaratorattr_->accept(this);

}

void Skeleton::visitInitDeclaratorAttribute(InitDeclaratorAttribute *init_declarator_attribute)
{
  /* Code For InitDeclaratorAttribute Goes Here */

  if (init_declarator_attribute->initdeclarator_) init_declarator_attribute->initdeclarator_->accept(this);

}

void Skeleton::visitSimpleInitDeclarator(SimpleInitDeclarator *simple_init_declarator)
{
  /* Code For SimpleInitDeclarator Goes Here */

  if (simple_init_declarator->declarator_) simple_init_declarator->declarator_->accept(this);

}

void Skeleton::visitInitDeclaratorExpression(InitDeclaratorExpression *init_declarator_expression)
{
  /* Code For InitDeclaratorExpression Goes Here */

  if (init_declarator_expression->declarator_) init_declarator_expression->declarator_->accept(this);
  if (init_declarator_expression->initexpression_) init_declarator_expression->initexpression_->accept(this);

}

void Skeleton::visitSimpleExpression(SimpleExpression *simple_expression)
{
  /* Code For SimpleExpression Goes Here */

  if (simple_expression->expression_) simple_expression->expression_->accept(this);

}

void Skeleton::visitEmptyStructDecl(EmptyStructDecl *empty_struct_decl)
{
  /* Code For EmptyStructDecl Goes Here */


}

void Skeleton::visitDeclSpecStructDecl(DeclSpecStructDecl *decl_spec_struct_decl)
{
  /* Code For DeclSpecStructDecl Goes Here */

  if (decl_spec_struct_decl->declspeclist_) decl_spec_struct_decl->declspeclist_->accept(this);
  if (decl_spec_struct_decl->structdecllist_) decl_spec_struct_decl->structdecllist_->accept(this);

}

void Skeleton::visitSemicolonStructDecl(SemicolonStructDecl *semicolon_struct_decl)
{
  /* Code For SemicolonStructDecl Goes Here */

  if (semicolon_struct_decl->structdecllist_) semicolon_struct_decl->structdecllist_->accept(this);

}

void Skeleton::visitSpecFieldDeclStructDecl(SpecFieldDeclStructDecl *spec_field_decl_struct_decl)
{
  /* Code For SpecFieldDeclStructDecl Goes Here */

  if (spec_field_decl_struct_decl->declspeclist_) spec_field_decl_struct_decl->declspeclist_->accept(this);
  if (spec_field_decl_struct_decl->listfielddecl_) spec_field_decl_struct_decl->listfielddecl_->accept(this);
  if (spec_field_decl_struct_decl->structdecllist_) spec_field_decl_struct_decl->structdecllist_->accept(this);

}

void Skeleton::visitFieldDeclDeclarator(FieldDeclDeclarator *field_decl_declarator)
{
  /* Code For FieldDeclDeclarator Goes Here */

  if (field_decl_declarator->declarator_) field_decl_declarator->declarator_->accept(this);

}

void Skeleton::visitFieldDeclDeclaratorColon(FieldDeclDeclaratorColon *field_decl_declarator_colon)
{
  /* Code For FieldDeclDeclaratorColon Goes Here */

  if (field_decl_declarator_colon->declarator_) field_decl_declarator_colon->declarator_->accept(this);
  if (field_decl_declarator_colon->expression_) field_decl_declarator_colon->expression_->accept(this);
  if (field_decl_declarator_colon->listattribute_) field_decl_declarator_colon->listattribute_->accept(this);

}

void Skeleton::visitFieldDeclColonExpression(FieldDeclColonExpression *field_decl_colon_expression)
{
  /* Code For FieldDeclColonExpression Goes Here */

  if (field_decl_colon_expression->expression_) field_decl_colon_expression->expression_->accept(this);

}

void Skeleton::visitAttributeConst(AttributeConst *attribute_const)
{
  /* Code For AttributeConst Goes Here */

  visitCONST(attribute_const->const_);

}

void Skeleton::visitABlock(ABlock *a_block)
{
  /* Code For ABlock Goes Here */

  if (a_block->blockattrs_) a_block->blockattrs_->accept(this);
  if (a_block->listblockelement_) a_block->listblockelement_->accept(this);

}

void Skeleton::visitNoBlockAttrs(NoBlockAttrs *no_block_attrs)
{
  /* Code For NoBlockAttrs Goes Here */


}

void Skeleton::visitSomeBlockAttrs(SomeBlockAttrs *some_block_attrs)
{
  /* Code For SomeBlockAttrs Goes Here */

  visitBLOCKATTRIBUTE(some_block_attrs->blockattribute_);
  if (some_block_attrs->listattr_) some_block_attrs->listattr_->accept(this);

}

void Skeleton::visitDeclarationElement(DeclarationElement *declaration_element)
{
  /* Code For DeclarationElement Goes Here */

  if (declaration_element->declaration_) declaration_element->declaration_->accept(this);

}

void Skeleton::visitStatementElement(StatementElement *statement_element)
{
  /* Code For StatementElement Goes Here */

  if (statement_element->statement_) statement_element->statement_->accept(this);

}

void Skeleton::visitSemicolonStatement(SemicolonStatement *semicolon_statement)
{
  /* Code For SemicolonStatement Goes Here */


}

void Skeleton::visitExprsStatement(ExprsStatement *exprs_statement)
{
  /* Code For ExprsStatement Goes Here */

  if (exprs_statement->listexpression_) exprs_statement->listexpression_->accept(this);

}

void Skeleton::visitBlockStatement(BlockStatement *block_statement)
{
  /* Code For BlockStatement Goes Here */

  if (block_statement->block_) block_statement->block_->accept(this);

}

void Skeleton::visitIfStatement(IfStatement *if_statement)
{
  /* Code For IfStatement Goes Here */

  if (if_statement->listexpression_) if_statement->listexpression_->accept(this);
  if (if_statement->annotatedstmt_) if_statement->annotatedstmt_->accept(this);
  if (if_statement->elsepart_) if_statement->elsepart_->accept(this);

}

void Skeleton::visitSwitchStatement(SwitchStatement *switch_statement)
{
  /* Code For SwitchStatement Goes Here */

  if (switch_statement->listexpression_) switch_statement->listexpression_->accept(this);
  if (switch_statement->annotatedstmt_) switch_statement->annotatedstmt_->accept(this);

}

void Skeleton::visitWhileStatement(WhileStatement *while_statement)
{
  /* Code For WhileStatement Goes Here */

  if (while_statement->optloopannotations_) while_statement->optloopannotations_->accept(this);
  if (while_statement->listexpression_) while_statement->listexpression_->accept(this);
  if (while_statement->annotatedstmt_) while_statement->annotatedstmt_->accept(this);

}

void Skeleton::visitDoWhileStatement(DoWhileStatement *do_while_statement)
{
  /* Code For DoWhileStatement Goes Here */

  if (do_while_statement->optloopannotations_) do_while_statement->optloopannotations_->accept(this);
  if (do_while_statement->annotatedstmt_) do_while_statement->annotatedstmt_->accept(this);
  if (do_while_statement->listexpression_) do_while_statement->listexpression_->accept(this);

}

void Skeleton::visitForStatement(ForStatement *for_statement)
{
  /* Code For ForStatement Goes Here */

  if (for_statement->optloopannotations_) for_statement->optloopannotations_->accept(this);
  if (for_statement->forclause_) for_statement->forclause_->accept(this);
  if (for_statement->optexpression_1) for_statement->optexpression_1->accept(this);
  if (for_statement->optexpression_2) for_statement->optexpression_2->accept(this);
  if (for_statement->annotatedstmt_) for_statement->annotatedstmt_->accept(this);

}

void Skeleton::visitColonStatement(ColonStatement *colon_statement)
{
  /* Code For ColonStatement Goes Here */

  if (colon_statement->idortypenameasid_) colon_statement->idortypenameasid_->accept(this);
  if (colon_statement->annotatedstmt_) colon_statement->annotatedstmt_->accept(this);

}

void Skeleton::visitCaseStatement(CaseStatement *case_statement)
{
  /* Code For CaseStatement Goes Here */

  if (case_statement->expression_) case_statement->expression_->accept(this);
  if (case_statement->annotatedstmt_) case_statement->annotatedstmt_->accept(this);

}

void Skeleton::visitCaseSliceStatement(CaseSliceStatement *case_slice_statement)
{
  /* Code For CaseSliceStatement Goes Here */

  if (case_slice_statement->expression_1) case_slice_statement->expression_1->accept(this);
  if (case_slice_statement->expression_2) case_slice_statement->expression_2->accept(this);
  if (case_slice_statement->annotatedstmt_) case_slice_statement->annotatedstmt_->accept(this);

}

void Skeleton::visitDefaultStatement(DefaultStatement *default_statement)
{
  /* Code For DefaultStatement Goes Here */

  if (default_statement->annotatedstmt_) default_statement->annotatedstmt_->accept(this);

}

void Skeleton::visitEmptyReturnStatement(EmptyReturnStatement *empty_return_statement)
{
  /* Code For EmptyReturnStatement Goes Here */


}

void Skeleton::visitReturnStatement(ReturnStatement *return_statement)
{
  /* Code For ReturnStatement Goes Here */

  if (return_statement->listexpression_) return_statement->listexpression_->accept(this);

}

void Skeleton::visitBreakStatement(BreakStatement *break_statement)
{
  /* Code For BreakStatement Goes Here */


}

void Skeleton::visitContinueStatement(ContinueStatement *continue_statement)
{
  /* Code For ContinueStatement Goes Here */


}

void Skeleton::visitGotoStatement(GotoStatement *goto_statement)
{
  /* Code For GotoStatement Goes Here */

  if (goto_statement->idortypenameasid_) goto_statement->idortypenameasid_->accept(this);

}

void Skeleton::visitStarGotoStatement(StarGotoStatement *star_goto_statement)
{
  /* Code For StarGotoStatement Goes Here */

  if (star_goto_statement->listexpression_) star_goto_statement->listexpression_->accept(this);

}

void Skeleton::visitTryExceptStatement(TryExceptStatement *try_except_statement)
{
  /* Code For TryExceptStatement Goes Here */

  if (try_except_statement->block_1) try_except_statement->block_1->accept(this);
  if (try_except_statement->listexpression_) try_except_statement->listexpression_->accept(this);
  if (try_except_statement->block_2) try_except_statement->block_2->accept(this);

}

void Skeleton::visitTryFinallyStatement(TryFinallyStatement *try_finally_statement)
{
  /* Code For TryFinallyStatement Goes Here */

  if (try_finally_statement->block_1) try_finally_statement->block_1->accept(this);
  if (try_finally_statement->block_2) try_finally_statement->block_2->accept(this);

}

void Skeleton::visitNoLoopAnnotations(NoLoopAnnotations *no_loop_annotations)
{
  /* Code For NoLoopAnnotations Goes Here */


}

void Skeleton::visitForClauseExpression(ForClauseExpression *for_clause_expression)
{
  /* Code For ForClauseExpression Goes Here */

  if (for_clause_expression->optexpression_) for_clause_expression->optexpression_->accept(this);

}

void Skeleton::visitForClauseDeclaration(ForClauseDeclaration *for_clause_declaration)
{
  /* Code For ForClauseDeclaration Goes Here */

  if (for_clause_declaration->declaration_) for_clause_declaration->declaration_->accept(this);

}

void Skeleton::visitAnAttr(AnAttr *an_attr)
{
  /* Code For AnAttr Goes Here */

  if (an_attr->attr_1) an_attr->attr_1->accept(this);
  if (an_attr->attr_2) an_attr->attr_2->accept(this);

}

void Skeleton::visitTernaryCond(TernaryCond *ternary_cond)
{
  /* Code For TernaryCond Goes Here */

  if (ternary_cond->attr_1) ternary_cond->attr_1->accept(this);
  if (ternary_cond->attr_2) ternary_cond->attr_2->accept(this);
  if (ternary_cond->attr_3) ternary_cond->attr_3->accept(this);

}

void Skeleton::visitOr(Or *or_)
{
  /* Code For Or Goes Here */

  if (or_->attr_1) or_->attr_1->accept(this);
  if (or_->attr_2) or_->attr_2->accept(this);

}

void Skeleton::visitAnd(And *and_)
{
  /* Code For And Goes Here */

  if (and_->attr_1) and_->attr_1->accept(this);
  if (and_->attr_2) and_->attr_2->accept(this);

}

void Skeleton::visitBitOr(BitOr *bit_or)
{
  /* Code For BitOr Goes Here */

  if (bit_or->attr_1) bit_or->attr_1->accept(this);
  if (bit_or->attr_2) bit_or->attr_2->accept(this);

}

void Skeleton::visitXor(Xor *xor_)
{
  /* Code For Xor Goes Here */

  if (xor_->attr_1) xor_->attr_1->accept(this);
  if (xor_->attr_2) xor_->attr_2->accept(this);

}

void Skeleton::visitBitAnd(BitAnd *bit_and)
{
  /* Code For BitAnd Goes Here */

  if (bit_and->attr_1) bit_and->attr_1->accept(this);
  if (bit_and->attr_2) bit_and->attr_2->accept(this);

}

void Skeleton::visitEqualEqual(EqualEqual *equal_equal)
{
  /* Code For EqualEqual Goes Here */

  if (equal_equal->attr_1) equal_equal->attr_1->accept(this);
  if (equal_equal->attr_2) equal_equal->attr_2->accept(this);

}

void Skeleton::visitNotEqual(NotEqual *not_equal)
{
  /* Code For NotEqual Goes Here */

  if (not_equal->attr_1) not_equal->attr_1->accept(this);
  if (not_equal->attr_2) not_equal->attr_2->accept(this);

}

void Skeleton::visitLess(Less *less)
{
  /* Code For Less Goes Here */

  if (less->attr_1) less->attr_1->accept(this);
  if (less->attr_2) less->attr_2->accept(this);

}

void Skeleton::visitGreater(Greater *greater)
{
  /* Code For Greater Goes Here */

  if (greater->attr_1) greater->attr_1->accept(this);
  if (greater->attr_2) greater->attr_2->accept(this);

}

void Skeleton::visitLessEqual(LessEqual *less_equal)
{
  /* Code For LessEqual Goes Here */

  if (less_equal->attr_1) less_equal->attr_1->accept(this);
  if (less_equal->attr_2) less_equal->attr_2->accept(this);

}

void Skeleton::visitGreaterEqual(GreaterEqual *greater_equal)
{
  /* Code For GreaterEqual Goes Here */

  if (greater_equal->attr_1) greater_equal->attr_1->accept(this);
  if (greater_equal->attr_2) greater_equal->attr_2->accept(this);

}

void Skeleton::visitLeftShiftOp(LeftShiftOp *left_shift_op)
{
  /* Code For LeftShiftOp Goes Here */

  if (left_shift_op->attr_1) left_shift_op->attr_1->accept(this);
  if (left_shift_op->attr_2) left_shift_op->attr_2->accept(this);

}

void Skeleton::visitRightShiftOp(RightShiftOp *right_shift_op)
{
  /* Code For RightShiftOp Goes Here */

  if (right_shift_op->attr_1) right_shift_op->attr_1->accept(this);
  if (right_shift_op->attr_2) right_shift_op->attr_2->accept(this);

}

void Skeleton::visitAddOp(AddOp *add_op)
{
  /* Code For AddOp Goes Here */

  if (add_op->attr_1) add_op->attr_1->accept(this);
  if (add_op->attr_2) add_op->attr_2->accept(this);

}

void Skeleton::visitSubOp(SubOp *sub_op)
{
  /* Code For SubOp Goes Here */

  if (sub_op->attr_1) sub_op->attr_1->accept(this);
  if (sub_op->attr_2) sub_op->attr_2->accept(this);

}

void Skeleton::visitMultOp(MultOp *mult_op)
{
  /* Code For MultOp Goes Here */

  if (mult_op->attr_1) mult_op->attr_1->accept(this);
  if (mult_op->attr_2) mult_op->attr_2->accept(this);

}

void Skeleton::visitDivOp(DivOp *div_op)
{
  /* Code For DivOp Goes Here */

  if (div_op->attr_1) div_op->attr_1->accept(this);
  if (div_op->attr_2) div_op->attr_2->accept(this);

}

void Skeleton::visitModOp(ModOp *mod_op)
{
  /* Code For ModOp Goes Here */

  if (mod_op->attr_1) mod_op->attr_1->accept(this);
  if (mod_op->attr_2) mod_op->attr_2->accept(this);

}

void Skeleton::visitSizeOfAttrUnary(SizeOfAttrUnary *size_of_attr_unary)
{
  /* Code For SizeOfAttrUnary Goes Here */

  if (size_of_attr_unary->assignexpr_) size_of_attr_unary->assignexpr_->accept(this);

}

void Skeleton::visitSizeOfAttrTypeName(SizeOfAttrTypeName *size_of_attr_type_name)
{
  /* Code For SizeOfAttrTypeName Goes Here */

  if (size_of_attr_type_name->typename_) size_of_attr_type_name->typename_->accept(this);

}

void Skeleton::visitAlignOfAttrUnary(AlignOfAttrUnary *align_of_attr_unary)
{
  /* Code For AlignOfAttrUnary Goes Here */

  visitALIGNOF(align_of_attr_unary->alignof_);
  if (align_of_attr_unary->assignexpr_) align_of_attr_unary->assignexpr_->accept(this);

}

void Skeleton::visitAlignOfAttrTypeName(AlignOfAttrTypeName *align_of_attr_type_name)
{
  /* Code For AlignOfAttrTypeName Goes Here */

  visitALIGNOF(align_of_attr_type_name->alignof_);
  if (align_of_attr_type_name->typename_) align_of_attr_type_name->typename_->accept(this);

}

void Skeleton::visitPlusUnaryAttr(PlusUnaryAttr *plus_unary_attr)
{
  /* Code For PlusUnaryAttr Goes Here */

  if (plus_unary_attr->attr_) plus_unary_attr->attr_->accept(this);

}

void Skeleton::visitMinusUnaryAttr(MinusUnaryAttr *minus_unary_attr)
{
  /* Code For MinusUnaryAttr Goes Here */

  if (minus_unary_attr->attr_) minus_unary_attr->attr_->accept(this);

}

void Skeleton::visitMultUnaryAttr(MultUnaryAttr *mult_unary_attr)
{
  /* Code For MultUnaryAttr Goes Here */

  if (mult_unary_attr->attr_) mult_unary_attr->attr_->accept(this);

}

void Skeleton::visitAmpUnaryAttr(AmpUnaryAttr *amp_unary_attr)
{
  /* Code For AmpUnaryAttr Goes Here */

  if (amp_unary_attr->attr_) amp_unary_attr->attr_->accept(this);

}

void Skeleton::visitNotUnaryAttr(NotUnaryAttr *not_unary_attr)
{
  /* Code For NotUnaryAttr Goes Here */

  if (not_unary_attr->attr_) not_unary_attr->attr_->accept(this);

}

void Skeleton::visitTildeUnaryAttr(TildeUnaryAttr *tilde_unary_attr)
{
  /* Code For TildeUnaryAttr Goes Here */

  if (tilde_unary_attr->attr_) tilde_unary_attr->attr_->accept(this);

}

void Skeleton::visitFuncationCall(FuncationCall *funcation_call)
{
  /* Code For FuncationCall Goes Here */

  if (funcation_call->idortypenameasid_) funcation_call->idortypenameasid_->accept(this);
  if (funcation_call->listattr_) funcation_call->listattr_->accept(this);

}

void Skeleton::visitProcedureCall(ProcedureCall *procedure_call)
{
  /* Code For ProcedureCall Goes Here */

  if (procedure_call->idortypenameasid_) procedure_call->idortypenameasid_->accept(this);

}

void Skeleton::visitArrowAttr(ArrowAttr *arrow_attr)
{
  /* Code For ArrowAttr Goes Here */

  if (arrow_attr->attr_) arrow_attr->attr_->accept(this);
  if (arrow_attr->idortypename_) arrow_attr->idortypename_->accept(this);

}

void Skeleton::visitDotAttr(DotAttr *dot_attr)
{
  /* Code For DotAttr Goes Here */

  if (dot_attr->attr_) dot_attr->attr_->accept(this);
  if (dot_attr->idortypename_) dot_attr->idortypename_->accept(this);

}

void Skeleton::visitArrayAttr(ArrayAttr *array_attr)
{
  /* Code For ArrayAttr Goes Here */

  if (array_attr->attr_1) array_attr->attr_1->accept(this);
  if (array_attr->attr_2) array_attr->attr_2->accept(this);

}

void Skeleton::visitBasicAttr(BasicAttr *basic_attr)
{
  /* Code For BasicAttr Goes Here */

  if (basic_attr->basicattribute_) basic_attr->basicattribute_->accept(this);

}

void Skeleton::visitBasicAttrConsInt(BasicAttrConsInt *basic_attr_cons_int)
{
  /* Code For BasicAttrConsInt Goes Here */

  visitInteger(basic_attr_cons_int->integer_);

}

void Skeleton::visitBasicAttrConsFloat(BasicAttrConsFloat *basic_attr_cons_float)
{
  /* Code For BasicAttrConsFloat Goes Here */

  visitDouble(basic_attr_cons_float->double_);

}

void Skeleton::visitAnnotatedStatement(AnnotatedStatement *annotated_statement)
{
  /* Code For AnnotatedStatement Goes Here */

  if (annotated_statement->statement_) annotated_statement->statement_->accept(this);

}

void Skeleton::visitNoElsePart(NoElsePart *no_else_part)
{
  /* Code For NoElsePart Goes Here */


}

void Skeleton::visitSimpleElsePart(SimpleElsePart *simple_else_part)
{
  /* Code For SimpleElsePart Goes Here */

  if (simple_else_part->annotatedstmt_) simple_else_part->annotatedstmt_->accept(this);

}

void Skeleton::visitNoExpression(NoExpression *no_expression)
{
  /* Code For NoExpression Goes Here */


}

void Skeleton::visitSomeExpression(SomeExpression *some_expression)
{
  /* Code For SomeExpression Goes Here */

  if (some_expression->listexpression_) some_expression->listexpression_->accept(this);

}

void Skeleton::visitAssignmentExpr(AssignmentExpr *assignment_expr)
{
  /* Code For AssignmentExpr Goes Here */

  if (assignment_expr->assignexpr_) assignment_expr->assignexpr_->accept(this);

}

void Skeleton::visitEqAssignExpr(EqAssignExpr *eq_assign_expr)
{
  /* Code For EqAssignExpr Goes Here */

  if (eq_assign_expr->assignexpr_1) eq_assign_expr->assignexpr_1->accept(this);
  if (eq_assign_expr->assignexpr_2) eq_assign_expr->assignexpr_2->accept(this);

}

void Skeleton::visitPlusEqAssignExpr(PlusEqAssignExpr *plus_eq_assign_expr)
{
  /* Code For PlusEqAssignExpr Goes Here */

  if (plus_eq_assign_expr->assignexpr_1) plus_eq_assign_expr->assignexpr_1->accept(this);
  if (plus_eq_assign_expr->assignexpr_2) plus_eq_assign_expr->assignexpr_2->accept(this);

}

void Skeleton::visitMinusEqAssignExpr(MinusEqAssignExpr *minus_eq_assign_expr)
{
  /* Code For MinusEqAssignExpr Goes Here */

  if (minus_eq_assign_expr->assignexpr_1) minus_eq_assign_expr->assignexpr_1->accept(this);
  if (minus_eq_assign_expr->assignexpr_2) minus_eq_assign_expr->assignexpr_2->accept(this);

}

void Skeleton::visitMultEqAssignExpr(MultEqAssignExpr *mult_eq_assign_expr)
{
  /* Code For MultEqAssignExpr Goes Here */

  if (mult_eq_assign_expr->assignexpr_1) mult_eq_assign_expr->assignexpr_1->accept(this);
  if (mult_eq_assign_expr->assignexpr_2) mult_eq_assign_expr->assignexpr_2->accept(this);

}

void Skeleton::visitDivEqAssignExpr(DivEqAssignExpr *div_eq_assign_expr)
{
  /* Code For DivEqAssignExpr Goes Here */

  if (div_eq_assign_expr->assignexpr_1) div_eq_assign_expr->assignexpr_1->accept(this);
  if (div_eq_assign_expr->assignexpr_2) div_eq_assign_expr->assignexpr_2->accept(this);

}

void Skeleton::visitModEqAssignExpr(ModEqAssignExpr *mod_eq_assign_expr)
{
  /* Code For ModEqAssignExpr Goes Here */

  if (mod_eq_assign_expr->assignexpr_1) mod_eq_assign_expr->assignexpr_1->accept(this);
  if (mod_eq_assign_expr->assignexpr_2) mod_eq_assign_expr->assignexpr_2->accept(this);

}

void Skeleton::visitAndEqAssignExpr(AndEqAssignExpr *and_eq_assign_expr)
{
  /* Code For AndEqAssignExpr Goes Here */

  if (and_eq_assign_expr->assignexpr_1) and_eq_assign_expr->assignexpr_1->accept(this);
  if (and_eq_assign_expr->assignexpr_2) and_eq_assign_expr->assignexpr_2->accept(this);

}

void Skeleton::visitOrEqAssignExpr(OrEqAssignExpr *or_eq_assign_expr)
{
  /* Code For OrEqAssignExpr Goes Here */

  if (or_eq_assign_expr->assignexpr_1) or_eq_assign_expr->assignexpr_1->accept(this);
  if (or_eq_assign_expr->assignexpr_2) or_eq_assign_expr->assignexpr_2->accept(this);

}

void Skeleton::visitXorEqAssignExpr(XorEqAssignExpr *xor_eq_assign_expr)
{
  /* Code For XorEqAssignExpr Goes Here */

  if (xor_eq_assign_expr->assignexpr_1) xor_eq_assign_expr->assignexpr_1->accept(this);
  if (xor_eq_assign_expr->assignexpr_2) xor_eq_assign_expr->assignexpr_2->accept(this);

}

void Skeleton::visitLeftShiftEqAssignExpr(LeftShiftEqAssignExpr *left_shift_eq_assign_expr)
{
  /* Code For LeftShiftEqAssignExpr Goes Here */

  if (left_shift_eq_assign_expr->assignexpr_1) left_shift_eq_assign_expr->assignexpr_1->accept(this);
  if (left_shift_eq_assign_expr->assignexpr_2) left_shift_eq_assign_expr->assignexpr_2->accept(this);

}

void Skeleton::visitRightShiftEqAssignExpr(RightShiftEqAssignExpr *right_shift_eq_assign_expr)
{
  /* Code For RightShiftEqAssignExpr Goes Here */

  if (right_shift_eq_assign_expr->assignexpr_1) right_shift_eq_assign_expr->assignexpr_1->accept(this);
  if (right_shift_eq_assign_expr->assignexpr_2) right_shift_eq_assign_expr->assignexpr_2->accept(this);

}

void Skeleton::visitTernaryCondExpr(TernaryCondExpr *ternary_cond_expr)
{
  /* Code For TernaryCondExpr Goes Here */

  if (ternary_cond_expr->assignexpr_1) ternary_cond_expr->assignexpr_1->accept(this);
  if (ternary_cond_expr->optexpression_) ternary_cond_expr->optexpression_->accept(this);
  if (ternary_cond_expr->assignexpr_2) ternary_cond_expr->assignexpr_2->accept(this);

}

void Skeleton::visitOrExpr(OrExpr *or_expr)
{
  /* Code For OrExpr Goes Here */

  if (or_expr->assignexpr_1) or_expr->assignexpr_1->accept(this);
  if (or_expr->assignexpr_2) or_expr->assignexpr_2->accept(this);

}

void Skeleton::visitAndExpr(AndExpr *and_expr)
{
  /* Code For AndExpr Goes Here */

  if (and_expr->assignexpr_1) and_expr->assignexpr_1->accept(this);
  if (and_expr->assignexpr_2) and_expr->assignexpr_2->accept(this);

}

void Skeleton::visitBitOrExpr(BitOrExpr *bit_or_expr)
{
  /* Code For BitOrExpr Goes Here */

  if (bit_or_expr->assignexpr_1) bit_or_expr->assignexpr_1->accept(this);
  if (bit_or_expr->assignexpr_2) bit_or_expr->assignexpr_2->accept(this);

}

void Skeleton::visitBitXorExpr(BitXorExpr *bit_xor_expr)
{
  /* Code For BitXorExpr Goes Here */

  if (bit_xor_expr->assignexpr_1) bit_xor_expr->assignexpr_1->accept(this);
  if (bit_xor_expr->assignexpr_2) bit_xor_expr->assignexpr_2->accept(this);

}

void Skeleton::visitBitAndExpr(BitAndExpr *bit_and_expr)
{
  /* Code For BitAndExpr Goes Here */

  if (bit_and_expr->assignexpr_1) bit_and_expr->assignexpr_1->accept(this);
  if (bit_and_expr->assignexpr_2) bit_and_expr->assignexpr_2->accept(this);

}

void Skeleton::visitEqExpr(EqExpr *eq_expr)
{
  /* Code For EqExpr Goes Here */

  if (eq_expr->assignexpr_1) eq_expr->assignexpr_1->accept(this);
  if (eq_expr->assignexpr_2) eq_expr->assignexpr_2->accept(this);

}

void Skeleton::visitNotEqExpr(NotEqExpr *not_eq_expr)
{
  /* Code For NotEqExpr Goes Here */

  if (not_eq_expr->assignexpr_1) not_eq_expr->assignexpr_1->accept(this);
  if (not_eq_expr->assignexpr_2) not_eq_expr->assignexpr_2->accept(this);

}

void Skeleton::visitLessExpr(LessExpr *less_expr)
{
  /* Code For LessExpr Goes Here */

  if (less_expr->assignexpr_1) less_expr->assignexpr_1->accept(this);
  if (less_expr->assignexpr_2) less_expr->assignexpr_2->accept(this);

}

void Skeleton::visitGreaterExpr(GreaterExpr *greater_expr)
{
  /* Code For GreaterExpr Goes Here */

  if (greater_expr->assignexpr_1) greater_expr->assignexpr_1->accept(this);
  if (greater_expr->assignexpr_2) greater_expr->assignexpr_2->accept(this);

}

void Skeleton::visitLessEqualExpr(LessEqualExpr *less_equal_expr)
{
  /* Code For LessEqualExpr Goes Here */

  if (less_equal_expr->assignexpr_1) less_equal_expr->assignexpr_1->accept(this);
  if (less_equal_expr->assignexpr_2) less_equal_expr->assignexpr_2->accept(this);

}

void Skeleton::visitGreaterEqualExpr(GreaterEqualExpr *greater_equal_expr)
{
  /* Code For GreaterEqualExpr Goes Here */

  if (greater_equal_expr->assignexpr_1) greater_equal_expr->assignexpr_1->accept(this);
  if (greater_equal_expr->assignexpr_2) greater_equal_expr->assignexpr_2->accept(this);

}

void Skeleton::visitLeftShiftExpr(LeftShiftExpr *left_shift_expr)
{
  /* Code For LeftShiftExpr Goes Here */

  if (left_shift_expr->assignexpr_1) left_shift_expr->assignexpr_1->accept(this);
  if (left_shift_expr->assignexpr_2) left_shift_expr->assignexpr_2->accept(this);

}

void Skeleton::visitRightShiftExpr(RightShiftExpr *right_shift_expr)
{
  /* Code For RightShiftExpr Goes Here */

  if (right_shift_expr->assignexpr_1) right_shift_expr->assignexpr_1->accept(this);
  if (right_shift_expr->assignexpr_2) right_shift_expr->assignexpr_2->accept(this);

}

void Skeleton::visitPlusExpr(PlusExpr *plus_expr)
{
  /* Code For PlusExpr Goes Here */

  if (plus_expr->assignexpr_1) plus_expr->assignexpr_1->accept(this);
  if (plus_expr->assignexpr_2) plus_expr->assignexpr_2->accept(this);

}

void Skeleton::visitMinusExpr(MinusExpr *minus_expr)
{
  /* Code For MinusExpr Goes Here */

  if (minus_expr->assignexpr_1) minus_expr->assignexpr_1->accept(this);
  if (minus_expr->assignexpr_2) minus_expr->assignexpr_2->accept(this);

}

void Skeleton::visitMulsExpr(MulsExpr *muls_expr)
{
  /* Code For MulsExpr Goes Here */

  if (muls_expr->assignexpr_1) muls_expr->assignexpr_1->accept(this);
  if (muls_expr->assignexpr_2) muls_expr->assignexpr_2->accept(this);

}

void Skeleton::visitDivExpr(DivExpr *div_expr)
{
  /* Code For DivExpr Goes Here */

  if (div_expr->assignexpr_1) div_expr->assignexpr_1->accept(this);
  if (div_expr->assignexpr_2) div_expr->assignexpr_2->accept(this);

}

void Skeleton::visitModExpr(ModExpr *mod_expr)
{
  /* Code For ModExpr Goes Here */

  if (mod_expr->assignexpr_1) mod_expr->assignexpr_1->accept(this);
  if (mod_expr->assignexpr_2) mod_expr->assignexpr_2->accept(this);

}

void Skeleton::visitCastExpr(CastExpr *cast_expr)
{
  /* Code For CastExpr Goes Here */

  if (cast_expr->typename_) cast_expr->typename_->accept(this);
  if (cast_expr->assignexpr_) cast_expr->assignexpr_->accept(this);

}

void Skeleton::visitUnaryExprPlusPlus(UnaryExprPlusPlus *unary_expr_plus_plus)
{
  /* Code For UnaryExprPlusPlus Goes Here */

  if (unary_expr_plus_plus->assignexpr_) unary_expr_plus_plus->assignexpr_->accept(this);

}

void Skeleton::visitUnaryExprMinusMinus(UnaryExprMinusMinus *unary_expr_minus_minus)
{
  /* Code For UnaryExprMinusMinus Goes Here */

  if (unary_expr_minus_minus->assignexpr_) unary_expr_minus_minus->assignexpr_->accept(this);

}

void Skeleton::visitUnaryExprSizeOf(UnaryExprSizeOf *unary_expr_size_of)
{
  /* Code For UnaryExprSizeOf Goes Here */

  if (unary_expr_size_of->assignexpr_) unary_expr_size_of->assignexpr_->accept(this);

}

void Skeleton::visitUnaryExprSizeOfTypeName(UnaryExprSizeOfTypeName *unary_expr_size_of_type_name)
{
  /* Code For UnaryExprSizeOfTypeName Goes Here */

  if (unary_expr_size_of_type_name->typename_) unary_expr_size_of_type_name->typename_->accept(this);

}

void Skeleton::visitUnaryExprAlignOfUnaryExpr(UnaryExprAlignOfUnaryExpr *unary_expr_align_of_unary_expr)
{
  /* Code For UnaryExprAlignOfUnaryExpr Goes Here */

  visitALIGNOF(unary_expr_align_of_unary_expr->alignof_);
  if (unary_expr_align_of_unary_expr->assignexpr_) unary_expr_align_of_unary_expr->assignexpr_->accept(this);

}

void Skeleton::visitUnaryExprAlignOfTypeName(UnaryExprAlignOfTypeName *unary_expr_align_of_type_name)
{
  /* Code For UnaryExprAlignOfTypeName Goes Here */

  visitALIGNOF(unary_expr_align_of_type_name->alignof_);
  if (unary_expr_align_of_type_name->typename_) unary_expr_align_of_type_name->typename_->accept(this);

}

void Skeleton::visitUnaryExprPlus(UnaryExprPlus *unary_expr_plus)
{
  /* Code For UnaryExprPlus Goes Here */

  if (unary_expr_plus->assignexpr_) unary_expr_plus->assignexpr_->accept(this);

}

void Skeleton::visitUnaryExprMinus(UnaryExprMinus *unary_expr_minus)
{
  /* Code For UnaryExprMinus Goes Here */

  if (unary_expr_minus->assignexpr_) unary_expr_minus->assignexpr_->accept(this);

}

void Skeleton::visitUnaryExprMult(UnaryExprMult *unary_expr_mult)
{
  /* Code For UnaryExprMult Goes Here */

  if (unary_expr_mult->assignexpr_) unary_expr_mult->assignexpr_->accept(this);

}

void Skeleton::visitUnaryExprAmp(UnaryExprAmp *unary_expr_amp)
{
  /* Code For UnaryExprAmp Goes Here */

  if (unary_expr_amp->assignexpr_) unary_expr_amp->assignexpr_->accept(this);

}

void Skeleton::visitUnaryExprNot(UnaryExprNot *unary_expr_not)
{
  /* Code For UnaryExprNot Goes Here */

  if (unary_expr_not->assignexpr_) unary_expr_not->assignexpr_->accept(this);

}

void Skeleton::visitUnaryExprTilde(UnaryExprTilde *unary_expr_tilde)
{
  /* Code For UnaryExprTilde Goes Here */

  if (unary_expr_tilde->assignexpr_) unary_expr_tilde->assignexpr_->accept(this);

}

void Skeleton::visitUnaryExprAddress(UnaryExprAddress *unary_expr_address)
{
  /* Code For UnaryExprAddress Goes Here */

  if (unary_expr_address->idortypenameasid_) unary_expr_address->idortypenameasid_->accept(this);

}

void Skeleton::visitBracketsPostfixExpression(BracketsPostfixExpression *brackets_postfix_expression)
{
  /* Code For BracketsPostfixExpression Goes Here */

  if (brackets_postfix_expression->assignexpr_) brackets_postfix_expression->assignexpr_->accept(this);
  if (brackets_postfix_expression->listexpression_) brackets_postfix_expression->listexpression_->accept(this);

}

void Skeleton::visitArgumentsPostfixExpression(ArgumentsPostfixExpression *arguments_postfix_expression)
{
  /* Code For ArgumentsPostfixExpression Goes Here */

  if (arguments_postfix_expression->assignexpr_) arguments_postfix_expression->assignexpr_->accept(this);
  if (arguments_postfix_expression->arguments_) arguments_postfix_expression->arguments_->accept(this);

}

void Skeleton::visitDotPostfixExpression(DotPostfixExpression *dot_postfix_expression)
{
  /* Code For DotPostfixExpression Goes Here */

  if (dot_postfix_expression->assignexpr_) dot_postfix_expression->assignexpr_->accept(this);
  if (dot_postfix_expression->idortypename_) dot_postfix_expression->idortypename_->accept(this);

}

void Skeleton::visitArrowPostfixExpression(ArrowPostfixExpression *arrow_postfix_expression)
{
  /* Code For ArrowPostfixExpression Goes Here */

  if (arrow_postfix_expression->assignexpr_) arrow_postfix_expression->assignexpr_->accept(this);
  if (arrow_postfix_expression->idortypename_) arrow_postfix_expression->idortypename_->accept(this);

}

void Skeleton::visitPlusPlusPostfixExpression(PlusPlusPostfixExpression *plus_plus_postfix_expression)
{
  /* Code For PlusPlusPostfixExpression Goes Here */

  if (plus_plus_postfix_expression->assignexpr_) plus_plus_postfix_expression->assignexpr_->accept(this);

}

void Skeleton::visitMinusMinusPostfixExpression(MinusMinusPostfixExpression *minus_minus_postfix_expression)
{
  /* Code For MinusMinusPostfixExpression Goes Here */

  if (minus_minus_postfix_expression->assignexpr_) minus_minus_postfix_expression->assignexpr_->accept(this);

}

void Skeleton::visitIdentifierPrimaryExpression(IdentifierPrimaryExpression *identifier_primary_expression)
{
  /* Code For IdentifierPrimaryExpression Goes Here */

  visitIdent(identifier_primary_expression->ident_);

}

void Skeleton::visitConstantPrimaryExpressin(ConstantPrimaryExpressin *constant_primary_expressin)
{
  /* Code For ConstantPrimaryExpressin Goes Here */

  if (constant_primary_expressin->constant_) constant_primary_expressin->constant_->accept(this);

}

void Skeleton::visitCommaExpressionPrimaryExpressin(CommaExpressionPrimaryExpressin *comma_expression_primary_expressin)
{
  /* Code For CommaExpressionPrimaryExpressin Goes Here */

  if (comma_expression_primary_expressin->listexpression_) comma_expression_primary_expressin->listexpression_->accept(this);

}

void Skeleton::visitBlockPrimaryExpressin(BlockPrimaryExpressin *block_primary_expressin)
{
  /* Code For BlockPrimaryExpressin Goes Here */

  if (block_primary_expressin->block_) block_primary_expressin->block_->accept(this);

}

void Skeleton::visitConstantInt(ConstantInt *constant_int)
{
  /* Code For ConstantInt Goes Here */

  visitInteger(constant_int->integer_);

}

void Skeleton::visitConstantFloat(ConstantFloat *constant_float)
{
  /* Code For ConstantFloat Goes Here */

  visitDouble(constant_float->double_);

}

void Skeleton::visitConstantChar(ConstantChar *constant_char)
{
  /* Code For ConstantChar Goes Here */

  visitChar(constant_char->char_);

}

void Skeleton::visitConstantString(ConstantString *constant_string)
{
  /* Code For ConstantString Goes Here */

  visitString(constant_string->string_);

}

void Skeleton::visitTypeNameDeclSpecList(TypeNameDeclSpecList *type_name_decl_spec_list)
{
  /* Code For TypeNameDeclSpecList Goes Here */

  if (type_name_decl_spec_list->declspeclist_) type_name_decl_spec_list->declspeclist_->accept(this);

}

void Skeleton::visitNoArguments(NoArguments *no_arguments)
{
  /* Code For NoArguments Goes Here */


}

void Skeleton::visitSomeArguments(SomeArguments *some_arguments)
{
  /* Code For SomeArguments Goes Here */

  if (some_arguments->listexpression_) some_arguments->listexpression_->accept(this);

}


void Skeleton::visitListEnumerator(ListEnumerator *list_enumerator)
{
  for (ListEnumerator::iterator i = list_enumerator->begin() ; i != list_enumerator->end() ; ++i)
  {
    (*i)->accept(this);
  }
}

void Skeleton::visitListParameterDecl(ListParameterDecl *list_parameter_decl)
{
  for (ListParameterDecl::iterator i = list_parameter_decl->begin() ; i != list_parameter_decl->end() ; ++i)
  {
    (*i)->accept(this);
  }
}

void Skeleton::visitListInitDeclaratorAttr(ListInitDeclaratorAttr *list_init_declarator_attr)
{
  for (ListInitDeclaratorAttr::iterator i = list_init_declarator_attr->begin() ; i != list_init_declarator_attr->end() ; ++i)
  {
    (*i)->accept(this);
  }
}

void Skeleton::visitListFieldDecl(ListFieldDecl *list_field_decl)
{
  for (ListFieldDecl::iterator i = list_field_decl->begin() ; i != list_field_decl->end() ; ++i)
  {
    (*i)->accept(this);
  }
}

void Skeleton::visitListAttribute(ListAttribute *list_attribute)
{
  for (ListAttribute::iterator i = list_attribute->begin() ; i != list_attribute->end() ; ++i)
  {
    (*i)->accept(this);
  }
}

void Skeleton::visitListBlockElement(ListBlockElement *list_block_element)
{
  for (ListBlockElement::iterator i = list_block_element->begin() ; i != list_block_element->end() ; ++i)
  {
    (*i)->accept(this);
  }
}

void Skeleton::visitListAttr(ListAttr *list_attr)
{
  for (ListAttr::iterator i = list_attr->begin() ; i != list_attr->end() ; ++i)
  {
    (*i)->accept(this);
  }
}

void Skeleton::visitListExpression(ListExpression *list_expression)
{
  for (ListExpression::iterator i = list_expression->begin() ; i != list_expression->end() ; ++i)
  {
    (*i)->accept(this);
  }
}


void Skeleton::visitInteger(Integer x)
{
  /* Code for Integer Goes Here */
}

void Skeleton::visitChar(Char x)
{
  /* Code for Char Goes Here */
}

void Skeleton::visitDouble(Double x)
{
  /* Code for Double Goes Here */
}

void Skeleton::visitString(String x)
{
  /* Code for String Goes Here */
}

void Skeleton::visitIdent(Ident x)
{
  /* Code for Ident Goes Here */
}

void Skeleton::visitALIGNOF(ALIGNOF x)
{
  /* Code for ALIGNOF Goes Here */
}

void Skeleton::visitSIGNED(SIGNED x)
{
  /* Code for SIGNED Goes Here */
}

void Skeleton::visitCONST(CONST x)
{
  /* Code for CONST Goes Here */
}

void Skeleton::visitRESTRICT(RESTRICT x)
{
  /* Code for RESTRICT Goes Here */
}

void Skeleton::visitVOLATILE(VOLATILE x)
{
  /* Code for VOLATILE Goes Here */
}

void Skeleton::visitBLOCKATTRIBUTE(BLOCKATTRIBUTE x)
{
  /* Code for BLOCKATTRIBUTE Goes Here */
}

void Skeleton::visitBOOL(BOOL x)
{
  /* Code for BOOL Goes Here */
}


}
