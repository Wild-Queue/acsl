/* File generated by the BNF Converter (bnfc 2.9.4.1). */

#ifndef PARTIAL_ACSL_ABSYN_HEADER
#define PARTIAL_ACSL_ABSYN_HEADER

#include<string>
#include<vector>

//C++ Abstract Syntax Interface.
namespace partial_acsl
{
/********************   TypeDef Section    ********************/

typedef int Integer;
typedef char Char;
typedef double Double;
typedef std::string String;
typedef std::string Ident;


typedef std::string SIGNED;
typedef std::string LBRACE;
typedef std::string RBRACE;
typedef std::string CONST;
typedef std::string RESTRICT;
typedef std::string VOLATILE;
typedef std::string BLOCKATTRIBUTE;
typedef std::string LBRACKET;
typedef std::string RBRACKET;


/********************   Forward Declarations    ********************/

class Program;
class Globals;
class Global;
class FunctionDef;
class FunctionDefStart;
class DeclSpecList;
class DeclSpecListNoNamed;
class TypeSpec;
class Declarator;
class PointerOpt;
class DirectDecl;
class AttributesWithAsm;
class RestParList;
class ParameterDecl;
class GhostParameterOpt;
class IdOrTypename;
class IdOrTypenameAsId;
class Declaration;
class DeclAndInitDeclAttrList;
class InitDeclaratorAttr;
class InitDeclarator;
class StructDeclList;
class FieldDecl;
class Attribute;
class Block;
class BlockAttrs;
class BlockElement;
class Statement;
class ForClause;
class Attr;
class BasicAttribute;
class AnnotatedStmt;
class ElsePart;
class OptExpression;
class Expression;
class AssignExpr;
class Constant;
class TypeName;
class AProgram;
class NoGlobals;
class SimpleGlobals;
class SemiColonGlobals;
class GlobalsDeclataion;
class GlobalsFunctionDef;
class SimpleFunctionDef;
class FunctionDefStartDeclarator;
class DeclSpecTypeSpec;
class DeclSpecTypeSpecNext;
class DeclSpecNoNamedTypeSpec;
class DeclSpecNoNamedTypeSpecNext;
class TypeSpecVoidKeyWord;
class TypeSpecCharKeyWord;
class TypeSpecBoolKeyWord;
class TypeSpecShortKeyWord;
class TypeSpecInt32KeyWord;
class TypeSpecIntKeyWord;
class TypeSpecLongKeyWord;
class TypeSpecInt64KeyWord;
class TypeSpecFloatKeyWord;
class TypeSpecDoubleKeyWord;
class TypeSpecSignedKeyWord;
class TypeSpecUnsignedKeyWord;
class StructId;
class StructIdBraces;
class StructBraces;
class ADeclarator;
class NoPointer;
class SomePointer;
class DirectDeclIdTypename;
class DirectDeclGhostParam;
class DirectDeclGhostRestParParam;
class EmptyAttrWithASM;
class SimpleParameterDecl;
class ParameterDeclSpecDeclarator;
class ParameterDeclSpec;
class ParameterDeclPar;
class NoGhostParameter;
class IdTypename;
class IdOrTypenameAsIdIdentifier;
class DeclSpecInitDecl;
class DeclSpec;
class InitDeclaration;
class InitDeclarationWithAttr;
class InitDeclaratorAttribute;
class SimpleInitDeclarator;
class EmptyStructDecl;
class DeclSpecStructDecl;
class SemicolonStructDecl;
class SpecFieldDeclStructDecl;
class FieldDeclDeclarator;
class AttributeConst;
class ABlock;
class NoBlockAttrs;
class SomeBlockAttrs;
class DeclarationElement;
class StatementElement;
class SemicolonStatement;
class ExprsStatement;
class BlockStatement;
class IfStatement;
class SwitchStatement;
class WhileStatement;
class ForStatement;
class CaseStatement;
class CaseSliceStatement;
class DefaultStatement;
class EmptyReturnStatement;
class ReturnStatement;
class BreakStatement;
class ContinueStatement;
class ForClauseExpression;
class ForClauseDeclaration;
class AnAttr;
class TernaryCond;
class Or;
class And;
class BitOr;
class Xor;
class BitAnd;
class EqualEqual;
class NotEqual;
class Less;
class Greater;
class LessEqual;
class GreaterEqual;
class LeftShiftOp;
class RightShiftOp;
class AddOp;
class SubOp;
class MultOp;
class DivOp;
class ModOp;
class PlusUnaryAttr;
class MinusUnaryAttr;
class MultUnaryAttr;
class AmpUnaryAttr;
class NotUnaryAttr;
class TildeUnaryAttr;
class FuncationCall;
class ProcedureCall;
class ArrowAttr;
class DotAttr;
class ArrayAttr;
class BasicAttr;
class BasicAttrConsInt;
class BasicAttrConsFloat;
class AnnotatedStatement;
class NoElsePart;
class SimpleElsePart;
class NoExpression;
class SomeExpression;
class AssignmentExpr;
class EqAssignExpr;
class PlusEqAssignExpr;
class MinusEqAssignExpr;
class MultEqAssignExpr;
class DivEqAssignExpr;
class ModEqAssignExpr;
class AndEqAssignExpr;
class OrEqAssignExpr;
class XorEqAssignExpr;
class LeftShiftEqAssignExpr;
class RightShiftEqAssignExpr;
class TernaryCondExpr;
class OrExpr;
class AndExpr;
class BitOrExpr;
class BitXorExpr;
class BitAndExpr;
class EqExpr;
class NotEqExpr;
class LessExpr;
class GreaterExpr;
class LessEqualExpr;
class GreaterEqualExpr;
class LeftShiftExpr;
class RightShiftExpr;
class PlusExpr;
class MinusExpr;
class MulsExpr;
class DivExpr;
class ModExpr;
class CastExpr;
class UnaryExprPlusPlus;
class UnaryExprMinusMinus;
class UnaryExprPlus;
class UnaryExprMinus;
class UnaryExprMult;
class UnaryExprAmp;
class UnaryExprNot;
class UnaryExprTilde;
class UnaryExprAddress;
class BracketsPostfixExpression;
class DotPostfixExpression;
class ArrowPostfixExpression;
class PlusPlusPostfixExpression;
class MinusMinusPostfixExpression;
class IdentifierPrimaryExpression;
class ConstantPrimaryExpressin;
class CommaExpressionPrimaryExpressin;
class BlockPrimaryExpressin;
class ConstantInt;
class ConstantFloat;
class ConstantChar;
class TypeNameDeclSpecList;
class ListParameterDecl;
class ListInitDeclaratorAttr;
class ListFieldDecl;
class ListAttribute;
class ListBlockElement;
class ListAttr;
class ListExpression;


/********************   Visitor Interfaces    ********************/
class Visitor
{
public:
  virtual ~Visitor() {}
  virtual void visitProgram(Program *p) = 0;
  virtual void visitGlobals(Globals *p) = 0;
  virtual void visitGlobal(Global *p) = 0;
  virtual void visitFunctionDef(FunctionDef *p) = 0;
  virtual void visitFunctionDefStart(FunctionDefStart *p) = 0;
  virtual void visitDeclSpecList(DeclSpecList *p) = 0;
  virtual void visitDeclSpecListNoNamed(DeclSpecListNoNamed *p) = 0;
  virtual void visitTypeSpec(TypeSpec *p) = 0;
  virtual void visitDeclarator(Declarator *p) = 0;
  virtual void visitPointerOpt(PointerOpt *p) = 0;
  virtual void visitDirectDecl(DirectDecl *p) = 0;
  virtual void visitAttributesWithAsm(AttributesWithAsm *p) = 0;
  virtual void visitRestParList(RestParList *p) = 0;
  virtual void visitParameterDecl(ParameterDecl *p) = 0;
  virtual void visitGhostParameterOpt(GhostParameterOpt *p) = 0;
  virtual void visitIdOrTypename(IdOrTypename *p) = 0;
  virtual void visitIdOrTypenameAsId(IdOrTypenameAsId *p) = 0;
  virtual void visitDeclaration(Declaration *p) = 0;
  virtual void visitDeclAndInitDeclAttrList(DeclAndInitDeclAttrList *p) = 0;
  virtual void visitInitDeclaratorAttr(InitDeclaratorAttr *p) = 0;
  virtual void visitInitDeclarator(InitDeclarator *p) = 0;
  virtual void visitStructDeclList(StructDeclList *p) = 0;
  virtual void visitFieldDecl(FieldDecl *p) = 0;
  virtual void visitAttribute(Attribute *p) = 0;
  virtual void visitBlock(Block *p) = 0;
  virtual void visitBlockAttrs(BlockAttrs *p) = 0;
  virtual void visitBlockElement(BlockElement *p) = 0;
  virtual void visitStatement(Statement *p) = 0;
  virtual void visitForClause(ForClause *p) = 0;
  virtual void visitAttr(Attr *p) = 0;
  virtual void visitBasicAttribute(BasicAttribute *p) = 0;
  virtual void visitAnnotatedStmt(AnnotatedStmt *p) = 0;
  virtual void visitElsePart(ElsePart *p) = 0;
  virtual void visitOptExpression(OptExpression *p) = 0;
  virtual void visitExpression(Expression *p) = 0;
  virtual void visitAssignExpr(AssignExpr *p) = 0;
  virtual void visitConstant(Constant *p) = 0;
  virtual void visitTypeName(TypeName *p) = 0;
  virtual void visitAProgram(AProgram *p) = 0;
  virtual void visitNoGlobals(NoGlobals *p) = 0;
  virtual void visitSimpleGlobals(SimpleGlobals *p) = 0;
  virtual void visitSemiColonGlobals(SemiColonGlobals *p) = 0;
  virtual void visitGlobalsDeclataion(GlobalsDeclataion *p) = 0;
  virtual void visitGlobalsFunctionDef(GlobalsFunctionDef *p) = 0;
  virtual void visitSimpleFunctionDef(SimpleFunctionDef *p) = 0;
  virtual void visitFunctionDefStartDeclarator(FunctionDefStartDeclarator *p) = 0;
  virtual void visitDeclSpecTypeSpec(DeclSpecTypeSpec *p) = 0;
  virtual void visitDeclSpecTypeSpecNext(DeclSpecTypeSpecNext *p) = 0;
  virtual void visitDeclSpecNoNamedTypeSpec(DeclSpecNoNamedTypeSpec *p) = 0;
  virtual void visitDeclSpecNoNamedTypeSpecNext(DeclSpecNoNamedTypeSpecNext *p) = 0;
  virtual void visitTypeSpecVoidKeyWord(TypeSpecVoidKeyWord *p) = 0;
  virtual void visitTypeSpecCharKeyWord(TypeSpecCharKeyWord *p) = 0;
  virtual void visitTypeSpecBoolKeyWord(TypeSpecBoolKeyWord *p) = 0;
  virtual void visitTypeSpecShortKeyWord(TypeSpecShortKeyWord *p) = 0;
  virtual void visitTypeSpecInt32KeyWord(TypeSpecInt32KeyWord *p) = 0;
  virtual void visitTypeSpecIntKeyWord(TypeSpecIntKeyWord *p) = 0;
  virtual void visitTypeSpecLongKeyWord(TypeSpecLongKeyWord *p) = 0;
  virtual void visitTypeSpecInt64KeyWord(TypeSpecInt64KeyWord *p) = 0;
  virtual void visitTypeSpecFloatKeyWord(TypeSpecFloatKeyWord *p) = 0;
  virtual void visitTypeSpecDoubleKeyWord(TypeSpecDoubleKeyWord *p) = 0;
  virtual void visitTypeSpecSignedKeyWord(TypeSpecSignedKeyWord *p) = 0;
  virtual void visitTypeSpecUnsignedKeyWord(TypeSpecUnsignedKeyWord *p) = 0;
  virtual void visitStructId(StructId *p) = 0;
  virtual void visitStructIdBraces(StructIdBraces *p) = 0;
  virtual void visitStructBraces(StructBraces *p) = 0;
  virtual void visitADeclarator(ADeclarator *p) = 0;
  virtual void visitNoPointer(NoPointer *p) = 0;
  virtual void visitSomePointer(SomePointer *p) = 0;
  virtual void visitDirectDeclIdTypename(DirectDeclIdTypename *p) = 0;
  virtual void visitDirectDeclGhostParam(DirectDeclGhostParam *p) = 0;
  virtual void visitDirectDeclGhostRestParParam(DirectDeclGhostRestParParam *p) = 0;
  virtual void visitEmptyAttrWithASM(EmptyAttrWithASM *p) = 0;
  virtual void visitSimpleParameterDecl(SimpleParameterDecl *p) = 0;
  virtual void visitParameterDeclSpecDeclarator(ParameterDeclSpecDeclarator *p) = 0;
  virtual void visitParameterDeclSpec(ParameterDeclSpec *p) = 0;
  virtual void visitParameterDeclPar(ParameterDeclPar *p) = 0;
  virtual void visitNoGhostParameter(NoGhostParameter *p) = 0;
  virtual void visitIdTypename(IdTypename *p) = 0;
  virtual void visitIdOrTypenameAsIdIdentifier(IdOrTypenameAsIdIdentifier *p) = 0;
  virtual void visitDeclSpecInitDecl(DeclSpecInitDecl *p) = 0;
  virtual void visitDeclSpec(DeclSpec *p) = 0;
  virtual void visitInitDeclaration(InitDeclaration *p) = 0;
  virtual void visitInitDeclarationWithAttr(InitDeclarationWithAttr *p) = 0;
  virtual void visitInitDeclaratorAttribute(InitDeclaratorAttribute *p) = 0;
  virtual void visitSimpleInitDeclarator(SimpleInitDeclarator *p) = 0;
  virtual void visitEmptyStructDecl(EmptyStructDecl *p) = 0;
  virtual void visitDeclSpecStructDecl(DeclSpecStructDecl *p) = 0;
  virtual void visitSemicolonStructDecl(SemicolonStructDecl *p) = 0;
  virtual void visitSpecFieldDeclStructDecl(SpecFieldDeclStructDecl *p) = 0;
  virtual void visitFieldDeclDeclarator(FieldDeclDeclarator *p) = 0;
  virtual void visitAttributeConst(AttributeConst *p) = 0;
  virtual void visitABlock(ABlock *p) = 0;
  virtual void visitNoBlockAttrs(NoBlockAttrs *p) = 0;
  virtual void visitSomeBlockAttrs(SomeBlockAttrs *p) = 0;
  virtual void visitDeclarationElement(DeclarationElement *p) = 0;
  virtual void visitStatementElement(StatementElement *p) = 0;
  virtual void visitSemicolonStatement(SemicolonStatement *p) = 0;
  virtual void visitExprsStatement(ExprsStatement *p) = 0;
  virtual void visitBlockStatement(BlockStatement *p) = 0;
  virtual void visitIfStatement(IfStatement *p) = 0;
  virtual void visitSwitchStatement(SwitchStatement *p) = 0;
  virtual void visitWhileStatement(WhileStatement *p) = 0;
  virtual void visitForStatement(ForStatement *p) = 0;
  virtual void visitCaseStatement(CaseStatement *p) = 0;
  virtual void visitCaseSliceStatement(CaseSliceStatement *p) = 0;
  virtual void visitDefaultStatement(DefaultStatement *p) = 0;
  virtual void visitEmptyReturnStatement(EmptyReturnStatement *p) = 0;
  virtual void visitReturnStatement(ReturnStatement *p) = 0;
  virtual void visitBreakStatement(BreakStatement *p) = 0;
  virtual void visitContinueStatement(ContinueStatement *p) = 0;
  virtual void visitForClauseExpression(ForClauseExpression *p) = 0;
  virtual void visitForClauseDeclaration(ForClauseDeclaration *p) = 0;
  virtual void visitAnAttr(AnAttr *p) = 0;
  virtual void visitTernaryCond(TernaryCond *p) = 0;
  virtual void visitOr(Or *p) = 0;
  virtual void visitAnd(And *p) = 0;
  virtual void visitBitOr(BitOr *p) = 0;
  virtual void visitXor(Xor *p) = 0;
  virtual void visitBitAnd(BitAnd *p) = 0;
  virtual void visitEqualEqual(EqualEqual *p) = 0;
  virtual void visitNotEqual(NotEqual *p) = 0;
  virtual void visitLess(Less *p) = 0;
  virtual void visitGreater(Greater *p) = 0;
  virtual void visitLessEqual(LessEqual *p) = 0;
  virtual void visitGreaterEqual(GreaterEqual *p) = 0;
  virtual void visitLeftShiftOp(LeftShiftOp *p) = 0;
  virtual void visitRightShiftOp(RightShiftOp *p) = 0;
  virtual void visitAddOp(AddOp *p) = 0;
  virtual void visitSubOp(SubOp *p) = 0;
  virtual void visitMultOp(MultOp *p) = 0;
  virtual void visitDivOp(DivOp *p) = 0;
  virtual void visitModOp(ModOp *p) = 0;
  virtual void visitPlusUnaryAttr(PlusUnaryAttr *p) = 0;
  virtual void visitMinusUnaryAttr(MinusUnaryAttr *p) = 0;
  virtual void visitMultUnaryAttr(MultUnaryAttr *p) = 0;
  virtual void visitAmpUnaryAttr(AmpUnaryAttr *p) = 0;
  virtual void visitNotUnaryAttr(NotUnaryAttr *p) = 0;
  virtual void visitTildeUnaryAttr(TildeUnaryAttr *p) = 0;
  virtual void visitFuncationCall(FuncationCall *p) = 0;
  virtual void visitProcedureCall(ProcedureCall *p) = 0;
  virtual void visitArrowAttr(ArrowAttr *p) = 0;
  virtual void visitDotAttr(DotAttr *p) = 0;
  virtual void visitArrayAttr(ArrayAttr *p) = 0;
  virtual void visitBasicAttr(BasicAttr *p) = 0;
  virtual void visitBasicAttrConsInt(BasicAttrConsInt *p) = 0;
  virtual void visitBasicAttrConsFloat(BasicAttrConsFloat *p) = 0;
  virtual void visitAnnotatedStatement(AnnotatedStatement *p) = 0;
  virtual void visitNoElsePart(NoElsePart *p) = 0;
  virtual void visitSimpleElsePart(SimpleElsePart *p) = 0;
  virtual void visitNoExpression(NoExpression *p) = 0;
  virtual void visitSomeExpression(SomeExpression *p) = 0;
  virtual void visitAssignmentExpr(AssignmentExpr *p) = 0;
  virtual void visitEqAssignExpr(EqAssignExpr *p) = 0;
  virtual void visitPlusEqAssignExpr(PlusEqAssignExpr *p) = 0;
  virtual void visitMinusEqAssignExpr(MinusEqAssignExpr *p) = 0;
  virtual void visitMultEqAssignExpr(MultEqAssignExpr *p) = 0;
  virtual void visitDivEqAssignExpr(DivEqAssignExpr *p) = 0;
  virtual void visitModEqAssignExpr(ModEqAssignExpr *p) = 0;
  virtual void visitAndEqAssignExpr(AndEqAssignExpr *p) = 0;
  virtual void visitOrEqAssignExpr(OrEqAssignExpr *p) = 0;
  virtual void visitXorEqAssignExpr(XorEqAssignExpr *p) = 0;
  virtual void visitLeftShiftEqAssignExpr(LeftShiftEqAssignExpr *p) = 0;
  virtual void visitRightShiftEqAssignExpr(RightShiftEqAssignExpr *p) = 0;
  virtual void visitTernaryCondExpr(TernaryCondExpr *p) = 0;
  virtual void visitOrExpr(OrExpr *p) = 0;
  virtual void visitAndExpr(AndExpr *p) = 0;
  virtual void visitBitOrExpr(BitOrExpr *p) = 0;
  virtual void visitBitXorExpr(BitXorExpr *p) = 0;
  virtual void visitBitAndExpr(BitAndExpr *p) = 0;
  virtual void visitEqExpr(EqExpr *p) = 0;
  virtual void visitNotEqExpr(NotEqExpr *p) = 0;
  virtual void visitLessExpr(LessExpr *p) = 0;
  virtual void visitGreaterExpr(GreaterExpr *p) = 0;
  virtual void visitLessEqualExpr(LessEqualExpr *p) = 0;
  virtual void visitGreaterEqualExpr(GreaterEqualExpr *p) = 0;
  virtual void visitLeftShiftExpr(LeftShiftExpr *p) = 0;
  virtual void visitRightShiftExpr(RightShiftExpr *p) = 0;
  virtual void visitPlusExpr(PlusExpr *p) = 0;
  virtual void visitMinusExpr(MinusExpr *p) = 0;
  virtual void visitMulsExpr(MulsExpr *p) = 0;
  virtual void visitDivExpr(DivExpr *p) = 0;
  virtual void visitModExpr(ModExpr *p) = 0;
  virtual void visitCastExpr(CastExpr *p) = 0;
  virtual void visitUnaryExprPlusPlus(UnaryExprPlusPlus *p) = 0;
  virtual void visitUnaryExprMinusMinus(UnaryExprMinusMinus *p) = 0;
  virtual void visitUnaryExprPlus(UnaryExprPlus *p) = 0;
  virtual void visitUnaryExprMinus(UnaryExprMinus *p) = 0;
  virtual void visitUnaryExprMult(UnaryExprMult *p) = 0;
  virtual void visitUnaryExprAmp(UnaryExprAmp *p) = 0;
  virtual void visitUnaryExprNot(UnaryExprNot *p) = 0;
  virtual void visitUnaryExprTilde(UnaryExprTilde *p) = 0;
  virtual void visitUnaryExprAddress(UnaryExprAddress *p) = 0;
  virtual void visitBracketsPostfixExpression(BracketsPostfixExpression *p) = 0;
  virtual void visitDotPostfixExpression(DotPostfixExpression *p) = 0;
  virtual void visitArrowPostfixExpression(ArrowPostfixExpression *p) = 0;
  virtual void visitPlusPlusPostfixExpression(PlusPlusPostfixExpression *p) = 0;
  virtual void visitMinusMinusPostfixExpression(MinusMinusPostfixExpression *p) = 0;
  virtual void visitIdentifierPrimaryExpression(IdentifierPrimaryExpression *p) = 0;
  virtual void visitConstantPrimaryExpressin(ConstantPrimaryExpressin *p) = 0;
  virtual void visitCommaExpressionPrimaryExpressin(CommaExpressionPrimaryExpressin *p) = 0;
  virtual void visitBlockPrimaryExpressin(BlockPrimaryExpressin *p) = 0;
  virtual void visitConstantInt(ConstantInt *p) = 0;
  virtual void visitConstantFloat(ConstantFloat *p) = 0;
  virtual void visitConstantChar(ConstantChar *p) = 0;
  virtual void visitTypeNameDeclSpecList(TypeNameDeclSpecList *p) = 0;
  virtual void visitListParameterDecl(ListParameterDecl *p) = 0;
  virtual void visitListInitDeclaratorAttr(ListInitDeclaratorAttr *p) = 0;
  virtual void visitListFieldDecl(ListFieldDecl *p) = 0;
  virtual void visitListAttribute(ListAttribute *p) = 0;
  virtual void visitListBlockElement(ListBlockElement *p) = 0;
  virtual void visitListAttr(ListAttr *p) = 0;
  virtual void visitListExpression(ListExpression *p) = 0;


  virtual void visitInteger(Integer x) = 0;
  virtual void visitChar(Char x) = 0;
  virtual void visitDouble(Double x) = 0;
  virtual void visitString(String x) = 0;
  virtual void visitIdent(Ident x) = 0;
  virtual void visitSIGNED(SIGNED x) = 0;
  virtual void visitLBRACE(LBRACE x) = 0;
  virtual void visitRBRACE(RBRACE x) = 0;
  virtual void visitCONST(CONST x) = 0;
  virtual void visitRESTRICT(RESTRICT x) = 0;
  virtual void visitVOLATILE(VOLATILE x) = 0;
  virtual void visitBLOCKATTRIBUTE(BLOCKATTRIBUTE x) = 0;
  virtual void visitLBRACKET(LBRACKET x) = 0;
  virtual void visitRBRACKET(RBRACKET x) = 0;

};


class Visitable
{
 public:
  virtual ~Visitable() {}
  virtual void accept(Visitor *v) = 0;
};


/********************   Abstract Syntax Classes    ********************/

class Program : public Visitable
{
public:
  virtual Program *clone() const = 0;
  int line_number, char_number;
};

class Globals : public Visitable
{
public:
  virtual Globals *clone() const = 0;
  int line_number, char_number;
};

class Global : public Visitable
{
public:
  virtual Global *clone() const = 0;
  int line_number, char_number;
};

class FunctionDef : public Visitable
{
public:
  virtual FunctionDef *clone() const = 0;
  int line_number, char_number;
};

class FunctionDefStart : public Visitable
{
public:
  virtual FunctionDefStart *clone() const = 0;
  int line_number, char_number;
};

class DeclSpecList : public Visitable
{
public:
  virtual DeclSpecList *clone() const = 0;
  int line_number, char_number;
};

class DeclSpecListNoNamed : public Visitable
{
public:
  virtual DeclSpecListNoNamed *clone() const = 0;
  int line_number, char_number;
};

class TypeSpec : public Visitable
{
public:
  virtual TypeSpec *clone() const = 0;
  int line_number, char_number;
};

class Declarator : public Visitable
{
public:
  virtual Declarator *clone() const = 0;
  int line_number, char_number;
};

class PointerOpt : public Visitable
{
public:
  virtual PointerOpt *clone() const = 0;
  int line_number, char_number;
};

class DirectDecl : public Visitable
{
public:
  virtual DirectDecl *clone() const = 0;
  int line_number, char_number;
};

class AttributesWithAsm : public Visitable
{
public:
  virtual AttributesWithAsm *clone() const = 0;
  int line_number, char_number;
};

class RestParList : public Visitable
{
public:
  virtual RestParList *clone() const = 0;
  int line_number, char_number;
};

class ParameterDecl : public Visitable
{
public:
  virtual ParameterDecl *clone() const = 0;
  int line_number, char_number;
};

class GhostParameterOpt : public Visitable
{
public:
  virtual GhostParameterOpt *clone() const = 0;
  int line_number, char_number;
};

class IdOrTypename : public Visitable
{
public:
  virtual IdOrTypename *clone() const = 0;
  int line_number, char_number;
};

class IdOrTypenameAsId : public Visitable
{
public:
  virtual IdOrTypenameAsId *clone() const = 0;
  int line_number, char_number;
};

class Declaration : public Visitable
{
public:
  virtual Declaration *clone() const = 0;
  int line_number, char_number;
};

class DeclAndInitDeclAttrList : public Visitable
{
public:
  virtual DeclAndInitDeclAttrList *clone() const = 0;
  int line_number, char_number;
};

class InitDeclaratorAttr : public Visitable
{
public:
  virtual InitDeclaratorAttr *clone() const = 0;
  int line_number, char_number;
};

class InitDeclarator : public Visitable
{
public:
  virtual InitDeclarator *clone() const = 0;
  int line_number, char_number;
};

class StructDeclList : public Visitable
{
public:
  virtual StructDeclList *clone() const = 0;
  int line_number, char_number;
};

class FieldDecl : public Visitable
{
public:
  virtual FieldDecl *clone() const = 0;
  int line_number, char_number;
};

class Attribute : public Visitable
{
public:
  virtual Attribute *clone() const = 0;
  int line_number, char_number;
};

class Block : public Visitable
{
public:
  virtual Block *clone() const = 0;
  int line_number, char_number;
};

class BlockAttrs : public Visitable
{
public:
  virtual BlockAttrs *clone() const = 0;
  int line_number, char_number;
};

class BlockElement : public Visitable
{
public:
  virtual BlockElement *clone() const = 0;
  int line_number, char_number;
};

class Statement : public Visitable
{
public:
  virtual Statement *clone() const = 0;
  int line_number, char_number;
};

class ForClause : public Visitable
{
public:
  virtual ForClause *clone() const = 0;
  int line_number, char_number;
};

class Attr : public Visitable
{
public:
  virtual Attr *clone() const = 0;
  int line_number, char_number;
};

class BasicAttribute : public Visitable
{
public:
  virtual BasicAttribute *clone() const = 0;
  int line_number, char_number;
};

class AnnotatedStmt : public Visitable
{
public:
  virtual AnnotatedStmt *clone() const = 0;
  int line_number, char_number;
};

class ElsePart : public Visitable
{
public:
  virtual ElsePart *clone() const = 0;
  int line_number, char_number;
};

class OptExpression : public Visitable
{
public:
  virtual OptExpression *clone() const = 0;
  int line_number, char_number;
};

class Expression : public Visitable
{
public:
  virtual Expression *clone() const = 0;
  int line_number, char_number;
};

class AssignExpr : public Visitable
{
public:
  virtual AssignExpr *clone() const = 0;
  int line_number, char_number;
};

class Constant : public Visitable
{
public:
  virtual Constant *clone() const = 0;
  int line_number, char_number;
};

class TypeName : public Visitable
{
public:
  virtual TypeName *clone() const = 0;
  int line_number, char_number;
};



class AProgram : public Program
{
public:
  Globals *globals_;

  AProgram(const AProgram &);
  AProgram &operator=(const AProgram &);
  AProgram(Globals *p1);
  ~AProgram();
  virtual void accept(Visitor *v);
  virtual AProgram *clone() const;
  void swap(AProgram &);
};

class NoGlobals : public Globals
{
public:

  NoGlobals(const NoGlobals &);
  NoGlobals &operator=(const NoGlobals &);
  NoGlobals();
  ~NoGlobals();
  virtual void accept(Visitor *v);
  virtual NoGlobals *clone() const;
  void swap(NoGlobals &);
};

class SimpleGlobals : public Globals
{
public:
  Global *global_;
  Globals *globals_;

  SimpleGlobals(const SimpleGlobals &);
  SimpleGlobals &operator=(const SimpleGlobals &);
  SimpleGlobals(Global *p1, Globals *p2);
  ~SimpleGlobals();
  virtual void accept(Visitor *v);
  virtual SimpleGlobals *clone() const;
  void swap(SimpleGlobals &);
};

class SemiColonGlobals : public Globals
{
public:
  Globals *globals_;

  SemiColonGlobals(const SemiColonGlobals &);
  SemiColonGlobals &operator=(const SemiColonGlobals &);
  SemiColonGlobals(Globals *p1);
  ~SemiColonGlobals();
  virtual void accept(Visitor *v);
  virtual SemiColonGlobals *clone() const;
  void swap(SemiColonGlobals &);
};

class GlobalsDeclataion : public Global
{
public:
  Declaration *declaration_;

  GlobalsDeclataion(const GlobalsDeclataion &);
  GlobalsDeclataion &operator=(const GlobalsDeclataion &);
  GlobalsDeclataion(Declaration *p1);
  ~GlobalsDeclataion();
  virtual void accept(Visitor *v);
  virtual GlobalsDeclataion *clone() const;
  void swap(GlobalsDeclataion &);
};

class GlobalsFunctionDef : public Global
{
public:
  FunctionDef *functiondef_;

  GlobalsFunctionDef(const GlobalsFunctionDef &);
  GlobalsFunctionDef &operator=(const GlobalsFunctionDef &);
  GlobalsFunctionDef(FunctionDef *p1);
  ~GlobalsFunctionDef();
  virtual void accept(Visitor *v);
  virtual GlobalsFunctionDef *clone() const;
  void swap(GlobalsFunctionDef &);
};

class SimpleFunctionDef : public FunctionDef
{
public:
  FunctionDefStart *functiondefstart_;
  Block *block_;

  SimpleFunctionDef(const SimpleFunctionDef &);
  SimpleFunctionDef &operator=(const SimpleFunctionDef &);
  SimpleFunctionDef(FunctionDefStart *p1, Block *p2);
  ~SimpleFunctionDef();
  virtual void accept(Visitor *v);
  virtual SimpleFunctionDef *clone() const;
  void swap(SimpleFunctionDef &);
};

class FunctionDefStartDeclarator : public FunctionDefStart
{
public:
  DeclSpecList *declspeclist_;
  Declarator *declarator_;

  FunctionDefStartDeclarator(const FunctionDefStartDeclarator &);
  FunctionDefStartDeclarator &operator=(const FunctionDefStartDeclarator &);
  FunctionDefStartDeclarator(DeclSpecList *p1, Declarator *p2);
  ~FunctionDefStartDeclarator();
  virtual void accept(Visitor *v);
  virtual FunctionDefStartDeclarator *clone() const;
  void swap(FunctionDefStartDeclarator &);
};

class DeclSpecTypeSpec : public DeclSpecList
{
public:
  TypeSpec *typespec_;

  DeclSpecTypeSpec(const DeclSpecTypeSpec &);
  DeclSpecTypeSpec &operator=(const DeclSpecTypeSpec &);
  DeclSpecTypeSpec(TypeSpec *p1);
  ~DeclSpecTypeSpec();
  virtual void accept(Visitor *v);
  virtual DeclSpecTypeSpec *clone() const;
  void swap(DeclSpecTypeSpec &);
};

class DeclSpecTypeSpecNext : public DeclSpecList
{
public:
  TypeSpec *typespec_;
  DeclSpecListNoNamed *declspeclistnonamed_;

  DeclSpecTypeSpecNext(const DeclSpecTypeSpecNext &);
  DeclSpecTypeSpecNext &operator=(const DeclSpecTypeSpecNext &);
  DeclSpecTypeSpecNext(TypeSpec *p1, DeclSpecListNoNamed *p2);
  ~DeclSpecTypeSpecNext();
  virtual void accept(Visitor *v);
  virtual DeclSpecTypeSpecNext *clone() const;
  void swap(DeclSpecTypeSpecNext &);
};

class DeclSpecNoNamedTypeSpec : public DeclSpecListNoNamed
{
public:
  TypeSpec *typespec_;

  DeclSpecNoNamedTypeSpec(const DeclSpecNoNamedTypeSpec &);
  DeclSpecNoNamedTypeSpec &operator=(const DeclSpecNoNamedTypeSpec &);
  DeclSpecNoNamedTypeSpec(TypeSpec *p1);
  ~DeclSpecNoNamedTypeSpec();
  virtual void accept(Visitor *v);
  virtual DeclSpecNoNamedTypeSpec *clone() const;
  void swap(DeclSpecNoNamedTypeSpec &);
};

class DeclSpecNoNamedTypeSpecNext : public DeclSpecListNoNamed
{
public:
  TypeSpec *typespec_;
  DeclSpecListNoNamed *declspeclistnonamed_;

  DeclSpecNoNamedTypeSpecNext(const DeclSpecNoNamedTypeSpecNext &);
  DeclSpecNoNamedTypeSpecNext &operator=(const DeclSpecNoNamedTypeSpecNext &);
  DeclSpecNoNamedTypeSpecNext(TypeSpec *p1, DeclSpecListNoNamed *p2);
  ~DeclSpecNoNamedTypeSpecNext();
  virtual void accept(Visitor *v);
  virtual DeclSpecNoNamedTypeSpecNext *clone() const;
  void swap(DeclSpecNoNamedTypeSpecNext &);
};

class TypeSpecVoidKeyWord : public TypeSpec
{
public:

  TypeSpecVoidKeyWord(const TypeSpecVoidKeyWord &);
  TypeSpecVoidKeyWord &operator=(const TypeSpecVoidKeyWord &);
  TypeSpecVoidKeyWord();
  ~TypeSpecVoidKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecVoidKeyWord *clone() const;
  void swap(TypeSpecVoidKeyWord &);
};

class TypeSpecCharKeyWord : public TypeSpec
{
public:

  TypeSpecCharKeyWord(const TypeSpecCharKeyWord &);
  TypeSpecCharKeyWord &operator=(const TypeSpecCharKeyWord &);
  TypeSpecCharKeyWord();
  ~TypeSpecCharKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecCharKeyWord *clone() const;
  void swap(TypeSpecCharKeyWord &);
};

class TypeSpecBoolKeyWord : public TypeSpec
{
public:

  TypeSpecBoolKeyWord(const TypeSpecBoolKeyWord &);
  TypeSpecBoolKeyWord &operator=(const TypeSpecBoolKeyWord &);
  TypeSpecBoolKeyWord();
  ~TypeSpecBoolKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecBoolKeyWord *clone() const;
  void swap(TypeSpecBoolKeyWord &);
};

class TypeSpecShortKeyWord : public TypeSpec
{
public:

  TypeSpecShortKeyWord(const TypeSpecShortKeyWord &);
  TypeSpecShortKeyWord &operator=(const TypeSpecShortKeyWord &);
  TypeSpecShortKeyWord();
  ~TypeSpecShortKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecShortKeyWord *clone() const;
  void swap(TypeSpecShortKeyWord &);
};

class TypeSpecInt32KeyWord : public TypeSpec
{
public:

  TypeSpecInt32KeyWord(const TypeSpecInt32KeyWord &);
  TypeSpecInt32KeyWord &operator=(const TypeSpecInt32KeyWord &);
  TypeSpecInt32KeyWord();
  ~TypeSpecInt32KeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecInt32KeyWord *clone() const;
  void swap(TypeSpecInt32KeyWord &);
};

class TypeSpecIntKeyWord : public TypeSpec
{
public:

  TypeSpecIntKeyWord(const TypeSpecIntKeyWord &);
  TypeSpecIntKeyWord &operator=(const TypeSpecIntKeyWord &);
  TypeSpecIntKeyWord();
  ~TypeSpecIntKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecIntKeyWord *clone() const;
  void swap(TypeSpecIntKeyWord &);
};

class TypeSpecLongKeyWord : public TypeSpec
{
public:

  TypeSpecLongKeyWord(const TypeSpecLongKeyWord &);
  TypeSpecLongKeyWord &operator=(const TypeSpecLongKeyWord &);
  TypeSpecLongKeyWord();
  ~TypeSpecLongKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecLongKeyWord *clone() const;
  void swap(TypeSpecLongKeyWord &);
};

class TypeSpecInt64KeyWord : public TypeSpec
{
public:

  TypeSpecInt64KeyWord(const TypeSpecInt64KeyWord &);
  TypeSpecInt64KeyWord &operator=(const TypeSpecInt64KeyWord &);
  TypeSpecInt64KeyWord();
  ~TypeSpecInt64KeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecInt64KeyWord *clone() const;
  void swap(TypeSpecInt64KeyWord &);
};

class TypeSpecFloatKeyWord : public TypeSpec
{
public:

  TypeSpecFloatKeyWord(const TypeSpecFloatKeyWord &);
  TypeSpecFloatKeyWord &operator=(const TypeSpecFloatKeyWord &);
  TypeSpecFloatKeyWord();
  ~TypeSpecFloatKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecFloatKeyWord *clone() const;
  void swap(TypeSpecFloatKeyWord &);
};

class TypeSpecDoubleKeyWord : public TypeSpec
{
public:

  TypeSpecDoubleKeyWord(const TypeSpecDoubleKeyWord &);
  TypeSpecDoubleKeyWord &operator=(const TypeSpecDoubleKeyWord &);
  TypeSpecDoubleKeyWord();
  ~TypeSpecDoubleKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecDoubleKeyWord *clone() const;
  void swap(TypeSpecDoubleKeyWord &);
};

class TypeSpecSignedKeyWord : public TypeSpec
{
public:
  SIGNED signed_;

  TypeSpecSignedKeyWord(const TypeSpecSignedKeyWord &);
  TypeSpecSignedKeyWord &operator=(const TypeSpecSignedKeyWord &);
  TypeSpecSignedKeyWord(SIGNED p1);
  ~TypeSpecSignedKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecSignedKeyWord *clone() const;
  void swap(TypeSpecSignedKeyWord &);
};

class TypeSpecUnsignedKeyWord : public TypeSpec
{
public:

  TypeSpecUnsignedKeyWord(const TypeSpecUnsignedKeyWord &);
  TypeSpecUnsignedKeyWord &operator=(const TypeSpecUnsignedKeyWord &);
  TypeSpecUnsignedKeyWord();
  ~TypeSpecUnsignedKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecUnsignedKeyWord *clone() const;
  void swap(TypeSpecUnsignedKeyWord &);
};

class StructId : public TypeSpec
{
public:
  IdOrTypename *idortypename_;

  StructId(const StructId &);
  StructId &operator=(const StructId &);
  StructId(IdOrTypename *p1);
  ~StructId();
  virtual void accept(Visitor *v);
  virtual StructId *clone() const;
  void swap(StructId &);
};

class StructIdBraces : public TypeSpec
{
public:
  IdOrTypename *idortypename_;
  LBRACE lbrace_;
  StructDeclList *structdecllist_;
  RBRACE rbrace_;

  StructIdBraces(const StructIdBraces &);
  StructIdBraces &operator=(const StructIdBraces &);
  StructIdBraces(IdOrTypename *p1, LBRACE p2, StructDeclList *p3, RBRACE p4);
  ~StructIdBraces();
  virtual void accept(Visitor *v);
  virtual StructIdBraces *clone() const;
  void swap(StructIdBraces &);
};

class StructBraces : public TypeSpec
{
public:
  LBRACE lbrace_;
  StructDeclList *structdecllist_;
  RBRACE rbrace_;

  StructBraces(const StructBraces &);
  StructBraces &operator=(const StructBraces &);
  StructBraces(LBRACE p1, StructDeclList *p2, RBRACE p3);
  ~StructBraces();
  virtual void accept(Visitor *v);
  virtual StructBraces *clone() const;
  void swap(StructBraces &);
};

class ADeclarator : public Declarator
{
public:
  PointerOpt *pointeropt_;
  DirectDecl *directdecl_;
  AttributesWithAsm *attributeswithasm_;

  ADeclarator(const ADeclarator &);
  ADeclarator &operator=(const ADeclarator &);
  ADeclarator(PointerOpt *p1, DirectDecl *p2, AttributesWithAsm *p3);
  ~ADeclarator();
  virtual void accept(Visitor *v);
  virtual ADeclarator *clone() const;
  void swap(ADeclarator &);
};

class NoPointer : public PointerOpt
{
public:

  NoPointer(const NoPointer &);
  NoPointer &operator=(const NoPointer &);
  NoPointer();
  ~NoPointer();
  virtual void accept(Visitor *v);
  virtual NoPointer *clone() const;
  void swap(NoPointer &);
};

class SomePointer : public PointerOpt
{
public:
  ListAttribute *listattribute_;
  PointerOpt *pointeropt_;

  SomePointer(const SomePointer &);
  SomePointer &operator=(const SomePointer &);
  SomePointer(ListAttribute *p1, PointerOpt *p2);
  ~SomePointer();
  virtual void accept(Visitor *v);
  virtual SomePointer *clone() const;
  void swap(SomePointer &);
};

class DirectDeclIdTypename : public DirectDecl
{
public:
  IdOrTypename *idortypename_;

  DirectDeclIdTypename(const DirectDeclIdTypename &);
  DirectDeclIdTypename &operator=(const DirectDeclIdTypename &);
  DirectDeclIdTypename(IdOrTypename *p1);
  ~DirectDeclIdTypename();
  virtual void accept(Visitor *v);
  virtual DirectDeclIdTypename *clone() const;
  void swap(DirectDeclIdTypename &);
};

class DirectDeclGhostParam : public DirectDecl
{
public:
  DirectDecl *directdecl_;
  GhostParameterOpt *ghostparameteropt_;

  DirectDeclGhostParam(const DirectDeclGhostParam &);
  DirectDeclGhostParam &operator=(const DirectDeclGhostParam &);
  DirectDeclGhostParam(DirectDecl *p1, GhostParameterOpt *p2);
  ~DirectDeclGhostParam();
  virtual void accept(Visitor *v);
  virtual DirectDeclGhostParam *clone() const;
  void swap(DirectDeclGhostParam &);
};

class DirectDeclGhostRestParParam : public DirectDecl
{
public:
  DirectDecl *directdecl_;
  RestParList *restparlist_;
  GhostParameterOpt *ghostparameteropt_;

  DirectDeclGhostRestParParam(const DirectDeclGhostRestParParam &);
  DirectDeclGhostRestParParam &operator=(const DirectDeclGhostRestParParam &);
  DirectDeclGhostRestParParam(DirectDecl *p1, RestParList *p2, GhostParameterOpt *p3);
  ~DirectDeclGhostRestParParam();
  virtual void accept(Visitor *v);
  virtual DirectDeclGhostRestParParam *clone() const;
  void swap(DirectDeclGhostRestParParam &);
};

class EmptyAttrWithASM : public AttributesWithAsm
{
public:

  EmptyAttrWithASM(const EmptyAttrWithASM &);
  EmptyAttrWithASM &operator=(const EmptyAttrWithASM &);
  EmptyAttrWithASM();
  ~EmptyAttrWithASM();
  virtual void accept(Visitor *v);
  virtual EmptyAttrWithASM *clone() const;
  void swap(EmptyAttrWithASM &);
};

class SimpleParameterDecl : public RestParList
{
public:
  ListParameterDecl *listparameterdecl_;

  SimpleParameterDecl(const SimpleParameterDecl &);
  SimpleParameterDecl &operator=(const SimpleParameterDecl &);
  SimpleParameterDecl(ListParameterDecl *p1);
  ~SimpleParameterDecl();
  virtual void accept(Visitor *v);
  virtual SimpleParameterDecl *clone() const;
  void swap(SimpleParameterDecl &);
};

class ParameterDeclSpecDeclarator : public ParameterDecl
{
public:
  DeclSpecList *declspeclist_;
  Declarator *declarator_;

  ParameterDeclSpecDeclarator(const ParameterDeclSpecDeclarator &);
  ParameterDeclSpecDeclarator &operator=(const ParameterDeclSpecDeclarator &);
  ParameterDeclSpecDeclarator(DeclSpecList *p1, Declarator *p2);
  ~ParameterDeclSpecDeclarator();
  virtual void accept(Visitor *v);
  virtual ParameterDeclSpecDeclarator *clone() const;
  void swap(ParameterDeclSpecDeclarator &);
};

class ParameterDeclSpec : public ParameterDecl
{
public:
  DeclSpecList *declspeclist_;

  ParameterDeclSpec(const ParameterDeclSpec &);
  ParameterDeclSpec &operator=(const ParameterDeclSpec &);
  ParameterDeclSpec(DeclSpecList *p1);
  ~ParameterDeclSpec();
  virtual void accept(Visitor *v);
  virtual ParameterDeclSpec *clone() const;
  void swap(ParameterDeclSpec &);
};

class ParameterDeclPar : public ParameterDecl
{
public:
  ParameterDecl *parameterdecl_;

  ParameterDeclPar(const ParameterDeclPar &);
  ParameterDeclPar &operator=(const ParameterDeclPar &);
  ParameterDeclPar(ParameterDecl *p1);
  ~ParameterDeclPar();
  virtual void accept(Visitor *v);
  virtual ParameterDeclPar *clone() const;
  void swap(ParameterDeclPar &);
};

class NoGhostParameter : public GhostParameterOpt
{
public:

  NoGhostParameter(const NoGhostParameter &);
  NoGhostParameter &operator=(const NoGhostParameter &);
  NoGhostParameter();
  ~NoGhostParameter();
  virtual void accept(Visitor *v);
  virtual NoGhostParameter *clone() const;
  void swap(NoGhostParameter &);
};

class IdTypename : public IdOrTypename
{
public:
  IdOrTypenameAsId *idortypenameasid_;

  IdTypename(const IdTypename &);
  IdTypename &operator=(const IdTypename &);
  IdTypename(IdOrTypenameAsId *p1);
  ~IdTypename();
  virtual void accept(Visitor *v);
  virtual IdTypename *clone() const;
  void swap(IdTypename &);
};

class IdOrTypenameAsIdIdentifier : public IdOrTypenameAsId
{
public:
  Ident ident_;

  IdOrTypenameAsIdIdentifier(const IdOrTypenameAsIdIdentifier &);
  IdOrTypenameAsIdIdentifier &operator=(const IdOrTypenameAsIdIdentifier &);
  IdOrTypenameAsIdIdentifier(Ident p1);
  ~IdOrTypenameAsIdIdentifier();
  virtual void accept(Visitor *v);
  virtual IdOrTypenameAsIdIdentifier *clone() const;
  void swap(IdOrTypenameAsIdIdentifier &);
};

class DeclSpecInitDecl : public Declaration
{
public:
  DeclSpecList *declspeclist_;
  DeclAndInitDeclAttrList *declandinitdeclattrlist_;

  DeclSpecInitDecl(const DeclSpecInitDecl &);
  DeclSpecInitDecl &operator=(const DeclSpecInitDecl &);
  DeclSpecInitDecl(DeclSpecList *p1, DeclAndInitDeclAttrList *p2);
  ~DeclSpecInitDecl();
  virtual void accept(Visitor *v);
  virtual DeclSpecInitDecl *clone() const;
  void swap(DeclSpecInitDecl &);
};

class DeclSpec : public Declaration
{
public:
  DeclSpecList *declspeclist_;

  DeclSpec(const DeclSpec &);
  DeclSpec &operator=(const DeclSpec &);
  DeclSpec(DeclSpecList *p1);
  ~DeclSpec();
  virtual void accept(Visitor *v);
  virtual DeclSpec *clone() const;
  void swap(DeclSpec &);
};

class InitDeclaration : public DeclAndInitDeclAttrList
{
public:
  InitDeclarator *initdeclarator_;

  InitDeclaration(const InitDeclaration &);
  InitDeclaration &operator=(const InitDeclaration &);
  InitDeclaration(InitDeclarator *p1);
  ~InitDeclaration();
  virtual void accept(Visitor *v);
  virtual InitDeclaration *clone() const;
  void swap(InitDeclaration &);
};

class InitDeclarationWithAttr : public DeclAndInitDeclAttrList
{
public:
  InitDeclarator *initdeclarator_;
  ListInitDeclaratorAttr *listinitdeclaratorattr_;

  InitDeclarationWithAttr(const InitDeclarationWithAttr &);
  InitDeclarationWithAttr &operator=(const InitDeclarationWithAttr &);
  InitDeclarationWithAttr(InitDeclarator *p1, ListInitDeclaratorAttr *p2);
  ~InitDeclarationWithAttr();
  virtual void accept(Visitor *v);
  virtual InitDeclarationWithAttr *clone() const;
  void swap(InitDeclarationWithAttr &);
};

class InitDeclaratorAttribute : public InitDeclaratorAttr
{
public:
  InitDeclarator *initdeclarator_;

  InitDeclaratorAttribute(const InitDeclaratorAttribute &);
  InitDeclaratorAttribute &operator=(const InitDeclaratorAttribute &);
  InitDeclaratorAttribute(InitDeclarator *p1);
  ~InitDeclaratorAttribute();
  virtual void accept(Visitor *v);
  virtual InitDeclaratorAttribute *clone() const;
  void swap(InitDeclaratorAttribute &);
};

class SimpleInitDeclarator : public InitDeclarator
{
public:
  Declarator *declarator_;

  SimpleInitDeclarator(const SimpleInitDeclarator &);
  SimpleInitDeclarator &operator=(const SimpleInitDeclarator &);
  SimpleInitDeclarator(Declarator *p1);
  ~SimpleInitDeclarator();
  virtual void accept(Visitor *v);
  virtual SimpleInitDeclarator *clone() const;
  void swap(SimpleInitDeclarator &);
};

class EmptyStructDecl : public StructDeclList
{
public:

  EmptyStructDecl(const EmptyStructDecl &);
  EmptyStructDecl &operator=(const EmptyStructDecl &);
  EmptyStructDecl();
  ~EmptyStructDecl();
  virtual void accept(Visitor *v);
  virtual EmptyStructDecl *clone() const;
  void swap(EmptyStructDecl &);
};

class DeclSpecStructDecl : public StructDeclList
{
public:
  DeclSpecList *declspeclist_;
  StructDeclList *structdecllist_;

  DeclSpecStructDecl(const DeclSpecStructDecl &);
  DeclSpecStructDecl &operator=(const DeclSpecStructDecl &);
  DeclSpecStructDecl(DeclSpecList *p1, StructDeclList *p2);
  ~DeclSpecStructDecl();
  virtual void accept(Visitor *v);
  virtual DeclSpecStructDecl *clone() const;
  void swap(DeclSpecStructDecl &);
};

class SemicolonStructDecl : public StructDeclList
{
public:
  StructDeclList *structdecllist_;

  SemicolonStructDecl(const SemicolonStructDecl &);
  SemicolonStructDecl &operator=(const SemicolonStructDecl &);
  SemicolonStructDecl(StructDeclList *p1);
  ~SemicolonStructDecl();
  virtual void accept(Visitor *v);
  virtual SemicolonStructDecl *clone() const;
  void swap(SemicolonStructDecl &);
};

class SpecFieldDeclStructDecl : public StructDeclList
{
public:
  DeclSpecList *declspeclist_;
  ListFieldDecl *listfielddecl_;
  StructDeclList *structdecllist_;

  SpecFieldDeclStructDecl(const SpecFieldDeclStructDecl &);
  SpecFieldDeclStructDecl &operator=(const SpecFieldDeclStructDecl &);
  SpecFieldDeclStructDecl(DeclSpecList *p1, ListFieldDecl *p2, StructDeclList *p3);
  ~SpecFieldDeclStructDecl();
  virtual void accept(Visitor *v);
  virtual SpecFieldDeclStructDecl *clone() const;
  void swap(SpecFieldDeclStructDecl &);
};

class FieldDeclDeclarator : public FieldDecl
{
public:
  Declarator *declarator_;

  FieldDeclDeclarator(const FieldDeclDeclarator &);
  FieldDeclDeclarator &operator=(const FieldDeclDeclarator &);
  FieldDeclDeclarator(Declarator *p1);
  ~FieldDeclDeclarator();
  virtual void accept(Visitor *v);
  virtual FieldDeclDeclarator *clone() const;
  void swap(FieldDeclDeclarator &);
};

class AttributeConst : public Attribute
{
public:
  CONST const_;

  AttributeConst(const AttributeConst &);
  AttributeConst &operator=(const AttributeConst &);
  AttributeConst(CONST p1);
  ~AttributeConst();
  virtual void accept(Visitor *v);
  virtual AttributeConst *clone() const;
  void swap(AttributeConst &);
};

class ABlock : public Block
{
public:
  LBRACE lbrace_;
  BlockAttrs *blockattrs_;
  ListBlockElement *listblockelement_;
  RBRACE rbrace_;

  ABlock(const ABlock &);
  ABlock &operator=(const ABlock &);
  ABlock(LBRACE p1, BlockAttrs *p2, ListBlockElement *p3, RBRACE p4);
  ~ABlock();
  virtual void accept(Visitor *v);
  virtual ABlock *clone() const;
  void swap(ABlock &);
};

class NoBlockAttrs : public BlockAttrs
{
public:

  NoBlockAttrs(const NoBlockAttrs &);
  NoBlockAttrs &operator=(const NoBlockAttrs &);
  NoBlockAttrs();
  ~NoBlockAttrs();
  virtual void accept(Visitor *v);
  virtual NoBlockAttrs *clone() const;
  void swap(NoBlockAttrs &);
};

class SomeBlockAttrs : public BlockAttrs
{
public:
  BLOCKATTRIBUTE blockattribute_;
  ListAttr *listattr_;

  SomeBlockAttrs(const SomeBlockAttrs &);
  SomeBlockAttrs &operator=(const SomeBlockAttrs &);
  SomeBlockAttrs(BLOCKATTRIBUTE p1, ListAttr *p2);
  ~SomeBlockAttrs();
  virtual void accept(Visitor *v);
  virtual SomeBlockAttrs *clone() const;
  void swap(SomeBlockAttrs &);
};

class DeclarationElement : public BlockElement
{
public:
  Declaration *declaration_;

  DeclarationElement(const DeclarationElement &);
  DeclarationElement &operator=(const DeclarationElement &);
  DeclarationElement(Declaration *p1);
  ~DeclarationElement();
  virtual void accept(Visitor *v);
  virtual DeclarationElement *clone() const;
  void swap(DeclarationElement &);
};

class StatementElement : public BlockElement
{
public:
  Statement *statement_;

  StatementElement(const StatementElement &);
  StatementElement &operator=(const StatementElement &);
  StatementElement(Statement *p1);
  ~StatementElement();
  virtual void accept(Visitor *v);
  virtual StatementElement *clone() const;
  void swap(StatementElement &);
};

class SemicolonStatement : public Statement
{
public:

  SemicolonStatement(const SemicolonStatement &);
  SemicolonStatement &operator=(const SemicolonStatement &);
  SemicolonStatement();
  ~SemicolonStatement();
  virtual void accept(Visitor *v);
  virtual SemicolonStatement *clone() const;
  void swap(SemicolonStatement &);
};

class ExprsStatement : public Statement
{
public:
  ListExpression *listexpression_;

  ExprsStatement(const ExprsStatement &);
  ExprsStatement &operator=(const ExprsStatement &);
  ExprsStatement(ListExpression *p1);
  ~ExprsStatement();
  virtual void accept(Visitor *v);
  virtual ExprsStatement *clone() const;
  void swap(ExprsStatement &);
};

class BlockStatement : public Statement
{
public:
  Block *block_;

  BlockStatement(const BlockStatement &);
  BlockStatement &operator=(const BlockStatement &);
  BlockStatement(Block *p1);
  ~BlockStatement();
  virtual void accept(Visitor *v);
  virtual BlockStatement *clone() const;
  void swap(BlockStatement &);
};

class IfStatement : public Statement
{
public:
  ListExpression *listexpression_;
  AnnotatedStmt *annotatedstmt_;
  ElsePart *elsepart_;

  IfStatement(const IfStatement &);
  IfStatement &operator=(const IfStatement &);
  IfStatement(ListExpression *p1, AnnotatedStmt *p2, ElsePart *p3);
  ~IfStatement();
  virtual void accept(Visitor *v);
  virtual IfStatement *clone() const;
  void swap(IfStatement &);
};

class SwitchStatement : public Statement
{
public:
  ListExpression *listexpression_;
  AnnotatedStmt *annotatedstmt_;

  SwitchStatement(const SwitchStatement &);
  SwitchStatement &operator=(const SwitchStatement &);
  SwitchStatement(ListExpression *p1, AnnotatedStmt *p2);
  ~SwitchStatement();
  virtual void accept(Visitor *v);
  virtual SwitchStatement *clone() const;
  void swap(SwitchStatement &);
};

class WhileStatement : public Statement
{
public:
  ListExpression *listexpression_;
  AnnotatedStmt *annotatedstmt_;

  WhileStatement(const WhileStatement &);
  WhileStatement &operator=(const WhileStatement &);
  WhileStatement(ListExpression *p1, AnnotatedStmt *p2);
  ~WhileStatement();
  virtual void accept(Visitor *v);
  virtual WhileStatement *clone() const;
  void swap(WhileStatement &);
};

class ForStatement : public Statement
{
public:
  ForClause *forclause_;
  OptExpression *optexpression_1;
  OptExpression *optexpression_2;
  AnnotatedStmt *annotatedstmt_;

  ForStatement(const ForStatement &);
  ForStatement &operator=(const ForStatement &);
  ForStatement(ForClause *p1, OptExpression *p2, OptExpression *p3, AnnotatedStmt *p4);
  ~ForStatement();
  virtual void accept(Visitor *v);
  virtual ForStatement *clone() const;
  void swap(ForStatement &);
};

class CaseStatement : public Statement
{
public:
  Expression *expression_;
  AnnotatedStmt *annotatedstmt_;

  CaseStatement(const CaseStatement &);
  CaseStatement &operator=(const CaseStatement &);
  CaseStatement(Expression *p1, AnnotatedStmt *p2);
  ~CaseStatement();
  virtual void accept(Visitor *v);
  virtual CaseStatement *clone() const;
  void swap(CaseStatement &);
};

class CaseSliceStatement : public Statement
{
public:
  Expression *expression_1;
  Expression *expression_2;
  AnnotatedStmt *annotatedstmt_;

  CaseSliceStatement(const CaseSliceStatement &);
  CaseSliceStatement &operator=(const CaseSliceStatement &);
  CaseSliceStatement(Expression *p1, Expression *p2, AnnotatedStmt *p3);
  ~CaseSliceStatement();
  virtual void accept(Visitor *v);
  virtual CaseSliceStatement *clone() const;
  void swap(CaseSliceStatement &);
};

class DefaultStatement : public Statement
{
public:
  AnnotatedStmt *annotatedstmt_;

  DefaultStatement(const DefaultStatement &);
  DefaultStatement &operator=(const DefaultStatement &);
  DefaultStatement(AnnotatedStmt *p1);
  ~DefaultStatement();
  virtual void accept(Visitor *v);
  virtual DefaultStatement *clone() const;
  void swap(DefaultStatement &);
};

class EmptyReturnStatement : public Statement
{
public:

  EmptyReturnStatement(const EmptyReturnStatement &);
  EmptyReturnStatement &operator=(const EmptyReturnStatement &);
  EmptyReturnStatement();
  ~EmptyReturnStatement();
  virtual void accept(Visitor *v);
  virtual EmptyReturnStatement *clone() const;
  void swap(EmptyReturnStatement &);
};

class ReturnStatement : public Statement
{
public:
  ListExpression *listexpression_;

  ReturnStatement(const ReturnStatement &);
  ReturnStatement &operator=(const ReturnStatement &);
  ReturnStatement(ListExpression *p1);
  ~ReturnStatement();
  virtual void accept(Visitor *v);
  virtual ReturnStatement *clone() const;
  void swap(ReturnStatement &);
};

class BreakStatement : public Statement
{
public:

  BreakStatement(const BreakStatement &);
  BreakStatement &operator=(const BreakStatement &);
  BreakStatement();
  ~BreakStatement();
  virtual void accept(Visitor *v);
  virtual BreakStatement *clone() const;
  void swap(BreakStatement &);
};

class ContinueStatement : public Statement
{
public:

  ContinueStatement(const ContinueStatement &);
  ContinueStatement &operator=(const ContinueStatement &);
  ContinueStatement();
  ~ContinueStatement();
  virtual void accept(Visitor *v);
  virtual ContinueStatement *clone() const;
  void swap(ContinueStatement &);
};

class ForClauseExpression : public ForClause
{
public:
  OptExpression *optexpression_;

  ForClauseExpression(const ForClauseExpression &);
  ForClauseExpression &operator=(const ForClauseExpression &);
  ForClauseExpression(OptExpression *p1);
  ~ForClauseExpression();
  virtual void accept(Visitor *v);
  virtual ForClauseExpression *clone() const;
  void swap(ForClauseExpression &);
};

class ForClauseDeclaration : public ForClause
{
public:
  Declaration *declaration_;

  ForClauseDeclaration(const ForClauseDeclaration &);
  ForClauseDeclaration &operator=(const ForClauseDeclaration &);
  ForClauseDeclaration(Declaration *p1);
  ~ForClauseDeclaration();
  virtual void accept(Visitor *v);
  virtual ForClauseDeclaration *clone() const;
  void swap(ForClauseDeclaration &);
};

class AnAttr : public Attr
{
public:
  Attr *attr_1;
  Attr *attr_2;

  AnAttr(const AnAttr &);
  AnAttr &operator=(const AnAttr &);
  AnAttr(Attr *p1, Attr *p2);
  ~AnAttr();
  virtual void accept(Visitor *v);
  virtual AnAttr *clone() const;
  void swap(AnAttr &);
};

class TernaryCond : public Attr
{
public:
  Attr *attr_1;
  Attr *attr_2;
  Attr *attr_3;

  TernaryCond(const TernaryCond &);
  TernaryCond &operator=(const TernaryCond &);
  TernaryCond(Attr *p1, Attr *p2, Attr *p3);
  ~TernaryCond();
  virtual void accept(Visitor *v);
  virtual TernaryCond *clone() const;
  void swap(TernaryCond &);
};

class Or : public Attr
{
public:
  Attr *attr_1;
  Attr *attr_2;

  Or(const Or &);
  Or &operator=(const Or &);
  Or(Attr *p1, Attr *p2);
  ~Or();
  virtual void accept(Visitor *v);
  virtual Or *clone() const;
  void swap(Or &);
};

class And : public Attr
{
public:
  Attr *attr_1;
  Attr *attr_2;

  And(const And &);
  And &operator=(const And &);
  And(Attr *p1, Attr *p2);
  ~And();
  virtual void accept(Visitor *v);
  virtual And *clone() const;
  void swap(And &);
};

class BitOr : public Attr
{
public:
  Attr *attr_1;
  Attr *attr_2;

  BitOr(const BitOr &);
  BitOr &operator=(const BitOr &);
  BitOr(Attr *p1, Attr *p2);
  ~BitOr();
  virtual void accept(Visitor *v);
  virtual BitOr *clone() const;
  void swap(BitOr &);
};

class Xor : public Attr
{
public:
  Attr *attr_1;
  Attr *attr_2;

  Xor(const Xor &);
  Xor &operator=(const Xor &);
  Xor(Attr *p1, Attr *p2);
  ~Xor();
  virtual void accept(Visitor *v);
  virtual Xor *clone() const;
  void swap(Xor &);
};

class BitAnd : public Attr
{
public:
  Attr *attr_1;
  Attr *attr_2;

  BitAnd(const BitAnd &);
  BitAnd &operator=(const BitAnd &);
  BitAnd(Attr *p1, Attr *p2);
  ~BitAnd();
  virtual void accept(Visitor *v);
  virtual BitAnd *clone() const;
  void swap(BitAnd &);
};

class EqualEqual : public Attr
{
public:
  Attr *attr_1;
  Attr *attr_2;

  EqualEqual(const EqualEqual &);
  EqualEqual &operator=(const EqualEqual &);
  EqualEqual(Attr *p1, Attr *p2);
  ~EqualEqual();
  virtual void accept(Visitor *v);
  virtual EqualEqual *clone() const;
  void swap(EqualEqual &);
};

class NotEqual : public Attr
{
public:
  Attr *attr_1;
  Attr *attr_2;

  NotEqual(const NotEqual &);
  NotEqual &operator=(const NotEqual &);
  NotEqual(Attr *p1, Attr *p2);
  ~NotEqual();
  virtual void accept(Visitor *v);
  virtual NotEqual *clone() const;
  void swap(NotEqual &);
};

class Less : public Attr
{
public:
  Attr *attr_1;
  Attr *attr_2;

  Less(const Less &);
  Less &operator=(const Less &);
  Less(Attr *p1, Attr *p2);
  ~Less();
  virtual void accept(Visitor *v);
  virtual Less *clone() const;
  void swap(Less &);
};

class Greater : public Attr
{
public:
  Attr *attr_1;
  Attr *attr_2;

  Greater(const Greater &);
  Greater &operator=(const Greater &);
  Greater(Attr *p1, Attr *p2);
  ~Greater();
  virtual void accept(Visitor *v);
  virtual Greater *clone() const;
  void swap(Greater &);
};

class LessEqual : public Attr
{
public:
  Attr *attr_1;
  Attr *attr_2;

  LessEqual(const LessEqual &);
  LessEqual &operator=(const LessEqual &);
  LessEqual(Attr *p1, Attr *p2);
  ~LessEqual();
  virtual void accept(Visitor *v);
  virtual LessEqual *clone() const;
  void swap(LessEqual &);
};

class GreaterEqual : public Attr
{
public:
  Attr *attr_1;
  Attr *attr_2;

  GreaterEqual(const GreaterEqual &);
  GreaterEqual &operator=(const GreaterEqual &);
  GreaterEqual(Attr *p1, Attr *p2);
  ~GreaterEqual();
  virtual void accept(Visitor *v);
  virtual GreaterEqual *clone() const;
  void swap(GreaterEqual &);
};

class LeftShiftOp : public Attr
{
public:
  Attr *attr_1;
  Attr *attr_2;

  LeftShiftOp(const LeftShiftOp &);
  LeftShiftOp &operator=(const LeftShiftOp &);
  LeftShiftOp(Attr *p1, Attr *p2);
  ~LeftShiftOp();
  virtual void accept(Visitor *v);
  virtual LeftShiftOp *clone() const;
  void swap(LeftShiftOp &);
};

class RightShiftOp : public Attr
{
public:
  Attr *attr_1;
  Attr *attr_2;

  RightShiftOp(const RightShiftOp &);
  RightShiftOp &operator=(const RightShiftOp &);
  RightShiftOp(Attr *p1, Attr *p2);
  ~RightShiftOp();
  virtual void accept(Visitor *v);
  virtual RightShiftOp *clone() const;
  void swap(RightShiftOp &);
};

class AddOp : public Attr
{
public:
  Attr *attr_1;
  Attr *attr_2;

  AddOp(const AddOp &);
  AddOp &operator=(const AddOp &);
  AddOp(Attr *p1, Attr *p2);
  ~AddOp();
  virtual void accept(Visitor *v);
  virtual AddOp *clone() const;
  void swap(AddOp &);
};

class SubOp : public Attr
{
public:
  Attr *attr_1;
  Attr *attr_2;

  SubOp(const SubOp &);
  SubOp &operator=(const SubOp &);
  SubOp(Attr *p1, Attr *p2);
  ~SubOp();
  virtual void accept(Visitor *v);
  virtual SubOp *clone() const;
  void swap(SubOp &);
};

class MultOp : public Attr
{
public:
  Attr *attr_1;
  Attr *attr_2;

  MultOp(const MultOp &);
  MultOp &operator=(const MultOp &);
  MultOp(Attr *p1, Attr *p2);
  ~MultOp();
  virtual void accept(Visitor *v);
  virtual MultOp *clone() const;
  void swap(MultOp &);
};

class DivOp : public Attr
{
public:
  Attr *attr_1;
  Attr *attr_2;

  DivOp(const DivOp &);
  DivOp &operator=(const DivOp &);
  DivOp(Attr *p1, Attr *p2);
  ~DivOp();
  virtual void accept(Visitor *v);
  virtual DivOp *clone() const;
  void swap(DivOp &);
};

class ModOp : public Attr
{
public:
  Attr *attr_1;
  Attr *attr_2;

  ModOp(const ModOp &);
  ModOp &operator=(const ModOp &);
  ModOp(Attr *p1, Attr *p2);
  ~ModOp();
  virtual void accept(Visitor *v);
  virtual ModOp *clone() const;
  void swap(ModOp &);
};

class PlusUnaryAttr : public Attr
{
public:
  Attr *attr_;

  PlusUnaryAttr(const PlusUnaryAttr &);
  PlusUnaryAttr &operator=(const PlusUnaryAttr &);
  PlusUnaryAttr(Attr *p1);
  ~PlusUnaryAttr();
  virtual void accept(Visitor *v);
  virtual PlusUnaryAttr *clone() const;
  void swap(PlusUnaryAttr &);
};

class MinusUnaryAttr : public Attr
{
public:
  Attr *attr_;

  MinusUnaryAttr(const MinusUnaryAttr &);
  MinusUnaryAttr &operator=(const MinusUnaryAttr &);
  MinusUnaryAttr(Attr *p1);
  ~MinusUnaryAttr();
  virtual void accept(Visitor *v);
  virtual MinusUnaryAttr *clone() const;
  void swap(MinusUnaryAttr &);
};

class MultUnaryAttr : public Attr
{
public:
  Attr *attr_;

  MultUnaryAttr(const MultUnaryAttr &);
  MultUnaryAttr &operator=(const MultUnaryAttr &);
  MultUnaryAttr(Attr *p1);
  ~MultUnaryAttr();
  virtual void accept(Visitor *v);
  virtual MultUnaryAttr *clone() const;
  void swap(MultUnaryAttr &);
};

class AmpUnaryAttr : public Attr
{
public:
  Attr *attr_;

  AmpUnaryAttr(const AmpUnaryAttr &);
  AmpUnaryAttr &operator=(const AmpUnaryAttr &);
  AmpUnaryAttr(Attr *p1);
  ~AmpUnaryAttr();
  virtual void accept(Visitor *v);
  virtual AmpUnaryAttr *clone() const;
  void swap(AmpUnaryAttr &);
};

class NotUnaryAttr : public Attr
{
public:
  Attr *attr_;

  NotUnaryAttr(const NotUnaryAttr &);
  NotUnaryAttr &operator=(const NotUnaryAttr &);
  NotUnaryAttr(Attr *p1);
  ~NotUnaryAttr();
  virtual void accept(Visitor *v);
  virtual NotUnaryAttr *clone() const;
  void swap(NotUnaryAttr &);
};

class TildeUnaryAttr : public Attr
{
public:
  Attr *attr_;

  TildeUnaryAttr(const TildeUnaryAttr &);
  TildeUnaryAttr &operator=(const TildeUnaryAttr &);
  TildeUnaryAttr(Attr *p1);
  ~TildeUnaryAttr();
  virtual void accept(Visitor *v);
  virtual TildeUnaryAttr *clone() const;
  void swap(TildeUnaryAttr &);
};

class FuncationCall : public Attr
{
public:
  IdOrTypenameAsId *idortypenameasid_;
  ListAttr *listattr_;

  FuncationCall(const FuncationCall &);
  FuncationCall &operator=(const FuncationCall &);
  FuncationCall(IdOrTypenameAsId *p1, ListAttr *p2);
  ~FuncationCall();
  virtual void accept(Visitor *v);
  virtual FuncationCall *clone() const;
  void swap(FuncationCall &);
};

class ProcedureCall : public Attr
{
public:
  IdOrTypenameAsId *idortypenameasid_;

  ProcedureCall(const ProcedureCall &);
  ProcedureCall &operator=(const ProcedureCall &);
  ProcedureCall(IdOrTypenameAsId *p1);
  ~ProcedureCall();
  virtual void accept(Visitor *v);
  virtual ProcedureCall *clone() const;
  void swap(ProcedureCall &);
};

class ArrowAttr : public Attr
{
public:
  Attr *attr_;
  IdOrTypename *idortypename_;

  ArrowAttr(const ArrowAttr &);
  ArrowAttr &operator=(const ArrowAttr &);
  ArrowAttr(Attr *p1, IdOrTypename *p2);
  ~ArrowAttr();
  virtual void accept(Visitor *v);
  virtual ArrowAttr *clone() const;
  void swap(ArrowAttr &);
};

class DotAttr : public Attr
{
public:
  Attr *attr_;
  IdOrTypename *idortypename_;

  DotAttr(const DotAttr &);
  DotAttr &operator=(const DotAttr &);
  DotAttr(Attr *p1, IdOrTypename *p2);
  ~DotAttr();
  virtual void accept(Visitor *v);
  virtual DotAttr *clone() const;
  void swap(DotAttr &);
};

class ArrayAttr : public Attr
{
public:
  Attr *attr_1;
  LBRACKET lbracket_;
  Attr *attr_2;
  RBRACKET rbracket_;

  ArrayAttr(const ArrayAttr &);
  ArrayAttr &operator=(const ArrayAttr &);
  ArrayAttr(Attr *p1, LBRACKET p2, Attr *p3, RBRACKET p4);
  ~ArrayAttr();
  virtual void accept(Visitor *v);
  virtual ArrayAttr *clone() const;
  void swap(ArrayAttr &);
};

class BasicAttr : public Attr
{
public:
  BasicAttribute *basicattribute_;

  BasicAttr(const BasicAttr &);
  BasicAttr &operator=(const BasicAttr &);
  BasicAttr(BasicAttribute *p1);
  ~BasicAttr();
  virtual void accept(Visitor *v);
  virtual BasicAttr *clone() const;
  void swap(BasicAttr &);
};

class BasicAttrConsInt : public BasicAttribute
{
public:
  Integer integer_;

  BasicAttrConsInt(const BasicAttrConsInt &);
  BasicAttrConsInt &operator=(const BasicAttrConsInt &);
  BasicAttrConsInt(Integer p1);
  ~BasicAttrConsInt();
  virtual void accept(Visitor *v);
  virtual BasicAttrConsInt *clone() const;
  void swap(BasicAttrConsInt &);
};

class BasicAttrConsFloat : public BasicAttribute
{
public:
  Double double_;

  BasicAttrConsFloat(const BasicAttrConsFloat &);
  BasicAttrConsFloat &operator=(const BasicAttrConsFloat &);
  BasicAttrConsFloat(Double p1);
  ~BasicAttrConsFloat();
  virtual void accept(Visitor *v);
  virtual BasicAttrConsFloat *clone() const;
  void swap(BasicAttrConsFloat &);
};

class AnnotatedStatement : public AnnotatedStmt
{
public:
  Statement *statement_;

  AnnotatedStatement(const AnnotatedStatement &);
  AnnotatedStatement &operator=(const AnnotatedStatement &);
  AnnotatedStatement(Statement *p1);
  ~AnnotatedStatement();
  virtual void accept(Visitor *v);
  virtual AnnotatedStatement *clone() const;
  void swap(AnnotatedStatement &);
};

class NoElsePart : public ElsePart
{
public:

  NoElsePart(const NoElsePart &);
  NoElsePart &operator=(const NoElsePart &);
  NoElsePart();
  ~NoElsePart();
  virtual void accept(Visitor *v);
  virtual NoElsePart *clone() const;
  void swap(NoElsePart &);
};

class SimpleElsePart : public ElsePart
{
public:
  AnnotatedStmt *annotatedstmt_;

  SimpleElsePart(const SimpleElsePart &);
  SimpleElsePart &operator=(const SimpleElsePart &);
  SimpleElsePart(AnnotatedStmt *p1);
  ~SimpleElsePart();
  virtual void accept(Visitor *v);
  virtual SimpleElsePart *clone() const;
  void swap(SimpleElsePart &);
};

class NoExpression : public OptExpression
{
public:

  NoExpression(const NoExpression &);
  NoExpression &operator=(const NoExpression &);
  NoExpression();
  ~NoExpression();
  virtual void accept(Visitor *v);
  virtual NoExpression *clone() const;
  void swap(NoExpression &);
};

class SomeExpression : public OptExpression
{
public:
  ListExpression *listexpression_;

  SomeExpression(const SomeExpression &);
  SomeExpression &operator=(const SomeExpression &);
  SomeExpression(ListExpression *p1);
  ~SomeExpression();
  virtual void accept(Visitor *v);
  virtual SomeExpression *clone() const;
  void swap(SomeExpression &);
};

class AssignmentExpr : public Expression
{
public:
  AssignExpr *assignexpr_;

  AssignmentExpr(const AssignmentExpr &);
  AssignmentExpr &operator=(const AssignmentExpr &);
  AssignmentExpr(AssignExpr *p1);
  ~AssignmentExpr();
  virtual void accept(Visitor *v);
  virtual AssignmentExpr *clone() const;
  void swap(AssignmentExpr &);
};

class EqAssignExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  EqAssignExpr(const EqAssignExpr &);
  EqAssignExpr &operator=(const EqAssignExpr &);
  EqAssignExpr(AssignExpr *p1, AssignExpr *p2);
  ~EqAssignExpr();
  virtual void accept(Visitor *v);
  virtual EqAssignExpr *clone() const;
  void swap(EqAssignExpr &);
};

class PlusEqAssignExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  PlusEqAssignExpr(const PlusEqAssignExpr &);
  PlusEqAssignExpr &operator=(const PlusEqAssignExpr &);
  PlusEqAssignExpr(AssignExpr *p1, AssignExpr *p2);
  ~PlusEqAssignExpr();
  virtual void accept(Visitor *v);
  virtual PlusEqAssignExpr *clone() const;
  void swap(PlusEqAssignExpr &);
};

class MinusEqAssignExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  MinusEqAssignExpr(const MinusEqAssignExpr &);
  MinusEqAssignExpr &operator=(const MinusEqAssignExpr &);
  MinusEqAssignExpr(AssignExpr *p1, AssignExpr *p2);
  ~MinusEqAssignExpr();
  virtual void accept(Visitor *v);
  virtual MinusEqAssignExpr *clone() const;
  void swap(MinusEqAssignExpr &);
};

class MultEqAssignExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  MultEqAssignExpr(const MultEqAssignExpr &);
  MultEqAssignExpr &operator=(const MultEqAssignExpr &);
  MultEqAssignExpr(AssignExpr *p1, AssignExpr *p2);
  ~MultEqAssignExpr();
  virtual void accept(Visitor *v);
  virtual MultEqAssignExpr *clone() const;
  void swap(MultEqAssignExpr &);
};

class DivEqAssignExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  DivEqAssignExpr(const DivEqAssignExpr &);
  DivEqAssignExpr &operator=(const DivEqAssignExpr &);
  DivEqAssignExpr(AssignExpr *p1, AssignExpr *p2);
  ~DivEqAssignExpr();
  virtual void accept(Visitor *v);
  virtual DivEqAssignExpr *clone() const;
  void swap(DivEqAssignExpr &);
};

class ModEqAssignExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  ModEqAssignExpr(const ModEqAssignExpr &);
  ModEqAssignExpr &operator=(const ModEqAssignExpr &);
  ModEqAssignExpr(AssignExpr *p1, AssignExpr *p2);
  ~ModEqAssignExpr();
  virtual void accept(Visitor *v);
  virtual ModEqAssignExpr *clone() const;
  void swap(ModEqAssignExpr &);
};

class AndEqAssignExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  AndEqAssignExpr(const AndEqAssignExpr &);
  AndEqAssignExpr &operator=(const AndEqAssignExpr &);
  AndEqAssignExpr(AssignExpr *p1, AssignExpr *p2);
  ~AndEqAssignExpr();
  virtual void accept(Visitor *v);
  virtual AndEqAssignExpr *clone() const;
  void swap(AndEqAssignExpr &);
};

class OrEqAssignExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  OrEqAssignExpr(const OrEqAssignExpr &);
  OrEqAssignExpr &operator=(const OrEqAssignExpr &);
  OrEqAssignExpr(AssignExpr *p1, AssignExpr *p2);
  ~OrEqAssignExpr();
  virtual void accept(Visitor *v);
  virtual OrEqAssignExpr *clone() const;
  void swap(OrEqAssignExpr &);
};

class XorEqAssignExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  XorEqAssignExpr(const XorEqAssignExpr &);
  XorEqAssignExpr &operator=(const XorEqAssignExpr &);
  XorEqAssignExpr(AssignExpr *p1, AssignExpr *p2);
  ~XorEqAssignExpr();
  virtual void accept(Visitor *v);
  virtual XorEqAssignExpr *clone() const;
  void swap(XorEqAssignExpr &);
};

class LeftShiftEqAssignExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  LeftShiftEqAssignExpr(const LeftShiftEqAssignExpr &);
  LeftShiftEqAssignExpr &operator=(const LeftShiftEqAssignExpr &);
  LeftShiftEqAssignExpr(AssignExpr *p1, AssignExpr *p2);
  ~LeftShiftEqAssignExpr();
  virtual void accept(Visitor *v);
  virtual LeftShiftEqAssignExpr *clone() const;
  void swap(LeftShiftEqAssignExpr &);
};

class RightShiftEqAssignExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  RightShiftEqAssignExpr(const RightShiftEqAssignExpr &);
  RightShiftEqAssignExpr &operator=(const RightShiftEqAssignExpr &);
  RightShiftEqAssignExpr(AssignExpr *p1, AssignExpr *p2);
  ~RightShiftEqAssignExpr();
  virtual void accept(Visitor *v);
  virtual RightShiftEqAssignExpr *clone() const;
  void swap(RightShiftEqAssignExpr &);
};

class TernaryCondExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  OptExpression *optexpression_;
  AssignExpr *assignexpr_2;

  TernaryCondExpr(const TernaryCondExpr &);
  TernaryCondExpr &operator=(const TernaryCondExpr &);
  TernaryCondExpr(AssignExpr *p1, OptExpression *p2, AssignExpr *p3);
  ~TernaryCondExpr();
  virtual void accept(Visitor *v);
  virtual TernaryCondExpr *clone() const;
  void swap(TernaryCondExpr &);
};

class OrExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  OrExpr(const OrExpr &);
  OrExpr &operator=(const OrExpr &);
  OrExpr(AssignExpr *p1, AssignExpr *p2);
  ~OrExpr();
  virtual void accept(Visitor *v);
  virtual OrExpr *clone() const;
  void swap(OrExpr &);
};

class AndExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  AndExpr(const AndExpr &);
  AndExpr &operator=(const AndExpr &);
  AndExpr(AssignExpr *p1, AssignExpr *p2);
  ~AndExpr();
  virtual void accept(Visitor *v);
  virtual AndExpr *clone() const;
  void swap(AndExpr &);
};

class BitOrExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  BitOrExpr(const BitOrExpr &);
  BitOrExpr &operator=(const BitOrExpr &);
  BitOrExpr(AssignExpr *p1, AssignExpr *p2);
  ~BitOrExpr();
  virtual void accept(Visitor *v);
  virtual BitOrExpr *clone() const;
  void swap(BitOrExpr &);
};

class BitXorExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  BitXorExpr(const BitXorExpr &);
  BitXorExpr &operator=(const BitXorExpr &);
  BitXorExpr(AssignExpr *p1, AssignExpr *p2);
  ~BitXorExpr();
  virtual void accept(Visitor *v);
  virtual BitXorExpr *clone() const;
  void swap(BitXorExpr &);
};

class BitAndExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  BitAndExpr(const BitAndExpr &);
  BitAndExpr &operator=(const BitAndExpr &);
  BitAndExpr(AssignExpr *p1, AssignExpr *p2);
  ~BitAndExpr();
  virtual void accept(Visitor *v);
  virtual BitAndExpr *clone() const;
  void swap(BitAndExpr &);
};

class EqExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  EqExpr(const EqExpr &);
  EqExpr &operator=(const EqExpr &);
  EqExpr(AssignExpr *p1, AssignExpr *p2);
  ~EqExpr();
  virtual void accept(Visitor *v);
  virtual EqExpr *clone() const;
  void swap(EqExpr &);
};

class NotEqExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  NotEqExpr(const NotEqExpr &);
  NotEqExpr &operator=(const NotEqExpr &);
  NotEqExpr(AssignExpr *p1, AssignExpr *p2);
  ~NotEqExpr();
  virtual void accept(Visitor *v);
  virtual NotEqExpr *clone() const;
  void swap(NotEqExpr &);
};

class LessExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  LessExpr(const LessExpr &);
  LessExpr &operator=(const LessExpr &);
  LessExpr(AssignExpr *p1, AssignExpr *p2);
  ~LessExpr();
  virtual void accept(Visitor *v);
  virtual LessExpr *clone() const;
  void swap(LessExpr &);
};

class GreaterExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  GreaterExpr(const GreaterExpr &);
  GreaterExpr &operator=(const GreaterExpr &);
  GreaterExpr(AssignExpr *p1, AssignExpr *p2);
  ~GreaterExpr();
  virtual void accept(Visitor *v);
  virtual GreaterExpr *clone() const;
  void swap(GreaterExpr &);
};

class LessEqualExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  LessEqualExpr(const LessEqualExpr &);
  LessEqualExpr &operator=(const LessEqualExpr &);
  LessEqualExpr(AssignExpr *p1, AssignExpr *p2);
  ~LessEqualExpr();
  virtual void accept(Visitor *v);
  virtual LessEqualExpr *clone() const;
  void swap(LessEqualExpr &);
};

class GreaterEqualExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  GreaterEqualExpr(const GreaterEqualExpr &);
  GreaterEqualExpr &operator=(const GreaterEqualExpr &);
  GreaterEqualExpr(AssignExpr *p1, AssignExpr *p2);
  ~GreaterEqualExpr();
  virtual void accept(Visitor *v);
  virtual GreaterEqualExpr *clone() const;
  void swap(GreaterEqualExpr &);
};

class LeftShiftExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  LeftShiftExpr(const LeftShiftExpr &);
  LeftShiftExpr &operator=(const LeftShiftExpr &);
  LeftShiftExpr(AssignExpr *p1, AssignExpr *p2);
  ~LeftShiftExpr();
  virtual void accept(Visitor *v);
  virtual LeftShiftExpr *clone() const;
  void swap(LeftShiftExpr &);
};

class RightShiftExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  RightShiftExpr(const RightShiftExpr &);
  RightShiftExpr &operator=(const RightShiftExpr &);
  RightShiftExpr(AssignExpr *p1, AssignExpr *p2);
  ~RightShiftExpr();
  virtual void accept(Visitor *v);
  virtual RightShiftExpr *clone() const;
  void swap(RightShiftExpr &);
};

class PlusExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  PlusExpr(const PlusExpr &);
  PlusExpr &operator=(const PlusExpr &);
  PlusExpr(AssignExpr *p1, AssignExpr *p2);
  ~PlusExpr();
  virtual void accept(Visitor *v);
  virtual PlusExpr *clone() const;
  void swap(PlusExpr &);
};

class MinusExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  MinusExpr(const MinusExpr &);
  MinusExpr &operator=(const MinusExpr &);
  MinusExpr(AssignExpr *p1, AssignExpr *p2);
  ~MinusExpr();
  virtual void accept(Visitor *v);
  virtual MinusExpr *clone() const;
  void swap(MinusExpr &);
};

class MulsExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  MulsExpr(const MulsExpr &);
  MulsExpr &operator=(const MulsExpr &);
  MulsExpr(AssignExpr *p1, AssignExpr *p2);
  ~MulsExpr();
  virtual void accept(Visitor *v);
  virtual MulsExpr *clone() const;
  void swap(MulsExpr &);
};

class DivExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  DivExpr(const DivExpr &);
  DivExpr &operator=(const DivExpr &);
  DivExpr(AssignExpr *p1, AssignExpr *p2);
  ~DivExpr();
  virtual void accept(Visitor *v);
  virtual DivExpr *clone() const;
  void swap(DivExpr &);
};

class ModExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  ModExpr(const ModExpr &);
  ModExpr &operator=(const ModExpr &);
  ModExpr(AssignExpr *p1, AssignExpr *p2);
  ~ModExpr();
  virtual void accept(Visitor *v);
  virtual ModExpr *clone() const;
  void swap(ModExpr &);
};

class CastExpr : public AssignExpr
{
public:
  TypeName *typename_;
  AssignExpr *assignexpr_;

  CastExpr(const CastExpr &);
  CastExpr &operator=(const CastExpr &);
  CastExpr(TypeName *p1, AssignExpr *p2);
  ~CastExpr();
  virtual void accept(Visitor *v);
  virtual CastExpr *clone() const;
  void swap(CastExpr &);
};

class UnaryExprPlusPlus : public AssignExpr
{
public:
  AssignExpr *assignexpr_;

  UnaryExprPlusPlus(const UnaryExprPlusPlus &);
  UnaryExprPlusPlus &operator=(const UnaryExprPlusPlus &);
  UnaryExprPlusPlus(AssignExpr *p1);
  ~UnaryExprPlusPlus();
  virtual void accept(Visitor *v);
  virtual UnaryExprPlusPlus *clone() const;
  void swap(UnaryExprPlusPlus &);
};

class UnaryExprMinusMinus : public AssignExpr
{
public:
  AssignExpr *assignexpr_;

  UnaryExprMinusMinus(const UnaryExprMinusMinus &);
  UnaryExprMinusMinus &operator=(const UnaryExprMinusMinus &);
  UnaryExprMinusMinus(AssignExpr *p1);
  ~UnaryExprMinusMinus();
  virtual void accept(Visitor *v);
  virtual UnaryExprMinusMinus *clone() const;
  void swap(UnaryExprMinusMinus &);
};

class UnaryExprPlus : public AssignExpr
{
public:
  AssignExpr *assignexpr_;

  UnaryExprPlus(const UnaryExprPlus &);
  UnaryExprPlus &operator=(const UnaryExprPlus &);
  UnaryExprPlus(AssignExpr *p1);
  ~UnaryExprPlus();
  virtual void accept(Visitor *v);
  virtual UnaryExprPlus *clone() const;
  void swap(UnaryExprPlus &);
};

class UnaryExprMinus : public AssignExpr
{
public:
  AssignExpr *assignexpr_;

  UnaryExprMinus(const UnaryExprMinus &);
  UnaryExprMinus &operator=(const UnaryExprMinus &);
  UnaryExprMinus(AssignExpr *p1);
  ~UnaryExprMinus();
  virtual void accept(Visitor *v);
  virtual UnaryExprMinus *clone() const;
  void swap(UnaryExprMinus &);
};

class UnaryExprMult : public AssignExpr
{
public:
  AssignExpr *assignexpr_;

  UnaryExprMult(const UnaryExprMult &);
  UnaryExprMult &operator=(const UnaryExprMult &);
  UnaryExprMult(AssignExpr *p1);
  ~UnaryExprMult();
  virtual void accept(Visitor *v);
  virtual UnaryExprMult *clone() const;
  void swap(UnaryExprMult &);
};

class UnaryExprAmp : public AssignExpr
{
public:
  AssignExpr *assignexpr_;

  UnaryExprAmp(const UnaryExprAmp &);
  UnaryExprAmp &operator=(const UnaryExprAmp &);
  UnaryExprAmp(AssignExpr *p1);
  ~UnaryExprAmp();
  virtual void accept(Visitor *v);
  virtual UnaryExprAmp *clone() const;
  void swap(UnaryExprAmp &);
};

class UnaryExprNot : public AssignExpr
{
public:
  AssignExpr *assignexpr_;

  UnaryExprNot(const UnaryExprNot &);
  UnaryExprNot &operator=(const UnaryExprNot &);
  UnaryExprNot(AssignExpr *p1);
  ~UnaryExprNot();
  virtual void accept(Visitor *v);
  virtual UnaryExprNot *clone() const;
  void swap(UnaryExprNot &);
};

class UnaryExprTilde : public AssignExpr
{
public:
  AssignExpr *assignexpr_;

  UnaryExprTilde(const UnaryExprTilde &);
  UnaryExprTilde &operator=(const UnaryExprTilde &);
  UnaryExprTilde(AssignExpr *p1);
  ~UnaryExprTilde();
  virtual void accept(Visitor *v);
  virtual UnaryExprTilde *clone() const;
  void swap(UnaryExprTilde &);
};

class UnaryExprAddress : public AssignExpr
{
public:
  IdOrTypenameAsId *idortypenameasid_;

  UnaryExprAddress(const UnaryExprAddress &);
  UnaryExprAddress &operator=(const UnaryExprAddress &);
  UnaryExprAddress(IdOrTypenameAsId *p1);
  ~UnaryExprAddress();
  virtual void accept(Visitor *v);
  virtual UnaryExprAddress *clone() const;
  void swap(UnaryExprAddress &);
};

class BracketsPostfixExpression : public AssignExpr
{
public:
  AssignExpr *assignexpr_;
  LBRACKET lbracket_;
  ListExpression *listexpression_;
  RBRACKET rbracket_;

  BracketsPostfixExpression(const BracketsPostfixExpression &);
  BracketsPostfixExpression &operator=(const BracketsPostfixExpression &);
  BracketsPostfixExpression(AssignExpr *p1, LBRACKET p2, ListExpression *p3, RBRACKET p4);
  ~BracketsPostfixExpression();
  virtual void accept(Visitor *v);
  virtual BracketsPostfixExpression *clone() const;
  void swap(BracketsPostfixExpression &);
};

class DotPostfixExpression : public AssignExpr
{
public:
  AssignExpr *assignexpr_;
  IdOrTypename *idortypename_;

  DotPostfixExpression(const DotPostfixExpression &);
  DotPostfixExpression &operator=(const DotPostfixExpression &);
  DotPostfixExpression(AssignExpr *p1, IdOrTypename *p2);
  ~DotPostfixExpression();
  virtual void accept(Visitor *v);
  virtual DotPostfixExpression *clone() const;
  void swap(DotPostfixExpression &);
};

class ArrowPostfixExpression : public AssignExpr
{
public:
  AssignExpr *assignexpr_;
  IdOrTypename *idortypename_;

  ArrowPostfixExpression(const ArrowPostfixExpression &);
  ArrowPostfixExpression &operator=(const ArrowPostfixExpression &);
  ArrowPostfixExpression(AssignExpr *p1, IdOrTypename *p2);
  ~ArrowPostfixExpression();
  virtual void accept(Visitor *v);
  virtual ArrowPostfixExpression *clone() const;
  void swap(ArrowPostfixExpression &);
};

class PlusPlusPostfixExpression : public AssignExpr
{
public:
  AssignExpr *assignexpr_;

  PlusPlusPostfixExpression(const PlusPlusPostfixExpression &);
  PlusPlusPostfixExpression &operator=(const PlusPlusPostfixExpression &);
  PlusPlusPostfixExpression(AssignExpr *p1);
  ~PlusPlusPostfixExpression();
  virtual void accept(Visitor *v);
  virtual PlusPlusPostfixExpression *clone() const;
  void swap(PlusPlusPostfixExpression &);
};

class MinusMinusPostfixExpression : public AssignExpr
{
public:
  AssignExpr *assignexpr_;

  MinusMinusPostfixExpression(const MinusMinusPostfixExpression &);
  MinusMinusPostfixExpression &operator=(const MinusMinusPostfixExpression &);
  MinusMinusPostfixExpression(AssignExpr *p1);
  ~MinusMinusPostfixExpression();
  virtual void accept(Visitor *v);
  virtual MinusMinusPostfixExpression *clone() const;
  void swap(MinusMinusPostfixExpression &);
};

class IdentifierPrimaryExpression : public AssignExpr
{
public:
  Ident ident_;

  IdentifierPrimaryExpression(const IdentifierPrimaryExpression &);
  IdentifierPrimaryExpression &operator=(const IdentifierPrimaryExpression &);
  IdentifierPrimaryExpression(Ident p1);
  ~IdentifierPrimaryExpression();
  virtual void accept(Visitor *v);
  virtual IdentifierPrimaryExpression *clone() const;
  void swap(IdentifierPrimaryExpression &);
};

class ConstantPrimaryExpressin : public AssignExpr
{
public:
  Constant *constant_;

  ConstantPrimaryExpressin(const ConstantPrimaryExpressin &);
  ConstantPrimaryExpressin &operator=(const ConstantPrimaryExpressin &);
  ConstantPrimaryExpressin(Constant *p1);
  ~ConstantPrimaryExpressin();
  virtual void accept(Visitor *v);
  virtual ConstantPrimaryExpressin *clone() const;
  void swap(ConstantPrimaryExpressin &);
};

class CommaExpressionPrimaryExpressin : public AssignExpr
{
public:
  ListExpression *listexpression_;

  CommaExpressionPrimaryExpressin(const CommaExpressionPrimaryExpressin &);
  CommaExpressionPrimaryExpressin &operator=(const CommaExpressionPrimaryExpressin &);
  CommaExpressionPrimaryExpressin(ListExpression *p1);
  ~CommaExpressionPrimaryExpressin();
  virtual void accept(Visitor *v);
  virtual CommaExpressionPrimaryExpressin *clone() const;
  void swap(CommaExpressionPrimaryExpressin &);
};

class BlockPrimaryExpressin : public AssignExpr
{
public:
  Block *block_;

  BlockPrimaryExpressin(const BlockPrimaryExpressin &);
  BlockPrimaryExpressin &operator=(const BlockPrimaryExpressin &);
  BlockPrimaryExpressin(Block *p1);
  ~BlockPrimaryExpressin();
  virtual void accept(Visitor *v);
  virtual BlockPrimaryExpressin *clone() const;
  void swap(BlockPrimaryExpressin &);
};

class ConstantInt : public Constant
{
public:
  Integer integer_;

  ConstantInt(const ConstantInt &);
  ConstantInt &operator=(const ConstantInt &);
  ConstantInt(Integer p1);
  ~ConstantInt();
  virtual void accept(Visitor *v);
  virtual ConstantInt *clone() const;
  void swap(ConstantInt &);
};

class ConstantFloat : public Constant
{
public:
  Double double_;

  ConstantFloat(const ConstantFloat &);
  ConstantFloat &operator=(const ConstantFloat &);
  ConstantFloat(Double p1);
  ~ConstantFloat();
  virtual void accept(Visitor *v);
  virtual ConstantFloat *clone() const;
  void swap(ConstantFloat &);
};

class ConstantChar : public Constant
{
public:
  Char char_;

  ConstantChar(const ConstantChar &);
  ConstantChar &operator=(const ConstantChar &);
  ConstantChar(Char p1);
  ~ConstantChar();
  virtual void accept(Visitor *v);
  virtual ConstantChar *clone() const;
  void swap(ConstantChar &);
};

class TypeNameDeclSpecList : public TypeName
{
public:
  DeclSpecList *declspeclist_;

  TypeNameDeclSpecList(const TypeNameDeclSpecList &);
  TypeNameDeclSpecList &operator=(const TypeNameDeclSpecList &);
  TypeNameDeclSpecList(DeclSpecList *p1);
  ~TypeNameDeclSpecList();
  virtual void accept(Visitor *v);
  virtual TypeNameDeclSpecList *clone() const;
  void swap(TypeNameDeclSpecList &);
};



class ListParameterDecl : public Visitable, public std::vector<ParameterDecl*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListParameterDecl *clone() const;
};

ListParameterDecl* consListParameterDecl(ParameterDecl* x, ListParameterDecl* xs);

class ListInitDeclaratorAttr : public Visitable, public std::vector<InitDeclaratorAttr*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListInitDeclaratorAttr *clone() const;
};

ListInitDeclaratorAttr* consListInitDeclaratorAttr(InitDeclaratorAttr* x, ListInitDeclaratorAttr* xs);

class ListFieldDecl : public Visitable, public std::vector<FieldDecl*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListFieldDecl *clone() const;
};

ListFieldDecl* consListFieldDecl(FieldDecl* x, ListFieldDecl* xs);

class ListAttribute : public Visitable, public std::vector<Attribute*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListAttribute *clone() const;
};

ListAttribute* consListAttribute(Attribute* x, ListAttribute* xs);

class ListBlockElement : public Visitable, public std::vector<BlockElement*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListBlockElement *clone() const;
};

ListBlockElement* consListBlockElement(BlockElement* x, ListBlockElement* xs);

class ListAttr : public Visitable, public std::vector<Attr*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListAttr *clone() const;
};

ListAttr* consListAttr(Attr* x, ListAttr* xs);

class ListExpression : public Visitable, public std::vector<Expression*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListExpression *clone() const;
};

ListExpression* consListExpression(Expression* x, ListExpression* xs);




}
#endif
