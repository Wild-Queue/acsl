/* File generated by the BNF Converter (bnfc 2.9.4.1). */

#ifndef PARTIAL_ACSL_ABSYN_HEADER
#define PARTIAL_ACSL_ABSYN_HEADER

#include<string>
#include<vector>

//C++ Abstract Syntax Interface.
namespace partial_acsl
{
/********************   TypeDef Section    ********************/

typedef int Integer;
typedef char Char;
typedef double Double;
typedef std::string String;
typedef std::string Ident;


typedef std::string SIGNED;
typedef std::string LBRACE;
typedef std::string RBRACE;
typedef std::string CONST;
typedef std::string RESTRICT;
typedef std::string VOLATILE;


/********************   Forward Declarations    ********************/

class Program;
class Globals;
class Global;
class FunctionDef;
class Block;
class FunctionDefStart;
class DeclSpecList;
class DeclSpecListNoNamed;
class TypeSpec;
class Declarator;
class PointerOpt;
class DirectDecl;
class AttributesWithAsm;
class RestParList;
class ParameterDecl;
class GhostParameterOpt;
class IdOrTypename;
class IdOrTypenameAsId;
class Declaration;
class DeclAndInitDeclAttrList;
class InitDeclaratorAttr;
class InitDeclarator;
class StructDeclList;
class FieldDecl;
class Attribute;
class AProgram;
class NoGlobals;
class SimpleGlobals;
class SemiColonGlobals;
class GlobalsDeclataion;
class GlobalsFunctionDef;
class SimpleFunctionDef;
class ABlock;
class FunctionDefStartDeclarator;
class DeclSpecTypeSpec;
class DeclSpecTypeSpecNext;
class DeclSpecNoNamedTypeSpec;
class DeclSpecNoNamedTypeSpecNext;
class TypeSpecVoidKeyWord;
class TypeSpecCharKeyWord;
class TypeSpecBoolKeyWord;
class TypeSpecShortKeyWord;
class TypeSpecInt32KeyWord;
class TypeSpecIntKeyWord;
class TypeSpecLongKeyWord;
class TypeSpecInt64KeyWord;
class TypeSpecFloatKeyWord;
class TypeSpecDoubleKeyWord;
class TypeSpecSignedKeyWord;
class TypeSpecUnsignedKeyWord;
class StructId;
class StructIdBraces;
class StructBraces;
class ADeclarator;
class NoPointer;
class SomePointer;
class DirectDeclIdTypename;
class DirectDeclGhostParam;
class DirectDeclGhostRestParParam;
class EmptyAttrWithASM;
class SimpleParameterDecl;
class ParameterDeclSpecDeclarator;
class ParameterDeclSpec;
class ParameterDeclPar;
class NoGhostParameter;
class IdTypename;
class IdOrTypenameAsIdIdentifier;
class DeclSpecInitDecl;
class DeclSpec;
class InitDeclaration;
class InitDeclarationWithAttr;
class InitDeclaratorAttribute;
class SimpleInitDeclarator;
class EmptyStructDecl;
class DeclSpecStructDecl;
class SemicolonStructDecl;
class SpecFieldDeclStructDecl;
class FieldDeclDeclarator;
class AttributeConst;
class ListParameterDecl;
class ListInitDeclaratorAttr;
class ListFieldDecl;
class ListAttribute;


/********************   Visitor Interfaces    ********************/
class Visitor
{
public:
  virtual ~Visitor() {}
  virtual void visitProgram(Program *p) = 0;
  virtual void visitGlobals(Globals *p) = 0;
  virtual void visitGlobal(Global *p) = 0;
  virtual void visitFunctionDef(FunctionDef *p) = 0;
  virtual void visitBlock(Block *p) = 0;
  virtual void visitFunctionDefStart(FunctionDefStart *p) = 0;
  virtual void visitDeclSpecList(DeclSpecList *p) = 0;
  virtual void visitDeclSpecListNoNamed(DeclSpecListNoNamed *p) = 0;
  virtual void visitTypeSpec(TypeSpec *p) = 0;
  virtual void visitDeclarator(Declarator *p) = 0;
  virtual void visitPointerOpt(PointerOpt *p) = 0;
  virtual void visitDirectDecl(DirectDecl *p) = 0;
  virtual void visitAttributesWithAsm(AttributesWithAsm *p) = 0;
  virtual void visitRestParList(RestParList *p) = 0;
  virtual void visitParameterDecl(ParameterDecl *p) = 0;
  virtual void visitGhostParameterOpt(GhostParameterOpt *p) = 0;
  virtual void visitIdOrTypename(IdOrTypename *p) = 0;
  virtual void visitIdOrTypenameAsId(IdOrTypenameAsId *p) = 0;
  virtual void visitDeclaration(Declaration *p) = 0;
  virtual void visitDeclAndInitDeclAttrList(DeclAndInitDeclAttrList *p) = 0;
  virtual void visitInitDeclaratorAttr(InitDeclaratorAttr *p) = 0;
  virtual void visitInitDeclarator(InitDeclarator *p) = 0;
  virtual void visitStructDeclList(StructDeclList *p) = 0;
  virtual void visitFieldDecl(FieldDecl *p) = 0;
  virtual void visitAttribute(Attribute *p) = 0;
  virtual void visitAProgram(AProgram *p) = 0;
  virtual void visitNoGlobals(NoGlobals *p) = 0;
  virtual void visitSimpleGlobals(SimpleGlobals *p) = 0;
  virtual void visitSemiColonGlobals(SemiColonGlobals *p) = 0;
  virtual void visitGlobalsDeclataion(GlobalsDeclataion *p) = 0;
  virtual void visitGlobalsFunctionDef(GlobalsFunctionDef *p) = 0;
  virtual void visitSimpleFunctionDef(SimpleFunctionDef *p) = 0;
  virtual void visitABlock(ABlock *p) = 0;
  virtual void visitFunctionDefStartDeclarator(FunctionDefStartDeclarator *p) = 0;
  virtual void visitDeclSpecTypeSpec(DeclSpecTypeSpec *p) = 0;
  virtual void visitDeclSpecTypeSpecNext(DeclSpecTypeSpecNext *p) = 0;
  virtual void visitDeclSpecNoNamedTypeSpec(DeclSpecNoNamedTypeSpec *p) = 0;
  virtual void visitDeclSpecNoNamedTypeSpecNext(DeclSpecNoNamedTypeSpecNext *p) = 0;
  virtual void visitTypeSpecVoidKeyWord(TypeSpecVoidKeyWord *p) = 0;
  virtual void visitTypeSpecCharKeyWord(TypeSpecCharKeyWord *p) = 0;
  virtual void visitTypeSpecBoolKeyWord(TypeSpecBoolKeyWord *p) = 0;
  virtual void visitTypeSpecShortKeyWord(TypeSpecShortKeyWord *p) = 0;
  virtual void visitTypeSpecInt32KeyWord(TypeSpecInt32KeyWord *p) = 0;
  virtual void visitTypeSpecIntKeyWord(TypeSpecIntKeyWord *p) = 0;
  virtual void visitTypeSpecLongKeyWord(TypeSpecLongKeyWord *p) = 0;
  virtual void visitTypeSpecInt64KeyWord(TypeSpecInt64KeyWord *p) = 0;
  virtual void visitTypeSpecFloatKeyWord(TypeSpecFloatKeyWord *p) = 0;
  virtual void visitTypeSpecDoubleKeyWord(TypeSpecDoubleKeyWord *p) = 0;
  virtual void visitTypeSpecSignedKeyWord(TypeSpecSignedKeyWord *p) = 0;
  virtual void visitTypeSpecUnsignedKeyWord(TypeSpecUnsignedKeyWord *p) = 0;
  virtual void visitStructId(StructId *p) = 0;
  virtual void visitStructIdBraces(StructIdBraces *p) = 0;
  virtual void visitStructBraces(StructBraces *p) = 0;
  virtual void visitADeclarator(ADeclarator *p) = 0;
  virtual void visitNoPointer(NoPointer *p) = 0;
  virtual void visitSomePointer(SomePointer *p) = 0;
  virtual void visitDirectDeclIdTypename(DirectDeclIdTypename *p) = 0;
  virtual void visitDirectDeclGhostParam(DirectDeclGhostParam *p) = 0;
  virtual void visitDirectDeclGhostRestParParam(DirectDeclGhostRestParParam *p) = 0;
  virtual void visitEmptyAttrWithASM(EmptyAttrWithASM *p) = 0;
  virtual void visitSimpleParameterDecl(SimpleParameterDecl *p) = 0;
  virtual void visitParameterDeclSpecDeclarator(ParameterDeclSpecDeclarator *p) = 0;
  virtual void visitParameterDeclSpec(ParameterDeclSpec *p) = 0;
  virtual void visitParameterDeclPar(ParameterDeclPar *p) = 0;
  virtual void visitNoGhostParameter(NoGhostParameter *p) = 0;
  virtual void visitIdTypename(IdTypename *p) = 0;
  virtual void visitIdOrTypenameAsIdIdentifier(IdOrTypenameAsIdIdentifier *p) = 0;
  virtual void visitDeclSpecInitDecl(DeclSpecInitDecl *p) = 0;
  virtual void visitDeclSpec(DeclSpec *p) = 0;
  virtual void visitInitDeclaration(InitDeclaration *p) = 0;
  virtual void visitInitDeclarationWithAttr(InitDeclarationWithAttr *p) = 0;
  virtual void visitInitDeclaratorAttribute(InitDeclaratorAttribute *p) = 0;
  virtual void visitSimpleInitDeclarator(SimpleInitDeclarator *p) = 0;
  virtual void visitEmptyStructDecl(EmptyStructDecl *p) = 0;
  virtual void visitDeclSpecStructDecl(DeclSpecStructDecl *p) = 0;
  virtual void visitSemicolonStructDecl(SemicolonStructDecl *p) = 0;
  virtual void visitSpecFieldDeclStructDecl(SpecFieldDeclStructDecl *p) = 0;
  virtual void visitFieldDeclDeclarator(FieldDeclDeclarator *p) = 0;
  virtual void visitAttributeConst(AttributeConst *p) = 0;
  virtual void visitListParameterDecl(ListParameterDecl *p) = 0;
  virtual void visitListInitDeclaratorAttr(ListInitDeclaratorAttr *p) = 0;
  virtual void visitListFieldDecl(ListFieldDecl *p) = 0;
  virtual void visitListAttribute(ListAttribute *p) = 0;


  virtual void visitInteger(Integer x) = 0;
  virtual void visitChar(Char x) = 0;
  virtual void visitDouble(Double x) = 0;
  virtual void visitString(String x) = 0;
  virtual void visitIdent(Ident x) = 0;
  virtual void visitSIGNED(SIGNED x) = 0;
  virtual void visitLBRACE(LBRACE x) = 0;
  virtual void visitRBRACE(RBRACE x) = 0;
  virtual void visitCONST(CONST x) = 0;
  virtual void visitRESTRICT(RESTRICT x) = 0;
  virtual void visitVOLATILE(VOLATILE x) = 0;

};


class Visitable
{
 public:
  virtual ~Visitable() {}
  virtual void accept(Visitor *v) = 0;
};


/********************   Abstract Syntax Classes    ********************/

class Program : public Visitable
{
public:
  virtual Program *clone() const = 0;
  int line_number, char_number;
};

class Globals : public Visitable
{
public:
  virtual Globals *clone() const = 0;
  int line_number, char_number;
};

class Global : public Visitable
{
public:
  virtual Global *clone() const = 0;
  int line_number, char_number;
};

class FunctionDef : public Visitable
{
public:
  virtual FunctionDef *clone() const = 0;
  int line_number, char_number;
};

class Block : public Visitable
{
public:
  virtual Block *clone() const = 0;
  int line_number, char_number;
};

class FunctionDefStart : public Visitable
{
public:
  virtual FunctionDefStart *clone() const = 0;
  int line_number, char_number;
};

class DeclSpecList : public Visitable
{
public:
  virtual DeclSpecList *clone() const = 0;
  int line_number, char_number;
};

class DeclSpecListNoNamed : public Visitable
{
public:
  virtual DeclSpecListNoNamed *clone() const = 0;
  int line_number, char_number;
};

class TypeSpec : public Visitable
{
public:
  virtual TypeSpec *clone() const = 0;
  int line_number, char_number;
};

class Declarator : public Visitable
{
public:
  virtual Declarator *clone() const = 0;
  int line_number, char_number;
};

class PointerOpt : public Visitable
{
public:
  virtual PointerOpt *clone() const = 0;
  int line_number, char_number;
};

class DirectDecl : public Visitable
{
public:
  virtual DirectDecl *clone() const = 0;
  int line_number, char_number;
};

class AttributesWithAsm : public Visitable
{
public:
  virtual AttributesWithAsm *clone() const = 0;
  int line_number, char_number;
};

class RestParList : public Visitable
{
public:
  virtual RestParList *clone() const = 0;
  int line_number, char_number;
};

class ParameterDecl : public Visitable
{
public:
  virtual ParameterDecl *clone() const = 0;
  int line_number, char_number;
};

class GhostParameterOpt : public Visitable
{
public:
  virtual GhostParameterOpt *clone() const = 0;
  int line_number, char_number;
};

class IdOrTypename : public Visitable
{
public:
  virtual IdOrTypename *clone() const = 0;
  int line_number, char_number;
};

class IdOrTypenameAsId : public Visitable
{
public:
  virtual IdOrTypenameAsId *clone() const = 0;
  int line_number, char_number;
};

class Declaration : public Visitable
{
public:
  virtual Declaration *clone() const = 0;
  int line_number, char_number;
};

class DeclAndInitDeclAttrList : public Visitable
{
public:
  virtual DeclAndInitDeclAttrList *clone() const = 0;
  int line_number, char_number;
};

class InitDeclaratorAttr : public Visitable
{
public:
  virtual InitDeclaratorAttr *clone() const = 0;
  int line_number, char_number;
};

class InitDeclarator : public Visitable
{
public:
  virtual InitDeclarator *clone() const = 0;
  int line_number, char_number;
};

class StructDeclList : public Visitable
{
public:
  virtual StructDeclList *clone() const = 0;
  int line_number, char_number;
};

class FieldDecl : public Visitable
{
public:
  virtual FieldDecl *clone() const = 0;
  int line_number, char_number;
};

class Attribute : public Visitable
{
public:
  virtual Attribute *clone() const = 0;
  int line_number, char_number;
};



class AProgram : public Program
{
public:
  Globals *globals_;

  AProgram(const AProgram &);
  AProgram &operator=(const AProgram &);
  AProgram(Globals *p1);
  ~AProgram();
  virtual void accept(Visitor *v);
  virtual AProgram *clone() const;
  void swap(AProgram &);
};

class NoGlobals : public Globals
{
public:

  NoGlobals(const NoGlobals &);
  NoGlobals &operator=(const NoGlobals &);
  NoGlobals();
  ~NoGlobals();
  virtual void accept(Visitor *v);
  virtual NoGlobals *clone() const;
  void swap(NoGlobals &);
};

class SimpleGlobals : public Globals
{
public:
  Global *global_;
  Globals *globals_;

  SimpleGlobals(const SimpleGlobals &);
  SimpleGlobals &operator=(const SimpleGlobals &);
  SimpleGlobals(Global *p1, Globals *p2);
  ~SimpleGlobals();
  virtual void accept(Visitor *v);
  virtual SimpleGlobals *clone() const;
  void swap(SimpleGlobals &);
};

class SemiColonGlobals : public Globals
{
public:
  Globals *globals_;

  SemiColonGlobals(const SemiColonGlobals &);
  SemiColonGlobals &operator=(const SemiColonGlobals &);
  SemiColonGlobals(Globals *p1);
  ~SemiColonGlobals();
  virtual void accept(Visitor *v);
  virtual SemiColonGlobals *clone() const;
  void swap(SemiColonGlobals &);
};

class GlobalsDeclataion : public Global
{
public:
  Declaration *declaration_;

  GlobalsDeclataion(const GlobalsDeclataion &);
  GlobalsDeclataion &operator=(const GlobalsDeclataion &);
  GlobalsDeclataion(Declaration *p1);
  ~GlobalsDeclataion();
  virtual void accept(Visitor *v);
  virtual GlobalsDeclataion *clone() const;
  void swap(GlobalsDeclataion &);
};

class GlobalsFunctionDef : public Global
{
public:
  FunctionDef *functiondef_;

  GlobalsFunctionDef(const GlobalsFunctionDef &);
  GlobalsFunctionDef &operator=(const GlobalsFunctionDef &);
  GlobalsFunctionDef(FunctionDef *p1);
  ~GlobalsFunctionDef();
  virtual void accept(Visitor *v);
  virtual GlobalsFunctionDef *clone() const;
  void swap(GlobalsFunctionDef &);
};

class SimpleFunctionDef : public FunctionDef
{
public:
  FunctionDefStart *functiondefstart_;
  Block *block_;

  SimpleFunctionDef(const SimpleFunctionDef &);
  SimpleFunctionDef &operator=(const SimpleFunctionDef &);
  SimpleFunctionDef(FunctionDefStart *p1, Block *p2);
  ~SimpleFunctionDef();
  virtual void accept(Visitor *v);
  virtual SimpleFunctionDef *clone() const;
  void swap(SimpleFunctionDef &);
};

class ABlock : public Block
{
public:
  LBRACE lbrace_;
  RBRACE rbrace_;

  ABlock(const ABlock &);
  ABlock &operator=(const ABlock &);
  ABlock(LBRACE p1, RBRACE p2);
  ~ABlock();
  virtual void accept(Visitor *v);
  virtual ABlock *clone() const;
  void swap(ABlock &);
};

class FunctionDefStartDeclarator : public FunctionDefStart
{
public:
  DeclSpecList *declspeclist_;
  Declarator *declarator_;

  FunctionDefStartDeclarator(const FunctionDefStartDeclarator &);
  FunctionDefStartDeclarator &operator=(const FunctionDefStartDeclarator &);
  FunctionDefStartDeclarator(DeclSpecList *p1, Declarator *p2);
  ~FunctionDefStartDeclarator();
  virtual void accept(Visitor *v);
  virtual FunctionDefStartDeclarator *clone() const;
  void swap(FunctionDefStartDeclarator &);
};

class DeclSpecTypeSpec : public DeclSpecList
{
public:
  TypeSpec *typespec_;

  DeclSpecTypeSpec(const DeclSpecTypeSpec &);
  DeclSpecTypeSpec &operator=(const DeclSpecTypeSpec &);
  DeclSpecTypeSpec(TypeSpec *p1);
  ~DeclSpecTypeSpec();
  virtual void accept(Visitor *v);
  virtual DeclSpecTypeSpec *clone() const;
  void swap(DeclSpecTypeSpec &);
};

class DeclSpecTypeSpecNext : public DeclSpecList
{
public:
  TypeSpec *typespec_;
  DeclSpecListNoNamed *declspeclistnonamed_;

  DeclSpecTypeSpecNext(const DeclSpecTypeSpecNext &);
  DeclSpecTypeSpecNext &operator=(const DeclSpecTypeSpecNext &);
  DeclSpecTypeSpecNext(TypeSpec *p1, DeclSpecListNoNamed *p2);
  ~DeclSpecTypeSpecNext();
  virtual void accept(Visitor *v);
  virtual DeclSpecTypeSpecNext *clone() const;
  void swap(DeclSpecTypeSpecNext &);
};

class DeclSpecNoNamedTypeSpec : public DeclSpecListNoNamed
{
public:
  TypeSpec *typespec_;

  DeclSpecNoNamedTypeSpec(const DeclSpecNoNamedTypeSpec &);
  DeclSpecNoNamedTypeSpec &operator=(const DeclSpecNoNamedTypeSpec &);
  DeclSpecNoNamedTypeSpec(TypeSpec *p1);
  ~DeclSpecNoNamedTypeSpec();
  virtual void accept(Visitor *v);
  virtual DeclSpecNoNamedTypeSpec *clone() const;
  void swap(DeclSpecNoNamedTypeSpec &);
};

class DeclSpecNoNamedTypeSpecNext : public DeclSpecListNoNamed
{
public:
  TypeSpec *typespec_;
  DeclSpecListNoNamed *declspeclistnonamed_;

  DeclSpecNoNamedTypeSpecNext(const DeclSpecNoNamedTypeSpecNext &);
  DeclSpecNoNamedTypeSpecNext &operator=(const DeclSpecNoNamedTypeSpecNext &);
  DeclSpecNoNamedTypeSpecNext(TypeSpec *p1, DeclSpecListNoNamed *p2);
  ~DeclSpecNoNamedTypeSpecNext();
  virtual void accept(Visitor *v);
  virtual DeclSpecNoNamedTypeSpecNext *clone() const;
  void swap(DeclSpecNoNamedTypeSpecNext &);
};

class TypeSpecVoidKeyWord : public TypeSpec
{
public:

  TypeSpecVoidKeyWord(const TypeSpecVoidKeyWord &);
  TypeSpecVoidKeyWord &operator=(const TypeSpecVoidKeyWord &);
  TypeSpecVoidKeyWord();
  ~TypeSpecVoidKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecVoidKeyWord *clone() const;
  void swap(TypeSpecVoidKeyWord &);
};

class TypeSpecCharKeyWord : public TypeSpec
{
public:

  TypeSpecCharKeyWord(const TypeSpecCharKeyWord &);
  TypeSpecCharKeyWord &operator=(const TypeSpecCharKeyWord &);
  TypeSpecCharKeyWord();
  ~TypeSpecCharKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecCharKeyWord *clone() const;
  void swap(TypeSpecCharKeyWord &);
};

class TypeSpecBoolKeyWord : public TypeSpec
{
public:

  TypeSpecBoolKeyWord(const TypeSpecBoolKeyWord &);
  TypeSpecBoolKeyWord &operator=(const TypeSpecBoolKeyWord &);
  TypeSpecBoolKeyWord();
  ~TypeSpecBoolKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecBoolKeyWord *clone() const;
  void swap(TypeSpecBoolKeyWord &);
};

class TypeSpecShortKeyWord : public TypeSpec
{
public:

  TypeSpecShortKeyWord(const TypeSpecShortKeyWord &);
  TypeSpecShortKeyWord &operator=(const TypeSpecShortKeyWord &);
  TypeSpecShortKeyWord();
  ~TypeSpecShortKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecShortKeyWord *clone() const;
  void swap(TypeSpecShortKeyWord &);
};

class TypeSpecInt32KeyWord : public TypeSpec
{
public:

  TypeSpecInt32KeyWord(const TypeSpecInt32KeyWord &);
  TypeSpecInt32KeyWord &operator=(const TypeSpecInt32KeyWord &);
  TypeSpecInt32KeyWord();
  ~TypeSpecInt32KeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecInt32KeyWord *clone() const;
  void swap(TypeSpecInt32KeyWord &);
};

class TypeSpecIntKeyWord : public TypeSpec
{
public:

  TypeSpecIntKeyWord(const TypeSpecIntKeyWord &);
  TypeSpecIntKeyWord &operator=(const TypeSpecIntKeyWord &);
  TypeSpecIntKeyWord();
  ~TypeSpecIntKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecIntKeyWord *clone() const;
  void swap(TypeSpecIntKeyWord &);
};

class TypeSpecLongKeyWord : public TypeSpec
{
public:

  TypeSpecLongKeyWord(const TypeSpecLongKeyWord &);
  TypeSpecLongKeyWord &operator=(const TypeSpecLongKeyWord &);
  TypeSpecLongKeyWord();
  ~TypeSpecLongKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecLongKeyWord *clone() const;
  void swap(TypeSpecLongKeyWord &);
};

class TypeSpecInt64KeyWord : public TypeSpec
{
public:

  TypeSpecInt64KeyWord(const TypeSpecInt64KeyWord &);
  TypeSpecInt64KeyWord &operator=(const TypeSpecInt64KeyWord &);
  TypeSpecInt64KeyWord();
  ~TypeSpecInt64KeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecInt64KeyWord *clone() const;
  void swap(TypeSpecInt64KeyWord &);
};

class TypeSpecFloatKeyWord : public TypeSpec
{
public:

  TypeSpecFloatKeyWord(const TypeSpecFloatKeyWord &);
  TypeSpecFloatKeyWord &operator=(const TypeSpecFloatKeyWord &);
  TypeSpecFloatKeyWord();
  ~TypeSpecFloatKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecFloatKeyWord *clone() const;
  void swap(TypeSpecFloatKeyWord &);
};

class TypeSpecDoubleKeyWord : public TypeSpec
{
public:

  TypeSpecDoubleKeyWord(const TypeSpecDoubleKeyWord &);
  TypeSpecDoubleKeyWord &operator=(const TypeSpecDoubleKeyWord &);
  TypeSpecDoubleKeyWord();
  ~TypeSpecDoubleKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecDoubleKeyWord *clone() const;
  void swap(TypeSpecDoubleKeyWord &);
};

class TypeSpecSignedKeyWord : public TypeSpec
{
public:
  SIGNED signed_;

  TypeSpecSignedKeyWord(const TypeSpecSignedKeyWord &);
  TypeSpecSignedKeyWord &operator=(const TypeSpecSignedKeyWord &);
  TypeSpecSignedKeyWord(SIGNED p1);
  ~TypeSpecSignedKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecSignedKeyWord *clone() const;
  void swap(TypeSpecSignedKeyWord &);
};

class TypeSpecUnsignedKeyWord : public TypeSpec
{
public:

  TypeSpecUnsignedKeyWord(const TypeSpecUnsignedKeyWord &);
  TypeSpecUnsignedKeyWord &operator=(const TypeSpecUnsignedKeyWord &);
  TypeSpecUnsignedKeyWord();
  ~TypeSpecUnsignedKeyWord();
  virtual void accept(Visitor *v);
  virtual TypeSpecUnsignedKeyWord *clone() const;
  void swap(TypeSpecUnsignedKeyWord &);
};

class StructId : public TypeSpec
{
public:
  IdOrTypename *idortypename_;

  StructId(const StructId &);
  StructId &operator=(const StructId &);
  StructId(IdOrTypename *p1);
  ~StructId();
  virtual void accept(Visitor *v);
  virtual StructId *clone() const;
  void swap(StructId &);
};

class StructIdBraces : public TypeSpec
{
public:
  IdOrTypename *idortypename_;
  LBRACE lbrace_;
  StructDeclList *structdecllist_;
  RBRACE rbrace_;

  StructIdBraces(const StructIdBraces &);
  StructIdBraces &operator=(const StructIdBraces &);
  StructIdBraces(IdOrTypename *p1, LBRACE p2, StructDeclList *p3, RBRACE p4);
  ~StructIdBraces();
  virtual void accept(Visitor *v);
  virtual StructIdBraces *clone() const;
  void swap(StructIdBraces &);
};

class StructBraces : public TypeSpec
{
public:
  LBRACE lbrace_;
  StructDeclList *structdecllist_;
  RBRACE rbrace_;

  StructBraces(const StructBraces &);
  StructBraces &operator=(const StructBraces &);
  StructBraces(LBRACE p1, StructDeclList *p2, RBRACE p3);
  ~StructBraces();
  virtual void accept(Visitor *v);
  virtual StructBraces *clone() const;
  void swap(StructBraces &);
};

class ADeclarator : public Declarator
{
public:
  PointerOpt *pointeropt_;
  DirectDecl *directdecl_;
  AttributesWithAsm *attributeswithasm_;

  ADeclarator(const ADeclarator &);
  ADeclarator &operator=(const ADeclarator &);
  ADeclarator(PointerOpt *p1, DirectDecl *p2, AttributesWithAsm *p3);
  ~ADeclarator();
  virtual void accept(Visitor *v);
  virtual ADeclarator *clone() const;
  void swap(ADeclarator &);
};

class NoPointer : public PointerOpt
{
public:

  NoPointer(const NoPointer &);
  NoPointer &operator=(const NoPointer &);
  NoPointer();
  ~NoPointer();
  virtual void accept(Visitor *v);
  virtual NoPointer *clone() const;
  void swap(NoPointer &);
};

class SomePointer : public PointerOpt
{
public:
  ListAttribute *listattribute_;
  PointerOpt *pointeropt_;

  SomePointer(const SomePointer &);
  SomePointer &operator=(const SomePointer &);
  SomePointer(ListAttribute *p1, PointerOpt *p2);
  ~SomePointer();
  virtual void accept(Visitor *v);
  virtual SomePointer *clone() const;
  void swap(SomePointer &);
};

class DirectDeclIdTypename : public DirectDecl
{
public:
  IdOrTypename *idortypename_;

  DirectDeclIdTypename(const DirectDeclIdTypename &);
  DirectDeclIdTypename &operator=(const DirectDeclIdTypename &);
  DirectDeclIdTypename(IdOrTypename *p1);
  ~DirectDeclIdTypename();
  virtual void accept(Visitor *v);
  virtual DirectDeclIdTypename *clone() const;
  void swap(DirectDeclIdTypename &);
};

class DirectDeclGhostParam : public DirectDecl
{
public:
  DirectDecl *directdecl_;
  GhostParameterOpt *ghostparameteropt_;

  DirectDeclGhostParam(const DirectDeclGhostParam &);
  DirectDeclGhostParam &operator=(const DirectDeclGhostParam &);
  DirectDeclGhostParam(DirectDecl *p1, GhostParameterOpt *p2);
  ~DirectDeclGhostParam();
  virtual void accept(Visitor *v);
  virtual DirectDeclGhostParam *clone() const;
  void swap(DirectDeclGhostParam &);
};

class DirectDeclGhostRestParParam : public DirectDecl
{
public:
  DirectDecl *directdecl_;
  RestParList *restparlist_;
  GhostParameterOpt *ghostparameteropt_;

  DirectDeclGhostRestParParam(const DirectDeclGhostRestParParam &);
  DirectDeclGhostRestParParam &operator=(const DirectDeclGhostRestParParam &);
  DirectDeclGhostRestParParam(DirectDecl *p1, RestParList *p2, GhostParameterOpt *p3);
  ~DirectDeclGhostRestParParam();
  virtual void accept(Visitor *v);
  virtual DirectDeclGhostRestParParam *clone() const;
  void swap(DirectDeclGhostRestParParam &);
};

class EmptyAttrWithASM : public AttributesWithAsm
{
public:

  EmptyAttrWithASM(const EmptyAttrWithASM &);
  EmptyAttrWithASM &operator=(const EmptyAttrWithASM &);
  EmptyAttrWithASM();
  ~EmptyAttrWithASM();
  virtual void accept(Visitor *v);
  virtual EmptyAttrWithASM *clone() const;
  void swap(EmptyAttrWithASM &);
};

class SimpleParameterDecl : public RestParList
{
public:
  ListParameterDecl *listparameterdecl_;

  SimpleParameterDecl(const SimpleParameterDecl &);
  SimpleParameterDecl &operator=(const SimpleParameterDecl &);
  SimpleParameterDecl(ListParameterDecl *p1);
  ~SimpleParameterDecl();
  virtual void accept(Visitor *v);
  virtual SimpleParameterDecl *clone() const;
  void swap(SimpleParameterDecl &);
};

class ParameterDeclSpecDeclarator : public ParameterDecl
{
public:
  DeclSpecList *declspeclist_;
  Declarator *declarator_;

  ParameterDeclSpecDeclarator(const ParameterDeclSpecDeclarator &);
  ParameterDeclSpecDeclarator &operator=(const ParameterDeclSpecDeclarator &);
  ParameterDeclSpecDeclarator(DeclSpecList *p1, Declarator *p2);
  ~ParameterDeclSpecDeclarator();
  virtual void accept(Visitor *v);
  virtual ParameterDeclSpecDeclarator *clone() const;
  void swap(ParameterDeclSpecDeclarator &);
};

class ParameterDeclSpec : public ParameterDecl
{
public:
  DeclSpecList *declspeclist_;

  ParameterDeclSpec(const ParameterDeclSpec &);
  ParameterDeclSpec &operator=(const ParameterDeclSpec &);
  ParameterDeclSpec(DeclSpecList *p1);
  ~ParameterDeclSpec();
  virtual void accept(Visitor *v);
  virtual ParameterDeclSpec *clone() const;
  void swap(ParameterDeclSpec &);
};

class ParameterDeclPar : public ParameterDecl
{
public:
  ParameterDecl *parameterdecl_;

  ParameterDeclPar(const ParameterDeclPar &);
  ParameterDeclPar &operator=(const ParameterDeclPar &);
  ParameterDeclPar(ParameterDecl *p1);
  ~ParameterDeclPar();
  virtual void accept(Visitor *v);
  virtual ParameterDeclPar *clone() const;
  void swap(ParameterDeclPar &);
};

class NoGhostParameter : public GhostParameterOpt
{
public:

  NoGhostParameter(const NoGhostParameter &);
  NoGhostParameter &operator=(const NoGhostParameter &);
  NoGhostParameter();
  ~NoGhostParameter();
  virtual void accept(Visitor *v);
  virtual NoGhostParameter *clone() const;
  void swap(NoGhostParameter &);
};

class IdTypename : public IdOrTypename
{
public:
  IdOrTypenameAsId *idortypenameasid_;

  IdTypename(const IdTypename &);
  IdTypename &operator=(const IdTypename &);
  IdTypename(IdOrTypenameAsId *p1);
  ~IdTypename();
  virtual void accept(Visitor *v);
  virtual IdTypename *clone() const;
  void swap(IdTypename &);
};

class IdOrTypenameAsIdIdentifier : public IdOrTypenameAsId
{
public:
  Ident ident_;

  IdOrTypenameAsIdIdentifier(const IdOrTypenameAsIdIdentifier &);
  IdOrTypenameAsIdIdentifier &operator=(const IdOrTypenameAsIdIdentifier &);
  IdOrTypenameAsIdIdentifier(Ident p1);
  ~IdOrTypenameAsIdIdentifier();
  virtual void accept(Visitor *v);
  virtual IdOrTypenameAsIdIdentifier *clone() const;
  void swap(IdOrTypenameAsIdIdentifier &);
};

class DeclSpecInitDecl : public Declaration
{
public:
  DeclSpecList *declspeclist_;
  DeclAndInitDeclAttrList *declandinitdeclattrlist_;

  DeclSpecInitDecl(const DeclSpecInitDecl &);
  DeclSpecInitDecl &operator=(const DeclSpecInitDecl &);
  DeclSpecInitDecl(DeclSpecList *p1, DeclAndInitDeclAttrList *p2);
  ~DeclSpecInitDecl();
  virtual void accept(Visitor *v);
  virtual DeclSpecInitDecl *clone() const;
  void swap(DeclSpecInitDecl &);
};

class DeclSpec : public Declaration
{
public:
  DeclSpecList *declspeclist_;

  DeclSpec(const DeclSpec &);
  DeclSpec &operator=(const DeclSpec &);
  DeclSpec(DeclSpecList *p1);
  ~DeclSpec();
  virtual void accept(Visitor *v);
  virtual DeclSpec *clone() const;
  void swap(DeclSpec &);
};

class InitDeclaration : public DeclAndInitDeclAttrList
{
public:
  InitDeclarator *initdeclarator_;

  InitDeclaration(const InitDeclaration &);
  InitDeclaration &operator=(const InitDeclaration &);
  InitDeclaration(InitDeclarator *p1);
  ~InitDeclaration();
  virtual void accept(Visitor *v);
  virtual InitDeclaration *clone() const;
  void swap(InitDeclaration &);
};

class InitDeclarationWithAttr : public DeclAndInitDeclAttrList
{
public:
  InitDeclarator *initdeclarator_;
  ListInitDeclaratorAttr *listinitdeclaratorattr_;

  InitDeclarationWithAttr(const InitDeclarationWithAttr &);
  InitDeclarationWithAttr &operator=(const InitDeclarationWithAttr &);
  InitDeclarationWithAttr(InitDeclarator *p1, ListInitDeclaratorAttr *p2);
  ~InitDeclarationWithAttr();
  virtual void accept(Visitor *v);
  virtual InitDeclarationWithAttr *clone() const;
  void swap(InitDeclarationWithAttr &);
};

class InitDeclaratorAttribute : public InitDeclaratorAttr
{
public:
  InitDeclarator *initdeclarator_;

  InitDeclaratorAttribute(const InitDeclaratorAttribute &);
  InitDeclaratorAttribute &operator=(const InitDeclaratorAttribute &);
  InitDeclaratorAttribute(InitDeclarator *p1);
  ~InitDeclaratorAttribute();
  virtual void accept(Visitor *v);
  virtual InitDeclaratorAttribute *clone() const;
  void swap(InitDeclaratorAttribute &);
};

class SimpleInitDeclarator : public InitDeclarator
{
public:
  Declarator *declarator_;

  SimpleInitDeclarator(const SimpleInitDeclarator &);
  SimpleInitDeclarator &operator=(const SimpleInitDeclarator &);
  SimpleInitDeclarator(Declarator *p1);
  ~SimpleInitDeclarator();
  virtual void accept(Visitor *v);
  virtual SimpleInitDeclarator *clone() const;
  void swap(SimpleInitDeclarator &);
};

class EmptyStructDecl : public StructDeclList
{
public:

  EmptyStructDecl(const EmptyStructDecl &);
  EmptyStructDecl &operator=(const EmptyStructDecl &);
  EmptyStructDecl();
  ~EmptyStructDecl();
  virtual void accept(Visitor *v);
  virtual EmptyStructDecl *clone() const;
  void swap(EmptyStructDecl &);
};

class DeclSpecStructDecl : public StructDeclList
{
public:
  DeclSpecList *declspeclist_;
  StructDeclList *structdecllist_;

  DeclSpecStructDecl(const DeclSpecStructDecl &);
  DeclSpecStructDecl &operator=(const DeclSpecStructDecl &);
  DeclSpecStructDecl(DeclSpecList *p1, StructDeclList *p2);
  ~DeclSpecStructDecl();
  virtual void accept(Visitor *v);
  virtual DeclSpecStructDecl *clone() const;
  void swap(DeclSpecStructDecl &);
};

class SemicolonStructDecl : public StructDeclList
{
public:
  StructDeclList *structdecllist_;

  SemicolonStructDecl(const SemicolonStructDecl &);
  SemicolonStructDecl &operator=(const SemicolonStructDecl &);
  SemicolonStructDecl(StructDeclList *p1);
  ~SemicolonStructDecl();
  virtual void accept(Visitor *v);
  virtual SemicolonStructDecl *clone() const;
  void swap(SemicolonStructDecl &);
};

class SpecFieldDeclStructDecl : public StructDeclList
{
public:
  DeclSpecList *declspeclist_;
  ListFieldDecl *listfielddecl_;
  StructDeclList *structdecllist_;

  SpecFieldDeclStructDecl(const SpecFieldDeclStructDecl &);
  SpecFieldDeclStructDecl &operator=(const SpecFieldDeclStructDecl &);
  SpecFieldDeclStructDecl(DeclSpecList *p1, ListFieldDecl *p2, StructDeclList *p3);
  ~SpecFieldDeclStructDecl();
  virtual void accept(Visitor *v);
  virtual SpecFieldDeclStructDecl *clone() const;
  void swap(SpecFieldDeclStructDecl &);
};

class FieldDeclDeclarator : public FieldDecl
{
public:
  Declarator *declarator_;

  FieldDeclDeclarator(const FieldDeclDeclarator &);
  FieldDeclDeclarator &operator=(const FieldDeclDeclarator &);
  FieldDeclDeclarator(Declarator *p1);
  ~FieldDeclDeclarator();
  virtual void accept(Visitor *v);
  virtual FieldDeclDeclarator *clone() const;
  void swap(FieldDeclDeclarator &);
};

class AttributeConst : public Attribute
{
public:
  CONST const_;

  AttributeConst(const AttributeConst &);
  AttributeConst &operator=(const AttributeConst &);
  AttributeConst(CONST p1);
  ~AttributeConst();
  virtual void accept(Visitor *v);
  virtual AttributeConst *clone() const;
  void swap(AttributeConst &);
};



class ListParameterDecl : public Visitable, public std::vector<ParameterDecl*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListParameterDecl *clone() const;
};

ListParameterDecl* consListParameterDecl(ParameterDecl* x, ListParameterDecl* xs);

class ListInitDeclaratorAttr : public Visitable, public std::vector<InitDeclaratorAttr*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListInitDeclaratorAttr *clone() const;
};

ListInitDeclaratorAttr* consListInitDeclaratorAttr(InitDeclaratorAttr* x, ListInitDeclaratorAttr* xs);

class ListFieldDecl : public Visitable, public std::vector<FieldDecl*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListFieldDecl *clone() const;
};

ListFieldDecl* consListFieldDecl(FieldDecl* x, ListFieldDecl* xs);

class ListAttribute : public Visitable, public std::vector<Attribute*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListAttribute *clone() const;
};

ListAttribute* consListAttribute(Attribute* x, ListAttribute* xs);




}
#endif
