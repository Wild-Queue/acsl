-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from Acsl/AcslGrammar/Par.y
-----------------------------------------------------------------------------

state 0 contains 2 shift/reduce conflicts.
state 1 contains 2 shift/reduce conflicts.
state 2 contains 2 shift/reduce conflicts.
state 3 contains 2 shift/reduce conflicts.
state 62 contains 11 shift/reduce conflicts.
state 65 contains 6 shift/reduce conflicts.
state 254 contains 6 shift/reduce conflicts.
state 358 contains 6 shift/reduce conflicts.
state 381 contains 6 shift/reduce conflicts.
state 382 contains 6 shift/reduce conflicts.
state 383 contains 6 shift/reduce conflicts.
state 386 contains 6 shift/reduce conflicts.
state 403 contains 1 shift/reduce conflicts.
state 404 contains 1 shift/reduce conflicts.
state 405 contains 1 shift/reduce conflicts.
state 406 contains 1 shift/reduce conflicts.
state 407 contains 1 shift/reduce conflicts.
state 408 contains 1 shift/reduce conflicts.
state 409 contains 1 shift/reduce conflicts.
state 410 contains 1 shift/reduce conflicts.
state 411 contains 1 shift/reduce conflicts.
state 412 contains 1 shift/reduce conflicts.
state 413 contains 1 shift/reduce conflicts.
state 461 contains 6 shift/reduce conflicts.
state 462 contains 6 shift/reduce conflicts.
state 463 contains 6 shift/reduce conflicts.
state 464 contains 6 shift/reduce conflicts.
state 465 contains 6 shift/reduce conflicts.
state 471 contains 2 shift/reduce conflicts.
state 478 contains 2 shift/reduce conflicts.
state 480 contains 2 shift/reduce conflicts.
state 505 contains 1 shift/reduce conflicts.
state 509 contains 1 shift/reduce conflicts.
state 510 contains 1 shift/reduce conflicts.
state 534 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_pProgram -> Program                         (0)
	%start_pAnnot -> Annot                             (1)
	%start_pCode_Annot -> Code_Annot                   (2)
	%start_pContract -> Contract                       (3)
	%start_pRequires -> Requires                       (4)
	%start_pNERequires -> NERequires                   (5)
	%start_pTerminates -> Terminates                   (6)
	%start_pDecreases -> Decreases                     (7)
	%start_pSimpleClauses -> SimpleClauses             (8)
	%start_pNESimpleClauses -> NESimpleClauses         (9)
	%start_pAssigns -> Assigns                         (10)
	%start_pZones -> Zones                             (11)
	%start_pBehaviors -> Behaviors                     (12)
	%start_pCompleteOrDisjoint -> CompleteOrDisjoint   (13)
	%start_pLexpr -> Lexpr                             (14)
	%start_pListLexpr -> ListLexpr                     (15)
	%start_pLexpr1 -> Lexpr1                           (16)
	%start_pLexprRelInner -> LexprRelInner             (17)
	%start_pListLexprRelInner -> ListLexprRelInner     (18)
	%start_pRelation -> Relation                       (19)
	%start_pLexpr2 -> Lexpr2                           (20)
	%start_pLexprBinder -> LexprBinder                 (21)
	%start_pBinders -> Binders                         (22)
	%start_pTypeSpecOFTYPENAME -> TypeSpecOFTYPENAME   (23)
	%start_pBindersReentrance -> BindersReentrance     (24)
	%start_pListBindersReentrance -> ListBindersReentrance   (25)
	%start_pVarSpec -> VarSpec                         (26)
	%start_pStars -> Stars                             (27)
	%start_pListStars -> ListStars                     (28)
	%start_pVarSpec1 -> VarSpec1                       (29)
	%start_pArraySize -> ArraySize                     (30)
	%start_pLexpr3 -> Lexpr3                           (31)
	%start_pOptLabel1 -> OptLabel1                     (32)
	%start_pOptLabel2 -> OptLabel2                     (33)
	%start_pOptLabelList -> OptLabelList               (34)
	%start_pLabelName -> LabelName                     (35)
	%start_pListLabelName -> ListLabelName             (36)
	%start_pRange -> Range                             (37)
	%start_pLexprOption -> LexprOption                 (38)
	%start_pAnyIdentifier -> AnyIdentifier             (39)
	%start_pPostCond -> PostCond                       (40)
	%start_pFullIdentifier -> FullIdentifier           (41)
	%start_pListFullIdentifier -> ListFullIdentifier   (42)
	%start_pIdentifier -> Identifier                   (43)
	%start_pTypeSpecSimple -> TypeSpecSimple           (44)
	%start_pLogicPTreeAnnot -> LogicPTreeAnnot         (45)
	%start_pAnnotation -> Annotation                   (46)
	%start_pLoopAnnotStack -> LoopAnnotStack           (47)
	%start_pLoopAnnotOpt -> LoopAnnotOpt               (48)
	%start_pLoopInvariant -> LoopInvariant             (49)
	%start_pLoopAllocation -> LoopAllocation           (50)
	%start_pAllocation -> Allocation                   (51)
	%start_pLoopVariant -> LoopVariant                 (52)
	%start_pLoopEffects -> LoopEffects                 (53)
	%start_pVariant -> Variant                         (54)
	Ident -> L_Ident                                   (55)
	Double -> L_doubl                                  (56)
	Integer -> L_integ                                 (57)
	String -> L_quoted                                 (58)
	Program -> Annot                                   (59)
	Program -> LogicPTreeAnnot                         (60)
	Annot -> Code_Annot                                (61)
	Code_Annot -> Contract                             (62)
	Contract -> Requires Terminates Decreases SimpleClauses Behaviors CompleteOrDisjoint   (63)
	Contract -> Requires Terminates Decreases NESimpleClauses 'requires'   (64)
	Contract -> Requires Terminates Decreases NESimpleClauses 'terminates'   (65)
	Contract -> Requires Terminates Decreases NESimpleClauses 'decreases'   (66)
	Requires ->                                        (67)
	Requires -> NERequires                             (68)
	NERequires -> 'requires' Lexpr ';' Requires        (69)
	NERequires -> 'check' 'requires' Lexpr ';' Requires   (70)
	NERequires -> 'admit' 'requires' Lexpr ';' Requires   (71)
	Terminates ->                                      (72)
	Decreases ->                                       (73)
	SimpleClauses ->                                   (74)
	SimpleClauses -> NESimpleClauses                   (75)
	NESimpleClauses -> PostCond Lexpr ';' SimpleClauses   (76)
	NESimpleClauses -> 'assigns' Assigns ';' SimpleClauses   (77)
	Assigns -> Zones                                   (78)
	Assigns -> ListLexpr '\\from' Zones                (79)
	Zones -> ListLexpr                                 (80)
	Zones -> '\\nothing'                               (81)
	Behaviors ->                                       (82)
	CompleteOrDisjoint ->                              (83)
	Lexpr -> Lexpr1 '==>' Lexpr                        (84)
	Lexpr -> Lexpr1 '<==>' Lexpr                       (85)
	Lexpr -> Lexpr1 '||' Lexpr                         (86)
	Lexpr -> Lexpr1 '&&' Lexpr                         (87)
	Lexpr -> Lexpr1 '^^' Lexpr                         (88)
	Lexpr -> Lexpr1 '&' Lexpr                          (89)
	Lexpr -> Lexpr1 '|' Lexpr                          (90)
	Lexpr -> Lexpr1 '^' Lexpr                          (91)
	Lexpr -> Lexpr1 '-->' Lexpr                        (92)
	Lexpr -> Lexpr1 '<-->' Lexpr                       (93)
	Lexpr -> Lexpr1 '\\in' Lexpr                       (94)
	Lexpr -> Lexpr '?' Lexpr ':' Lexpr                 (95)
	Lexpr -> Lexpr1                                    (96)
	ListLexpr -> Lexpr                                 (97)
	ListLexpr -> Lexpr ',' ListLexpr                   (98)
	Lexpr1 -> Lexpr2                                   (99)
	Lexpr1 -> Lexpr3 ListLexprRelInner Relation Lexpr2   (100)
	LexprRelInner -> Relation Lexpr3                   (101)
	ListLexprRelInner ->                               (102)
	ListLexprRelInner -> LexprRelInner ListLexprRelInner   (103)
	Relation -> '<'                                    (104)
	Relation -> '>'                                    (105)
	Relation -> '<='                                   (106)
	Relation -> '>='                                   (107)
	Relation -> '=='                                   (108)
	Relation -> '!='                                   (109)
	Lexpr2 -> Lexpr3                                   (110)
	Lexpr2 -> LexprBinder                              (111)
	Lexpr2 -> '!' LexprBinder                          (112)
	LexprBinder -> '\\forall' Binders ';' Lexpr        (113)
	LexprBinder -> '\\exists' Binders ';' Lexpr        (114)
	LexprBinder -> '\\lambda' Binders ';' Lexpr        (115)
	Binders -> TypeSpecOFTYPENAME VarSpec ListBindersReentrance   (116)
	TypeSpecOFTYPENAME -> Ident                        (117)
	TypeSpecOFTYPENAME -> TypeSpecSimple               (118)
	BindersReentrance -> ',' TypeSpecOFTYPENAME VarSpec   (119)
	BindersReentrance -> ',' VarSpec                   (120)
	ListBindersReentrance ->                           (121)
	ListBindersReentrance -> BindersReentrance ListBindersReentrance   (122)
	VarSpec -> VarSpec1                                (123)
	VarSpec -> ListStars VarSpec1                      (124)
	Stars -> '*'                                       (125)
	ListStars -> Stars                                 (126)
	ListStars -> Stars ListStars                       (127)
	VarSpec1 -> FullIdentifier                         (128)
	VarSpec1 -> VarSpec1 '[' ArraySize ']'             (129)
	VarSpec1 -> '(' VarSpec ')'                        (130)
	ArraySize -> Integer                               (131)
	ArraySize -> FullIdentifier                        (132)
	ArraySize ->                                       (133)
	Lexpr3 -> '\\true'                                 (134)
	Lexpr3 -> '\\false'                                (135)
	Lexpr3 -> '\\object_pointer' OptLabel1 '(' Lexpr ')'   (136)
	Lexpr3 -> '\\valid' OptLabel1 '(' Lexpr ')'        (137)
	Lexpr3 -> '\\valid_read' OptLabel1 '(' Lexpr ')'   (138)
	Lexpr3 -> '\\valid_function' '(' Lexpr ')'         (139)
	Lexpr3 -> '\\valid_index' OptLabel1 '(' Lexpr ',' Lexpr ')'   (140)
	Lexpr3 -> '\\valid_range' OptLabel1 '(' Lexpr ',' Lexpr ',' Lexpr ')'   (141)
	Lexpr3 -> '\\initialized' OptLabel1 '(' Lexpr ')'   (142)
	Lexpr3 -> '\\dangling' OptLabel1 '(' Lexpr ')'     (143)
	Lexpr3 -> '\\fresh' OptLabel2 '(' Lexpr ',' Lexpr ')'   (144)
	Lexpr3 -> '\\base_addr' OptLabel1 '(' Lexpr ')'    (145)
	Lexpr3 -> '\\block_length' OptLabel1 '(' Lexpr ')'   (146)
	Lexpr3 -> '\\offset' OptLabel1 '(' Lexpr ')'       (147)
	Lexpr3 -> '\\allocable' OptLabel1 '(' Lexpr ')'    (148)
	Lexpr3 -> '\\freeable' OptLabel1 '(' Lexpr ')'     (149)
	Lexpr3 -> '\\allocation' OptLabel1 '(' Lexpr ')'   (150)
	Lexpr3 -> '\\automatic'                            (151)
	Lexpr3 -> '\\dynamic'                              (152)
	Lexpr3 -> '\\register'                             (153)
	Lexpr3 -> '\\static'                               (154)
	Lexpr3 -> '\\unallocated'                          (155)
	Lexpr3 -> '\\null'                                 (156)
	Lexpr3 -> Integer                                  (157)
	Lexpr3 -> Double                                   (158)
	Lexpr3 -> String                                   (159)
	Lexpr3 -> Lexpr3 '+' Lexpr3                        (160)
	Lexpr3 -> Lexpr3 '-' Lexpr3                        (161)
	Lexpr3 -> Lexpr3 '*' Lexpr3                        (162)
	Lexpr3 -> Lexpr3 '/' Lexpr3                        (163)
	Lexpr3 -> Lexpr3 '%' Lexpr3                        (164)
	Lexpr3 -> Lexpr3 '[' Range ']'                     (165)
	Lexpr3 -> Lexpr3 '[' Lexpr ']'                     (166)
	Lexpr3 -> '-' Lexpr3                               (167)
	Lexpr3 -> '+' Lexpr3                               (168)
	Lexpr3 -> '~' Lexpr3                               (169)
	Lexpr3 -> '*' Lexpr3                               (170)
	Lexpr3 -> '&' Lexpr3                               (171)
	Lexpr3 -> 'sizeof' '(' Lexpr ')'                   (172)
	Lexpr3 -> '\\old' '(' Lexpr ')'                    (173)
	Lexpr3 -> '\\at' '(' Lexpr ',' LabelName ')'       (174)
	Lexpr3 -> '\\result'                               (175)
	Lexpr3 -> '\\separated' '(' ListLexpr ')'          (176)
	Lexpr3 -> FullIdentifier '(' ListLexpr ')'         (177)
	Lexpr3 -> FullIdentifier                           (178)
	Lexpr3 -> '\\pi'                                   (179)
	Lexpr3 -> '(' Lexpr ')'                            (180)
	Lexpr3 -> '(' Range ')'                            (181)
	OptLabel1 -> OptLabelList                          (182)
	OptLabel2 -> OptLabelList                          (183)
	OptLabelList ->                                    (184)
	OptLabelList -> '{' ListLabelName '}'              (185)
	LabelName -> AnyIdentifier                         (186)
	ListLabelName -> LabelName                         (187)
	ListLabelName -> LabelName ',' ListLabelName       (188)
	Range -> LexprOption '..' LexprOption              (189)
	LexprOption ->                                     (190)
	LexprOption -> Lexpr                               (191)
	AnyIdentifier -> Identifier                        (192)
	PostCond -> 'ensures'                              (193)
	PostCond -> 'exits'                                (194)
	PostCond -> 'breaks'                               (195)
	PostCond -> 'continues'                            (196)
	PostCond -> 'returns'                              (197)
	PostCond -> 'check' 'ensures'                      (198)
	PostCond -> 'check' 'exits'                        (199)
	PostCond -> 'check' 'breaks'                       (200)
	PostCond -> 'check' 'continues'                    (201)
	PostCond -> 'check' 'returns'                      (202)
	PostCond -> 'admit' 'ensures'                      (203)
	PostCond -> 'admit' 'exits'                        (204)
	PostCond -> 'admit' 'breaks'                       (205)
	PostCond -> 'admit' 'continues'                    (206)
	PostCond -> 'admit' 'returns'                      (207)
	FullIdentifier -> Identifier                       (208)
	FullIdentifier -> 'admit'                          (209)
	FullIdentifier -> 'allocates'                      (210)
	FullIdentifier -> 'assert'                         (211)
	FullIdentifier -> 'assigns'                        (212)
	FullIdentifier -> 'assumes'                        (213)
	FullIdentifier -> 'at'                             (214)
	FullIdentifier -> 'axiom'                          (215)
	FullIdentifier -> 'axiomatic'                      (216)
	FullIdentifier -> 'behavior'                       (217)
	FullIdentifier -> 'breaks'                         (218)
	FullIdentifier -> 'check'                          (219)
	FullIdentifier -> 'complete'                       (220)
	FullIdentifier -> 'continues'                      (221)
	FullIdentifier -> 'contract'                       (222)
	FullIdentifier -> 'decreases'                      (223)
	FullIdentifier -> 'disjoint'                       (224)
	FullIdentifier -> 'ensures'                        (225)
	FullIdentifier -> 'exits'                          (226)
	FullIdentifier -> 'frees'                          (227)
	FullIdentifier -> 'function'                       (228)
	FullIdentifier -> 'global'                         (229)
	FullIdentifier -> 'impact'                         (230)
	FullIdentifier -> 'inductive'                      (231)
	FullIdentifier -> 'include'                        (232)
	FullIdentifier -> 'invariant'                      (233)
	FullIdentifier -> 'lemma'                          (234)
	FullIdentifier -> 'let'                            (235)
	FullIdentifier -> 'logic'                          (236)
	FullIdentifier -> 'loop'                           (237)
	FullIdentifier -> 'model'                          (238)
	FullIdentifier -> 'module'                         (239)
	FullIdentifier -> 'pragma'                         (240)
	FullIdentifier -> 'predicate'                      (241)
	FullIdentifier -> 'requires'                       (242)
	FullIdentifier -> 'returns'                        (243)
	FullIdentifier -> 'slice'                          (244)
	FullIdentifier -> 'terminates'                     (245)
	FullIdentifier -> 'type'                           (246)
	FullIdentifier -> 'variant'                        (247)
	ListFullIdentifier -> FullIdentifier               (248)
	ListFullIdentifier -> FullIdentifier ',' ListFullIdentifier   (249)
	Identifier -> Ident                                (250)
	Identifier -> 'behaviors'                          (251)
	Identifier -> 'label'                              (252)
	Identifier -> 'reads'                              (253)
	Identifier -> 'writes'                             (254)
	TypeSpecSimple -> 'integer'                        (255)
	TypeSpecSimple -> 'real'                           (256)
	TypeSpecSimple -> 'boolean'                        (257)
	TypeSpecSimple -> 'void'                           (258)
	TypeSpecSimple -> '_Bool'                          (259)
	TypeSpecSimple -> 'char'                           (260)
	TypeSpecSimple -> 'signed' 'char'                  (261)
	TypeSpecSimple -> 'unsigned' 'char'                (262)
	TypeSpecSimple -> 'int'                            (263)
	TypeSpecSimple -> 'signed' 'int'                   (264)
	TypeSpecSimple -> 'unsigned' 'int'                 (265)
	TypeSpecSimple -> 'unsigned'                       (266)
	TypeSpecSimple -> 'short'                          (267)
	TypeSpecSimple -> 'signed' 'short'                 (268)
	TypeSpecSimple -> 'unsigned' 'short'               (269)
	TypeSpecSimple -> 'short' 'int'                    (270)
	TypeSpecSimple -> 'signed' 'short' 'int'           (271)
	TypeSpecSimple -> 'unsigned' 'short' 'int'         (272)
	TypeSpecSimple -> 'long'                           (273)
	TypeSpecSimple -> 'signed' 'long'                  (274)
	TypeSpecSimple -> 'unsigned' 'long'                (275)
	TypeSpecSimple -> 'signed' 'long' 'int'            (276)
	TypeSpecSimple -> 'long' 'int'                     (277)
	TypeSpecSimple -> 'unsigned' 'long' 'int'          (278)
	TypeSpecSimple -> 'long' 'long'                    (279)
	TypeSpecSimple -> 'signed' 'long' 'long'           (280)
	TypeSpecSimple -> 'unsigned' 'long' 'long'         (281)
	TypeSpecSimple -> 'long' 'long' 'int'              (282)
	TypeSpecSimple -> 'signed' 'long' 'long' 'int'     (283)
	TypeSpecSimple -> 'unsigned' 'long' 'long' 'int'   (284)
	TypeSpecSimple -> 'float'                          (285)
	TypeSpecSimple -> 'double'                         (286)
	TypeSpecSimple -> 'long' 'double'                  (287)
	LogicPTreeAnnot -> Annotation                      (288)
	Annotation -> LoopAnnotStack                       (289)
	LoopAnnotStack -> LoopInvariant LoopAnnotOpt       (290)
	LoopAnnotStack -> LoopEffects LoopAnnotOpt         (291)
	LoopAnnotStack -> LoopAllocation LoopAnnotOpt      (292)
	LoopAnnotStack -> LoopVariant LoopAnnotOpt         (293)
	LoopAnnotOpt ->                                    (294)
	LoopAnnotOpt -> LoopAnnotStack                     (295)
	LoopInvariant -> 'loop' 'invariant' Lexpr ';'      (296)
	LoopInvariant -> 'check' 'loop' 'invariant' Lexpr ';'   (297)
	LoopInvariant -> 'admit' 'loop' 'invariant' Lexpr ';'   (298)
	LoopAllocation -> 'loop' Allocation ';'            (299)
	Allocation -> 'allocates' Zones                    (300)
	Allocation -> 'frees' Zones                        (301)
	LoopVariant -> 'loop' 'variant' Variant ';'        (302)
	LoopEffects -> 'loop' 'assigns' Assigns ';'        (303)
	Variant -> Lexpr 'for' AnyIdentifier               (304)
	Variant -> Lexpr                                   (305)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'!'            { PT _ (TS _ 1) }
	'!='           { PT _ (TS _ 2) }
	'%'            { PT _ (TS _ 3) }
	'&'            { PT _ (TS _ 4) }
	'&&'           { PT _ (TS _ 5) }
	'('            { PT _ (TS _ 6) }
	')'            { PT _ (TS _ 7) }
	'*'            { PT _ (TS _ 8) }
	'+'            { PT _ (TS _ 9) }
	','            { PT _ (TS _ 10) }
	'-'            { PT _ (TS _ 11) }
	'-->'          { PT _ (TS _ 12) }
	'..'           { PT _ (TS _ 13) }
	'/'            { PT _ (TS _ 14) }
	':'            { PT _ (TS _ 15) }
	';'            { PT _ (TS _ 16) }
	'<'            { PT _ (TS _ 17) }
	'<-->'         { PT _ (TS _ 18) }
	'<='           { PT _ (TS _ 19) }
	'<==>'         { PT _ (TS _ 20) }
	'=='           { PT _ (TS _ 21) }
	'==>'          { PT _ (TS _ 22) }
	'>'            { PT _ (TS _ 23) }
	'>='           { PT _ (TS _ 24) }
	'?'            { PT _ (TS _ 25) }
	'['            { PT _ (TS _ 26) }
	'\\allocable'  { PT _ (TS _ 27) }
	'\\allocation' { PT _ (TS _ 28) }
	'\\at'         { PT _ (TS _ 29) }
	'\\automatic'  { PT _ (TS _ 30) }
	'\\base_addr'  { PT _ (TS _ 31) }
	'\\block_length'{ PT _ (TS _ 32) }
	'\\dangling'   { PT _ (TS _ 33) }
	'\\dynamic'    { PT _ (TS _ 34) }
	'\\exists'     { PT _ (TS _ 35) }
	'\\false'      { PT _ (TS _ 36) }
	'\\forall'     { PT _ (TS _ 37) }
	'\\freeable'   { PT _ (TS _ 38) }
	'\\fresh'      { PT _ (TS _ 39) }
	'\\from'       { PT _ (TS _ 40) }
	'\\in'         { PT _ (TS _ 41) }
	'\\initialized'{ PT _ (TS _ 42) }
	'\\lambda'     { PT _ (TS _ 43) }
	'\\nothing'    { PT _ (TS _ 44) }
	'\\null'       { PT _ (TS _ 45) }
	'\\object_pointer'{ PT _ (TS _ 46) }
	'\\offset'     { PT _ (TS _ 47) }
	'\\old'        { PT _ (TS _ 48) }
	'\\pi'         { PT _ (TS _ 49) }
	'\\register'   { PT _ (TS _ 50) }
	'\\result'     { PT _ (TS _ 51) }
	'\\separated'  { PT _ (TS _ 52) }
	'\\static'     { PT _ (TS _ 53) }
	'\\true'       { PT _ (TS _ 54) }
	'\\unallocated'{ PT _ (TS _ 55) }
	'\\valid'      { PT _ (TS _ 56) }
	'\\valid_function'{ PT _ (TS _ 57) }
	'\\valid_index'{ PT _ (TS _ 58) }
	'\\valid_range'{ PT _ (TS _ 59) }
	'\\valid_read' { PT _ (TS _ 60) }
	']'            { PT _ (TS _ 61) }
	'^'            { PT _ (TS _ 62) }
	'^^'           { PT _ (TS _ 63) }
	'_Bool'        { PT _ (TS _ 64) }
	'admit'        { PT _ (TS _ 65) }
	'allocates'    { PT _ (TS _ 66) }
	'assert'       { PT _ (TS _ 67) }
	'assigns'      { PT _ (TS _ 68) }
	'assumes'      { PT _ (TS _ 69) }
	'at'           { PT _ (TS _ 70) }
	'axiom'        { PT _ (TS _ 71) }
	'axiomatic'    { PT _ (TS _ 72) }
	'behavior'     { PT _ (TS _ 73) }
	'behaviors'    { PT _ (TS _ 74) }
	'boolean'      { PT _ (TS _ 75) }
	'breaks'       { PT _ (TS _ 76) }
	'char'         { PT _ (TS _ 77) }
	'check'        { PT _ (TS _ 78) }
	'complete'     { PT _ (TS _ 79) }
	'continues'    { PT _ (TS _ 80) }
	'contract'     { PT _ (TS _ 81) }
	'decreases'    { PT _ (TS _ 82) }
	'disjoint'     { PT _ (TS _ 83) }
	'double'       { PT _ (TS _ 84) }
	'ensures'      { PT _ (TS _ 85) }
	'exits'        { PT _ (TS _ 86) }
	'float'        { PT _ (TS _ 87) }
	'for'          { PT _ (TS _ 88) }
	'frees'        { PT _ (TS _ 89) }
	'function'     { PT _ (TS _ 90) }
	'global'       { PT _ (TS _ 91) }
	'impact'       { PT _ (TS _ 92) }
	'include'      { PT _ (TS _ 93) }
	'inductive'    { PT _ (TS _ 94) }
	'int'          { PT _ (TS _ 95) }
	'integer'      { PT _ (TS _ 96) }
	'invariant'    { PT _ (TS _ 97) }
	'label'        { PT _ (TS _ 98) }
	'lemma'        { PT _ (TS _ 99) }
	'let'          { PT _ (TS _ 100) }
	'logic'        { PT _ (TS _ 101) }
	'long'         { PT _ (TS _ 102) }
	'loop'         { PT _ (TS _ 103) }
	'model'        { PT _ (TS _ 104) }
	'module'       { PT _ (TS _ 105) }
	'pragma'       { PT _ (TS _ 106) }
	'predicate'    { PT _ (TS _ 107) }
	'reads'        { PT _ (TS _ 108) }
	'real'         { PT _ (TS _ 109) }
	'requires'     { PT _ (TS _ 110) }
	'returns'      { PT _ (TS _ 111) }
	'short'        { PT _ (TS _ 112) }
	'signed'       { PT _ (TS _ 113) }
	'sizeof'       { PT _ (TS _ 114) }
	'slice'        { PT _ (TS _ 115) }
	'terminates'   { PT _ (TS _ 116) }
	'type'         { PT _ (TS _ 117) }
	'unsigned'     { PT _ (TS _ 118) }
	'variant'      { PT _ (TS _ 119) }
	'void'         { PT _ (TS _ 120) }
	'writes'       { PT _ (TS _ 121) }
	'{'            { PT _ (TS _ 122) }
	'|'            { PT _ (TS _ 123) }
	'||'           { PT _ (TS _ 124) }
	'}'            { PT _ (TS _ 125) }
	'~'            { PT _ (TS _ 126) }
	L_Ident        { PT _ (TV $$) }
	L_doubl        { PT _ (TD $$) }
	L_integ        { PT _ (TI $$) }
	L_quoted       { PT _ (TL $$) }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_pProgram rule  0
	%start_pAnnot   rule  1
	%start_pCode_Annot rule  2
	%start_pContract rule  3
	%start_pRequires rule  4
	%start_pNERequires rule  5
	%start_pTerminates rule  6
	%start_pDecreases rule  7
	%start_pSimpleClauses rule  8
	%start_pNESimpleClauses rule  9
	%start_pAssigns rule  10
	%start_pZones   rule  11
	%start_pBehaviors rule  12
	%start_pCompleteOrDisjoint rule  13
	%start_pLexpr   rule  14
	%start_pListLexpr rule  15
	%start_pLexpr1  rule  16
	%start_pLexprRelInner rule  17
	%start_pListLexprRelInner rule  18
	%start_pRelation rule  19
	%start_pLexpr2  rule  20
	%start_pLexprBinder rule  21
	%start_pBinders rule  22
	%start_pTypeSpecOFTYPENAME rule  23
	%start_pBindersReentrance rule  24
	%start_pListBindersReentrance rule  25
	%start_pVarSpec rule  26
	%start_pStars   rule  27
	%start_pListStars rule  28
	%start_pVarSpec1 rule  29
	%start_pArraySize rule  30
	%start_pLexpr3  rule  31
	%start_pOptLabel1 rule  32
	%start_pOptLabel2 rule  33
	%start_pOptLabelList rule  34
	%start_pLabelName rule  35
	%start_pListLabelName rule  36
	%start_pRange   rule  37
	%start_pLexprOption rule  38
	%start_pAnyIdentifier rule  39
	%start_pPostCond rule  40
	%start_pFullIdentifier rule  41
	%start_pListFullIdentifier rule  42
	%start_pIdentifier rule  43
	%start_pTypeSpecSimple rule  44
	%start_pLogicPTreeAnnot rule  45
	%start_pAnnotation rule  46
	%start_pLoopAnnotStack rule  47
	%start_pLoopAnnotOpt rule  48
	%start_pLoopInvariant rule  49
	%start_pLoopAllocation rule  50
	%start_pAllocation rule  51
	%start_pLoopVariant rule  52
	%start_pLoopEffects rule  53
	%start_pVariant rule  54
	Ident           rule  55
	Double          rule  56
	Integer         rule  57
	String          rule  58
	Program         rules 59, 60
	Annot           rule  61
	Code_Annot      rule  62
	Contract        rules 63, 64, 65, 66
	Requires        rules 67, 68
	NERequires      rules 69, 70, 71
	Terminates      rule  72
	Decreases       rule  73
	SimpleClauses   rules 74, 75
	NESimpleClauses rules 76, 77
	Assigns         rules 78, 79
	Zones           rules 80, 81
	Behaviors       rule  82
	CompleteOrDisjoint rule  83
	Lexpr           rules 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96
	ListLexpr       rules 97, 98
	Lexpr1          rules 99, 100
	LexprRelInner   rule  101
	ListLexprRelInner rules 102, 103
	Relation        rules 104, 105, 106, 107, 108, 109
	Lexpr2          rules 110, 111, 112
	LexprBinder     rules 113, 114, 115
	Binders         rule  116
	TypeSpecOFTYPENAME rules 117, 118
	BindersReentrance rules 119, 120
	ListBindersReentrance rules 121, 122
	VarSpec         rules 123, 124
	Stars           rule  125
	ListStars       rules 126, 127
	VarSpec1        rules 128, 129, 130
	ArraySize       rules 131, 132, 133
	Lexpr3          rules 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181
	OptLabel1       rule  182
	OptLabel2       rule  183
	OptLabelList    rules 184, 185
	LabelName       rule  186
	ListLabelName   rules 187, 188
	Range           rule  189
	LexprOption     rules 190, 191
	AnyIdentifier   rule  192
	PostCond        rules 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207
	FullIdentifier  rules 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247
	ListFullIdentifier rules 248, 249
	Identifier      rules 250, 251, 252, 253, 254
	TypeSpecSimple  rules 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287
	LogicPTreeAnnot rule  288
	Annotation      rule  289
	LoopAnnotStack  rules 290, 291, 292, 293
	LoopAnnotOpt    rules 294, 295
	LoopInvariant   rules 296, 297, 298
	LoopAllocation  rule  299
	Allocation      rules 300, 301
	LoopVariant     rule  302
	LoopEffects     rule  303
	Variant         rules 304, 305

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_pProgram -> . Program                        (rule 0)

	'admit'        shift, and enter state 292
			(reduce using rule 67)

	'assigns'      reduce using rule 67
	'breaks'       reduce using rule 67
	'check'        shift, and enter state 293
			(reduce using rule 67)

	'continues'    reduce using rule 67
	'ensures'      reduce using rule 67
	'exits'        reduce using rule 67
	'loop'         shift, and enter state 173
	'requires'     shift, and enter state 280
	'returns'      reduce using rule 67
	%eof           reduce using rule 67

	Program        goto state 289
	Annot          goto state 290
	Code_Annot     goto state 288
	Contract       goto state 286
	Requires       goto state 284
	NERequires     goto state 282
	LogicPTreeAnnotgoto state 291
	Annotation     goto state 178
	LoopAnnotStack goto state 176
	LoopInvariant  goto state 169
	LoopAllocation goto state 170
	LoopVariant    goto state 171
	LoopEffects    goto state 172

State 1

	%start_pAnnot -> . Annot                            (rule 1)

	'admit'        shift, and enter state 278
			(reduce using rule 67)

	'assigns'      reduce using rule 67
	'breaks'       reduce using rule 67
	'check'        shift, and enter state 279
			(reduce using rule 67)

	'continues'    reduce using rule 67
	'ensures'      reduce using rule 67
	'exits'        reduce using rule 67
	'requires'     shift, and enter state 280
	'returns'      reduce using rule 67
	%eof           reduce using rule 67

	Annot          goto state 287
	Code_Annot     goto state 288
	Contract       goto state 286
	Requires       goto state 284
	NERequires     goto state 282

State 2

	%start_pCode_Annot -> . Code_Annot                  (rule 2)

	'admit'        shift, and enter state 278
			(reduce using rule 67)

	'assigns'      reduce using rule 67
	'breaks'       reduce using rule 67
	'check'        shift, and enter state 279
			(reduce using rule 67)

	'continues'    reduce using rule 67
	'ensures'      reduce using rule 67
	'exits'        reduce using rule 67
	'requires'     shift, and enter state 280
	'returns'      reduce using rule 67
	%eof           reduce using rule 67

	Code_Annot     goto state 285
	Contract       goto state 286
	Requires       goto state 284
	NERequires     goto state 282

State 3

	%start_pContract -> . Contract                      (rule 3)

	'admit'        shift, and enter state 278
			(reduce using rule 67)

	'assigns'      reduce using rule 67
	'breaks'       reduce using rule 67
	'check'        shift, and enter state 279
			(reduce using rule 67)

	'continues'    reduce using rule 67
	'ensures'      reduce using rule 67
	'exits'        reduce using rule 67
	'requires'     shift, and enter state 280
	'returns'      reduce using rule 67
	%eof           reduce using rule 67

	Contract       goto state 283
	Requires       goto state 284
	NERequires     goto state 282

State 4

	%start_pRequires -> . Requires                      (rule 4)

	'admit'        shift, and enter state 278
	'check'        shift, and enter state 279
	'requires'     shift, and enter state 280
	%eof           reduce using rule 67

	Requires       goto state 281
	NERequires     goto state 282

State 5

	%start_pNERequires -> . NERequires                  (rule 5)

	'admit'        shift, and enter state 278
	'check'        shift, and enter state 279
	'requires'     shift, and enter state 280

	NERequires     goto state 277

State 6

	%start_pTerminates -> . Terminates                  (rule 6)

	%eof           reduce using rule 72

	Terminates     goto state 276

State 7

	%start_pDecreases -> . Decreases                    (rule 7)

	%eof           reduce using rule 73

	Decreases      goto state 275

State 8

	%start_pSimpleClauses -> . SimpleClauses            (rule 8)

	'admit'        shift, and enter state 198
	'assigns'      shift, and enter state 272
	'breaks'       shift, and enter state 199
	'check'        shift, and enter state 200
	'continues'    shift, and enter state 201
	'ensures'      shift, and enter state 202
	'exits'        shift, and enter state 203
	'returns'      shift, and enter state 204
	%eof           reduce using rule 74

	SimpleClauses  goto state 273
	NESimpleClausesgoto state 274
	PostCond       goto state 271

State 9

	%start_pNESimpleClauses -> . NESimpleClauses        (rule 9)

	'admit'        shift, and enter state 198
	'assigns'      shift, and enter state 272
	'breaks'       shift, and enter state 199
	'check'        shift, and enter state 200
	'continues'    shift, and enter state 201
	'ensures'      shift, and enter state 202
	'exits'        shift, and enter state 203
	'returns'      shift, and enter state 204

	NESimpleClausesgoto state 270
	PostCond       goto state 271

State 10

	%start_pAssigns -> . Assigns                        (rule 10)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\nothing'    shift, and enter state 266
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Assigns        goto state 267
	Zones          goto state 268
	Lexpr          goto state 259
	ListLexpr      goto state 269
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 11

	%start_pZones -> . Zones                            (rule 11)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\nothing'    shift, and enter state 266
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Zones          goto state 264
	Lexpr          goto state 259
	ListLexpr      goto state 265
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 12

	%start_pBehaviors -> . Behaviors                    (rule 12)

	%eof           reduce using rule 82

	Behaviors      goto state 263

State 13

	%start_pCompleteOrDisjoint -> . CompleteOrDisjoint    (rule 13)

	%eof           reduce using rule 83

	CompleteOrDisjointgoto state 262

State 14

	%start_pLexpr -> . Lexpr                            (rule 14)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 261
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 15

	%start_pListLexpr -> . ListLexpr                    (rule 15)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 259
	ListLexpr      goto state 260
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 16

	%start_pLexpr1 -> . Lexpr1                          (rule 16)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr1         goto state 258
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 17

	%start_pLexprRelInner -> . LexprRelInner            (rule 17)

	'!='           shift, and enter state 248
	'<'            shift, and enter state 249
	'<='           shift, and enter state 250
	'=='           shift, and enter state 251
	'>'            shift, and enter state 252
	'>='           shift, and enter state 253

	LexprRelInner  goto state 257
	Relation       goto state 256

State 18

	%start_pListLexprRelInner -> . ListLexprRelInner    (rule 18)

	'!='           shift, and enter state 248
	'<'            shift, and enter state 249
	'<='           shift, and enter state 250
	'=='           shift, and enter state 251
	'>'            shift, and enter state 252
	'>='           shift, and enter state 253
	%eof           reduce using rule 102

	LexprRelInner  goto state 254
	ListLexprRelInnergoto state 255
	Relation       goto state 256

State 19

	%start_pRelation -> . Relation                      (rule 19)

	'!='           shift, and enter state 248
	'<'            shift, and enter state 249
	'<='           shift, and enter state 250
	'=='           shift, and enter state 251
	'>'            shift, and enter state 252
	'>='           shift, and enter state 253

	Relation       goto state 247

State 20

	%start_pLexpr2 -> . Lexpr2                          (rule 20)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr2         goto state 245
	LexprBinder    goto state 64
	Lexpr3         goto state 246
	FullIdentifier goto state 66
	Identifier     goto state 67

State 21

	%start_pLexprBinder -> . LexprBinder                (rule 21)

	'\\exists'     shift, and enter state 83
	'\\forall'     shift, and enter state 85
	'\\lambda'     shift, and enter state 89

	LexprBinder    goto state 244

State 22

	%start_pBinders -> . Binders                        (rule 22)

	'_Bool'        shift, and enter state 180
	'boolean'      shift, and enter state 181
	'char'         shift, and enter state 182
	'double'       shift, and enter state 183
	'float'        shift, and enter state 184
	'int'          shift, and enter state 185
	'integer'      shift, and enter state 186
	'long'         shift, and enter state 187
	'real'         shift, and enter state 188
	'short'        shift, and enter state 189
	'signed'       shift, and enter state 190
	'unsigned'     shift, and enter state 191
	'void'         shift, and enter state 192
	L_Ident        shift, and enter state 56

	Ident          goto state 239
	Binders        goto state 242
	TypeSpecOFTYPENAMEgoto state 243
	TypeSpecSimple goto state 241

State 23

	%start_pTypeSpecOFTYPENAME -> . TypeSpecOFTYPENAME    (rule 23)

	'_Bool'        shift, and enter state 180
	'boolean'      shift, and enter state 181
	'char'         shift, and enter state 182
	'double'       shift, and enter state 183
	'float'        shift, and enter state 184
	'int'          shift, and enter state 185
	'integer'      shift, and enter state 186
	'long'         shift, and enter state 187
	'real'         shift, and enter state 188
	'short'        shift, and enter state 189
	'signed'       shift, and enter state 190
	'unsigned'     shift, and enter state 191
	'void'         shift, and enter state 192
	L_Ident        shift, and enter state 56

	Ident          goto state 239
	TypeSpecOFTYPENAMEgoto state 240
	TypeSpecSimple goto state 241

State 24

	%start_pBindersReentrance -> . BindersReentrance    (rule 24)

	','            shift, and enter state 237

	BindersReentrancegoto state 238

State 25

	%start_pListBindersReentrance -> . ListBindersReentrance    (rule 25)

	','            shift, and enter state 237
	%eof           reduce using rule 121

	BindersReentrancegoto state 235
	ListBindersReentrancegoto state 236

State 26

	%start_pVarSpec -> . VarSpec                        (rule 26)

	'('            shift, and enter state 227
	'*'            shift, and enter state 230
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	L_Ident        shift, and enter state 56

	Ident          goto state 57
	VarSpec        goto state 232
	Stars          goto state 228
	ListStars      goto state 233
	VarSpec1       goto state 234
	FullIdentifier goto state 226
	Identifier     goto state 67

State 27

	%start_pStars -> . Stars                            (rule 27)

	'*'            shift, and enter state 230

	Stars          goto state 231

State 28

	%start_pListStars -> . ListStars                    (rule 28)

	'*'            shift, and enter state 230

	Stars          goto state 228
	ListStars      goto state 229

State 29

	%start_pVarSpec1 -> . VarSpec1                      (rule 29)

	'('            shift, and enter state 227
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	L_Ident        shift, and enter state 56

	Ident          goto state 57
	VarSpec1       goto state 225
	FullIdentifier goto state 226
	Identifier     goto state 67

State 30

	%start_pArraySize -> . ArraySize                    (rule 30)

	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	L_Ident        shift, and enter state 56
	L_integ        shift, and enter state 152
	%eof           reduce using rule 133

	Ident          goto state 57
	Integer        goto state 222
	ArraySize      goto state 223
	FullIdentifier goto state 224
	Identifier     goto state 67

State 31

	%start_pLexpr3 -> . Lexpr3                          (rule 31)

	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\false'      shift, and enter state 84
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr3         goto state 221
	FullIdentifier goto state 66
	Identifier     goto state 67

State 32

	%start_pOptLabel1 -> . OptLabel1                    (rule 32)

	'{'            shift, and enter state 216
	%eof           reduce using rule 184

	OptLabel1      goto state 219
	OptLabelList   goto state 220

State 33

	%start_pOptLabel2 -> . OptLabel2                    (rule 33)

	'{'            shift, and enter state 216
	%eof           reduce using rule 184

	OptLabel2      goto state 217
	OptLabelList   goto state 218

State 34

	%start_pOptLabelList -> . OptLabelList              (rule 34)

	'{'            shift, and enter state 216
	%eof           reduce using rule 184

	OptLabelList   goto state 215

State 35

	%start_pLabelName -> . LabelName                    (rule 35)

	'behaviors'    shift, and enter state 115
	'label'        shift, and enter state 132
	'reads'        shift, and enter state 141
	'writes'       shift, and enter state 149
	L_Ident        shift, and enter state 56

	Ident          goto state 57
	LabelName      goto state 214
	AnyIdentifier  goto state 213
	Identifier     goto state 206

State 36

	%start_pListLabelName -> . ListLabelName            (rule 36)

	'behaviors'    shift, and enter state 115
	'label'        shift, and enter state 132
	'reads'        shift, and enter state 141
	'writes'       shift, and enter state 149
	L_Ident        shift, and enter state 56

	Ident          goto state 57
	LabelName      goto state 211
	ListLabelName  goto state 212
	AnyIdentifier  goto state 213
	Identifier     goto state 206

State 37

	%start_pRange -> . Range                            (rule 37)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'..'           reduce using rule 190
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 207
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	Range          goto state 209
	LexprOption    goto state 210
	FullIdentifier goto state 66
	Identifier     goto state 67

State 38

	%start_pLexprOption -> . LexprOption                (rule 38)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153
	%eof           reduce using rule 190

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 207
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	LexprOption    goto state 208
	FullIdentifier goto state 66
	Identifier     goto state 67

State 39

	%start_pAnyIdentifier -> . AnyIdentifier            (rule 39)

	'behaviors'    shift, and enter state 115
	'label'        shift, and enter state 132
	'reads'        shift, and enter state 141
	'writes'       shift, and enter state 149
	L_Ident        shift, and enter state 56

	Ident          goto state 57
	AnyIdentifier  goto state 205
	Identifier     goto state 206

State 40

	%start_pPostCond -> . PostCond                      (rule 40)

	'admit'        shift, and enter state 198
	'breaks'       shift, and enter state 199
	'check'        shift, and enter state 200
	'continues'    shift, and enter state 201
	'ensures'      shift, and enter state 202
	'exits'        shift, and enter state 203
	'returns'      shift, and enter state 204

	PostCond       goto state 197

State 41

	%start_pFullIdentifier -> . FullIdentifier          (rule 41)

	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	L_Ident        shift, and enter state 56

	Ident          goto state 57
	FullIdentifier goto state 196
	Identifier     goto state 67

State 42

	%start_pListFullIdentifier -> . ListFullIdentifier    (rule 42)

	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	L_Ident        shift, and enter state 56

	Ident          goto state 57
	FullIdentifier goto state 194
	ListFullIdentifiergoto state 195
	Identifier     goto state 67

State 43

	%start_pIdentifier -> . Identifier                  (rule 43)

	'behaviors'    shift, and enter state 115
	'label'        shift, and enter state 132
	'reads'        shift, and enter state 141
	'writes'       shift, and enter state 149
	L_Ident        shift, and enter state 56

	Ident          goto state 57
	Identifier     goto state 193

State 44

	%start_pTypeSpecSimple -> . TypeSpecSimple          (rule 44)

	'_Bool'        shift, and enter state 180
	'boolean'      shift, and enter state 181
	'char'         shift, and enter state 182
	'double'       shift, and enter state 183
	'float'        shift, and enter state 184
	'int'          shift, and enter state 185
	'integer'      shift, and enter state 186
	'long'         shift, and enter state 187
	'real'         shift, and enter state 188
	'short'        shift, and enter state 189
	'signed'       shift, and enter state 190
	'unsigned'     shift, and enter state 191
	'void'         shift, and enter state 192

	TypeSpecSimple goto state 179

State 45

	%start_pLogicPTreeAnnot -> . LogicPTreeAnnot        (rule 45)

	'admit'        shift, and enter state 164
	'check'        shift, and enter state 165
	'loop'         shift, and enter state 173

	LogicPTreeAnnotgoto state 177
	Annotation     goto state 178
	LoopAnnotStack goto state 176
	LoopInvariant  goto state 169
	LoopAllocation goto state 170
	LoopVariant    goto state 171
	LoopEffects    goto state 172

State 46

	%start_pAnnotation -> . Annotation                  (rule 46)

	'admit'        shift, and enter state 164
	'check'        shift, and enter state 165
	'loop'         shift, and enter state 173

	Annotation     goto state 175
	LoopAnnotStack goto state 176
	LoopInvariant  goto state 169
	LoopAllocation goto state 170
	LoopVariant    goto state 171
	LoopEffects    goto state 172

State 47

	%start_pLoopAnnotStack -> . LoopAnnotStack          (rule 47)

	'admit'        shift, and enter state 164
	'check'        shift, and enter state 165
	'loop'         shift, and enter state 173

	LoopAnnotStack goto state 174
	LoopInvariant  goto state 169
	LoopAllocation goto state 170
	LoopVariant    goto state 171
	LoopEffects    goto state 172

State 48

	%start_pLoopAnnotOpt -> . LoopAnnotOpt              (rule 48)

	'admit'        shift, and enter state 164
	'check'        shift, and enter state 165
	'loop'         shift, and enter state 173
	%eof           reduce using rule 294

	LoopAnnotStack goto state 167
	LoopAnnotOpt   goto state 168
	LoopInvariant  goto state 169
	LoopAllocation goto state 170
	LoopVariant    goto state 171
	LoopEffects    goto state 172

State 49

	%start_pLoopInvariant -> . LoopInvariant            (rule 49)

	'admit'        shift, and enter state 164
	'check'        shift, and enter state 165
	'loop'         shift, and enter state 166

	LoopInvariant  goto state 163

State 50

	%start_pLoopAllocation -> . LoopAllocation          (rule 50)

	'loop'         shift, and enter state 162

	LoopAllocation goto state 161

State 51

	%start_pAllocation -> . Allocation                  (rule 51)

	'allocates'    shift, and enter state 159
	'frees'        shift, and enter state 160

	Allocation     goto state 158

State 52

	%start_pLoopVariant -> . LoopVariant                (rule 52)

	'loop'         shift, and enter state 157

	LoopVariant    goto state 156

State 53

	%start_pLoopEffects -> . LoopEffects                (rule 53)

	'loop'         shift, and enter state 155

	LoopEffects    goto state 154

State 54

	%start_pVariant -> . Variant                        (rule 54)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 61
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67
	Variant        goto state 68

State 55

	Ident -> . L_Ident                                  (rule 55)

	L_Ident        shift, and enter state 56


State 56

	Ident -> L_Ident .                                  (rule 55)

	'!='           reduce using rule 55
	'%'            reduce using rule 55
	'&'            reduce using rule 55
	'&&'           reduce using rule 55
	'('            reduce using rule 55
	')'            reduce using rule 55
	'*'            reduce using rule 55
	'+'            reduce using rule 55
	','            reduce using rule 55
	'-'            reduce using rule 55
	'-->'          reduce using rule 55
	'..'           reduce using rule 55
	'/'            reduce using rule 55
	':'            reduce using rule 55
	';'            reduce using rule 55
	'<'            reduce using rule 55
	'<-->'         reduce using rule 55
	'<='           reduce using rule 55
	'<==>'         reduce using rule 55
	'=='           reduce using rule 55
	'==>'          reduce using rule 55
	'>'            reduce using rule 55
	'>='           reduce using rule 55
	'?'            reduce using rule 55
	'['            reduce using rule 55
	'\\from'       reduce using rule 55
	'\\in'         reduce using rule 55
	']'            reduce using rule 55
	'^'            reduce using rule 55
	'^^'           reduce using rule 55
	'admit'        reduce using rule 55
	'allocates'    reduce using rule 55
	'assert'       reduce using rule 55
	'assigns'      reduce using rule 55
	'assumes'      reduce using rule 55
	'at'           reduce using rule 55
	'axiom'        reduce using rule 55
	'axiomatic'    reduce using rule 55
	'behavior'     reduce using rule 55
	'behaviors'    reduce using rule 55
	'breaks'       reduce using rule 55
	'check'        reduce using rule 55
	'complete'     reduce using rule 55
	'continues'    reduce using rule 55
	'contract'     reduce using rule 55
	'decreases'    reduce using rule 55
	'disjoint'     reduce using rule 55
	'ensures'      reduce using rule 55
	'exits'        reduce using rule 55
	'for'          reduce using rule 55
	'frees'        reduce using rule 55
	'function'     reduce using rule 55
	'global'       reduce using rule 55
	'impact'       reduce using rule 55
	'include'      reduce using rule 55
	'inductive'    reduce using rule 55
	'invariant'    reduce using rule 55
	'label'        reduce using rule 55
	'lemma'        reduce using rule 55
	'let'          reduce using rule 55
	'logic'        reduce using rule 55
	'loop'         reduce using rule 55
	'model'        reduce using rule 55
	'module'       reduce using rule 55
	'pragma'       reduce using rule 55
	'predicate'    reduce using rule 55
	'reads'        reduce using rule 55
	'requires'     reduce using rule 55
	'returns'      reduce using rule 55
	'slice'        reduce using rule 55
	'terminates'   reduce using rule 55
	'type'         reduce using rule 55
	'variant'      reduce using rule 55
	'writes'       reduce using rule 55
	'|'            reduce using rule 55
	'||'           reduce using rule 55
	'}'            reduce using rule 55
	L_Ident        reduce using rule 55
	%eof           reduce using rule 55


State 57

	Identifier -> Ident .                               (rule 250)

	'!='           reduce using rule 250
	'%'            reduce using rule 250
	'&'            reduce using rule 250
	'&&'           reduce using rule 250
	'('            reduce using rule 250
	')'            reduce using rule 250
	'*'            reduce using rule 250
	'+'            reduce using rule 250
	','            reduce using rule 250
	'-'            reduce using rule 250
	'-->'          reduce using rule 250
	'..'           reduce using rule 250
	'/'            reduce using rule 250
	':'            reduce using rule 250
	';'            reduce using rule 250
	'<'            reduce using rule 250
	'<-->'         reduce using rule 250
	'<='           reduce using rule 250
	'<==>'         reduce using rule 250
	'=='           reduce using rule 250
	'==>'          reduce using rule 250
	'>'            reduce using rule 250
	'>='           reduce using rule 250
	'?'            reduce using rule 250
	'['            reduce using rule 250
	'\\from'       reduce using rule 250
	'\\in'         reduce using rule 250
	']'            reduce using rule 250
	'^'            reduce using rule 250
	'^^'           reduce using rule 250
	'for'          reduce using rule 250
	'|'            reduce using rule 250
	'||'           reduce using rule 250
	'}'            reduce using rule 250
	%eof           reduce using rule 250


State 58

	Lexpr3 -> Double .                                  (rule 158)

	'!='           reduce using rule 158
	'%'            reduce using rule 158
	'&'            reduce using rule 158
	'&&'           reduce using rule 158
	')'            reduce using rule 158
	'*'            reduce using rule 158
	'+'            reduce using rule 158
	','            reduce using rule 158
	'-'            reduce using rule 158
	'-->'          reduce using rule 158
	'..'           reduce using rule 158
	'/'            reduce using rule 158
	':'            reduce using rule 158
	';'            reduce using rule 158
	'<'            reduce using rule 158
	'<-->'         reduce using rule 158
	'<='           reduce using rule 158
	'<==>'         reduce using rule 158
	'=='           reduce using rule 158
	'==>'          reduce using rule 158
	'>'            reduce using rule 158
	'>='           reduce using rule 158
	'?'            reduce using rule 158
	'['            reduce using rule 158
	'\\from'       reduce using rule 158
	'\\in'         reduce using rule 158
	']'            reduce using rule 158
	'^'            reduce using rule 158
	'^^'           reduce using rule 158
	'for'          reduce using rule 158
	'|'            reduce using rule 158
	'||'           reduce using rule 158
	%eof           reduce using rule 158


State 59

	Lexpr3 -> Integer .                                 (rule 157)

	'!='           reduce using rule 157
	'%'            reduce using rule 157
	'&'            reduce using rule 157
	'&&'           reduce using rule 157
	')'            reduce using rule 157
	'*'            reduce using rule 157
	'+'            reduce using rule 157
	','            reduce using rule 157
	'-'            reduce using rule 157
	'-->'          reduce using rule 157
	'..'           reduce using rule 157
	'/'            reduce using rule 157
	':'            reduce using rule 157
	';'            reduce using rule 157
	'<'            reduce using rule 157
	'<-->'         reduce using rule 157
	'<='           reduce using rule 157
	'<==>'         reduce using rule 157
	'=='           reduce using rule 157
	'==>'          reduce using rule 157
	'>'            reduce using rule 157
	'>='           reduce using rule 157
	'?'            reduce using rule 157
	'['            reduce using rule 157
	'\\from'       reduce using rule 157
	'\\in'         reduce using rule 157
	']'            reduce using rule 157
	'^'            reduce using rule 157
	'^^'           reduce using rule 157
	'for'          reduce using rule 157
	'|'            reduce using rule 157
	'||'           reduce using rule 157
	%eof           reduce using rule 157


State 60

	Lexpr3 -> String .                                  (rule 159)

	'!='           reduce using rule 159
	'%'            reduce using rule 159
	'&'            reduce using rule 159
	'&&'           reduce using rule 159
	')'            reduce using rule 159
	'*'            reduce using rule 159
	'+'            reduce using rule 159
	','            reduce using rule 159
	'-'            reduce using rule 159
	'-->'          reduce using rule 159
	'..'           reduce using rule 159
	'/'            reduce using rule 159
	':'            reduce using rule 159
	';'            reduce using rule 159
	'<'            reduce using rule 159
	'<-->'         reduce using rule 159
	'<='           reduce using rule 159
	'<==>'         reduce using rule 159
	'=='           reduce using rule 159
	'==>'          reduce using rule 159
	'>'            reduce using rule 159
	'>='           reduce using rule 159
	'?'            reduce using rule 159
	'['            reduce using rule 159
	'\\from'       reduce using rule 159
	'\\in'         reduce using rule 159
	']'            reduce using rule 159
	'^'            reduce using rule 159
	'^^'           reduce using rule 159
	'for'          reduce using rule 159
	'|'            reduce using rule 159
	'||'           reduce using rule 159
	%eof           reduce using rule 159


State 61

	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)
	Variant -> Lexpr . 'for' AnyIdentifier              (rule 304)
	Variant -> Lexpr .                                  (rule 305)

	';'            reduce using rule 305
	'?'            shift, and enter state 303
	'for'          shift, and enter state 401
	%eof           reduce using rule 305


State 62

	Lexpr -> Lexpr1 . '==>' Lexpr                       (rule 84)
	Lexpr -> Lexpr1 . '<==>' Lexpr                      (rule 85)
	Lexpr -> Lexpr1 . '||' Lexpr                        (rule 86)
	Lexpr -> Lexpr1 . '&&' Lexpr                        (rule 87)
	Lexpr -> Lexpr1 . '^^' Lexpr                        (rule 88)
	Lexpr -> Lexpr1 . '&' Lexpr                         (rule 89)
	Lexpr -> Lexpr1 . '|' Lexpr                         (rule 90)
	Lexpr -> Lexpr1 . '^' Lexpr                         (rule 91)
	Lexpr -> Lexpr1 . '-->' Lexpr                       (rule 92)
	Lexpr -> Lexpr1 . '<-->' Lexpr                      (rule 93)
	Lexpr -> Lexpr1 . '\\in' Lexpr                      (rule 94)
	Lexpr -> Lexpr1 .                                   (rule 96)

	'&'            shift, and enter state 390
			(reduce using rule 96)

	'&&'           shift, and enter state 391
			(reduce using rule 96)

	')'            reduce using rule 96
	','            reduce using rule 96
	'-->'          shift, and enter state 392
			(reduce using rule 96)

	'..'           reduce using rule 96
	':'            reduce using rule 96
	';'            reduce using rule 96
	'<-->'         shift, and enter state 393
			(reduce using rule 96)

	'<==>'         shift, and enter state 394
			(reduce using rule 96)

	'==>'          shift, and enter state 395
			(reduce using rule 96)

	'?'            reduce using rule 96
	'\\from'       reduce using rule 96
	'\\in'         shift, and enter state 396
			(reduce using rule 96)

	']'            reduce using rule 96
	'^'            shift, and enter state 397
			(reduce using rule 96)

	'^^'           shift, and enter state 398
			(reduce using rule 96)

	'for'          reduce using rule 96
	'|'            shift, and enter state 399
			(reduce using rule 96)

	'||'           shift, and enter state 400
			(reduce using rule 96)

	%eof           reduce using rule 96


State 63

	Lexpr1 -> Lexpr2 .                                  (rule 99)

	'&'            reduce using rule 99
	'&&'           reduce using rule 99
	')'            reduce using rule 99
	','            reduce using rule 99
	'-->'          reduce using rule 99
	'..'           reduce using rule 99
	':'            reduce using rule 99
	';'            reduce using rule 99
	'<-->'         reduce using rule 99
	'<==>'         reduce using rule 99
	'==>'          reduce using rule 99
	'?'            reduce using rule 99
	'\\from'       reduce using rule 99
	'\\in'         reduce using rule 99
	']'            reduce using rule 99
	'^'            reduce using rule 99
	'^^'           reduce using rule 99
	'for'          reduce using rule 99
	'|'            reduce using rule 99
	'||'           reduce using rule 99
	%eof           reduce using rule 99


State 64

	Lexpr2 -> LexprBinder .                             (rule 111)

	'&'            reduce using rule 111
	'&&'           reduce using rule 111
	')'            reduce using rule 111
	','            reduce using rule 111
	'-->'          reduce using rule 111
	'..'           reduce using rule 111
	':'            reduce using rule 111
	';'            reduce using rule 111
	'<-->'         reduce using rule 111
	'<==>'         reduce using rule 111
	'==>'          reduce using rule 111
	'?'            reduce using rule 111
	'\\from'       reduce using rule 111
	'\\in'         reduce using rule 111
	']'            reduce using rule 111
	'^'            reduce using rule 111
	'^^'           reduce using rule 111
	'for'          reduce using rule 111
	'|'            reduce using rule 111
	'||'           reduce using rule 111
	%eof           reduce using rule 111


State 65

	Lexpr1 -> Lexpr3 . ListLexprRelInner Relation Lexpr2    (rule 100)
	Lexpr2 -> Lexpr3 .                                  (rule 110)
	Lexpr3 -> Lexpr3 . '+' Lexpr3                       (rule 160)
	Lexpr3 -> Lexpr3 . '-' Lexpr3                       (rule 161)
	Lexpr3 -> Lexpr3 . '*' Lexpr3                       (rule 162)
	Lexpr3 -> Lexpr3 . '/' Lexpr3                       (rule 163)
	Lexpr3 -> Lexpr3 . '%' Lexpr3                       (rule 164)
	Lexpr3 -> Lexpr3 . '[' Range ']'                    (rule 165)
	Lexpr3 -> Lexpr3 . '[' Lexpr ']'                    (rule 166)

	'!='           shift, and enter state 248
			(reduce using rule 102)

	'%'            shift, and enter state 307
	'&'            reduce using rule 110
	'&&'           reduce using rule 110
	')'            reduce using rule 110
	'*'            shift, and enter state 308
	'+'            shift, and enter state 309
	','            reduce using rule 110
	'-'            shift, and enter state 310
	'-->'          reduce using rule 110
	'..'           reduce using rule 110
	'/'            shift, and enter state 311
	':'            reduce using rule 110
	';'            reduce using rule 110
	'<'            shift, and enter state 249
			(reduce using rule 102)

	'<-->'         reduce using rule 110
	'<='           shift, and enter state 250
			(reduce using rule 102)

	'<==>'         reduce using rule 110
	'=='           shift, and enter state 251
			(reduce using rule 102)

	'==>'          reduce using rule 110
	'>'            shift, and enter state 252
			(reduce using rule 102)

	'>='           shift, and enter state 253
			(reduce using rule 102)

	'?'            reduce using rule 110
	'['            shift, and enter state 312
	'\\from'       reduce using rule 110
	'\\in'         reduce using rule 110
	']'            reduce using rule 110
	'^'            reduce using rule 110
	'^^'           reduce using rule 110
	'for'          reduce using rule 110
	'|'            reduce using rule 110
	'||'           reduce using rule 110
	%eof           reduce using rule 110

	LexprRelInner  goto state 254
	ListLexprRelInnergoto state 389
	Relation       goto state 256

State 66

	Lexpr3 -> FullIdentifier . '(' ListLexpr ')'        (rule 177)
	Lexpr3 -> FullIdentifier .                          (rule 178)

	'!='           reduce using rule 178
	'%'            reduce using rule 178
	'&'            reduce using rule 178
	'&&'           reduce using rule 178
	'('            shift, and enter state 388
	')'            reduce using rule 178
	'*'            reduce using rule 178
	'+'            reduce using rule 178
	','            reduce using rule 178
	'-'            reduce using rule 178
	'-->'          reduce using rule 178
	'..'           reduce using rule 178
	'/'            reduce using rule 178
	':'            reduce using rule 178
	';'            reduce using rule 178
	'<'            reduce using rule 178
	'<-->'         reduce using rule 178
	'<='           reduce using rule 178
	'<==>'         reduce using rule 178
	'=='           reduce using rule 178
	'==>'          reduce using rule 178
	'>'            reduce using rule 178
	'>='           reduce using rule 178
	'?'            reduce using rule 178
	'['            reduce using rule 178
	'\\from'       reduce using rule 178
	'\\in'         reduce using rule 178
	']'            reduce using rule 178
	'^'            reduce using rule 178
	'^^'           reduce using rule 178
	'for'          reduce using rule 178
	'|'            reduce using rule 178
	'||'           reduce using rule 178
	%eof           reduce using rule 178


State 67

	FullIdentifier -> Identifier .                      (rule 208)

	'!='           reduce using rule 208
	'%'            reduce using rule 208
	'&'            reduce using rule 208
	'&&'           reduce using rule 208
	'('            reduce using rule 208
	')'            reduce using rule 208
	'*'            reduce using rule 208
	'+'            reduce using rule 208
	','            reduce using rule 208
	'-'            reduce using rule 208
	'-->'          reduce using rule 208
	'..'           reduce using rule 208
	'/'            reduce using rule 208
	':'            reduce using rule 208
	';'            reduce using rule 208
	'<'            reduce using rule 208
	'<-->'         reduce using rule 208
	'<='           reduce using rule 208
	'<==>'         reduce using rule 208
	'=='           reduce using rule 208
	'==>'          reduce using rule 208
	'>'            reduce using rule 208
	'>='           reduce using rule 208
	'?'            reduce using rule 208
	'['            reduce using rule 208
	'\\from'       reduce using rule 208
	'\\in'         reduce using rule 208
	']'            reduce using rule 208
	'^'            reduce using rule 208
	'^^'           reduce using rule 208
	'for'          reduce using rule 208
	'|'            reduce using rule 208
	'||'           reduce using rule 208
	%eof           reduce using rule 208


State 68

	%start_pVariant -> Variant .                        (rule 54)

	%eof           accept


State 69

	Lexpr2 -> '!' . LexprBinder                         (rule 112)

	'\\exists'     shift, and enter state 83
	'\\forall'     shift, and enter state 85
	'\\lambda'     shift, and enter state 89

	LexprBinder    goto state 387

State 70

	Lexpr3 -> '&' . Lexpr3                              (rule 171)

	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\false'      shift, and enter state 84
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr3         goto state 386
	FullIdentifier goto state 66
	Identifier     goto state 67

State 71

	Lexpr3 -> '(' . Lexpr ')'                           (rule 180)
	Lexpr3 -> '(' . Range ')'                           (rule 181)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'..'           reduce using rule 190
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 384
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	Range          goto state 385
	LexprOption    goto state 210
	FullIdentifier goto state 66
	Identifier     goto state 67

State 72

	Lexpr3 -> '*' . Lexpr3                              (rule 170)

	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\false'      shift, and enter state 84
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr3         goto state 383
	FullIdentifier goto state 66
	Identifier     goto state 67

State 73

	Lexpr3 -> '+' . Lexpr3                              (rule 168)

	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\false'      shift, and enter state 84
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr3         goto state 382
	FullIdentifier goto state 66
	Identifier     goto state 67

State 74

	Lexpr3 -> '-' . Lexpr3                              (rule 167)

	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\false'      shift, and enter state 84
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr3         goto state 381
	FullIdentifier goto state 66
	Identifier     goto state 67

State 75

	Lexpr3 -> '\\allocable' . OptLabel1 '(' Lexpr ')'    (rule 148)

	'('            reduce using rule 184
	'{'            shift, and enter state 216

	OptLabel1      goto state 380
	OptLabelList   goto state 220

State 76

	Lexpr3 -> '\\allocation' . OptLabel1 '(' Lexpr ')'    (rule 150)

	'('            reduce using rule 184
	'{'            shift, and enter state 216

	OptLabel1      goto state 379
	OptLabelList   goto state 220

State 77

	Lexpr3 -> '\\at' . '(' Lexpr ',' LabelName ')'      (rule 174)

	'('            shift, and enter state 378


State 78

	Lexpr3 -> '\\automatic' .                           (rule 151)

	'!='           reduce using rule 151
	'%'            reduce using rule 151
	'&'            reduce using rule 151
	'&&'           reduce using rule 151
	')'            reduce using rule 151
	'*'            reduce using rule 151
	'+'            reduce using rule 151
	','            reduce using rule 151
	'-'            reduce using rule 151
	'-->'          reduce using rule 151
	'..'           reduce using rule 151
	'/'            reduce using rule 151
	':'            reduce using rule 151
	';'            reduce using rule 151
	'<'            reduce using rule 151
	'<-->'         reduce using rule 151
	'<='           reduce using rule 151
	'<==>'         reduce using rule 151
	'=='           reduce using rule 151
	'==>'          reduce using rule 151
	'>'            reduce using rule 151
	'>='           reduce using rule 151
	'?'            reduce using rule 151
	'['            reduce using rule 151
	'\\from'       reduce using rule 151
	'\\in'         reduce using rule 151
	']'            reduce using rule 151
	'^'            reduce using rule 151
	'^^'           reduce using rule 151
	'for'          reduce using rule 151
	'|'            reduce using rule 151
	'||'           reduce using rule 151
	%eof           reduce using rule 151


State 79

	Lexpr3 -> '\\base_addr' . OptLabel1 '(' Lexpr ')'    (rule 145)

	'('            reduce using rule 184
	'{'            shift, and enter state 216

	OptLabel1      goto state 377
	OptLabelList   goto state 220

State 80

	Lexpr3 -> '\\block_length' . OptLabel1 '(' Lexpr ')'    (rule 146)

	'('            reduce using rule 184
	'{'            shift, and enter state 216

	OptLabel1      goto state 376
	OptLabelList   goto state 220

State 81

	Lexpr3 -> '\\dangling' . OptLabel1 '(' Lexpr ')'    (rule 143)

	'('            reduce using rule 184
	'{'            shift, and enter state 216

	OptLabel1      goto state 375
	OptLabelList   goto state 220

State 82

	Lexpr3 -> '\\dynamic' .                             (rule 152)

	'!='           reduce using rule 152
	'%'            reduce using rule 152
	'&'            reduce using rule 152
	'&&'           reduce using rule 152
	')'            reduce using rule 152
	'*'            reduce using rule 152
	'+'            reduce using rule 152
	','            reduce using rule 152
	'-'            reduce using rule 152
	'-->'          reduce using rule 152
	'..'           reduce using rule 152
	'/'            reduce using rule 152
	':'            reduce using rule 152
	';'            reduce using rule 152
	'<'            reduce using rule 152
	'<-->'         reduce using rule 152
	'<='           reduce using rule 152
	'<==>'         reduce using rule 152
	'=='           reduce using rule 152
	'==>'          reduce using rule 152
	'>'            reduce using rule 152
	'>='           reduce using rule 152
	'?'            reduce using rule 152
	'['            reduce using rule 152
	'\\from'       reduce using rule 152
	'\\in'         reduce using rule 152
	']'            reduce using rule 152
	'^'            reduce using rule 152
	'^^'           reduce using rule 152
	'for'          reduce using rule 152
	'|'            reduce using rule 152
	'||'           reduce using rule 152
	%eof           reduce using rule 152


State 83

	LexprBinder -> '\\exists' . Binders ';' Lexpr       (rule 114)

	'_Bool'        shift, and enter state 180
	'boolean'      shift, and enter state 181
	'char'         shift, and enter state 182
	'double'       shift, and enter state 183
	'float'        shift, and enter state 184
	'int'          shift, and enter state 185
	'integer'      shift, and enter state 186
	'long'         shift, and enter state 187
	'real'         shift, and enter state 188
	'short'        shift, and enter state 189
	'signed'       shift, and enter state 190
	'unsigned'     shift, and enter state 191
	'void'         shift, and enter state 192
	L_Ident        shift, and enter state 56

	Ident          goto state 239
	Binders        goto state 374
	TypeSpecOFTYPENAMEgoto state 243
	TypeSpecSimple goto state 241

State 84

	Lexpr3 -> '\\false' .                               (rule 135)

	'!='           reduce using rule 135
	'%'            reduce using rule 135
	'&'            reduce using rule 135
	'&&'           reduce using rule 135
	')'            reduce using rule 135
	'*'            reduce using rule 135
	'+'            reduce using rule 135
	','            reduce using rule 135
	'-'            reduce using rule 135
	'-->'          reduce using rule 135
	'..'           reduce using rule 135
	'/'            reduce using rule 135
	':'            reduce using rule 135
	';'            reduce using rule 135
	'<'            reduce using rule 135
	'<-->'         reduce using rule 135
	'<='           reduce using rule 135
	'<==>'         reduce using rule 135
	'=='           reduce using rule 135
	'==>'          reduce using rule 135
	'>'            reduce using rule 135
	'>='           reduce using rule 135
	'?'            reduce using rule 135
	'['            reduce using rule 135
	'\\from'       reduce using rule 135
	'\\in'         reduce using rule 135
	']'            reduce using rule 135
	'^'            reduce using rule 135
	'^^'           reduce using rule 135
	'for'          reduce using rule 135
	'|'            reduce using rule 135
	'||'           reduce using rule 135
	%eof           reduce using rule 135


State 85

	LexprBinder -> '\\forall' . Binders ';' Lexpr       (rule 113)

	'_Bool'        shift, and enter state 180
	'boolean'      shift, and enter state 181
	'char'         shift, and enter state 182
	'double'       shift, and enter state 183
	'float'        shift, and enter state 184
	'int'          shift, and enter state 185
	'integer'      shift, and enter state 186
	'long'         shift, and enter state 187
	'real'         shift, and enter state 188
	'short'        shift, and enter state 189
	'signed'       shift, and enter state 190
	'unsigned'     shift, and enter state 191
	'void'         shift, and enter state 192
	L_Ident        shift, and enter state 56

	Ident          goto state 239
	Binders        goto state 373
	TypeSpecOFTYPENAMEgoto state 243
	TypeSpecSimple goto state 241

State 86

	Lexpr3 -> '\\freeable' . OptLabel1 '(' Lexpr ')'    (rule 149)

	'('            reduce using rule 184
	'{'            shift, and enter state 216

	OptLabel1      goto state 372
	OptLabelList   goto state 220

State 87

	Lexpr3 -> '\\fresh' . OptLabel2 '(' Lexpr ',' Lexpr ')'    (rule 144)

	'('            reduce using rule 184
	'{'            shift, and enter state 216

	OptLabel2      goto state 371
	OptLabelList   goto state 218

State 88

	Lexpr3 -> '\\initialized' . OptLabel1 '(' Lexpr ')'    (rule 142)

	'('            reduce using rule 184
	'{'            shift, and enter state 216

	OptLabel1      goto state 370
	OptLabelList   goto state 220

State 89

	LexprBinder -> '\\lambda' . Binders ';' Lexpr       (rule 115)

	'_Bool'        shift, and enter state 180
	'boolean'      shift, and enter state 181
	'char'         shift, and enter state 182
	'double'       shift, and enter state 183
	'float'        shift, and enter state 184
	'int'          shift, and enter state 185
	'integer'      shift, and enter state 186
	'long'         shift, and enter state 187
	'real'         shift, and enter state 188
	'short'        shift, and enter state 189
	'signed'       shift, and enter state 190
	'unsigned'     shift, and enter state 191
	'void'         shift, and enter state 192
	L_Ident        shift, and enter state 56

	Ident          goto state 239
	Binders        goto state 369
	TypeSpecOFTYPENAMEgoto state 243
	TypeSpecSimple goto state 241

State 90

	Lexpr3 -> '\\null' .                                (rule 156)

	'!='           reduce using rule 156
	'%'            reduce using rule 156
	'&'            reduce using rule 156
	'&&'           reduce using rule 156
	')'            reduce using rule 156
	'*'            reduce using rule 156
	'+'            reduce using rule 156
	','            reduce using rule 156
	'-'            reduce using rule 156
	'-->'          reduce using rule 156
	'..'           reduce using rule 156
	'/'            reduce using rule 156
	':'            reduce using rule 156
	';'            reduce using rule 156
	'<'            reduce using rule 156
	'<-->'         reduce using rule 156
	'<='           reduce using rule 156
	'<==>'         reduce using rule 156
	'=='           reduce using rule 156
	'==>'          reduce using rule 156
	'>'            reduce using rule 156
	'>='           reduce using rule 156
	'?'            reduce using rule 156
	'['            reduce using rule 156
	'\\from'       reduce using rule 156
	'\\in'         reduce using rule 156
	']'            reduce using rule 156
	'^'            reduce using rule 156
	'^^'           reduce using rule 156
	'for'          reduce using rule 156
	'|'            reduce using rule 156
	'||'           reduce using rule 156
	%eof           reduce using rule 156


State 91

	Lexpr3 -> '\\object_pointer' . OptLabel1 '(' Lexpr ')'    (rule 136)

	'('            reduce using rule 184
	'{'            shift, and enter state 216

	OptLabel1      goto state 368
	OptLabelList   goto state 220

State 92

	Lexpr3 -> '\\offset' . OptLabel1 '(' Lexpr ')'      (rule 147)

	'('            reduce using rule 184
	'{'            shift, and enter state 216

	OptLabel1      goto state 367
	OptLabelList   goto state 220

State 93

	Lexpr3 -> '\\old' . '(' Lexpr ')'                   (rule 173)

	'('            shift, and enter state 366


State 94

	Lexpr3 -> '\\pi' .                                  (rule 179)

	'!='           reduce using rule 179
	'%'            reduce using rule 179
	'&'            reduce using rule 179
	'&&'           reduce using rule 179
	')'            reduce using rule 179
	'*'            reduce using rule 179
	'+'            reduce using rule 179
	','            reduce using rule 179
	'-'            reduce using rule 179
	'-->'          reduce using rule 179
	'..'           reduce using rule 179
	'/'            reduce using rule 179
	':'            reduce using rule 179
	';'            reduce using rule 179
	'<'            reduce using rule 179
	'<-->'         reduce using rule 179
	'<='           reduce using rule 179
	'<==>'         reduce using rule 179
	'=='           reduce using rule 179
	'==>'          reduce using rule 179
	'>'            reduce using rule 179
	'>='           reduce using rule 179
	'?'            reduce using rule 179
	'['            reduce using rule 179
	'\\from'       reduce using rule 179
	'\\in'         reduce using rule 179
	']'            reduce using rule 179
	'^'            reduce using rule 179
	'^^'           reduce using rule 179
	'for'          reduce using rule 179
	'|'            reduce using rule 179
	'||'           reduce using rule 179
	%eof           reduce using rule 179


State 95

	Lexpr3 -> '\\register' .                            (rule 153)

	'!='           reduce using rule 153
	'%'            reduce using rule 153
	'&'            reduce using rule 153
	'&&'           reduce using rule 153
	')'            reduce using rule 153
	'*'            reduce using rule 153
	'+'            reduce using rule 153
	','            reduce using rule 153
	'-'            reduce using rule 153
	'-->'          reduce using rule 153
	'..'           reduce using rule 153
	'/'            reduce using rule 153
	':'            reduce using rule 153
	';'            reduce using rule 153
	'<'            reduce using rule 153
	'<-->'         reduce using rule 153
	'<='           reduce using rule 153
	'<==>'         reduce using rule 153
	'=='           reduce using rule 153
	'==>'          reduce using rule 153
	'>'            reduce using rule 153
	'>='           reduce using rule 153
	'?'            reduce using rule 153
	'['            reduce using rule 153
	'\\from'       reduce using rule 153
	'\\in'         reduce using rule 153
	']'            reduce using rule 153
	'^'            reduce using rule 153
	'^^'           reduce using rule 153
	'for'          reduce using rule 153
	'|'            reduce using rule 153
	'||'           reduce using rule 153
	%eof           reduce using rule 153


State 96

	Lexpr3 -> '\\result' .                              (rule 175)

	'!='           reduce using rule 175
	'%'            reduce using rule 175
	'&'            reduce using rule 175
	'&&'           reduce using rule 175
	')'            reduce using rule 175
	'*'            reduce using rule 175
	'+'            reduce using rule 175
	','            reduce using rule 175
	'-'            reduce using rule 175
	'-->'          reduce using rule 175
	'..'           reduce using rule 175
	'/'            reduce using rule 175
	':'            reduce using rule 175
	';'            reduce using rule 175
	'<'            reduce using rule 175
	'<-->'         reduce using rule 175
	'<='           reduce using rule 175
	'<==>'         reduce using rule 175
	'=='           reduce using rule 175
	'==>'          reduce using rule 175
	'>'            reduce using rule 175
	'>='           reduce using rule 175
	'?'            reduce using rule 175
	'['            reduce using rule 175
	'\\from'       reduce using rule 175
	'\\in'         reduce using rule 175
	']'            reduce using rule 175
	'^'            reduce using rule 175
	'^^'           reduce using rule 175
	'for'          reduce using rule 175
	'|'            reduce using rule 175
	'||'           reduce using rule 175
	%eof           reduce using rule 175


State 97

	Lexpr3 -> '\\separated' . '(' ListLexpr ')'         (rule 176)

	'('            shift, and enter state 365


State 98

	Lexpr3 -> '\\static' .                              (rule 154)

	'!='           reduce using rule 154
	'%'            reduce using rule 154
	'&'            reduce using rule 154
	'&&'           reduce using rule 154
	')'            reduce using rule 154
	'*'            reduce using rule 154
	'+'            reduce using rule 154
	','            reduce using rule 154
	'-'            reduce using rule 154
	'-->'          reduce using rule 154
	'..'           reduce using rule 154
	'/'            reduce using rule 154
	':'            reduce using rule 154
	';'            reduce using rule 154
	'<'            reduce using rule 154
	'<-->'         reduce using rule 154
	'<='           reduce using rule 154
	'<==>'         reduce using rule 154
	'=='           reduce using rule 154
	'==>'          reduce using rule 154
	'>'            reduce using rule 154
	'>='           reduce using rule 154
	'?'            reduce using rule 154
	'['            reduce using rule 154
	'\\from'       reduce using rule 154
	'\\in'         reduce using rule 154
	']'            reduce using rule 154
	'^'            reduce using rule 154
	'^^'           reduce using rule 154
	'for'          reduce using rule 154
	'|'            reduce using rule 154
	'||'           reduce using rule 154
	%eof           reduce using rule 154


State 99

	Lexpr3 -> '\\true' .                                (rule 134)

	'!='           reduce using rule 134
	'%'            reduce using rule 134
	'&'            reduce using rule 134
	'&&'           reduce using rule 134
	')'            reduce using rule 134
	'*'            reduce using rule 134
	'+'            reduce using rule 134
	','            reduce using rule 134
	'-'            reduce using rule 134
	'-->'          reduce using rule 134
	'..'           reduce using rule 134
	'/'            reduce using rule 134
	':'            reduce using rule 134
	';'            reduce using rule 134
	'<'            reduce using rule 134
	'<-->'         reduce using rule 134
	'<='           reduce using rule 134
	'<==>'         reduce using rule 134
	'=='           reduce using rule 134
	'==>'          reduce using rule 134
	'>'            reduce using rule 134
	'>='           reduce using rule 134
	'?'            reduce using rule 134
	'['            reduce using rule 134
	'\\from'       reduce using rule 134
	'\\in'         reduce using rule 134
	']'            reduce using rule 134
	'^'            reduce using rule 134
	'^^'           reduce using rule 134
	'for'          reduce using rule 134
	'|'            reduce using rule 134
	'||'           reduce using rule 134
	%eof           reduce using rule 134


State 100

	Lexpr3 -> '\\unallocated' .                         (rule 155)

	'!='           reduce using rule 155
	'%'            reduce using rule 155
	'&'            reduce using rule 155
	'&&'           reduce using rule 155
	')'            reduce using rule 155
	'*'            reduce using rule 155
	'+'            reduce using rule 155
	','            reduce using rule 155
	'-'            reduce using rule 155
	'-->'          reduce using rule 155
	'..'           reduce using rule 155
	'/'            reduce using rule 155
	':'            reduce using rule 155
	';'            reduce using rule 155
	'<'            reduce using rule 155
	'<-->'         reduce using rule 155
	'<='           reduce using rule 155
	'<==>'         reduce using rule 155
	'=='           reduce using rule 155
	'==>'          reduce using rule 155
	'>'            reduce using rule 155
	'>='           reduce using rule 155
	'?'            reduce using rule 155
	'['            reduce using rule 155
	'\\from'       reduce using rule 155
	'\\in'         reduce using rule 155
	']'            reduce using rule 155
	'^'            reduce using rule 155
	'^^'           reduce using rule 155
	'for'          reduce using rule 155
	'|'            reduce using rule 155
	'||'           reduce using rule 155
	%eof           reduce using rule 155


State 101

	Lexpr3 -> '\\valid' . OptLabel1 '(' Lexpr ')'       (rule 137)

	'('            reduce using rule 184
	'{'            shift, and enter state 216

	OptLabel1      goto state 364
	OptLabelList   goto state 220

State 102

	Lexpr3 -> '\\valid_function' . '(' Lexpr ')'        (rule 139)

	'('            shift, and enter state 363


State 103

	Lexpr3 -> '\\valid_index' . OptLabel1 '(' Lexpr ',' Lexpr ')'    (rule 140)

	'('            reduce using rule 184
	'{'            shift, and enter state 216

	OptLabel1      goto state 362
	OptLabelList   goto state 220

State 104

	Lexpr3 -> '\\valid_range' . OptLabel1 '(' Lexpr ',' Lexpr ',' Lexpr ')'    (rule 141)

	'('            reduce using rule 184
	'{'            shift, and enter state 216

	OptLabel1      goto state 361
	OptLabelList   goto state 220

State 105

	Lexpr3 -> '\\valid_read' . OptLabel1 '(' Lexpr ')'    (rule 138)

	'('            reduce using rule 184
	'{'            shift, and enter state 216

	OptLabel1      goto state 360
	OptLabelList   goto state 220

State 106

	FullIdentifier -> 'admit' .                         (rule 209)

	'!='           reduce using rule 209
	'%'            reduce using rule 209
	'&'            reduce using rule 209
	'&&'           reduce using rule 209
	'('            reduce using rule 209
	')'            reduce using rule 209
	'*'            reduce using rule 209
	'+'            reduce using rule 209
	','            reduce using rule 209
	'-'            reduce using rule 209
	'-->'          reduce using rule 209
	'..'           reduce using rule 209
	'/'            reduce using rule 209
	':'            reduce using rule 209
	';'            reduce using rule 209
	'<'            reduce using rule 209
	'<-->'         reduce using rule 209
	'<='           reduce using rule 209
	'<==>'         reduce using rule 209
	'=='           reduce using rule 209
	'==>'          reduce using rule 209
	'>'            reduce using rule 209
	'>='           reduce using rule 209
	'?'            reduce using rule 209
	'['            reduce using rule 209
	'\\from'       reduce using rule 209
	'\\in'         reduce using rule 209
	']'            reduce using rule 209
	'^'            reduce using rule 209
	'^^'           reduce using rule 209
	'for'          reduce using rule 209
	'|'            reduce using rule 209
	'||'           reduce using rule 209
	%eof           reduce using rule 209


State 107

	FullIdentifier -> 'allocates' .                     (rule 210)

	'!='           reduce using rule 210
	'%'            reduce using rule 210
	'&'            reduce using rule 210
	'&&'           reduce using rule 210
	'('            reduce using rule 210
	')'            reduce using rule 210
	'*'            reduce using rule 210
	'+'            reduce using rule 210
	','            reduce using rule 210
	'-'            reduce using rule 210
	'-->'          reduce using rule 210
	'..'           reduce using rule 210
	'/'            reduce using rule 210
	':'            reduce using rule 210
	';'            reduce using rule 210
	'<'            reduce using rule 210
	'<-->'         reduce using rule 210
	'<='           reduce using rule 210
	'<==>'         reduce using rule 210
	'=='           reduce using rule 210
	'==>'          reduce using rule 210
	'>'            reduce using rule 210
	'>='           reduce using rule 210
	'?'            reduce using rule 210
	'['            reduce using rule 210
	'\\from'       reduce using rule 210
	'\\in'         reduce using rule 210
	']'            reduce using rule 210
	'^'            reduce using rule 210
	'^^'           reduce using rule 210
	'for'          reduce using rule 210
	'|'            reduce using rule 210
	'||'           reduce using rule 210
	%eof           reduce using rule 210


State 108

	FullIdentifier -> 'assert' .                        (rule 211)

	'!='           reduce using rule 211
	'%'            reduce using rule 211
	'&'            reduce using rule 211
	'&&'           reduce using rule 211
	'('            reduce using rule 211
	')'            reduce using rule 211
	'*'            reduce using rule 211
	'+'            reduce using rule 211
	','            reduce using rule 211
	'-'            reduce using rule 211
	'-->'          reduce using rule 211
	'..'           reduce using rule 211
	'/'            reduce using rule 211
	':'            reduce using rule 211
	';'            reduce using rule 211
	'<'            reduce using rule 211
	'<-->'         reduce using rule 211
	'<='           reduce using rule 211
	'<==>'         reduce using rule 211
	'=='           reduce using rule 211
	'==>'          reduce using rule 211
	'>'            reduce using rule 211
	'>='           reduce using rule 211
	'?'            reduce using rule 211
	'['            reduce using rule 211
	'\\from'       reduce using rule 211
	'\\in'         reduce using rule 211
	']'            reduce using rule 211
	'^'            reduce using rule 211
	'^^'           reduce using rule 211
	'for'          reduce using rule 211
	'|'            reduce using rule 211
	'||'           reduce using rule 211
	%eof           reduce using rule 211


State 109

	FullIdentifier -> 'assigns' .                       (rule 212)

	'!='           reduce using rule 212
	'%'            reduce using rule 212
	'&'            reduce using rule 212
	'&&'           reduce using rule 212
	'('            reduce using rule 212
	')'            reduce using rule 212
	'*'            reduce using rule 212
	'+'            reduce using rule 212
	','            reduce using rule 212
	'-'            reduce using rule 212
	'-->'          reduce using rule 212
	'..'           reduce using rule 212
	'/'            reduce using rule 212
	':'            reduce using rule 212
	';'            reduce using rule 212
	'<'            reduce using rule 212
	'<-->'         reduce using rule 212
	'<='           reduce using rule 212
	'<==>'         reduce using rule 212
	'=='           reduce using rule 212
	'==>'          reduce using rule 212
	'>'            reduce using rule 212
	'>='           reduce using rule 212
	'?'            reduce using rule 212
	'['            reduce using rule 212
	'\\from'       reduce using rule 212
	'\\in'         reduce using rule 212
	']'            reduce using rule 212
	'^'            reduce using rule 212
	'^^'           reduce using rule 212
	'for'          reduce using rule 212
	'|'            reduce using rule 212
	'||'           reduce using rule 212
	%eof           reduce using rule 212


State 110

	FullIdentifier -> 'assumes' .                       (rule 213)

	'!='           reduce using rule 213
	'%'            reduce using rule 213
	'&'            reduce using rule 213
	'&&'           reduce using rule 213
	'('            reduce using rule 213
	')'            reduce using rule 213
	'*'            reduce using rule 213
	'+'            reduce using rule 213
	','            reduce using rule 213
	'-'            reduce using rule 213
	'-->'          reduce using rule 213
	'..'           reduce using rule 213
	'/'            reduce using rule 213
	':'            reduce using rule 213
	';'            reduce using rule 213
	'<'            reduce using rule 213
	'<-->'         reduce using rule 213
	'<='           reduce using rule 213
	'<==>'         reduce using rule 213
	'=='           reduce using rule 213
	'==>'          reduce using rule 213
	'>'            reduce using rule 213
	'>='           reduce using rule 213
	'?'            reduce using rule 213
	'['            reduce using rule 213
	'\\from'       reduce using rule 213
	'\\in'         reduce using rule 213
	']'            reduce using rule 213
	'^'            reduce using rule 213
	'^^'           reduce using rule 213
	'for'          reduce using rule 213
	'|'            reduce using rule 213
	'||'           reduce using rule 213
	%eof           reduce using rule 213


State 111

	FullIdentifier -> 'at' .                            (rule 214)

	'!='           reduce using rule 214
	'%'            reduce using rule 214
	'&'            reduce using rule 214
	'&&'           reduce using rule 214
	'('            reduce using rule 214
	')'            reduce using rule 214
	'*'            reduce using rule 214
	'+'            reduce using rule 214
	','            reduce using rule 214
	'-'            reduce using rule 214
	'-->'          reduce using rule 214
	'..'           reduce using rule 214
	'/'            reduce using rule 214
	':'            reduce using rule 214
	';'            reduce using rule 214
	'<'            reduce using rule 214
	'<-->'         reduce using rule 214
	'<='           reduce using rule 214
	'<==>'         reduce using rule 214
	'=='           reduce using rule 214
	'==>'          reduce using rule 214
	'>'            reduce using rule 214
	'>='           reduce using rule 214
	'?'            reduce using rule 214
	'['            reduce using rule 214
	'\\from'       reduce using rule 214
	'\\in'         reduce using rule 214
	']'            reduce using rule 214
	'^'            reduce using rule 214
	'^^'           reduce using rule 214
	'for'          reduce using rule 214
	'|'            reduce using rule 214
	'||'           reduce using rule 214
	%eof           reduce using rule 214


State 112

	FullIdentifier -> 'axiom' .                         (rule 215)

	'!='           reduce using rule 215
	'%'            reduce using rule 215
	'&'            reduce using rule 215
	'&&'           reduce using rule 215
	'('            reduce using rule 215
	')'            reduce using rule 215
	'*'            reduce using rule 215
	'+'            reduce using rule 215
	','            reduce using rule 215
	'-'            reduce using rule 215
	'-->'          reduce using rule 215
	'..'           reduce using rule 215
	'/'            reduce using rule 215
	':'            reduce using rule 215
	';'            reduce using rule 215
	'<'            reduce using rule 215
	'<-->'         reduce using rule 215
	'<='           reduce using rule 215
	'<==>'         reduce using rule 215
	'=='           reduce using rule 215
	'==>'          reduce using rule 215
	'>'            reduce using rule 215
	'>='           reduce using rule 215
	'?'            reduce using rule 215
	'['            reduce using rule 215
	'\\from'       reduce using rule 215
	'\\in'         reduce using rule 215
	']'            reduce using rule 215
	'^'            reduce using rule 215
	'^^'           reduce using rule 215
	'for'          reduce using rule 215
	'|'            reduce using rule 215
	'||'           reduce using rule 215
	%eof           reduce using rule 215


State 113

	FullIdentifier -> 'axiomatic' .                     (rule 216)

	'!='           reduce using rule 216
	'%'            reduce using rule 216
	'&'            reduce using rule 216
	'&&'           reduce using rule 216
	'('            reduce using rule 216
	')'            reduce using rule 216
	'*'            reduce using rule 216
	'+'            reduce using rule 216
	','            reduce using rule 216
	'-'            reduce using rule 216
	'-->'          reduce using rule 216
	'..'           reduce using rule 216
	'/'            reduce using rule 216
	':'            reduce using rule 216
	';'            reduce using rule 216
	'<'            reduce using rule 216
	'<-->'         reduce using rule 216
	'<='           reduce using rule 216
	'<==>'         reduce using rule 216
	'=='           reduce using rule 216
	'==>'          reduce using rule 216
	'>'            reduce using rule 216
	'>='           reduce using rule 216
	'?'            reduce using rule 216
	'['            reduce using rule 216
	'\\from'       reduce using rule 216
	'\\in'         reduce using rule 216
	']'            reduce using rule 216
	'^'            reduce using rule 216
	'^^'           reduce using rule 216
	'for'          reduce using rule 216
	'|'            reduce using rule 216
	'||'           reduce using rule 216
	%eof           reduce using rule 216


State 114

	FullIdentifier -> 'behavior' .                      (rule 217)

	'!='           reduce using rule 217
	'%'            reduce using rule 217
	'&'            reduce using rule 217
	'&&'           reduce using rule 217
	'('            reduce using rule 217
	')'            reduce using rule 217
	'*'            reduce using rule 217
	'+'            reduce using rule 217
	','            reduce using rule 217
	'-'            reduce using rule 217
	'-->'          reduce using rule 217
	'..'           reduce using rule 217
	'/'            reduce using rule 217
	':'            reduce using rule 217
	';'            reduce using rule 217
	'<'            reduce using rule 217
	'<-->'         reduce using rule 217
	'<='           reduce using rule 217
	'<==>'         reduce using rule 217
	'=='           reduce using rule 217
	'==>'          reduce using rule 217
	'>'            reduce using rule 217
	'>='           reduce using rule 217
	'?'            reduce using rule 217
	'['            reduce using rule 217
	'\\from'       reduce using rule 217
	'\\in'         reduce using rule 217
	']'            reduce using rule 217
	'^'            reduce using rule 217
	'^^'           reduce using rule 217
	'for'          reduce using rule 217
	'|'            reduce using rule 217
	'||'           reduce using rule 217
	%eof           reduce using rule 217


State 115

	Identifier -> 'behaviors' .                         (rule 251)

	'!='           reduce using rule 251
	'%'            reduce using rule 251
	'&'            reduce using rule 251
	'&&'           reduce using rule 251
	'('            reduce using rule 251
	')'            reduce using rule 251
	'*'            reduce using rule 251
	'+'            reduce using rule 251
	','            reduce using rule 251
	'-'            reduce using rule 251
	'-->'          reduce using rule 251
	'..'           reduce using rule 251
	'/'            reduce using rule 251
	':'            reduce using rule 251
	';'            reduce using rule 251
	'<'            reduce using rule 251
	'<-->'         reduce using rule 251
	'<='           reduce using rule 251
	'<==>'         reduce using rule 251
	'=='           reduce using rule 251
	'==>'          reduce using rule 251
	'>'            reduce using rule 251
	'>='           reduce using rule 251
	'?'            reduce using rule 251
	'['            reduce using rule 251
	'\\from'       reduce using rule 251
	'\\in'         reduce using rule 251
	']'            reduce using rule 251
	'^'            reduce using rule 251
	'^^'           reduce using rule 251
	'for'          reduce using rule 251
	'|'            reduce using rule 251
	'||'           reduce using rule 251
	'}'            reduce using rule 251
	%eof           reduce using rule 251


State 116

	FullIdentifier -> 'breaks' .                        (rule 218)

	'!='           reduce using rule 218
	'%'            reduce using rule 218
	'&'            reduce using rule 218
	'&&'           reduce using rule 218
	'('            reduce using rule 218
	')'            reduce using rule 218
	'*'            reduce using rule 218
	'+'            reduce using rule 218
	','            reduce using rule 218
	'-'            reduce using rule 218
	'-->'          reduce using rule 218
	'..'           reduce using rule 218
	'/'            reduce using rule 218
	':'            reduce using rule 218
	';'            reduce using rule 218
	'<'            reduce using rule 218
	'<-->'         reduce using rule 218
	'<='           reduce using rule 218
	'<==>'         reduce using rule 218
	'=='           reduce using rule 218
	'==>'          reduce using rule 218
	'>'            reduce using rule 218
	'>='           reduce using rule 218
	'?'            reduce using rule 218
	'['            reduce using rule 218
	'\\from'       reduce using rule 218
	'\\in'         reduce using rule 218
	']'            reduce using rule 218
	'^'            reduce using rule 218
	'^^'           reduce using rule 218
	'for'          reduce using rule 218
	'|'            reduce using rule 218
	'||'           reduce using rule 218
	%eof           reduce using rule 218


State 117

	FullIdentifier -> 'check' .                         (rule 219)

	'!='           reduce using rule 219
	'%'            reduce using rule 219
	'&'            reduce using rule 219
	'&&'           reduce using rule 219
	'('            reduce using rule 219
	')'            reduce using rule 219
	'*'            reduce using rule 219
	'+'            reduce using rule 219
	','            reduce using rule 219
	'-'            reduce using rule 219
	'-->'          reduce using rule 219
	'..'           reduce using rule 219
	'/'            reduce using rule 219
	':'            reduce using rule 219
	';'            reduce using rule 219
	'<'            reduce using rule 219
	'<-->'         reduce using rule 219
	'<='           reduce using rule 219
	'<==>'         reduce using rule 219
	'=='           reduce using rule 219
	'==>'          reduce using rule 219
	'>'            reduce using rule 219
	'>='           reduce using rule 219
	'?'            reduce using rule 219
	'['            reduce using rule 219
	'\\from'       reduce using rule 219
	'\\in'         reduce using rule 219
	']'            reduce using rule 219
	'^'            reduce using rule 219
	'^^'           reduce using rule 219
	'for'          reduce using rule 219
	'|'            reduce using rule 219
	'||'           reduce using rule 219
	%eof           reduce using rule 219


State 118

	FullIdentifier -> 'complete' .                      (rule 220)

	'!='           reduce using rule 220
	'%'            reduce using rule 220
	'&'            reduce using rule 220
	'&&'           reduce using rule 220
	'('            reduce using rule 220
	')'            reduce using rule 220
	'*'            reduce using rule 220
	'+'            reduce using rule 220
	','            reduce using rule 220
	'-'            reduce using rule 220
	'-->'          reduce using rule 220
	'..'           reduce using rule 220
	'/'            reduce using rule 220
	':'            reduce using rule 220
	';'            reduce using rule 220
	'<'            reduce using rule 220
	'<-->'         reduce using rule 220
	'<='           reduce using rule 220
	'<==>'         reduce using rule 220
	'=='           reduce using rule 220
	'==>'          reduce using rule 220
	'>'            reduce using rule 220
	'>='           reduce using rule 220
	'?'            reduce using rule 220
	'['            reduce using rule 220
	'\\from'       reduce using rule 220
	'\\in'         reduce using rule 220
	']'            reduce using rule 220
	'^'            reduce using rule 220
	'^^'           reduce using rule 220
	'for'          reduce using rule 220
	'|'            reduce using rule 220
	'||'           reduce using rule 220
	%eof           reduce using rule 220


State 119

	FullIdentifier -> 'continues' .                     (rule 221)

	'!='           reduce using rule 221
	'%'            reduce using rule 221
	'&'            reduce using rule 221
	'&&'           reduce using rule 221
	'('            reduce using rule 221
	')'            reduce using rule 221
	'*'            reduce using rule 221
	'+'            reduce using rule 221
	','            reduce using rule 221
	'-'            reduce using rule 221
	'-->'          reduce using rule 221
	'..'           reduce using rule 221
	'/'            reduce using rule 221
	':'            reduce using rule 221
	';'            reduce using rule 221
	'<'            reduce using rule 221
	'<-->'         reduce using rule 221
	'<='           reduce using rule 221
	'<==>'         reduce using rule 221
	'=='           reduce using rule 221
	'==>'          reduce using rule 221
	'>'            reduce using rule 221
	'>='           reduce using rule 221
	'?'            reduce using rule 221
	'['            reduce using rule 221
	'\\from'       reduce using rule 221
	'\\in'         reduce using rule 221
	']'            reduce using rule 221
	'^'            reduce using rule 221
	'^^'           reduce using rule 221
	'for'          reduce using rule 221
	'|'            reduce using rule 221
	'||'           reduce using rule 221
	%eof           reduce using rule 221


State 120

	FullIdentifier -> 'contract' .                      (rule 222)

	'!='           reduce using rule 222
	'%'            reduce using rule 222
	'&'            reduce using rule 222
	'&&'           reduce using rule 222
	'('            reduce using rule 222
	')'            reduce using rule 222
	'*'            reduce using rule 222
	'+'            reduce using rule 222
	','            reduce using rule 222
	'-'            reduce using rule 222
	'-->'          reduce using rule 222
	'..'           reduce using rule 222
	'/'            reduce using rule 222
	':'            reduce using rule 222
	';'            reduce using rule 222
	'<'            reduce using rule 222
	'<-->'         reduce using rule 222
	'<='           reduce using rule 222
	'<==>'         reduce using rule 222
	'=='           reduce using rule 222
	'==>'          reduce using rule 222
	'>'            reduce using rule 222
	'>='           reduce using rule 222
	'?'            reduce using rule 222
	'['            reduce using rule 222
	'\\from'       reduce using rule 222
	'\\in'         reduce using rule 222
	']'            reduce using rule 222
	'^'            reduce using rule 222
	'^^'           reduce using rule 222
	'for'          reduce using rule 222
	'|'            reduce using rule 222
	'||'           reduce using rule 222
	%eof           reduce using rule 222


State 121

	FullIdentifier -> 'decreases' .                     (rule 223)

	'!='           reduce using rule 223
	'%'            reduce using rule 223
	'&'            reduce using rule 223
	'&&'           reduce using rule 223
	'('            reduce using rule 223
	')'            reduce using rule 223
	'*'            reduce using rule 223
	'+'            reduce using rule 223
	','            reduce using rule 223
	'-'            reduce using rule 223
	'-->'          reduce using rule 223
	'..'           reduce using rule 223
	'/'            reduce using rule 223
	':'            reduce using rule 223
	';'            reduce using rule 223
	'<'            reduce using rule 223
	'<-->'         reduce using rule 223
	'<='           reduce using rule 223
	'<==>'         reduce using rule 223
	'=='           reduce using rule 223
	'==>'          reduce using rule 223
	'>'            reduce using rule 223
	'>='           reduce using rule 223
	'?'            reduce using rule 223
	'['            reduce using rule 223
	'\\from'       reduce using rule 223
	'\\in'         reduce using rule 223
	']'            reduce using rule 223
	'^'            reduce using rule 223
	'^^'           reduce using rule 223
	'for'          reduce using rule 223
	'|'            reduce using rule 223
	'||'           reduce using rule 223
	%eof           reduce using rule 223


State 122

	FullIdentifier -> 'disjoint' .                      (rule 224)

	'!='           reduce using rule 224
	'%'            reduce using rule 224
	'&'            reduce using rule 224
	'&&'           reduce using rule 224
	'('            reduce using rule 224
	')'            reduce using rule 224
	'*'            reduce using rule 224
	'+'            reduce using rule 224
	','            reduce using rule 224
	'-'            reduce using rule 224
	'-->'          reduce using rule 224
	'..'           reduce using rule 224
	'/'            reduce using rule 224
	':'            reduce using rule 224
	';'            reduce using rule 224
	'<'            reduce using rule 224
	'<-->'         reduce using rule 224
	'<='           reduce using rule 224
	'<==>'         reduce using rule 224
	'=='           reduce using rule 224
	'==>'          reduce using rule 224
	'>'            reduce using rule 224
	'>='           reduce using rule 224
	'?'            reduce using rule 224
	'['            reduce using rule 224
	'\\from'       reduce using rule 224
	'\\in'         reduce using rule 224
	']'            reduce using rule 224
	'^'            reduce using rule 224
	'^^'           reduce using rule 224
	'for'          reduce using rule 224
	'|'            reduce using rule 224
	'||'           reduce using rule 224
	%eof           reduce using rule 224


State 123

	FullIdentifier -> 'ensures' .                       (rule 225)

	'!='           reduce using rule 225
	'%'            reduce using rule 225
	'&'            reduce using rule 225
	'&&'           reduce using rule 225
	'('            reduce using rule 225
	')'            reduce using rule 225
	'*'            reduce using rule 225
	'+'            reduce using rule 225
	','            reduce using rule 225
	'-'            reduce using rule 225
	'-->'          reduce using rule 225
	'..'           reduce using rule 225
	'/'            reduce using rule 225
	':'            reduce using rule 225
	';'            reduce using rule 225
	'<'            reduce using rule 225
	'<-->'         reduce using rule 225
	'<='           reduce using rule 225
	'<==>'         reduce using rule 225
	'=='           reduce using rule 225
	'==>'          reduce using rule 225
	'>'            reduce using rule 225
	'>='           reduce using rule 225
	'?'            reduce using rule 225
	'['            reduce using rule 225
	'\\from'       reduce using rule 225
	'\\in'         reduce using rule 225
	']'            reduce using rule 225
	'^'            reduce using rule 225
	'^^'           reduce using rule 225
	'for'          reduce using rule 225
	'|'            reduce using rule 225
	'||'           reduce using rule 225
	%eof           reduce using rule 225


State 124

	FullIdentifier -> 'exits' .                         (rule 226)

	'!='           reduce using rule 226
	'%'            reduce using rule 226
	'&'            reduce using rule 226
	'&&'           reduce using rule 226
	'('            reduce using rule 226
	')'            reduce using rule 226
	'*'            reduce using rule 226
	'+'            reduce using rule 226
	','            reduce using rule 226
	'-'            reduce using rule 226
	'-->'          reduce using rule 226
	'..'           reduce using rule 226
	'/'            reduce using rule 226
	':'            reduce using rule 226
	';'            reduce using rule 226
	'<'            reduce using rule 226
	'<-->'         reduce using rule 226
	'<='           reduce using rule 226
	'<==>'         reduce using rule 226
	'=='           reduce using rule 226
	'==>'          reduce using rule 226
	'>'            reduce using rule 226
	'>='           reduce using rule 226
	'?'            reduce using rule 226
	'['            reduce using rule 226
	'\\from'       reduce using rule 226
	'\\in'         reduce using rule 226
	']'            reduce using rule 226
	'^'            reduce using rule 226
	'^^'           reduce using rule 226
	'for'          reduce using rule 226
	'|'            reduce using rule 226
	'||'           reduce using rule 226
	%eof           reduce using rule 226


State 125

	FullIdentifier -> 'frees' .                         (rule 227)

	'!='           reduce using rule 227
	'%'            reduce using rule 227
	'&'            reduce using rule 227
	'&&'           reduce using rule 227
	'('            reduce using rule 227
	')'            reduce using rule 227
	'*'            reduce using rule 227
	'+'            reduce using rule 227
	','            reduce using rule 227
	'-'            reduce using rule 227
	'-->'          reduce using rule 227
	'..'           reduce using rule 227
	'/'            reduce using rule 227
	':'            reduce using rule 227
	';'            reduce using rule 227
	'<'            reduce using rule 227
	'<-->'         reduce using rule 227
	'<='           reduce using rule 227
	'<==>'         reduce using rule 227
	'=='           reduce using rule 227
	'==>'          reduce using rule 227
	'>'            reduce using rule 227
	'>='           reduce using rule 227
	'?'            reduce using rule 227
	'['            reduce using rule 227
	'\\from'       reduce using rule 227
	'\\in'         reduce using rule 227
	']'            reduce using rule 227
	'^'            reduce using rule 227
	'^^'           reduce using rule 227
	'for'          reduce using rule 227
	'|'            reduce using rule 227
	'||'           reduce using rule 227
	%eof           reduce using rule 227


State 126

	FullIdentifier -> 'function' .                      (rule 228)

	'!='           reduce using rule 228
	'%'            reduce using rule 228
	'&'            reduce using rule 228
	'&&'           reduce using rule 228
	'('            reduce using rule 228
	')'            reduce using rule 228
	'*'            reduce using rule 228
	'+'            reduce using rule 228
	','            reduce using rule 228
	'-'            reduce using rule 228
	'-->'          reduce using rule 228
	'..'           reduce using rule 228
	'/'            reduce using rule 228
	':'            reduce using rule 228
	';'            reduce using rule 228
	'<'            reduce using rule 228
	'<-->'         reduce using rule 228
	'<='           reduce using rule 228
	'<==>'         reduce using rule 228
	'=='           reduce using rule 228
	'==>'          reduce using rule 228
	'>'            reduce using rule 228
	'>='           reduce using rule 228
	'?'            reduce using rule 228
	'['            reduce using rule 228
	'\\from'       reduce using rule 228
	'\\in'         reduce using rule 228
	']'            reduce using rule 228
	'^'            reduce using rule 228
	'^^'           reduce using rule 228
	'for'          reduce using rule 228
	'|'            reduce using rule 228
	'||'           reduce using rule 228
	%eof           reduce using rule 228


State 127

	FullIdentifier -> 'global' .                        (rule 229)

	'!='           reduce using rule 229
	'%'            reduce using rule 229
	'&'            reduce using rule 229
	'&&'           reduce using rule 229
	'('            reduce using rule 229
	')'            reduce using rule 229
	'*'            reduce using rule 229
	'+'            reduce using rule 229
	','            reduce using rule 229
	'-'            reduce using rule 229
	'-->'          reduce using rule 229
	'..'           reduce using rule 229
	'/'            reduce using rule 229
	':'            reduce using rule 229
	';'            reduce using rule 229
	'<'            reduce using rule 229
	'<-->'         reduce using rule 229
	'<='           reduce using rule 229
	'<==>'         reduce using rule 229
	'=='           reduce using rule 229
	'==>'          reduce using rule 229
	'>'            reduce using rule 229
	'>='           reduce using rule 229
	'?'            reduce using rule 229
	'['            reduce using rule 229
	'\\from'       reduce using rule 229
	'\\in'         reduce using rule 229
	']'            reduce using rule 229
	'^'            reduce using rule 229
	'^^'           reduce using rule 229
	'for'          reduce using rule 229
	'|'            reduce using rule 229
	'||'           reduce using rule 229
	%eof           reduce using rule 229


State 128

	FullIdentifier -> 'impact' .                        (rule 230)

	'!='           reduce using rule 230
	'%'            reduce using rule 230
	'&'            reduce using rule 230
	'&&'           reduce using rule 230
	'('            reduce using rule 230
	')'            reduce using rule 230
	'*'            reduce using rule 230
	'+'            reduce using rule 230
	','            reduce using rule 230
	'-'            reduce using rule 230
	'-->'          reduce using rule 230
	'..'           reduce using rule 230
	'/'            reduce using rule 230
	':'            reduce using rule 230
	';'            reduce using rule 230
	'<'            reduce using rule 230
	'<-->'         reduce using rule 230
	'<='           reduce using rule 230
	'<==>'         reduce using rule 230
	'=='           reduce using rule 230
	'==>'          reduce using rule 230
	'>'            reduce using rule 230
	'>='           reduce using rule 230
	'?'            reduce using rule 230
	'['            reduce using rule 230
	'\\from'       reduce using rule 230
	'\\in'         reduce using rule 230
	']'            reduce using rule 230
	'^'            reduce using rule 230
	'^^'           reduce using rule 230
	'for'          reduce using rule 230
	'|'            reduce using rule 230
	'||'           reduce using rule 230
	%eof           reduce using rule 230


State 129

	FullIdentifier -> 'include' .                       (rule 232)

	'!='           reduce using rule 232
	'%'            reduce using rule 232
	'&'            reduce using rule 232
	'&&'           reduce using rule 232
	'('            reduce using rule 232
	')'            reduce using rule 232
	'*'            reduce using rule 232
	'+'            reduce using rule 232
	','            reduce using rule 232
	'-'            reduce using rule 232
	'-->'          reduce using rule 232
	'..'           reduce using rule 232
	'/'            reduce using rule 232
	':'            reduce using rule 232
	';'            reduce using rule 232
	'<'            reduce using rule 232
	'<-->'         reduce using rule 232
	'<='           reduce using rule 232
	'<==>'         reduce using rule 232
	'=='           reduce using rule 232
	'==>'          reduce using rule 232
	'>'            reduce using rule 232
	'>='           reduce using rule 232
	'?'            reduce using rule 232
	'['            reduce using rule 232
	'\\from'       reduce using rule 232
	'\\in'         reduce using rule 232
	']'            reduce using rule 232
	'^'            reduce using rule 232
	'^^'           reduce using rule 232
	'for'          reduce using rule 232
	'|'            reduce using rule 232
	'||'           reduce using rule 232
	%eof           reduce using rule 232


State 130

	FullIdentifier -> 'inductive' .                     (rule 231)

	'!='           reduce using rule 231
	'%'            reduce using rule 231
	'&'            reduce using rule 231
	'&&'           reduce using rule 231
	'('            reduce using rule 231
	')'            reduce using rule 231
	'*'            reduce using rule 231
	'+'            reduce using rule 231
	','            reduce using rule 231
	'-'            reduce using rule 231
	'-->'          reduce using rule 231
	'..'           reduce using rule 231
	'/'            reduce using rule 231
	':'            reduce using rule 231
	';'            reduce using rule 231
	'<'            reduce using rule 231
	'<-->'         reduce using rule 231
	'<='           reduce using rule 231
	'<==>'         reduce using rule 231
	'=='           reduce using rule 231
	'==>'          reduce using rule 231
	'>'            reduce using rule 231
	'>='           reduce using rule 231
	'?'            reduce using rule 231
	'['            reduce using rule 231
	'\\from'       reduce using rule 231
	'\\in'         reduce using rule 231
	']'            reduce using rule 231
	'^'            reduce using rule 231
	'^^'           reduce using rule 231
	'for'          reduce using rule 231
	'|'            reduce using rule 231
	'||'           reduce using rule 231
	%eof           reduce using rule 231


State 131

	FullIdentifier -> 'invariant' .                     (rule 233)

	'!='           reduce using rule 233
	'%'            reduce using rule 233
	'&'            reduce using rule 233
	'&&'           reduce using rule 233
	'('            reduce using rule 233
	')'            reduce using rule 233
	'*'            reduce using rule 233
	'+'            reduce using rule 233
	','            reduce using rule 233
	'-'            reduce using rule 233
	'-->'          reduce using rule 233
	'..'           reduce using rule 233
	'/'            reduce using rule 233
	':'            reduce using rule 233
	';'            reduce using rule 233
	'<'            reduce using rule 233
	'<-->'         reduce using rule 233
	'<='           reduce using rule 233
	'<==>'         reduce using rule 233
	'=='           reduce using rule 233
	'==>'          reduce using rule 233
	'>'            reduce using rule 233
	'>='           reduce using rule 233
	'?'            reduce using rule 233
	'['            reduce using rule 233
	'\\from'       reduce using rule 233
	'\\in'         reduce using rule 233
	']'            reduce using rule 233
	'^'            reduce using rule 233
	'^^'           reduce using rule 233
	'for'          reduce using rule 233
	'|'            reduce using rule 233
	'||'           reduce using rule 233
	%eof           reduce using rule 233


State 132

	Identifier -> 'label' .                             (rule 252)

	'!='           reduce using rule 252
	'%'            reduce using rule 252
	'&'            reduce using rule 252
	'&&'           reduce using rule 252
	'('            reduce using rule 252
	')'            reduce using rule 252
	'*'            reduce using rule 252
	'+'            reduce using rule 252
	','            reduce using rule 252
	'-'            reduce using rule 252
	'-->'          reduce using rule 252
	'..'           reduce using rule 252
	'/'            reduce using rule 252
	':'            reduce using rule 252
	';'            reduce using rule 252
	'<'            reduce using rule 252
	'<-->'         reduce using rule 252
	'<='           reduce using rule 252
	'<==>'         reduce using rule 252
	'=='           reduce using rule 252
	'==>'          reduce using rule 252
	'>'            reduce using rule 252
	'>='           reduce using rule 252
	'?'            reduce using rule 252
	'['            reduce using rule 252
	'\\from'       reduce using rule 252
	'\\in'         reduce using rule 252
	']'            reduce using rule 252
	'^'            reduce using rule 252
	'^^'           reduce using rule 252
	'for'          reduce using rule 252
	'|'            reduce using rule 252
	'||'           reduce using rule 252
	'}'            reduce using rule 252
	%eof           reduce using rule 252


State 133

	FullIdentifier -> 'lemma' .                         (rule 234)

	'!='           reduce using rule 234
	'%'            reduce using rule 234
	'&'            reduce using rule 234
	'&&'           reduce using rule 234
	'('            reduce using rule 234
	')'            reduce using rule 234
	'*'            reduce using rule 234
	'+'            reduce using rule 234
	','            reduce using rule 234
	'-'            reduce using rule 234
	'-->'          reduce using rule 234
	'..'           reduce using rule 234
	'/'            reduce using rule 234
	':'            reduce using rule 234
	';'            reduce using rule 234
	'<'            reduce using rule 234
	'<-->'         reduce using rule 234
	'<='           reduce using rule 234
	'<==>'         reduce using rule 234
	'=='           reduce using rule 234
	'==>'          reduce using rule 234
	'>'            reduce using rule 234
	'>='           reduce using rule 234
	'?'            reduce using rule 234
	'['            reduce using rule 234
	'\\from'       reduce using rule 234
	'\\in'         reduce using rule 234
	']'            reduce using rule 234
	'^'            reduce using rule 234
	'^^'           reduce using rule 234
	'for'          reduce using rule 234
	'|'            reduce using rule 234
	'||'           reduce using rule 234
	%eof           reduce using rule 234


State 134

	FullIdentifier -> 'let' .                           (rule 235)

	'!='           reduce using rule 235
	'%'            reduce using rule 235
	'&'            reduce using rule 235
	'&&'           reduce using rule 235
	'('            reduce using rule 235
	')'            reduce using rule 235
	'*'            reduce using rule 235
	'+'            reduce using rule 235
	','            reduce using rule 235
	'-'            reduce using rule 235
	'-->'          reduce using rule 235
	'..'           reduce using rule 235
	'/'            reduce using rule 235
	':'            reduce using rule 235
	';'            reduce using rule 235
	'<'            reduce using rule 235
	'<-->'         reduce using rule 235
	'<='           reduce using rule 235
	'<==>'         reduce using rule 235
	'=='           reduce using rule 235
	'==>'          reduce using rule 235
	'>'            reduce using rule 235
	'>='           reduce using rule 235
	'?'            reduce using rule 235
	'['            reduce using rule 235
	'\\from'       reduce using rule 235
	'\\in'         reduce using rule 235
	']'            reduce using rule 235
	'^'            reduce using rule 235
	'^^'           reduce using rule 235
	'for'          reduce using rule 235
	'|'            reduce using rule 235
	'||'           reduce using rule 235
	%eof           reduce using rule 235


State 135

	FullIdentifier -> 'logic' .                         (rule 236)

	'!='           reduce using rule 236
	'%'            reduce using rule 236
	'&'            reduce using rule 236
	'&&'           reduce using rule 236
	'('            reduce using rule 236
	')'            reduce using rule 236
	'*'            reduce using rule 236
	'+'            reduce using rule 236
	','            reduce using rule 236
	'-'            reduce using rule 236
	'-->'          reduce using rule 236
	'..'           reduce using rule 236
	'/'            reduce using rule 236
	':'            reduce using rule 236
	';'            reduce using rule 236
	'<'            reduce using rule 236
	'<-->'         reduce using rule 236
	'<='           reduce using rule 236
	'<==>'         reduce using rule 236
	'=='           reduce using rule 236
	'==>'          reduce using rule 236
	'>'            reduce using rule 236
	'>='           reduce using rule 236
	'?'            reduce using rule 236
	'['            reduce using rule 236
	'\\from'       reduce using rule 236
	'\\in'         reduce using rule 236
	']'            reduce using rule 236
	'^'            reduce using rule 236
	'^^'           reduce using rule 236
	'for'          reduce using rule 236
	'|'            reduce using rule 236
	'||'           reduce using rule 236
	%eof           reduce using rule 236


State 136

	FullIdentifier -> 'loop' .                          (rule 237)

	'!='           reduce using rule 237
	'%'            reduce using rule 237
	'&'            reduce using rule 237
	'&&'           reduce using rule 237
	'('            reduce using rule 237
	')'            reduce using rule 237
	'*'            reduce using rule 237
	'+'            reduce using rule 237
	','            reduce using rule 237
	'-'            reduce using rule 237
	'-->'          reduce using rule 237
	'..'           reduce using rule 237
	'/'            reduce using rule 237
	':'            reduce using rule 237
	';'            reduce using rule 237
	'<'            reduce using rule 237
	'<-->'         reduce using rule 237
	'<='           reduce using rule 237
	'<==>'         reduce using rule 237
	'=='           reduce using rule 237
	'==>'          reduce using rule 237
	'>'            reduce using rule 237
	'>='           reduce using rule 237
	'?'            reduce using rule 237
	'['            reduce using rule 237
	'\\from'       reduce using rule 237
	'\\in'         reduce using rule 237
	']'            reduce using rule 237
	'^'            reduce using rule 237
	'^^'           reduce using rule 237
	'for'          reduce using rule 237
	'|'            reduce using rule 237
	'||'           reduce using rule 237
	%eof           reduce using rule 237


State 137

	FullIdentifier -> 'model' .                         (rule 238)

	'!='           reduce using rule 238
	'%'            reduce using rule 238
	'&'            reduce using rule 238
	'&&'           reduce using rule 238
	'('            reduce using rule 238
	')'            reduce using rule 238
	'*'            reduce using rule 238
	'+'            reduce using rule 238
	','            reduce using rule 238
	'-'            reduce using rule 238
	'-->'          reduce using rule 238
	'..'           reduce using rule 238
	'/'            reduce using rule 238
	':'            reduce using rule 238
	';'            reduce using rule 238
	'<'            reduce using rule 238
	'<-->'         reduce using rule 238
	'<='           reduce using rule 238
	'<==>'         reduce using rule 238
	'=='           reduce using rule 238
	'==>'          reduce using rule 238
	'>'            reduce using rule 238
	'>='           reduce using rule 238
	'?'            reduce using rule 238
	'['            reduce using rule 238
	'\\from'       reduce using rule 238
	'\\in'         reduce using rule 238
	']'            reduce using rule 238
	'^'            reduce using rule 238
	'^^'           reduce using rule 238
	'for'          reduce using rule 238
	'|'            reduce using rule 238
	'||'           reduce using rule 238
	%eof           reduce using rule 238


State 138

	FullIdentifier -> 'module' .                        (rule 239)

	'!='           reduce using rule 239
	'%'            reduce using rule 239
	'&'            reduce using rule 239
	'&&'           reduce using rule 239
	'('            reduce using rule 239
	')'            reduce using rule 239
	'*'            reduce using rule 239
	'+'            reduce using rule 239
	','            reduce using rule 239
	'-'            reduce using rule 239
	'-->'          reduce using rule 239
	'..'           reduce using rule 239
	'/'            reduce using rule 239
	':'            reduce using rule 239
	';'            reduce using rule 239
	'<'            reduce using rule 239
	'<-->'         reduce using rule 239
	'<='           reduce using rule 239
	'<==>'         reduce using rule 239
	'=='           reduce using rule 239
	'==>'          reduce using rule 239
	'>'            reduce using rule 239
	'>='           reduce using rule 239
	'?'            reduce using rule 239
	'['            reduce using rule 239
	'\\from'       reduce using rule 239
	'\\in'         reduce using rule 239
	']'            reduce using rule 239
	'^'            reduce using rule 239
	'^^'           reduce using rule 239
	'for'          reduce using rule 239
	'|'            reduce using rule 239
	'||'           reduce using rule 239
	%eof           reduce using rule 239


State 139

	FullIdentifier -> 'pragma' .                        (rule 240)

	'!='           reduce using rule 240
	'%'            reduce using rule 240
	'&'            reduce using rule 240
	'&&'           reduce using rule 240
	'('            reduce using rule 240
	')'            reduce using rule 240
	'*'            reduce using rule 240
	'+'            reduce using rule 240
	','            reduce using rule 240
	'-'            reduce using rule 240
	'-->'          reduce using rule 240
	'..'           reduce using rule 240
	'/'            reduce using rule 240
	':'            reduce using rule 240
	';'            reduce using rule 240
	'<'            reduce using rule 240
	'<-->'         reduce using rule 240
	'<='           reduce using rule 240
	'<==>'         reduce using rule 240
	'=='           reduce using rule 240
	'==>'          reduce using rule 240
	'>'            reduce using rule 240
	'>='           reduce using rule 240
	'?'            reduce using rule 240
	'['            reduce using rule 240
	'\\from'       reduce using rule 240
	'\\in'         reduce using rule 240
	']'            reduce using rule 240
	'^'            reduce using rule 240
	'^^'           reduce using rule 240
	'for'          reduce using rule 240
	'|'            reduce using rule 240
	'||'           reduce using rule 240
	%eof           reduce using rule 240


State 140

	FullIdentifier -> 'predicate' .                     (rule 241)

	'!='           reduce using rule 241
	'%'            reduce using rule 241
	'&'            reduce using rule 241
	'&&'           reduce using rule 241
	'('            reduce using rule 241
	')'            reduce using rule 241
	'*'            reduce using rule 241
	'+'            reduce using rule 241
	','            reduce using rule 241
	'-'            reduce using rule 241
	'-->'          reduce using rule 241
	'..'           reduce using rule 241
	'/'            reduce using rule 241
	':'            reduce using rule 241
	';'            reduce using rule 241
	'<'            reduce using rule 241
	'<-->'         reduce using rule 241
	'<='           reduce using rule 241
	'<==>'         reduce using rule 241
	'=='           reduce using rule 241
	'==>'          reduce using rule 241
	'>'            reduce using rule 241
	'>='           reduce using rule 241
	'?'            reduce using rule 241
	'['            reduce using rule 241
	'\\from'       reduce using rule 241
	'\\in'         reduce using rule 241
	']'            reduce using rule 241
	'^'            reduce using rule 241
	'^^'           reduce using rule 241
	'for'          reduce using rule 241
	'|'            reduce using rule 241
	'||'           reduce using rule 241
	%eof           reduce using rule 241


State 141

	Identifier -> 'reads' .                             (rule 253)

	'!='           reduce using rule 253
	'%'            reduce using rule 253
	'&'            reduce using rule 253
	'&&'           reduce using rule 253
	'('            reduce using rule 253
	')'            reduce using rule 253
	'*'            reduce using rule 253
	'+'            reduce using rule 253
	','            reduce using rule 253
	'-'            reduce using rule 253
	'-->'          reduce using rule 253
	'..'           reduce using rule 253
	'/'            reduce using rule 253
	':'            reduce using rule 253
	';'            reduce using rule 253
	'<'            reduce using rule 253
	'<-->'         reduce using rule 253
	'<='           reduce using rule 253
	'<==>'         reduce using rule 253
	'=='           reduce using rule 253
	'==>'          reduce using rule 253
	'>'            reduce using rule 253
	'>='           reduce using rule 253
	'?'            reduce using rule 253
	'['            reduce using rule 253
	'\\from'       reduce using rule 253
	'\\in'         reduce using rule 253
	']'            reduce using rule 253
	'^'            reduce using rule 253
	'^^'           reduce using rule 253
	'for'          reduce using rule 253
	'|'            reduce using rule 253
	'||'           reduce using rule 253
	'}'            reduce using rule 253
	%eof           reduce using rule 253


State 142

	FullIdentifier -> 'requires' .                      (rule 242)

	'!='           reduce using rule 242
	'%'            reduce using rule 242
	'&'            reduce using rule 242
	'&&'           reduce using rule 242
	'('            reduce using rule 242
	')'            reduce using rule 242
	'*'            reduce using rule 242
	'+'            reduce using rule 242
	','            reduce using rule 242
	'-'            reduce using rule 242
	'-->'          reduce using rule 242
	'..'           reduce using rule 242
	'/'            reduce using rule 242
	':'            reduce using rule 242
	';'            reduce using rule 242
	'<'            reduce using rule 242
	'<-->'         reduce using rule 242
	'<='           reduce using rule 242
	'<==>'         reduce using rule 242
	'=='           reduce using rule 242
	'==>'          reduce using rule 242
	'>'            reduce using rule 242
	'>='           reduce using rule 242
	'?'            reduce using rule 242
	'['            reduce using rule 242
	'\\from'       reduce using rule 242
	'\\in'         reduce using rule 242
	']'            reduce using rule 242
	'^'            reduce using rule 242
	'^^'           reduce using rule 242
	'for'          reduce using rule 242
	'|'            reduce using rule 242
	'||'           reduce using rule 242
	%eof           reduce using rule 242


State 143

	FullIdentifier -> 'returns' .                       (rule 243)

	'!='           reduce using rule 243
	'%'            reduce using rule 243
	'&'            reduce using rule 243
	'&&'           reduce using rule 243
	'('            reduce using rule 243
	')'            reduce using rule 243
	'*'            reduce using rule 243
	'+'            reduce using rule 243
	','            reduce using rule 243
	'-'            reduce using rule 243
	'-->'          reduce using rule 243
	'..'           reduce using rule 243
	'/'            reduce using rule 243
	':'            reduce using rule 243
	';'            reduce using rule 243
	'<'            reduce using rule 243
	'<-->'         reduce using rule 243
	'<='           reduce using rule 243
	'<==>'         reduce using rule 243
	'=='           reduce using rule 243
	'==>'          reduce using rule 243
	'>'            reduce using rule 243
	'>='           reduce using rule 243
	'?'            reduce using rule 243
	'['            reduce using rule 243
	'\\from'       reduce using rule 243
	'\\in'         reduce using rule 243
	']'            reduce using rule 243
	'^'            reduce using rule 243
	'^^'           reduce using rule 243
	'for'          reduce using rule 243
	'|'            reduce using rule 243
	'||'           reduce using rule 243
	%eof           reduce using rule 243


State 144

	Lexpr3 -> 'sizeof' . '(' Lexpr ')'                  (rule 172)

	'('            shift, and enter state 359


State 145

	FullIdentifier -> 'slice' .                         (rule 244)

	'!='           reduce using rule 244
	'%'            reduce using rule 244
	'&'            reduce using rule 244
	'&&'           reduce using rule 244
	'('            reduce using rule 244
	')'            reduce using rule 244
	'*'            reduce using rule 244
	'+'            reduce using rule 244
	','            reduce using rule 244
	'-'            reduce using rule 244
	'-->'          reduce using rule 244
	'..'           reduce using rule 244
	'/'            reduce using rule 244
	':'            reduce using rule 244
	';'            reduce using rule 244
	'<'            reduce using rule 244
	'<-->'         reduce using rule 244
	'<='           reduce using rule 244
	'<==>'         reduce using rule 244
	'=='           reduce using rule 244
	'==>'          reduce using rule 244
	'>'            reduce using rule 244
	'>='           reduce using rule 244
	'?'            reduce using rule 244
	'['            reduce using rule 244
	'\\from'       reduce using rule 244
	'\\in'         reduce using rule 244
	']'            reduce using rule 244
	'^'            reduce using rule 244
	'^^'           reduce using rule 244
	'for'          reduce using rule 244
	'|'            reduce using rule 244
	'||'           reduce using rule 244
	%eof           reduce using rule 244


State 146

	FullIdentifier -> 'terminates' .                    (rule 245)

	'!='           reduce using rule 245
	'%'            reduce using rule 245
	'&'            reduce using rule 245
	'&&'           reduce using rule 245
	'('            reduce using rule 245
	')'            reduce using rule 245
	'*'            reduce using rule 245
	'+'            reduce using rule 245
	','            reduce using rule 245
	'-'            reduce using rule 245
	'-->'          reduce using rule 245
	'..'           reduce using rule 245
	'/'            reduce using rule 245
	':'            reduce using rule 245
	';'            reduce using rule 245
	'<'            reduce using rule 245
	'<-->'         reduce using rule 245
	'<='           reduce using rule 245
	'<==>'         reduce using rule 245
	'=='           reduce using rule 245
	'==>'          reduce using rule 245
	'>'            reduce using rule 245
	'>='           reduce using rule 245
	'?'            reduce using rule 245
	'['            reduce using rule 245
	'\\from'       reduce using rule 245
	'\\in'         reduce using rule 245
	']'            reduce using rule 245
	'^'            reduce using rule 245
	'^^'           reduce using rule 245
	'for'          reduce using rule 245
	'|'            reduce using rule 245
	'||'           reduce using rule 245
	%eof           reduce using rule 245


State 147

	FullIdentifier -> 'type' .                          (rule 246)

	'!='           reduce using rule 246
	'%'            reduce using rule 246
	'&'            reduce using rule 246
	'&&'           reduce using rule 246
	'('            reduce using rule 246
	')'            reduce using rule 246
	'*'            reduce using rule 246
	'+'            reduce using rule 246
	','            reduce using rule 246
	'-'            reduce using rule 246
	'-->'          reduce using rule 246
	'..'           reduce using rule 246
	'/'            reduce using rule 246
	':'            reduce using rule 246
	';'            reduce using rule 246
	'<'            reduce using rule 246
	'<-->'         reduce using rule 246
	'<='           reduce using rule 246
	'<==>'         reduce using rule 246
	'=='           reduce using rule 246
	'==>'          reduce using rule 246
	'>'            reduce using rule 246
	'>='           reduce using rule 246
	'?'            reduce using rule 246
	'['            reduce using rule 246
	'\\from'       reduce using rule 246
	'\\in'         reduce using rule 246
	']'            reduce using rule 246
	'^'            reduce using rule 246
	'^^'           reduce using rule 246
	'for'          reduce using rule 246
	'|'            reduce using rule 246
	'||'           reduce using rule 246
	%eof           reduce using rule 246


State 148

	FullIdentifier -> 'variant' .                       (rule 247)

	'!='           reduce using rule 247
	'%'            reduce using rule 247
	'&'            reduce using rule 247
	'&&'           reduce using rule 247
	'('            reduce using rule 247
	')'            reduce using rule 247
	'*'            reduce using rule 247
	'+'            reduce using rule 247
	','            reduce using rule 247
	'-'            reduce using rule 247
	'-->'          reduce using rule 247
	'..'           reduce using rule 247
	'/'            reduce using rule 247
	':'            reduce using rule 247
	';'            reduce using rule 247
	'<'            reduce using rule 247
	'<-->'         reduce using rule 247
	'<='           reduce using rule 247
	'<==>'         reduce using rule 247
	'=='           reduce using rule 247
	'==>'          reduce using rule 247
	'>'            reduce using rule 247
	'>='           reduce using rule 247
	'?'            reduce using rule 247
	'['            reduce using rule 247
	'\\from'       reduce using rule 247
	'\\in'         reduce using rule 247
	']'            reduce using rule 247
	'^'            reduce using rule 247
	'^^'           reduce using rule 247
	'for'          reduce using rule 247
	'|'            reduce using rule 247
	'||'           reduce using rule 247
	%eof           reduce using rule 247


State 149

	Identifier -> 'writes' .                            (rule 254)

	'!='           reduce using rule 254
	'%'            reduce using rule 254
	'&'            reduce using rule 254
	'&&'           reduce using rule 254
	'('            reduce using rule 254
	')'            reduce using rule 254
	'*'            reduce using rule 254
	'+'            reduce using rule 254
	','            reduce using rule 254
	'-'            reduce using rule 254
	'-->'          reduce using rule 254
	'..'           reduce using rule 254
	'/'            reduce using rule 254
	':'            reduce using rule 254
	';'            reduce using rule 254
	'<'            reduce using rule 254
	'<-->'         reduce using rule 254
	'<='           reduce using rule 254
	'<==>'         reduce using rule 254
	'=='           reduce using rule 254
	'==>'          reduce using rule 254
	'>'            reduce using rule 254
	'>='           reduce using rule 254
	'?'            reduce using rule 254
	'['            reduce using rule 254
	'\\from'       reduce using rule 254
	'\\in'         reduce using rule 254
	']'            reduce using rule 254
	'^'            reduce using rule 254
	'^^'           reduce using rule 254
	'for'          reduce using rule 254
	'|'            reduce using rule 254
	'||'           reduce using rule 254
	'}'            reduce using rule 254
	%eof           reduce using rule 254


State 150

	Lexpr3 -> '~' . Lexpr3                              (rule 169)

	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\false'      shift, and enter state 84
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr3         goto state 358
	FullIdentifier goto state 66
	Identifier     goto state 67

State 151

	Double -> L_doubl .                                 (rule 56)

	'!='           reduce using rule 56
	'%'            reduce using rule 56
	'&'            reduce using rule 56
	'&&'           reduce using rule 56
	')'            reduce using rule 56
	'*'            reduce using rule 56
	'+'            reduce using rule 56
	','            reduce using rule 56
	'-'            reduce using rule 56
	'-->'          reduce using rule 56
	'..'           reduce using rule 56
	'/'            reduce using rule 56
	':'            reduce using rule 56
	';'            reduce using rule 56
	'<'            reduce using rule 56
	'<-->'         reduce using rule 56
	'<='           reduce using rule 56
	'<==>'         reduce using rule 56
	'=='           reduce using rule 56
	'==>'          reduce using rule 56
	'>'            reduce using rule 56
	'>='           reduce using rule 56
	'?'            reduce using rule 56
	'['            reduce using rule 56
	'\\from'       reduce using rule 56
	'\\in'         reduce using rule 56
	']'            reduce using rule 56
	'^'            reduce using rule 56
	'^^'           reduce using rule 56
	'for'          reduce using rule 56
	'|'            reduce using rule 56
	'||'           reduce using rule 56
	%eof           reduce using rule 56


State 152

	Integer -> L_integ .                                (rule 57)

	'!='           reduce using rule 57
	'%'            reduce using rule 57
	'&'            reduce using rule 57
	'&&'           reduce using rule 57
	')'            reduce using rule 57
	'*'            reduce using rule 57
	'+'            reduce using rule 57
	','            reduce using rule 57
	'-'            reduce using rule 57
	'-->'          reduce using rule 57
	'..'           reduce using rule 57
	'/'            reduce using rule 57
	':'            reduce using rule 57
	';'            reduce using rule 57
	'<'            reduce using rule 57
	'<-->'         reduce using rule 57
	'<='           reduce using rule 57
	'<==>'         reduce using rule 57
	'=='           reduce using rule 57
	'==>'          reduce using rule 57
	'>'            reduce using rule 57
	'>='           reduce using rule 57
	'?'            reduce using rule 57
	'['            reduce using rule 57
	'\\from'       reduce using rule 57
	'\\in'         reduce using rule 57
	']'            reduce using rule 57
	'^'            reduce using rule 57
	'^^'           reduce using rule 57
	'for'          reduce using rule 57
	'|'            reduce using rule 57
	'||'           reduce using rule 57
	%eof           reduce using rule 57


State 153

	String -> L_quoted .                                (rule 58)

	'!='           reduce using rule 58
	'%'            reduce using rule 58
	'&'            reduce using rule 58
	'&&'           reduce using rule 58
	')'            reduce using rule 58
	'*'            reduce using rule 58
	'+'            reduce using rule 58
	','            reduce using rule 58
	'-'            reduce using rule 58
	'-->'          reduce using rule 58
	'..'           reduce using rule 58
	'/'            reduce using rule 58
	':'            reduce using rule 58
	';'            reduce using rule 58
	'<'            reduce using rule 58
	'<-->'         reduce using rule 58
	'<='           reduce using rule 58
	'<==>'         reduce using rule 58
	'=='           reduce using rule 58
	'==>'          reduce using rule 58
	'>'            reduce using rule 58
	'>='           reduce using rule 58
	'?'            reduce using rule 58
	'['            reduce using rule 58
	'\\from'       reduce using rule 58
	'\\in'         reduce using rule 58
	']'            reduce using rule 58
	'^'            reduce using rule 58
	'^^'           reduce using rule 58
	'for'          reduce using rule 58
	'|'            reduce using rule 58
	'||'           reduce using rule 58
	%eof           reduce using rule 58


State 154

	%start_pLoopEffects -> LoopEffects .                (rule 53)

	%eof           accept


State 155

	LoopEffects -> 'loop' . 'assigns' Assigns ';'       (rule 303)

	'assigns'      shift, and enter state 349


State 156

	%start_pLoopVariant -> LoopVariant .                (rule 52)

	%eof           accept


State 157

	LoopVariant -> 'loop' . 'variant' Variant ';'       (rule 302)

	'variant'      shift, and enter state 351


State 158

	%start_pAllocation -> Allocation .                  (rule 51)

	%eof           accept


State 159

	Allocation -> 'allocates' . Zones                   (rule 300)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\nothing'    shift, and enter state 266
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Zones          goto state 357
	Lexpr          goto state 259
	ListLexpr      goto state 265
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 160

	Allocation -> 'frees' . Zones                       (rule 301)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\nothing'    shift, and enter state 266
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Zones          goto state 356
	Lexpr          goto state 259
	ListLexpr      goto state 265
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 161

	%start_pLoopAllocation -> LoopAllocation .          (rule 50)

	%eof           accept


State 162

	LoopAllocation -> 'loop' . Allocation ';'           (rule 299)

	'allocates'    shift, and enter state 159
	'frees'        shift, and enter state 160

	Allocation     goto state 348

State 163

	%start_pLoopInvariant -> LoopInvariant .            (rule 49)

	%eof           accept


State 164

	LoopInvariant -> 'admit' . 'loop' 'invariant' Lexpr ';'    (rule 298)

	'loop'         shift, and enter state 296


State 165

	LoopInvariant -> 'check' . 'loop' 'invariant' Lexpr ';'    (rule 297)

	'loop'         shift, and enter state 294


State 166

	LoopInvariant -> 'loop' . 'invariant' Lexpr ';'     (rule 296)

	'invariant'    shift, and enter state 350


State 167

	LoopAnnotOpt -> LoopAnnotStack .                    (rule 295)

	%eof           reduce using rule 295


State 168

	%start_pLoopAnnotOpt -> LoopAnnotOpt .              (rule 48)

	%eof           accept


State 169

	LoopAnnotStack -> LoopInvariant . LoopAnnotOpt      (rule 290)

	'admit'        shift, and enter state 164
	'check'        shift, and enter state 165
	'loop'         shift, and enter state 173
	%eof           reduce using rule 294

	LoopAnnotStack goto state 167
	LoopAnnotOpt   goto state 355
	LoopInvariant  goto state 169
	LoopAllocation goto state 170
	LoopVariant    goto state 171
	LoopEffects    goto state 172

State 170

	LoopAnnotStack -> LoopAllocation . LoopAnnotOpt     (rule 292)

	'admit'        shift, and enter state 164
	'check'        shift, and enter state 165
	'loop'         shift, and enter state 173
	%eof           reduce using rule 294

	LoopAnnotStack goto state 167
	LoopAnnotOpt   goto state 354
	LoopInvariant  goto state 169
	LoopAllocation goto state 170
	LoopVariant    goto state 171
	LoopEffects    goto state 172

State 171

	LoopAnnotStack -> LoopVariant . LoopAnnotOpt        (rule 293)

	'admit'        shift, and enter state 164
	'check'        shift, and enter state 165
	'loop'         shift, and enter state 173
	%eof           reduce using rule 294

	LoopAnnotStack goto state 167
	LoopAnnotOpt   goto state 353
	LoopInvariant  goto state 169
	LoopAllocation goto state 170
	LoopVariant    goto state 171
	LoopEffects    goto state 172

State 172

	LoopAnnotStack -> LoopEffects . LoopAnnotOpt        (rule 291)

	'admit'        shift, and enter state 164
	'check'        shift, and enter state 165
	'loop'         shift, and enter state 173
	%eof           reduce using rule 294

	LoopAnnotStack goto state 167
	LoopAnnotOpt   goto state 352
	LoopInvariant  goto state 169
	LoopAllocation goto state 170
	LoopVariant    goto state 171
	LoopEffects    goto state 172

State 173

	LoopInvariant -> 'loop' . 'invariant' Lexpr ';'     (rule 296)
	LoopAllocation -> 'loop' . Allocation ';'           (rule 299)
	LoopVariant -> 'loop' . 'variant' Variant ';'       (rule 302)
	LoopEffects -> 'loop' . 'assigns' Assigns ';'       (rule 303)

	'allocates'    shift, and enter state 159
	'assigns'      shift, and enter state 349
	'frees'        shift, and enter state 160
	'invariant'    shift, and enter state 350
	'variant'      shift, and enter state 351

	Allocation     goto state 348

State 174

	%start_pLoopAnnotStack -> LoopAnnotStack .          (rule 47)

	%eof           accept


State 175

	%start_pAnnotation -> Annotation .                  (rule 46)

	%eof           accept


State 176

	Annotation -> LoopAnnotStack .                      (rule 289)

	%eof           reduce using rule 289


State 177

	%start_pLogicPTreeAnnot -> LogicPTreeAnnot .        (rule 45)

	%eof           accept


State 178

	LogicPTreeAnnot -> Annotation .                     (rule 288)

	%eof           reduce using rule 288


State 179

	%start_pTypeSpecSimple -> TypeSpecSimple .          (rule 44)

	%eof           accept


State 180

	TypeSpecSimple -> '_Bool' .                         (rule 259)

	'('            reduce using rule 259
	'*'            reduce using rule 259
	'admit'        reduce using rule 259
	'allocates'    reduce using rule 259
	'assert'       reduce using rule 259
	'assigns'      reduce using rule 259
	'assumes'      reduce using rule 259
	'at'           reduce using rule 259
	'axiom'        reduce using rule 259
	'axiomatic'    reduce using rule 259
	'behavior'     reduce using rule 259
	'behaviors'    reduce using rule 259
	'breaks'       reduce using rule 259
	'check'        reduce using rule 259
	'complete'     reduce using rule 259
	'continues'    reduce using rule 259
	'contract'     reduce using rule 259
	'decreases'    reduce using rule 259
	'disjoint'     reduce using rule 259
	'ensures'      reduce using rule 259
	'exits'        reduce using rule 259
	'frees'        reduce using rule 259
	'function'     reduce using rule 259
	'global'       reduce using rule 259
	'impact'       reduce using rule 259
	'include'      reduce using rule 259
	'inductive'    reduce using rule 259
	'invariant'    reduce using rule 259
	'label'        reduce using rule 259
	'lemma'        reduce using rule 259
	'let'          reduce using rule 259
	'logic'        reduce using rule 259
	'loop'         reduce using rule 259
	'model'        reduce using rule 259
	'module'       reduce using rule 259
	'pragma'       reduce using rule 259
	'predicate'    reduce using rule 259
	'reads'        reduce using rule 259
	'requires'     reduce using rule 259
	'returns'      reduce using rule 259
	'slice'        reduce using rule 259
	'terminates'   reduce using rule 259
	'type'         reduce using rule 259
	'variant'      reduce using rule 259
	'writes'       reduce using rule 259
	L_Ident        reduce using rule 259
	%eof           reduce using rule 259


State 181

	TypeSpecSimple -> 'boolean' .                       (rule 257)

	'('            reduce using rule 257
	'*'            reduce using rule 257
	'admit'        reduce using rule 257
	'allocates'    reduce using rule 257
	'assert'       reduce using rule 257
	'assigns'      reduce using rule 257
	'assumes'      reduce using rule 257
	'at'           reduce using rule 257
	'axiom'        reduce using rule 257
	'axiomatic'    reduce using rule 257
	'behavior'     reduce using rule 257
	'behaviors'    reduce using rule 257
	'breaks'       reduce using rule 257
	'check'        reduce using rule 257
	'complete'     reduce using rule 257
	'continues'    reduce using rule 257
	'contract'     reduce using rule 257
	'decreases'    reduce using rule 257
	'disjoint'     reduce using rule 257
	'ensures'      reduce using rule 257
	'exits'        reduce using rule 257
	'frees'        reduce using rule 257
	'function'     reduce using rule 257
	'global'       reduce using rule 257
	'impact'       reduce using rule 257
	'include'      reduce using rule 257
	'inductive'    reduce using rule 257
	'invariant'    reduce using rule 257
	'label'        reduce using rule 257
	'lemma'        reduce using rule 257
	'let'          reduce using rule 257
	'logic'        reduce using rule 257
	'loop'         reduce using rule 257
	'model'        reduce using rule 257
	'module'       reduce using rule 257
	'pragma'       reduce using rule 257
	'predicate'    reduce using rule 257
	'reads'        reduce using rule 257
	'requires'     reduce using rule 257
	'returns'      reduce using rule 257
	'slice'        reduce using rule 257
	'terminates'   reduce using rule 257
	'type'         reduce using rule 257
	'variant'      reduce using rule 257
	'writes'       reduce using rule 257
	L_Ident        reduce using rule 257
	%eof           reduce using rule 257


State 182

	TypeSpecSimple -> 'char' .                          (rule 260)

	'('            reduce using rule 260
	'*'            reduce using rule 260
	'admit'        reduce using rule 260
	'allocates'    reduce using rule 260
	'assert'       reduce using rule 260
	'assigns'      reduce using rule 260
	'assumes'      reduce using rule 260
	'at'           reduce using rule 260
	'axiom'        reduce using rule 260
	'axiomatic'    reduce using rule 260
	'behavior'     reduce using rule 260
	'behaviors'    reduce using rule 260
	'breaks'       reduce using rule 260
	'check'        reduce using rule 260
	'complete'     reduce using rule 260
	'continues'    reduce using rule 260
	'contract'     reduce using rule 260
	'decreases'    reduce using rule 260
	'disjoint'     reduce using rule 260
	'ensures'      reduce using rule 260
	'exits'        reduce using rule 260
	'frees'        reduce using rule 260
	'function'     reduce using rule 260
	'global'       reduce using rule 260
	'impact'       reduce using rule 260
	'include'      reduce using rule 260
	'inductive'    reduce using rule 260
	'invariant'    reduce using rule 260
	'label'        reduce using rule 260
	'lemma'        reduce using rule 260
	'let'          reduce using rule 260
	'logic'        reduce using rule 260
	'loop'         reduce using rule 260
	'model'        reduce using rule 260
	'module'       reduce using rule 260
	'pragma'       reduce using rule 260
	'predicate'    reduce using rule 260
	'reads'        reduce using rule 260
	'requires'     reduce using rule 260
	'returns'      reduce using rule 260
	'slice'        reduce using rule 260
	'terminates'   reduce using rule 260
	'type'         reduce using rule 260
	'variant'      reduce using rule 260
	'writes'       reduce using rule 260
	L_Ident        reduce using rule 260
	%eof           reduce using rule 260


State 183

	TypeSpecSimple -> 'double' .                        (rule 286)

	'('            reduce using rule 286
	'*'            reduce using rule 286
	'admit'        reduce using rule 286
	'allocates'    reduce using rule 286
	'assert'       reduce using rule 286
	'assigns'      reduce using rule 286
	'assumes'      reduce using rule 286
	'at'           reduce using rule 286
	'axiom'        reduce using rule 286
	'axiomatic'    reduce using rule 286
	'behavior'     reduce using rule 286
	'behaviors'    reduce using rule 286
	'breaks'       reduce using rule 286
	'check'        reduce using rule 286
	'complete'     reduce using rule 286
	'continues'    reduce using rule 286
	'contract'     reduce using rule 286
	'decreases'    reduce using rule 286
	'disjoint'     reduce using rule 286
	'ensures'      reduce using rule 286
	'exits'        reduce using rule 286
	'frees'        reduce using rule 286
	'function'     reduce using rule 286
	'global'       reduce using rule 286
	'impact'       reduce using rule 286
	'include'      reduce using rule 286
	'inductive'    reduce using rule 286
	'invariant'    reduce using rule 286
	'label'        reduce using rule 286
	'lemma'        reduce using rule 286
	'let'          reduce using rule 286
	'logic'        reduce using rule 286
	'loop'         reduce using rule 286
	'model'        reduce using rule 286
	'module'       reduce using rule 286
	'pragma'       reduce using rule 286
	'predicate'    reduce using rule 286
	'reads'        reduce using rule 286
	'requires'     reduce using rule 286
	'returns'      reduce using rule 286
	'slice'        reduce using rule 286
	'terminates'   reduce using rule 286
	'type'         reduce using rule 286
	'variant'      reduce using rule 286
	'writes'       reduce using rule 286
	L_Ident        reduce using rule 286
	%eof           reduce using rule 286


State 184

	TypeSpecSimple -> 'float' .                         (rule 285)

	'('            reduce using rule 285
	'*'            reduce using rule 285
	'admit'        reduce using rule 285
	'allocates'    reduce using rule 285
	'assert'       reduce using rule 285
	'assigns'      reduce using rule 285
	'assumes'      reduce using rule 285
	'at'           reduce using rule 285
	'axiom'        reduce using rule 285
	'axiomatic'    reduce using rule 285
	'behavior'     reduce using rule 285
	'behaviors'    reduce using rule 285
	'breaks'       reduce using rule 285
	'check'        reduce using rule 285
	'complete'     reduce using rule 285
	'continues'    reduce using rule 285
	'contract'     reduce using rule 285
	'decreases'    reduce using rule 285
	'disjoint'     reduce using rule 285
	'ensures'      reduce using rule 285
	'exits'        reduce using rule 285
	'frees'        reduce using rule 285
	'function'     reduce using rule 285
	'global'       reduce using rule 285
	'impact'       reduce using rule 285
	'include'      reduce using rule 285
	'inductive'    reduce using rule 285
	'invariant'    reduce using rule 285
	'label'        reduce using rule 285
	'lemma'        reduce using rule 285
	'let'          reduce using rule 285
	'logic'        reduce using rule 285
	'loop'         reduce using rule 285
	'model'        reduce using rule 285
	'module'       reduce using rule 285
	'pragma'       reduce using rule 285
	'predicate'    reduce using rule 285
	'reads'        reduce using rule 285
	'requires'     reduce using rule 285
	'returns'      reduce using rule 285
	'slice'        reduce using rule 285
	'terminates'   reduce using rule 285
	'type'         reduce using rule 285
	'variant'      reduce using rule 285
	'writes'       reduce using rule 285
	L_Ident        reduce using rule 285
	%eof           reduce using rule 285


State 185

	TypeSpecSimple -> 'int' .                           (rule 263)

	'('            reduce using rule 263
	'*'            reduce using rule 263
	'admit'        reduce using rule 263
	'allocates'    reduce using rule 263
	'assert'       reduce using rule 263
	'assigns'      reduce using rule 263
	'assumes'      reduce using rule 263
	'at'           reduce using rule 263
	'axiom'        reduce using rule 263
	'axiomatic'    reduce using rule 263
	'behavior'     reduce using rule 263
	'behaviors'    reduce using rule 263
	'breaks'       reduce using rule 263
	'check'        reduce using rule 263
	'complete'     reduce using rule 263
	'continues'    reduce using rule 263
	'contract'     reduce using rule 263
	'decreases'    reduce using rule 263
	'disjoint'     reduce using rule 263
	'ensures'      reduce using rule 263
	'exits'        reduce using rule 263
	'frees'        reduce using rule 263
	'function'     reduce using rule 263
	'global'       reduce using rule 263
	'impact'       reduce using rule 263
	'include'      reduce using rule 263
	'inductive'    reduce using rule 263
	'invariant'    reduce using rule 263
	'label'        reduce using rule 263
	'lemma'        reduce using rule 263
	'let'          reduce using rule 263
	'logic'        reduce using rule 263
	'loop'         reduce using rule 263
	'model'        reduce using rule 263
	'module'       reduce using rule 263
	'pragma'       reduce using rule 263
	'predicate'    reduce using rule 263
	'reads'        reduce using rule 263
	'requires'     reduce using rule 263
	'returns'      reduce using rule 263
	'slice'        reduce using rule 263
	'terminates'   reduce using rule 263
	'type'         reduce using rule 263
	'variant'      reduce using rule 263
	'writes'       reduce using rule 263
	L_Ident        reduce using rule 263
	%eof           reduce using rule 263


State 186

	TypeSpecSimple -> 'integer' .                       (rule 255)

	'('            reduce using rule 255
	'*'            reduce using rule 255
	'admit'        reduce using rule 255
	'allocates'    reduce using rule 255
	'assert'       reduce using rule 255
	'assigns'      reduce using rule 255
	'assumes'      reduce using rule 255
	'at'           reduce using rule 255
	'axiom'        reduce using rule 255
	'axiomatic'    reduce using rule 255
	'behavior'     reduce using rule 255
	'behaviors'    reduce using rule 255
	'breaks'       reduce using rule 255
	'check'        reduce using rule 255
	'complete'     reduce using rule 255
	'continues'    reduce using rule 255
	'contract'     reduce using rule 255
	'decreases'    reduce using rule 255
	'disjoint'     reduce using rule 255
	'ensures'      reduce using rule 255
	'exits'        reduce using rule 255
	'frees'        reduce using rule 255
	'function'     reduce using rule 255
	'global'       reduce using rule 255
	'impact'       reduce using rule 255
	'include'      reduce using rule 255
	'inductive'    reduce using rule 255
	'invariant'    reduce using rule 255
	'label'        reduce using rule 255
	'lemma'        reduce using rule 255
	'let'          reduce using rule 255
	'logic'        reduce using rule 255
	'loop'         reduce using rule 255
	'model'        reduce using rule 255
	'module'       reduce using rule 255
	'pragma'       reduce using rule 255
	'predicate'    reduce using rule 255
	'reads'        reduce using rule 255
	'requires'     reduce using rule 255
	'returns'      reduce using rule 255
	'slice'        reduce using rule 255
	'terminates'   reduce using rule 255
	'type'         reduce using rule 255
	'variant'      reduce using rule 255
	'writes'       reduce using rule 255
	L_Ident        reduce using rule 255
	%eof           reduce using rule 255


State 187

	TypeSpecSimple -> 'long' .                          (rule 273)
	TypeSpecSimple -> 'long' . 'int'                    (rule 277)
	TypeSpecSimple -> 'long' . 'long'                   (rule 279)
	TypeSpecSimple -> 'long' . 'long' 'int'             (rule 282)
	TypeSpecSimple -> 'long' . 'double'                 (rule 287)

	'('            reduce using rule 273
	'*'            reduce using rule 273
	'admit'        reduce using rule 273
	'allocates'    reduce using rule 273
	'assert'       reduce using rule 273
	'assigns'      reduce using rule 273
	'assumes'      reduce using rule 273
	'at'           reduce using rule 273
	'axiom'        reduce using rule 273
	'axiomatic'    reduce using rule 273
	'behavior'     reduce using rule 273
	'behaviors'    reduce using rule 273
	'breaks'       reduce using rule 273
	'check'        reduce using rule 273
	'complete'     reduce using rule 273
	'continues'    reduce using rule 273
	'contract'     reduce using rule 273
	'decreases'    reduce using rule 273
	'disjoint'     reduce using rule 273
	'double'       shift, and enter state 345
	'ensures'      reduce using rule 273
	'exits'        reduce using rule 273
	'frees'        reduce using rule 273
	'function'     reduce using rule 273
	'global'       reduce using rule 273
	'impact'       reduce using rule 273
	'include'      reduce using rule 273
	'inductive'    reduce using rule 273
	'int'          shift, and enter state 346
	'invariant'    reduce using rule 273
	'label'        reduce using rule 273
	'lemma'        reduce using rule 273
	'let'          reduce using rule 273
	'logic'        reduce using rule 273
	'long'         shift, and enter state 347
	'loop'         reduce using rule 273
	'model'        reduce using rule 273
	'module'       reduce using rule 273
	'pragma'       reduce using rule 273
	'predicate'    reduce using rule 273
	'reads'        reduce using rule 273
	'requires'     reduce using rule 273
	'returns'      reduce using rule 273
	'slice'        reduce using rule 273
	'terminates'   reduce using rule 273
	'type'         reduce using rule 273
	'variant'      reduce using rule 273
	'writes'       reduce using rule 273
	L_Ident        reduce using rule 273
	%eof           reduce using rule 273


State 188

	TypeSpecSimple -> 'real' .                          (rule 256)

	'('            reduce using rule 256
	'*'            reduce using rule 256
	'admit'        reduce using rule 256
	'allocates'    reduce using rule 256
	'assert'       reduce using rule 256
	'assigns'      reduce using rule 256
	'assumes'      reduce using rule 256
	'at'           reduce using rule 256
	'axiom'        reduce using rule 256
	'axiomatic'    reduce using rule 256
	'behavior'     reduce using rule 256
	'behaviors'    reduce using rule 256
	'breaks'       reduce using rule 256
	'check'        reduce using rule 256
	'complete'     reduce using rule 256
	'continues'    reduce using rule 256
	'contract'     reduce using rule 256
	'decreases'    reduce using rule 256
	'disjoint'     reduce using rule 256
	'ensures'      reduce using rule 256
	'exits'        reduce using rule 256
	'frees'        reduce using rule 256
	'function'     reduce using rule 256
	'global'       reduce using rule 256
	'impact'       reduce using rule 256
	'include'      reduce using rule 256
	'inductive'    reduce using rule 256
	'invariant'    reduce using rule 256
	'label'        reduce using rule 256
	'lemma'        reduce using rule 256
	'let'          reduce using rule 256
	'logic'        reduce using rule 256
	'loop'         reduce using rule 256
	'model'        reduce using rule 256
	'module'       reduce using rule 256
	'pragma'       reduce using rule 256
	'predicate'    reduce using rule 256
	'reads'        reduce using rule 256
	'requires'     reduce using rule 256
	'returns'      reduce using rule 256
	'slice'        reduce using rule 256
	'terminates'   reduce using rule 256
	'type'         reduce using rule 256
	'variant'      reduce using rule 256
	'writes'       reduce using rule 256
	L_Ident        reduce using rule 256
	%eof           reduce using rule 256


State 189

	TypeSpecSimple -> 'short' .                         (rule 267)
	TypeSpecSimple -> 'short' . 'int'                   (rule 270)

	'('            reduce using rule 267
	'*'            reduce using rule 267
	'admit'        reduce using rule 267
	'allocates'    reduce using rule 267
	'assert'       reduce using rule 267
	'assigns'      reduce using rule 267
	'assumes'      reduce using rule 267
	'at'           reduce using rule 267
	'axiom'        reduce using rule 267
	'axiomatic'    reduce using rule 267
	'behavior'     reduce using rule 267
	'behaviors'    reduce using rule 267
	'breaks'       reduce using rule 267
	'check'        reduce using rule 267
	'complete'     reduce using rule 267
	'continues'    reduce using rule 267
	'contract'     reduce using rule 267
	'decreases'    reduce using rule 267
	'disjoint'     reduce using rule 267
	'ensures'      reduce using rule 267
	'exits'        reduce using rule 267
	'frees'        reduce using rule 267
	'function'     reduce using rule 267
	'global'       reduce using rule 267
	'impact'       reduce using rule 267
	'include'      reduce using rule 267
	'inductive'    reduce using rule 267
	'int'          shift, and enter state 344
	'invariant'    reduce using rule 267
	'label'        reduce using rule 267
	'lemma'        reduce using rule 267
	'let'          reduce using rule 267
	'logic'        reduce using rule 267
	'loop'         reduce using rule 267
	'model'        reduce using rule 267
	'module'       reduce using rule 267
	'pragma'       reduce using rule 267
	'predicate'    reduce using rule 267
	'reads'        reduce using rule 267
	'requires'     reduce using rule 267
	'returns'      reduce using rule 267
	'slice'        reduce using rule 267
	'terminates'   reduce using rule 267
	'type'         reduce using rule 267
	'variant'      reduce using rule 267
	'writes'       reduce using rule 267
	L_Ident        reduce using rule 267
	%eof           reduce using rule 267


State 190

	TypeSpecSimple -> 'signed' . 'char'                 (rule 261)
	TypeSpecSimple -> 'signed' . 'int'                  (rule 264)
	TypeSpecSimple -> 'signed' . 'short'                (rule 268)
	TypeSpecSimple -> 'signed' . 'short' 'int'          (rule 271)
	TypeSpecSimple -> 'signed' . 'long'                 (rule 274)
	TypeSpecSimple -> 'signed' . 'long' 'int'           (rule 276)
	TypeSpecSimple -> 'signed' . 'long' 'long'          (rule 280)
	TypeSpecSimple -> 'signed' . 'long' 'long' 'int'    (rule 283)

	'char'         shift, and enter state 340
	'int'          shift, and enter state 341
	'long'         shift, and enter state 342
	'short'        shift, and enter state 343


State 191

	TypeSpecSimple -> 'unsigned' . 'char'               (rule 262)
	TypeSpecSimple -> 'unsigned' . 'int'                (rule 265)
	TypeSpecSimple -> 'unsigned' .                      (rule 266)
	TypeSpecSimple -> 'unsigned' . 'short'              (rule 269)
	TypeSpecSimple -> 'unsigned' . 'short' 'int'        (rule 272)
	TypeSpecSimple -> 'unsigned' . 'long'               (rule 275)
	TypeSpecSimple -> 'unsigned' . 'long' 'int'         (rule 278)
	TypeSpecSimple -> 'unsigned' . 'long' 'long'        (rule 281)
	TypeSpecSimple -> 'unsigned' . 'long' 'long' 'int'    (rule 284)

	'('            reduce using rule 266
	'*'            reduce using rule 266
	'admit'        reduce using rule 266
	'allocates'    reduce using rule 266
	'assert'       reduce using rule 266
	'assigns'      reduce using rule 266
	'assumes'      reduce using rule 266
	'at'           reduce using rule 266
	'axiom'        reduce using rule 266
	'axiomatic'    reduce using rule 266
	'behavior'     reduce using rule 266
	'behaviors'    reduce using rule 266
	'breaks'       reduce using rule 266
	'char'         shift, and enter state 336
	'check'        reduce using rule 266
	'complete'     reduce using rule 266
	'continues'    reduce using rule 266
	'contract'     reduce using rule 266
	'decreases'    reduce using rule 266
	'disjoint'     reduce using rule 266
	'ensures'      reduce using rule 266
	'exits'        reduce using rule 266
	'frees'        reduce using rule 266
	'function'     reduce using rule 266
	'global'       reduce using rule 266
	'impact'       reduce using rule 266
	'include'      reduce using rule 266
	'inductive'    reduce using rule 266
	'int'          shift, and enter state 337
	'invariant'    reduce using rule 266
	'label'        reduce using rule 266
	'lemma'        reduce using rule 266
	'let'          reduce using rule 266
	'logic'        reduce using rule 266
	'long'         shift, and enter state 338
	'loop'         reduce using rule 266
	'model'        reduce using rule 266
	'module'       reduce using rule 266
	'pragma'       reduce using rule 266
	'predicate'    reduce using rule 266
	'reads'        reduce using rule 266
	'requires'     reduce using rule 266
	'returns'      reduce using rule 266
	'short'        shift, and enter state 339
	'slice'        reduce using rule 266
	'terminates'   reduce using rule 266
	'type'         reduce using rule 266
	'variant'      reduce using rule 266
	'writes'       reduce using rule 266
	L_Ident        reduce using rule 266
	%eof           reduce using rule 266


State 192

	TypeSpecSimple -> 'void' .                          (rule 258)

	'('            reduce using rule 258
	'*'            reduce using rule 258
	'admit'        reduce using rule 258
	'allocates'    reduce using rule 258
	'assert'       reduce using rule 258
	'assigns'      reduce using rule 258
	'assumes'      reduce using rule 258
	'at'           reduce using rule 258
	'axiom'        reduce using rule 258
	'axiomatic'    reduce using rule 258
	'behavior'     reduce using rule 258
	'behaviors'    reduce using rule 258
	'breaks'       reduce using rule 258
	'check'        reduce using rule 258
	'complete'     reduce using rule 258
	'continues'    reduce using rule 258
	'contract'     reduce using rule 258
	'decreases'    reduce using rule 258
	'disjoint'     reduce using rule 258
	'ensures'      reduce using rule 258
	'exits'        reduce using rule 258
	'frees'        reduce using rule 258
	'function'     reduce using rule 258
	'global'       reduce using rule 258
	'impact'       reduce using rule 258
	'include'      reduce using rule 258
	'inductive'    reduce using rule 258
	'invariant'    reduce using rule 258
	'label'        reduce using rule 258
	'lemma'        reduce using rule 258
	'let'          reduce using rule 258
	'logic'        reduce using rule 258
	'loop'         reduce using rule 258
	'model'        reduce using rule 258
	'module'       reduce using rule 258
	'pragma'       reduce using rule 258
	'predicate'    reduce using rule 258
	'reads'        reduce using rule 258
	'requires'     reduce using rule 258
	'returns'      reduce using rule 258
	'slice'        reduce using rule 258
	'terminates'   reduce using rule 258
	'type'         reduce using rule 258
	'variant'      reduce using rule 258
	'writes'       reduce using rule 258
	L_Ident        reduce using rule 258
	%eof           reduce using rule 258


State 193

	%start_pIdentifier -> Identifier .                  (rule 43)

	%eof           accept


State 194

	ListFullIdentifier -> FullIdentifier .              (rule 248)
	ListFullIdentifier -> FullIdentifier . ',' ListFullIdentifier    (rule 249)

	','            shift, and enter state 335
	%eof           reduce using rule 248


State 195

	%start_pListFullIdentifier -> ListFullIdentifier .    (rule 42)

	%eof           accept


State 196

	%start_pFullIdentifier -> FullIdentifier .          (rule 41)

	%eof           accept


State 197

	%start_pPostCond -> PostCond .                      (rule 40)

	%eof           accept


State 198

	PostCond -> 'admit' . 'ensures'                     (rule 203)
	PostCond -> 'admit' . 'exits'                       (rule 204)
	PostCond -> 'admit' . 'breaks'                      (rule 205)
	PostCond -> 'admit' . 'continues'                   (rule 206)
	PostCond -> 'admit' . 'returns'                     (rule 207)

	'breaks'       shift, and enter state 330
	'continues'    shift, and enter state 331
	'ensures'      shift, and enter state 332
	'exits'        shift, and enter state 333
	'returns'      shift, and enter state 334


State 199

	PostCond -> 'breaks' .                              (rule 195)

	'!'            reduce using rule 195
	'&'            reduce using rule 195
	'('            reduce using rule 195
	'*'            reduce using rule 195
	'+'            reduce using rule 195
	'-'            reduce using rule 195
	'\\allocable'  reduce using rule 195
	'\\allocation' reduce using rule 195
	'\\at'         reduce using rule 195
	'\\automatic'  reduce using rule 195
	'\\base_addr'  reduce using rule 195
	'\\block_length'reduce using rule 195
	'\\dangling'   reduce using rule 195
	'\\dynamic'    reduce using rule 195
	'\\exists'     reduce using rule 195
	'\\false'      reduce using rule 195
	'\\forall'     reduce using rule 195
	'\\freeable'   reduce using rule 195
	'\\fresh'      reduce using rule 195
	'\\initialized'reduce using rule 195
	'\\lambda'     reduce using rule 195
	'\\null'       reduce using rule 195
	'\\object_pointer'reduce using rule 195
	'\\offset'     reduce using rule 195
	'\\old'        reduce using rule 195
	'\\pi'         reduce using rule 195
	'\\register'   reduce using rule 195
	'\\result'     reduce using rule 195
	'\\separated'  reduce using rule 195
	'\\static'     reduce using rule 195
	'\\true'       reduce using rule 195
	'\\unallocated'reduce using rule 195
	'\\valid'      reduce using rule 195
	'\\valid_function'reduce using rule 195
	'\\valid_index'reduce using rule 195
	'\\valid_range'reduce using rule 195
	'\\valid_read' reduce using rule 195
	'admit'        reduce using rule 195
	'allocates'    reduce using rule 195
	'assert'       reduce using rule 195
	'assigns'      reduce using rule 195
	'assumes'      reduce using rule 195
	'at'           reduce using rule 195
	'axiom'        reduce using rule 195
	'axiomatic'    reduce using rule 195
	'behavior'     reduce using rule 195
	'behaviors'    reduce using rule 195
	'breaks'       reduce using rule 195
	'check'        reduce using rule 195
	'complete'     reduce using rule 195
	'continues'    reduce using rule 195
	'contract'     reduce using rule 195
	'decreases'    reduce using rule 195
	'disjoint'     reduce using rule 195
	'ensures'      reduce using rule 195
	'exits'        reduce using rule 195
	'frees'        reduce using rule 195
	'function'     reduce using rule 195
	'global'       reduce using rule 195
	'impact'       reduce using rule 195
	'include'      reduce using rule 195
	'inductive'    reduce using rule 195
	'invariant'    reduce using rule 195
	'label'        reduce using rule 195
	'lemma'        reduce using rule 195
	'let'          reduce using rule 195
	'logic'        reduce using rule 195
	'loop'         reduce using rule 195
	'model'        reduce using rule 195
	'module'       reduce using rule 195
	'pragma'       reduce using rule 195
	'predicate'    reduce using rule 195
	'reads'        reduce using rule 195
	'requires'     reduce using rule 195
	'returns'      reduce using rule 195
	'sizeof'       reduce using rule 195
	'slice'        reduce using rule 195
	'terminates'   reduce using rule 195
	'type'         reduce using rule 195
	'variant'      reduce using rule 195
	'writes'       reduce using rule 195
	'~'            reduce using rule 195
	L_Ident        reduce using rule 195
	L_doubl        reduce using rule 195
	L_integ        reduce using rule 195
	L_quoted       reduce using rule 195
	%eof           reduce using rule 195


State 200

	PostCond -> 'check' . 'ensures'                     (rule 198)
	PostCond -> 'check' . 'exits'                       (rule 199)
	PostCond -> 'check' . 'breaks'                      (rule 200)
	PostCond -> 'check' . 'continues'                   (rule 201)
	PostCond -> 'check' . 'returns'                     (rule 202)

	'breaks'       shift, and enter state 325
	'continues'    shift, and enter state 326
	'ensures'      shift, and enter state 327
	'exits'        shift, and enter state 328
	'returns'      shift, and enter state 329


State 201

	PostCond -> 'continues' .                           (rule 196)

	'!'            reduce using rule 196
	'&'            reduce using rule 196
	'('            reduce using rule 196
	'*'            reduce using rule 196
	'+'            reduce using rule 196
	'-'            reduce using rule 196
	'\\allocable'  reduce using rule 196
	'\\allocation' reduce using rule 196
	'\\at'         reduce using rule 196
	'\\automatic'  reduce using rule 196
	'\\base_addr'  reduce using rule 196
	'\\block_length'reduce using rule 196
	'\\dangling'   reduce using rule 196
	'\\dynamic'    reduce using rule 196
	'\\exists'     reduce using rule 196
	'\\false'      reduce using rule 196
	'\\forall'     reduce using rule 196
	'\\freeable'   reduce using rule 196
	'\\fresh'      reduce using rule 196
	'\\initialized'reduce using rule 196
	'\\lambda'     reduce using rule 196
	'\\null'       reduce using rule 196
	'\\object_pointer'reduce using rule 196
	'\\offset'     reduce using rule 196
	'\\old'        reduce using rule 196
	'\\pi'         reduce using rule 196
	'\\register'   reduce using rule 196
	'\\result'     reduce using rule 196
	'\\separated'  reduce using rule 196
	'\\static'     reduce using rule 196
	'\\true'       reduce using rule 196
	'\\unallocated'reduce using rule 196
	'\\valid'      reduce using rule 196
	'\\valid_function'reduce using rule 196
	'\\valid_index'reduce using rule 196
	'\\valid_range'reduce using rule 196
	'\\valid_read' reduce using rule 196
	'admit'        reduce using rule 196
	'allocates'    reduce using rule 196
	'assert'       reduce using rule 196
	'assigns'      reduce using rule 196
	'assumes'      reduce using rule 196
	'at'           reduce using rule 196
	'axiom'        reduce using rule 196
	'axiomatic'    reduce using rule 196
	'behavior'     reduce using rule 196
	'behaviors'    reduce using rule 196
	'breaks'       reduce using rule 196
	'check'        reduce using rule 196
	'complete'     reduce using rule 196
	'continues'    reduce using rule 196
	'contract'     reduce using rule 196
	'decreases'    reduce using rule 196
	'disjoint'     reduce using rule 196
	'ensures'      reduce using rule 196
	'exits'        reduce using rule 196
	'frees'        reduce using rule 196
	'function'     reduce using rule 196
	'global'       reduce using rule 196
	'impact'       reduce using rule 196
	'include'      reduce using rule 196
	'inductive'    reduce using rule 196
	'invariant'    reduce using rule 196
	'label'        reduce using rule 196
	'lemma'        reduce using rule 196
	'let'          reduce using rule 196
	'logic'        reduce using rule 196
	'loop'         reduce using rule 196
	'model'        reduce using rule 196
	'module'       reduce using rule 196
	'pragma'       reduce using rule 196
	'predicate'    reduce using rule 196
	'reads'        reduce using rule 196
	'requires'     reduce using rule 196
	'returns'      reduce using rule 196
	'sizeof'       reduce using rule 196
	'slice'        reduce using rule 196
	'terminates'   reduce using rule 196
	'type'         reduce using rule 196
	'variant'      reduce using rule 196
	'writes'       reduce using rule 196
	'~'            reduce using rule 196
	L_Ident        reduce using rule 196
	L_doubl        reduce using rule 196
	L_integ        reduce using rule 196
	L_quoted       reduce using rule 196
	%eof           reduce using rule 196


State 202

	PostCond -> 'ensures' .                             (rule 193)

	'!'            reduce using rule 193
	'&'            reduce using rule 193
	'('            reduce using rule 193
	'*'            reduce using rule 193
	'+'            reduce using rule 193
	'-'            reduce using rule 193
	'\\allocable'  reduce using rule 193
	'\\allocation' reduce using rule 193
	'\\at'         reduce using rule 193
	'\\automatic'  reduce using rule 193
	'\\base_addr'  reduce using rule 193
	'\\block_length'reduce using rule 193
	'\\dangling'   reduce using rule 193
	'\\dynamic'    reduce using rule 193
	'\\exists'     reduce using rule 193
	'\\false'      reduce using rule 193
	'\\forall'     reduce using rule 193
	'\\freeable'   reduce using rule 193
	'\\fresh'      reduce using rule 193
	'\\initialized'reduce using rule 193
	'\\lambda'     reduce using rule 193
	'\\null'       reduce using rule 193
	'\\object_pointer'reduce using rule 193
	'\\offset'     reduce using rule 193
	'\\old'        reduce using rule 193
	'\\pi'         reduce using rule 193
	'\\register'   reduce using rule 193
	'\\result'     reduce using rule 193
	'\\separated'  reduce using rule 193
	'\\static'     reduce using rule 193
	'\\true'       reduce using rule 193
	'\\unallocated'reduce using rule 193
	'\\valid'      reduce using rule 193
	'\\valid_function'reduce using rule 193
	'\\valid_index'reduce using rule 193
	'\\valid_range'reduce using rule 193
	'\\valid_read' reduce using rule 193
	'admit'        reduce using rule 193
	'allocates'    reduce using rule 193
	'assert'       reduce using rule 193
	'assigns'      reduce using rule 193
	'assumes'      reduce using rule 193
	'at'           reduce using rule 193
	'axiom'        reduce using rule 193
	'axiomatic'    reduce using rule 193
	'behavior'     reduce using rule 193
	'behaviors'    reduce using rule 193
	'breaks'       reduce using rule 193
	'check'        reduce using rule 193
	'complete'     reduce using rule 193
	'continues'    reduce using rule 193
	'contract'     reduce using rule 193
	'decreases'    reduce using rule 193
	'disjoint'     reduce using rule 193
	'ensures'      reduce using rule 193
	'exits'        reduce using rule 193
	'frees'        reduce using rule 193
	'function'     reduce using rule 193
	'global'       reduce using rule 193
	'impact'       reduce using rule 193
	'include'      reduce using rule 193
	'inductive'    reduce using rule 193
	'invariant'    reduce using rule 193
	'label'        reduce using rule 193
	'lemma'        reduce using rule 193
	'let'          reduce using rule 193
	'logic'        reduce using rule 193
	'loop'         reduce using rule 193
	'model'        reduce using rule 193
	'module'       reduce using rule 193
	'pragma'       reduce using rule 193
	'predicate'    reduce using rule 193
	'reads'        reduce using rule 193
	'requires'     reduce using rule 193
	'returns'      reduce using rule 193
	'sizeof'       reduce using rule 193
	'slice'        reduce using rule 193
	'terminates'   reduce using rule 193
	'type'         reduce using rule 193
	'variant'      reduce using rule 193
	'writes'       reduce using rule 193
	'~'            reduce using rule 193
	L_Ident        reduce using rule 193
	L_doubl        reduce using rule 193
	L_integ        reduce using rule 193
	L_quoted       reduce using rule 193
	%eof           reduce using rule 193


State 203

	PostCond -> 'exits' .                               (rule 194)

	'!'            reduce using rule 194
	'&'            reduce using rule 194
	'('            reduce using rule 194
	'*'            reduce using rule 194
	'+'            reduce using rule 194
	'-'            reduce using rule 194
	'\\allocable'  reduce using rule 194
	'\\allocation' reduce using rule 194
	'\\at'         reduce using rule 194
	'\\automatic'  reduce using rule 194
	'\\base_addr'  reduce using rule 194
	'\\block_length'reduce using rule 194
	'\\dangling'   reduce using rule 194
	'\\dynamic'    reduce using rule 194
	'\\exists'     reduce using rule 194
	'\\false'      reduce using rule 194
	'\\forall'     reduce using rule 194
	'\\freeable'   reduce using rule 194
	'\\fresh'      reduce using rule 194
	'\\initialized'reduce using rule 194
	'\\lambda'     reduce using rule 194
	'\\null'       reduce using rule 194
	'\\object_pointer'reduce using rule 194
	'\\offset'     reduce using rule 194
	'\\old'        reduce using rule 194
	'\\pi'         reduce using rule 194
	'\\register'   reduce using rule 194
	'\\result'     reduce using rule 194
	'\\separated'  reduce using rule 194
	'\\static'     reduce using rule 194
	'\\true'       reduce using rule 194
	'\\unallocated'reduce using rule 194
	'\\valid'      reduce using rule 194
	'\\valid_function'reduce using rule 194
	'\\valid_index'reduce using rule 194
	'\\valid_range'reduce using rule 194
	'\\valid_read' reduce using rule 194
	'admit'        reduce using rule 194
	'allocates'    reduce using rule 194
	'assert'       reduce using rule 194
	'assigns'      reduce using rule 194
	'assumes'      reduce using rule 194
	'at'           reduce using rule 194
	'axiom'        reduce using rule 194
	'axiomatic'    reduce using rule 194
	'behavior'     reduce using rule 194
	'behaviors'    reduce using rule 194
	'breaks'       reduce using rule 194
	'check'        reduce using rule 194
	'complete'     reduce using rule 194
	'continues'    reduce using rule 194
	'contract'     reduce using rule 194
	'decreases'    reduce using rule 194
	'disjoint'     reduce using rule 194
	'ensures'      reduce using rule 194
	'exits'        reduce using rule 194
	'frees'        reduce using rule 194
	'function'     reduce using rule 194
	'global'       reduce using rule 194
	'impact'       reduce using rule 194
	'include'      reduce using rule 194
	'inductive'    reduce using rule 194
	'invariant'    reduce using rule 194
	'label'        reduce using rule 194
	'lemma'        reduce using rule 194
	'let'          reduce using rule 194
	'logic'        reduce using rule 194
	'loop'         reduce using rule 194
	'model'        reduce using rule 194
	'module'       reduce using rule 194
	'pragma'       reduce using rule 194
	'predicate'    reduce using rule 194
	'reads'        reduce using rule 194
	'requires'     reduce using rule 194
	'returns'      reduce using rule 194
	'sizeof'       reduce using rule 194
	'slice'        reduce using rule 194
	'terminates'   reduce using rule 194
	'type'         reduce using rule 194
	'variant'      reduce using rule 194
	'writes'       reduce using rule 194
	'~'            reduce using rule 194
	L_Ident        reduce using rule 194
	L_doubl        reduce using rule 194
	L_integ        reduce using rule 194
	L_quoted       reduce using rule 194
	%eof           reduce using rule 194


State 204

	PostCond -> 'returns' .                             (rule 197)

	'!'            reduce using rule 197
	'&'            reduce using rule 197
	'('            reduce using rule 197
	'*'            reduce using rule 197
	'+'            reduce using rule 197
	'-'            reduce using rule 197
	'\\allocable'  reduce using rule 197
	'\\allocation' reduce using rule 197
	'\\at'         reduce using rule 197
	'\\automatic'  reduce using rule 197
	'\\base_addr'  reduce using rule 197
	'\\block_length'reduce using rule 197
	'\\dangling'   reduce using rule 197
	'\\dynamic'    reduce using rule 197
	'\\exists'     reduce using rule 197
	'\\false'      reduce using rule 197
	'\\forall'     reduce using rule 197
	'\\freeable'   reduce using rule 197
	'\\fresh'      reduce using rule 197
	'\\initialized'reduce using rule 197
	'\\lambda'     reduce using rule 197
	'\\null'       reduce using rule 197
	'\\object_pointer'reduce using rule 197
	'\\offset'     reduce using rule 197
	'\\old'        reduce using rule 197
	'\\pi'         reduce using rule 197
	'\\register'   reduce using rule 197
	'\\result'     reduce using rule 197
	'\\separated'  reduce using rule 197
	'\\static'     reduce using rule 197
	'\\true'       reduce using rule 197
	'\\unallocated'reduce using rule 197
	'\\valid'      reduce using rule 197
	'\\valid_function'reduce using rule 197
	'\\valid_index'reduce using rule 197
	'\\valid_range'reduce using rule 197
	'\\valid_read' reduce using rule 197
	'admit'        reduce using rule 197
	'allocates'    reduce using rule 197
	'assert'       reduce using rule 197
	'assigns'      reduce using rule 197
	'assumes'      reduce using rule 197
	'at'           reduce using rule 197
	'axiom'        reduce using rule 197
	'axiomatic'    reduce using rule 197
	'behavior'     reduce using rule 197
	'behaviors'    reduce using rule 197
	'breaks'       reduce using rule 197
	'check'        reduce using rule 197
	'complete'     reduce using rule 197
	'continues'    reduce using rule 197
	'contract'     reduce using rule 197
	'decreases'    reduce using rule 197
	'disjoint'     reduce using rule 197
	'ensures'      reduce using rule 197
	'exits'        reduce using rule 197
	'frees'        reduce using rule 197
	'function'     reduce using rule 197
	'global'       reduce using rule 197
	'impact'       reduce using rule 197
	'include'      reduce using rule 197
	'inductive'    reduce using rule 197
	'invariant'    reduce using rule 197
	'label'        reduce using rule 197
	'lemma'        reduce using rule 197
	'let'          reduce using rule 197
	'logic'        reduce using rule 197
	'loop'         reduce using rule 197
	'model'        reduce using rule 197
	'module'       reduce using rule 197
	'pragma'       reduce using rule 197
	'predicate'    reduce using rule 197
	'reads'        reduce using rule 197
	'requires'     reduce using rule 197
	'returns'      reduce using rule 197
	'sizeof'       reduce using rule 197
	'slice'        reduce using rule 197
	'terminates'   reduce using rule 197
	'type'         reduce using rule 197
	'variant'      reduce using rule 197
	'writes'       reduce using rule 197
	'~'            reduce using rule 197
	L_Ident        reduce using rule 197
	L_doubl        reduce using rule 197
	L_integ        reduce using rule 197
	L_quoted       reduce using rule 197
	%eof           reduce using rule 197


State 205

	%start_pAnyIdentifier -> AnyIdentifier .            (rule 39)

	%eof           accept


State 206

	AnyIdentifier -> Identifier .                       (rule 192)

	')'            reduce using rule 192
	','            reduce using rule 192
	';'            reduce using rule 192
	'}'            reduce using rule 192
	%eof           reduce using rule 192


State 207

	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)
	LexprOption -> Lexpr .                              (rule 191)

	')'            reduce using rule 191
	'..'           reduce using rule 191
	'?'            shift, and enter state 303
	']'            reduce using rule 191
	%eof           reduce using rule 191


State 208

	%start_pLexprOption -> LexprOption .                (rule 38)

	%eof           accept


State 209

	%start_pRange -> Range .                            (rule 37)

	%eof           accept


State 210

	Range -> LexprOption . '..' LexprOption             (rule 189)

	'..'           shift, and enter state 324


State 211

	ListLabelName -> LabelName .                        (rule 187)
	ListLabelName -> LabelName . ',' ListLabelName      (rule 188)

	','            shift, and enter state 323
	'}'            reduce using rule 187
	%eof           reduce using rule 187


State 212

	%start_pListLabelName -> ListLabelName .            (rule 36)

	%eof           accept


State 213

	LabelName -> AnyIdentifier .                        (rule 186)

	')'            reduce using rule 186
	','            reduce using rule 186
	'}'            reduce using rule 186
	%eof           reduce using rule 186


State 214

	%start_pLabelName -> LabelName .                    (rule 35)

	%eof           accept


State 215

	%start_pOptLabelList -> OptLabelList .              (rule 34)

	%eof           accept


State 216

	OptLabelList -> '{' . ListLabelName '}'             (rule 185)

	'behaviors'    shift, and enter state 115
	'label'        shift, and enter state 132
	'reads'        shift, and enter state 141
	'writes'       shift, and enter state 149
	L_Ident        shift, and enter state 56

	Ident          goto state 57
	LabelName      goto state 211
	ListLabelName  goto state 322
	AnyIdentifier  goto state 213
	Identifier     goto state 206

State 217

	%start_pOptLabel2 -> OptLabel2 .                    (rule 33)

	%eof           accept


State 218

	OptLabel2 -> OptLabelList .                         (rule 183)

	'('            reduce using rule 183
	%eof           reduce using rule 183


State 219

	%start_pOptLabel1 -> OptLabel1 .                    (rule 32)

	%eof           accept


State 220

	OptLabel1 -> OptLabelList .                         (rule 182)

	'('            reduce using rule 182
	%eof           reduce using rule 182


State 221

	%start_pLexpr3 -> Lexpr3 .                          (rule 31)
	Lexpr3 -> Lexpr3 . '+' Lexpr3                       (rule 160)
	Lexpr3 -> Lexpr3 . '-' Lexpr3                       (rule 161)
	Lexpr3 -> Lexpr3 . '*' Lexpr3                       (rule 162)
	Lexpr3 -> Lexpr3 . '/' Lexpr3                       (rule 163)
	Lexpr3 -> Lexpr3 . '%' Lexpr3                       (rule 164)
	Lexpr3 -> Lexpr3 . '[' Range ']'                    (rule 165)
	Lexpr3 -> Lexpr3 . '[' Lexpr ']'                    (rule 166)

	'%'            shift, and enter state 307
	'*'            shift, and enter state 308
	'+'            shift, and enter state 309
	'-'            shift, and enter state 310
	'/'            shift, and enter state 311
	'['            shift, and enter state 312
	%eof           accept


State 222

	ArraySize -> Integer .                              (rule 131)

	']'            reduce using rule 131
	%eof           reduce using rule 131


State 223

	%start_pArraySize -> ArraySize .                    (rule 30)

	%eof           accept


State 224

	ArraySize -> FullIdentifier .                       (rule 132)

	']'            reduce using rule 132
	%eof           reduce using rule 132


State 225

	%start_pVarSpec1 -> VarSpec1 .                      (rule 29)
	VarSpec1 -> VarSpec1 . '[' ArraySize ']'            (rule 129)

	'['            shift, and enter state 318
	%eof           accept


State 226

	VarSpec1 -> FullIdentifier .                        (rule 128)

	')'            reduce using rule 128
	','            reduce using rule 128
	';'            reduce using rule 128
	'['            reduce using rule 128
	%eof           reduce using rule 128


State 227

	VarSpec1 -> '(' . VarSpec ')'                       (rule 130)

	'('            shift, and enter state 227
	'*'            shift, and enter state 230
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	L_Ident        shift, and enter state 56

	Ident          goto state 57
	VarSpec        goto state 321
	Stars          goto state 228
	ListStars      goto state 233
	VarSpec1       goto state 234
	FullIdentifier goto state 226
	Identifier     goto state 67

State 228

	ListStars -> Stars .                                (rule 126)
	ListStars -> Stars . ListStars                      (rule 127)

	'('            reduce using rule 126
	'*'            shift, and enter state 230
	'admit'        reduce using rule 126
	'allocates'    reduce using rule 126
	'assert'       reduce using rule 126
	'assigns'      reduce using rule 126
	'assumes'      reduce using rule 126
	'at'           reduce using rule 126
	'axiom'        reduce using rule 126
	'axiomatic'    reduce using rule 126
	'behavior'     reduce using rule 126
	'behaviors'    reduce using rule 126
	'breaks'       reduce using rule 126
	'check'        reduce using rule 126
	'complete'     reduce using rule 126
	'continues'    reduce using rule 126
	'contract'     reduce using rule 126
	'decreases'    reduce using rule 126
	'disjoint'     reduce using rule 126
	'ensures'      reduce using rule 126
	'exits'        reduce using rule 126
	'frees'        reduce using rule 126
	'function'     reduce using rule 126
	'global'       reduce using rule 126
	'impact'       reduce using rule 126
	'include'      reduce using rule 126
	'inductive'    reduce using rule 126
	'invariant'    reduce using rule 126
	'label'        reduce using rule 126
	'lemma'        reduce using rule 126
	'let'          reduce using rule 126
	'logic'        reduce using rule 126
	'loop'         reduce using rule 126
	'model'        reduce using rule 126
	'module'       reduce using rule 126
	'pragma'       reduce using rule 126
	'predicate'    reduce using rule 126
	'reads'        reduce using rule 126
	'requires'     reduce using rule 126
	'returns'      reduce using rule 126
	'slice'        reduce using rule 126
	'terminates'   reduce using rule 126
	'type'         reduce using rule 126
	'variant'      reduce using rule 126
	'writes'       reduce using rule 126
	L_Ident        reduce using rule 126
	%eof           reduce using rule 126

	Stars          goto state 228
	ListStars      goto state 320

State 229

	%start_pListStars -> ListStars .                    (rule 28)

	%eof           accept


State 230

	Stars -> '*' .                                      (rule 125)

	'('            reduce using rule 125
	'*'            reduce using rule 125
	'admit'        reduce using rule 125
	'allocates'    reduce using rule 125
	'assert'       reduce using rule 125
	'assigns'      reduce using rule 125
	'assumes'      reduce using rule 125
	'at'           reduce using rule 125
	'axiom'        reduce using rule 125
	'axiomatic'    reduce using rule 125
	'behavior'     reduce using rule 125
	'behaviors'    reduce using rule 125
	'breaks'       reduce using rule 125
	'check'        reduce using rule 125
	'complete'     reduce using rule 125
	'continues'    reduce using rule 125
	'contract'     reduce using rule 125
	'decreases'    reduce using rule 125
	'disjoint'     reduce using rule 125
	'ensures'      reduce using rule 125
	'exits'        reduce using rule 125
	'frees'        reduce using rule 125
	'function'     reduce using rule 125
	'global'       reduce using rule 125
	'impact'       reduce using rule 125
	'include'      reduce using rule 125
	'inductive'    reduce using rule 125
	'invariant'    reduce using rule 125
	'label'        reduce using rule 125
	'lemma'        reduce using rule 125
	'let'          reduce using rule 125
	'logic'        reduce using rule 125
	'loop'         reduce using rule 125
	'model'        reduce using rule 125
	'module'       reduce using rule 125
	'pragma'       reduce using rule 125
	'predicate'    reduce using rule 125
	'reads'        reduce using rule 125
	'requires'     reduce using rule 125
	'returns'      reduce using rule 125
	'slice'        reduce using rule 125
	'terminates'   reduce using rule 125
	'type'         reduce using rule 125
	'variant'      reduce using rule 125
	'writes'       reduce using rule 125
	L_Ident        reduce using rule 125
	%eof           reduce using rule 125


State 231

	%start_pStars -> Stars .                            (rule 27)

	%eof           accept


State 232

	%start_pVarSpec -> VarSpec .                        (rule 26)

	%eof           accept


State 233

	VarSpec -> ListStars . VarSpec1                     (rule 124)

	'('            shift, and enter state 227
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	L_Ident        shift, and enter state 56

	Ident          goto state 57
	VarSpec1       goto state 319
	FullIdentifier goto state 226
	Identifier     goto state 67

State 234

	VarSpec -> VarSpec1 .                               (rule 123)
	VarSpec1 -> VarSpec1 . '[' ArraySize ']'            (rule 129)

	')'            reduce using rule 123
	','            reduce using rule 123
	';'            reduce using rule 123
	'['            shift, and enter state 318
	%eof           reduce using rule 123


State 235

	ListBindersReentrance -> BindersReentrance . ListBindersReentrance    (rule 122)

	','            shift, and enter state 237
	';'            reduce using rule 121
	%eof           reduce using rule 121

	BindersReentrancegoto state 235
	ListBindersReentrancegoto state 317

State 236

	%start_pListBindersReentrance -> ListBindersReentrance .    (rule 25)

	%eof           accept


State 237

	BindersReentrance -> ',' . TypeSpecOFTYPENAME VarSpec    (rule 119)
	BindersReentrance -> ',' . VarSpec                  (rule 120)

	'('            shift, and enter state 227
	'*'            shift, and enter state 230
	'_Bool'        shift, and enter state 180
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'boolean'      shift, and enter state 181
	'breaks'       shift, and enter state 116
	'char'         shift, and enter state 182
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'double'       shift, and enter state 183
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'float'        shift, and enter state 184
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'int'          shift, and enter state 185
	'integer'      shift, and enter state 186
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'long'         shift, and enter state 187
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'real'         shift, and enter state 188
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'short'        shift, and enter state 189
	'signed'       shift, and enter state 190
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'unsigned'     shift, and enter state 191
	'variant'      shift, and enter state 148
	'void'         shift, and enter state 192
	'writes'       shift, and enter state 149
	L_Ident        shift, and enter state 56

	Ident          goto state 314
	TypeSpecOFTYPENAMEgoto state 315
	VarSpec        goto state 316
	Stars          goto state 228
	ListStars      goto state 233
	VarSpec1       goto state 234
	FullIdentifier goto state 226
	Identifier     goto state 67
	TypeSpecSimple goto state 241

State 238

	%start_pBindersReentrance -> BindersReentrance .    (rule 24)

	%eof           accept


State 239

	TypeSpecOFTYPENAME -> Ident .                       (rule 117)

	'('            reduce using rule 117
	'*'            reduce using rule 117
	'admit'        reduce using rule 117
	'allocates'    reduce using rule 117
	'assert'       reduce using rule 117
	'assigns'      reduce using rule 117
	'assumes'      reduce using rule 117
	'at'           reduce using rule 117
	'axiom'        reduce using rule 117
	'axiomatic'    reduce using rule 117
	'behavior'     reduce using rule 117
	'behaviors'    reduce using rule 117
	'breaks'       reduce using rule 117
	'check'        reduce using rule 117
	'complete'     reduce using rule 117
	'continues'    reduce using rule 117
	'contract'     reduce using rule 117
	'decreases'    reduce using rule 117
	'disjoint'     reduce using rule 117
	'ensures'      reduce using rule 117
	'exits'        reduce using rule 117
	'frees'        reduce using rule 117
	'function'     reduce using rule 117
	'global'       reduce using rule 117
	'impact'       reduce using rule 117
	'include'      reduce using rule 117
	'inductive'    reduce using rule 117
	'invariant'    reduce using rule 117
	'label'        reduce using rule 117
	'lemma'        reduce using rule 117
	'let'          reduce using rule 117
	'logic'        reduce using rule 117
	'loop'         reduce using rule 117
	'model'        reduce using rule 117
	'module'       reduce using rule 117
	'pragma'       reduce using rule 117
	'predicate'    reduce using rule 117
	'reads'        reduce using rule 117
	'requires'     reduce using rule 117
	'returns'      reduce using rule 117
	'slice'        reduce using rule 117
	'terminates'   reduce using rule 117
	'type'         reduce using rule 117
	'variant'      reduce using rule 117
	'writes'       reduce using rule 117
	L_Ident        reduce using rule 117
	%eof           reduce using rule 117


State 240

	%start_pTypeSpecOFTYPENAME -> TypeSpecOFTYPENAME .    (rule 23)

	%eof           accept


State 241

	TypeSpecOFTYPENAME -> TypeSpecSimple .              (rule 118)

	'('            reduce using rule 118
	'*'            reduce using rule 118
	'admit'        reduce using rule 118
	'allocates'    reduce using rule 118
	'assert'       reduce using rule 118
	'assigns'      reduce using rule 118
	'assumes'      reduce using rule 118
	'at'           reduce using rule 118
	'axiom'        reduce using rule 118
	'axiomatic'    reduce using rule 118
	'behavior'     reduce using rule 118
	'behaviors'    reduce using rule 118
	'breaks'       reduce using rule 118
	'check'        reduce using rule 118
	'complete'     reduce using rule 118
	'continues'    reduce using rule 118
	'contract'     reduce using rule 118
	'decreases'    reduce using rule 118
	'disjoint'     reduce using rule 118
	'ensures'      reduce using rule 118
	'exits'        reduce using rule 118
	'frees'        reduce using rule 118
	'function'     reduce using rule 118
	'global'       reduce using rule 118
	'impact'       reduce using rule 118
	'include'      reduce using rule 118
	'inductive'    reduce using rule 118
	'invariant'    reduce using rule 118
	'label'        reduce using rule 118
	'lemma'        reduce using rule 118
	'let'          reduce using rule 118
	'logic'        reduce using rule 118
	'loop'         reduce using rule 118
	'model'        reduce using rule 118
	'module'       reduce using rule 118
	'pragma'       reduce using rule 118
	'predicate'    reduce using rule 118
	'reads'        reduce using rule 118
	'requires'     reduce using rule 118
	'returns'      reduce using rule 118
	'slice'        reduce using rule 118
	'terminates'   reduce using rule 118
	'type'         reduce using rule 118
	'variant'      reduce using rule 118
	'writes'       reduce using rule 118
	L_Ident        reduce using rule 118
	%eof           reduce using rule 118


State 242

	%start_pBinders -> Binders .                        (rule 22)

	%eof           accept


State 243

	Binders -> TypeSpecOFTYPENAME . VarSpec ListBindersReentrance    (rule 116)

	'('            shift, and enter state 227
	'*'            shift, and enter state 230
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	L_Ident        shift, and enter state 56

	Ident          goto state 57
	VarSpec        goto state 313
	Stars          goto state 228
	ListStars      goto state 233
	VarSpec1       goto state 234
	FullIdentifier goto state 226
	Identifier     goto state 67

State 244

	%start_pLexprBinder -> LexprBinder .                (rule 21)

	%eof           accept


State 245

	%start_pLexpr2 -> Lexpr2 .                          (rule 20)

	%eof           accept


State 246

	Lexpr2 -> Lexpr3 .                                  (rule 110)
	Lexpr3 -> Lexpr3 . '+' Lexpr3                       (rule 160)
	Lexpr3 -> Lexpr3 . '-' Lexpr3                       (rule 161)
	Lexpr3 -> Lexpr3 . '*' Lexpr3                       (rule 162)
	Lexpr3 -> Lexpr3 . '/' Lexpr3                       (rule 163)
	Lexpr3 -> Lexpr3 . '%' Lexpr3                       (rule 164)
	Lexpr3 -> Lexpr3 . '[' Range ']'                    (rule 165)
	Lexpr3 -> Lexpr3 . '[' Lexpr ']'                    (rule 166)

	'%'            shift, and enter state 307
	'&'            reduce using rule 110
	'&&'           reduce using rule 110
	')'            reduce using rule 110
	'*'            shift, and enter state 308
	'+'            shift, and enter state 309
	','            reduce using rule 110
	'-'            shift, and enter state 310
	'-->'          reduce using rule 110
	'..'           reduce using rule 110
	'/'            shift, and enter state 311
	':'            reduce using rule 110
	';'            reduce using rule 110
	'<-->'         reduce using rule 110
	'<==>'         reduce using rule 110
	'==>'          reduce using rule 110
	'?'            reduce using rule 110
	'['            shift, and enter state 312
	'\\from'       reduce using rule 110
	'\\in'         reduce using rule 110
	']'            reduce using rule 110
	'^'            reduce using rule 110
	'^^'           reduce using rule 110
	'for'          reduce using rule 110
	'|'            reduce using rule 110
	'||'           reduce using rule 110
	%eof           reduce using rule 110


State 247

	%start_pRelation -> Relation .                      (rule 19)

	%eof           accept


State 248

	Relation -> '!=' .                                  (rule 109)

	'!'            reduce using rule 109
	'&'            reduce using rule 109
	'('            reduce using rule 109
	'*'            reduce using rule 109
	'+'            reduce using rule 109
	'-'            reduce using rule 109
	'\\allocable'  reduce using rule 109
	'\\allocation' reduce using rule 109
	'\\at'         reduce using rule 109
	'\\automatic'  reduce using rule 109
	'\\base_addr'  reduce using rule 109
	'\\block_length'reduce using rule 109
	'\\dangling'   reduce using rule 109
	'\\dynamic'    reduce using rule 109
	'\\exists'     reduce using rule 109
	'\\false'      reduce using rule 109
	'\\forall'     reduce using rule 109
	'\\freeable'   reduce using rule 109
	'\\fresh'      reduce using rule 109
	'\\initialized'reduce using rule 109
	'\\lambda'     reduce using rule 109
	'\\null'       reduce using rule 109
	'\\object_pointer'reduce using rule 109
	'\\offset'     reduce using rule 109
	'\\old'        reduce using rule 109
	'\\pi'         reduce using rule 109
	'\\register'   reduce using rule 109
	'\\result'     reduce using rule 109
	'\\separated'  reduce using rule 109
	'\\static'     reduce using rule 109
	'\\true'       reduce using rule 109
	'\\unallocated'reduce using rule 109
	'\\valid'      reduce using rule 109
	'\\valid_function'reduce using rule 109
	'\\valid_index'reduce using rule 109
	'\\valid_range'reduce using rule 109
	'\\valid_read' reduce using rule 109
	'admit'        reduce using rule 109
	'allocates'    reduce using rule 109
	'assert'       reduce using rule 109
	'assigns'      reduce using rule 109
	'assumes'      reduce using rule 109
	'at'           reduce using rule 109
	'axiom'        reduce using rule 109
	'axiomatic'    reduce using rule 109
	'behavior'     reduce using rule 109
	'behaviors'    reduce using rule 109
	'breaks'       reduce using rule 109
	'check'        reduce using rule 109
	'complete'     reduce using rule 109
	'continues'    reduce using rule 109
	'contract'     reduce using rule 109
	'decreases'    reduce using rule 109
	'disjoint'     reduce using rule 109
	'ensures'      reduce using rule 109
	'exits'        reduce using rule 109
	'frees'        reduce using rule 109
	'function'     reduce using rule 109
	'global'       reduce using rule 109
	'impact'       reduce using rule 109
	'include'      reduce using rule 109
	'inductive'    reduce using rule 109
	'invariant'    reduce using rule 109
	'label'        reduce using rule 109
	'lemma'        reduce using rule 109
	'let'          reduce using rule 109
	'logic'        reduce using rule 109
	'loop'         reduce using rule 109
	'model'        reduce using rule 109
	'module'       reduce using rule 109
	'pragma'       reduce using rule 109
	'predicate'    reduce using rule 109
	'reads'        reduce using rule 109
	'requires'     reduce using rule 109
	'returns'      reduce using rule 109
	'sizeof'       reduce using rule 109
	'slice'        reduce using rule 109
	'terminates'   reduce using rule 109
	'type'         reduce using rule 109
	'variant'      reduce using rule 109
	'writes'       reduce using rule 109
	'~'            reduce using rule 109
	L_Ident        reduce using rule 109
	L_doubl        reduce using rule 109
	L_integ        reduce using rule 109
	L_quoted       reduce using rule 109
	%eof           reduce using rule 109


State 249

	Relation -> '<' .                                   (rule 104)

	'!'            reduce using rule 104
	'&'            reduce using rule 104
	'('            reduce using rule 104
	'*'            reduce using rule 104
	'+'            reduce using rule 104
	'-'            reduce using rule 104
	'\\allocable'  reduce using rule 104
	'\\allocation' reduce using rule 104
	'\\at'         reduce using rule 104
	'\\automatic'  reduce using rule 104
	'\\base_addr'  reduce using rule 104
	'\\block_length'reduce using rule 104
	'\\dangling'   reduce using rule 104
	'\\dynamic'    reduce using rule 104
	'\\exists'     reduce using rule 104
	'\\false'      reduce using rule 104
	'\\forall'     reduce using rule 104
	'\\freeable'   reduce using rule 104
	'\\fresh'      reduce using rule 104
	'\\initialized'reduce using rule 104
	'\\lambda'     reduce using rule 104
	'\\null'       reduce using rule 104
	'\\object_pointer'reduce using rule 104
	'\\offset'     reduce using rule 104
	'\\old'        reduce using rule 104
	'\\pi'         reduce using rule 104
	'\\register'   reduce using rule 104
	'\\result'     reduce using rule 104
	'\\separated'  reduce using rule 104
	'\\static'     reduce using rule 104
	'\\true'       reduce using rule 104
	'\\unallocated'reduce using rule 104
	'\\valid'      reduce using rule 104
	'\\valid_function'reduce using rule 104
	'\\valid_index'reduce using rule 104
	'\\valid_range'reduce using rule 104
	'\\valid_read' reduce using rule 104
	'admit'        reduce using rule 104
	'allocates'    reduce using rule 104
	'assert'       reduce using rule 104
	'assigns'      reduce using rule 104
	'assumes'      reduce using rule 104
	'at'           reduce using rule 104
	'axiom'        reduce using rule 104
	'axiomatic'    reduce using rule 104
	'behavior'     reduce using rule 104
	'behaviors'    reduce using rule 104
	'breaks'       reduce using rule 104
	'check'        reduce using rule 104
	'complete'     reduce using rule 104
	'continues'    reduce using rule 104
	'contract'     reduce using rule 104
	'decreases'    reduce using rule 104
	'disjoint'     reduce using rule 104
	'ensures'      reduce using rule 104
	'exits'        reduce using rule 104
	'frees'        reduce using rule 104
	'function'     reduce using rule 104
	'global'       reduce using rule 104
	'impact'       reduce using rule 104
	'include'      reduce using rule 104
	'inductive'    reduce using rule 104
	'invariant'    reduce using rule 104
	'label'        reduce using rule 104
	'lemma'        reduce using rule 104
	'let'          reduce using rule 104
	'logic'        reduce using rule 104
	'loop'         reduce using rule 104
	'model'        reduce using rule 104
	'module'       reduce using rule 104
	'pragma'       reduce using rule 104
	'predicate'    reduce using rule 104
	'reads'        reduce using rule 104
	'requires'     reduce using rule 104
	'returns'      reduce using rule 104
	'sizeof'       reduce using rule 104
	'slice'        reduce using rule 104
	'terminates'   reduce using rule 104
	'type'         reduce using rule 104
	'variant'      reduce using rule 104
	'writes'       reduce using rule 104
	'~'            reduce using rule 104
	L_Ident        reduce using rule 104
	L_doubl        reduce using rule 104
	L_integ        reduce using rule 104
	L_quoted       reduce using rule 104
	%eof           reduce using rule 104


State 250

	Relation -> '<=' .                                  (rule 106)

	'!'            reduce using rule 106
	'&'            reduce using rule 106
	'('            reduce using rule 106
	'*'            reduce using rule 106
	'+'            reduce using rule 106
	'-'            reduce using rule 106
	'\\allocable'  reduce using rule 106
	'\\allocation' reduce using rule 106
	'\\at'         reduce using rule 106
	'\\automatic'  reduce using rule 106
	'\\base_addr'  reduce using rule 106
	'\\block_length'reduce using rule 106
	'\\dangling'   reduce using rule 106
	'\\dynamic'    reduce using rule 106
	'\\exists'     reduce using rule 106
	'\\false'      reduce using rule 106
	'\\forall'     reduce using rule 106
	'\\freeable'   reduce using rule 106
	'\\fresh'      reduce using rule 106
	'\\initialized'reduce using rule 106
	'\\lambda'     reduce using rule 106
	'\\null'       reduce using rule 106
	'\\object_pointer'reduce using rule 106
	'\\offset'     reduce using rule 106
	'\\old'        reduce using rule 106
	'\\pi'         reduce using rule 106
	'\\register'   reduce using rule 106
	'\\result'     reduce using rule 106
	'\\separated'  reduce using rule 106
	'\\static'     reduce using rule 106
	'\\true'       reduce using rule 106
	'\\unallocated'reduce using rule 106
	'\\valid'      reduce using rule 106
	'\\valid_function'reduce using rule 106
	'\\valid_index'reduce using rule 106
	'\\valid_range'reduce using rule 106
	'\\valid_read' reduce using rule 106
	'admit'        reduce using rule 106
	'allocates'    reduce using rule 106
	'assert'       reduce using rule 106
	'assigns'      reduce using rule 106
	'assumes'      reduce using rule 106
	'at'           reduce using rule 106
	'axiom'        reduce using rule 106
	'axiomatic'    reduce using rule 106
	'behavior'     reduce using rule 106
	'behaviors'    reduce using rule 106
	'breaks'       reduce using rule 106
	'check'        reduce using rule 106
	'complete'     reduce using rule 106
	'continues'    reduce using rule 106
	'contract'     reduce using rule 106
	'decreases'    reduce using rule 106
	'disjoint'     reduce using rule 106
	'ensures'      reduce using rule 106
	'exits'        reduce using rule 106
	'frees'        reduce using rule 106
	'function'     reduce using rule 106
	'global'       reduce using rule 106
	'impact'       reduce using rule 106
	'include'      reduce using rule 106
	'inductive'    reduce using rule 106
	'invariant'    reduce using rule 106
	'label'        reduce using rule 106
	'lemma'        reduce using rule 106
	'let'          reduce using rule 106
	'logic'        reduce using rule 106
	'loop'         reduce using rule 106
	'model'        reduce using rule 106
	'module'       reduce using rule 106
	'pragma'       reduce using rule 106
	'predicate'    reduce using rule 106
	'reads'        reduce using rule 106
	'requires'     reduce using rule 106
	'returns'      reduce using rule 106
	'sizeof'       reduce using rule 106
	'slice'        reduce using rule 106
	'terminates'   reduce using rule 106
	'type'         reduce using rule 106
	'variant'      reduce using rule 106
	'writes'       reduce using rule 106
	'~'            reduce using rule 106
	L_Ident        reduce using rule 106
	L_doubl        reduce using rule 106
	L_integ        reduce using rule 106
	L_quoted       reduce using rule 106
	%eof           reduce using rule 106


State 251

	Relation -> '==' .                                  (rule 108)

	'!'            reduce using rule 108
	'&'            reduce using rule 108
	'('            reduce using rule 108
	'*'            reduce using rule 108
	'+'            reduce using rule 108
	'-'            reduce using rule 108
	'\\allocable'  reduce using rule 108
	'\\allocation' reduce using rule 108
	'\\at'         reduce using rule 108
	'\\automatic'  reduce using rule 108
	'\\base_addr'  reduce using rule 108
	'\\block_length'reduce using rule 108
	'\\dangling'   reduce using rule 108
	'\\dynamic'    reduce using rule 108
	'\\exists'     reduce using rule 108
	'\\false'      reduce using rule 108
	'\\forall'     reduce using rule 108
	'\\freeable'   reduce using rule 108
	'\\fresh'      reduce using rule 108
	'\\initialized'reduce using rule 108
	'\\lambda'     reduce using rule 108
	'\\null'       reduce using rule 108
	'\\object_pointer'reduce using rule 108
	'\\offset'     reduce using rule 108
	'\\old'        reduce using rule 108
	'\\pi'         reduce using rule 108
	'\\register'   reduce using rule 108
	'\\result'     reduce using rule 108
	'\\separated'  reduce using rule 108
	'\\static'     reduce using rule 108
	'\\true'       reduce using rule 108
	'\\unallocated'reduce using rule 108
	'\\valid'      reduce using rule 108
	'\\valid_function'reduce using rule 108
	'\\valid_index'reduce using rule 108
	'\\valid_range'reduce using rule 108
	'\\valid_read' reduce using rule 108
	'admit'        reduce using rule 108
	'allocates'    reduce using rule 108
	'assert'       reduce using rule 108
	'assigns'      reduce using rule 108
	'assumes'      reduce using rule 108
	'at'           reduce using rule 108
	'axiom'        reduce using rule 108
	'axiomatic'    reduce using rule 108
	'behavior'     reduce using rule 108
	'behaviors'    reduce using rule 108
	'breaks'       reduce using rule 108
	'check'        reduce using rule 108
	'complete'     reduce using rule 108
	'continues'    reduce using rule 108
	'contract'     reduce using rule 108
	'decreases'    reduce using rule 108
	'disjoint'     reduce using rule 108
	'ensures'      reduce using rule 108
	'exits'        reduce using rule 108
	'frees'        reduce using rule 108
	'function'     reduce using rule 108
	'global'       reduce using rule 108
	'impact'       reduce using rule 108
	'include'      reduce using rule 108
	'inductive'    reduce using rule 108
	'invariant'    reduce using rule 108
	'label'        reduce using rule 108
	'lemma'        reduce using rule 108
	'let'          reduce using rule 108
	'logic'        reduce using rule 108
	'loop'         reduce using rule 108
	'model'        reduce using rule 108
	'module'       reduce using rule 108
	'pragma'       reduce using rule 108
	'predicate'    reduce using rule 108
	'reads'        reduce using rule 108
	'requires'     reduce using rule 108
	'returns'      reduce using rule 108
	'sizeof'       reduce using rule 108
	'slice'        reduce using rule 108
	'terminates'   reduce using rule 108
	'type'         reduce using rule 108
	'variant'      reduce using rule 108
	'writes'       reduce using rule 108
	'~'            reduce using rule 108
	L_Ident        reduce using rule 108
	L_doubl        reduce using rule 108
	L_integ        reduce using rule 108
	L_quoted       reduce using rule 108
	%eof           reduce using rule 108


State 252

	Relation -> '>' .                                   (rule 105)

	'!'            reduce using rule 105
	'&'            reduce using rule 105
	'('            reduce using rule 105
	'*'            reduce using rule 105
	'+'            reduce using rule 105
	'-'            reduce using rule 105
	'\\allocable'  reduce using rule 105
	'\\allocation' reduce using rule 105
	'\\at'         reduce using rule 105
	'\\automatic'  reduce using rule 105
	'\\base_addr'  reduce using rule 105
	'\\block_length'reduce using rule 105
	'\\dangling'   reduce using rule 105
	'\\dynamic'    reduce using rule 105
	'\\exists'     reduce using rule 105
	'\\false'      reduce using rule 105
	'\\forall'     reduce using rule 105
	'\\freeable'   reduce using rule 105
	'\\fresh'      reduce using rule 105
	'\\initialized'reduce using rule 105
	'\\lambda'     reduce using rule 105
	'\\null'       reduce using rule 105
	'\\object_pointer'reduce using rule 105
	'\\offset'     reduce using rule 105
	'\\old'        reduce using rule 105
	'\\pi'         reduce using rule 105
	'\\register'   reduce using rule 105
	'\\result'     reduce using rule 105
	'\\separated'  reduce using rule 105
	'\\static'     reduce using rule 105
	'\\true'       reduce using rule 105
	'\\unallocated'reduce using rule 105
	'\\valid'      reduce using rule 105
	'\\valid_function'reduce using rule 105
	'\\valid_index'reduce using rule 105
	'\\valid_range'reduce using rule 105
	'\\valid_read' reduce using rule 105
	'admit'        reduce using rule 105
	'allocates'    reduce using rule 105
	'assert'       reduce using rule 105
	'assigns'      reduce using rule 105
	'assumes'      reduce using rule 105
	'at'           reduce using rule 105
	'axiom'        reduce using rule 105
	'axiomatic'    reduce using rule 105
	'behavior'     reduce using rule 105
	'behaviors'    reduce using rule 105
	'breaks'       reduce using rule 105
	'check'        reduce using rule 105
	'complete'     reduce using rule 105
	'continues'    reduce using rule 105
	'contract'     reduce using rule 105
	'decreases'    reduce using rule 105
	'disjoint'     reduce using rule 105
	'ensures'      reduce using rule 105
	'exits'        reduce using rule 105
	'frees'        reduce using rule 105
	'function'     reduce using rule 105
	'global'       reduce using rule 105
	'impact'       reduce using rule 105
	'include'      reduce using rule 105
	'inductive'    reduce using rule 105
	'invariant'    reduce using rule 105
	'label'        reduce using rule 105
	'lemma'        reduce using rule 105
	'let'          reduce using rule 105
	'logic'        reduce using rule 105
	'loop'         reduce using rule 105
	'model'        reduce using rule 105
	'module'       reduce using rule 105
	'pragma'       reduce using rule 105
	'predicate'    reduce using rule 105
	'reads'        reduce using rule 105
	'requires'     reduce using rule 105
	'returns'      reduce using rule 105
	'sizeof'       reduce using rule 105
	'slice'        reduce using rule 105
	'terminates'   reduce using rule 105
	'type'         reduce using rule 105
	'variant'      reduce using rule 105
	'writes'       reduce using rule 105
	'~'            reduce using rule 105
	L_Ident        reduce using rule 105
	L_doubl        reduce using rule 105
	L_integ        reduce using rule 105
	L_quoted       reduce using rule 105
	%eof           reduce using rule 105


State 253

	Relation -> '>=' .                                  (rule 107)

	'!'            reduce using rule 107
	'&'            reduce using rule 107
	'('            reduce using rule 107
	'*'            reduce using rule 107
	'+'            reduce using rule 107
	'-'            reduce using rule 107
	'\\allocable'  reduce using rule 107
	'\\allocation' reduce using rule 107
	'\\at'         reduce using rule 107
	'\\automatic'  reduce using rule 107
	'\\base_addr'  reduce using rule 107
	'\\block_length'reduce using rule 107
	'\\dangling'   reduce using rule 107
	'\\dynamic'    reduce using rule 107
	'\\exists'     reduce using rule 107
	'\\false'      reduce using rule 107
	'\\forall'     reduce using rule 107
	'\\freeable'   reduce using rule 107
	'\\fresh'      reduce using rule 107
	'\\initialized'reduce using rule 107
	'\\lambda'     reduce using rule 107
	'\\null'       reduce using rule 107
	'\\object_pointer'reduce using rule 107
	'\\offset'     reduce using rule 107
	'\\old'        reduce using rule 107
	'\\pi'         reduce using rule 107
	'\\register'   reduce using rule 107
	'\\result'     reduce using rule 107
	'\\separated'  reduce using rule 107
	'\\static'     reduce using rule 107
	'\\true'       reduce using rule 107
	'\\unallocated'reduce using rule 107
	'\\valid'      reduce using rule 107
	'\\valid_function'reduce using rule 107
	'\\valid_index'reduce using rule 107
	'\\valid_range'reduce using rule 107
	'\\valid_read' reduce using rule 107
	'admit'        reduce using rule 107
	'allocates'    reduce using rule 107
	'assert'       reduce using rule 107
	'assigns'      reduce using rule 107
	'assumes'      reduce using rule 107
	'at'           reduce using rule 107
	'axiom'        reduce using rule 107
	'axiomatic'    reduce using rule 107
	'behavior'     reduce using rule 107
	'behaviors'    reduce using rule 107
	'breaks'       reduce using rule 107
	'check'        reduce using rule 107
	'complete'     reduce using rule 107
	'continues'    reduce using rule 107
	'contract'     reduce using rule 107
	'decreases'    reduce using rule 107
	'disjoint'     reduce using rule 107
	'ensures'      reduce using rule 107
	'exits'        reduce using rule 107
	'frees'        reduce using rule 107
	'function'     reduce using rule 107
	'global'       reduce using rule 107
	'impact'       reduce using rule 107
	'include'      reduce using rule 107
	'inductive'    reduce using rule 107
	'invariant'    reduce using rule 107
	'label'        reduce using rule 107
	'lemma'        reduce using rule 107
	'let'          reduce using rule 107
	'logic'        reduce using rule 107
	'loop'         reduce using rule 107
	'model'        reduce using rule 107
	'module'       reduce using rule 107
	'pragma'       reduce using rule 107
	'predicate'    reduce using rule 107
	'reads'        reduce using rule 107
	'requires'     reduce using rule 107
	'returns'      reduce using rule 107
	'sizeof'       reduce using rule 107
	'slice'        reduce using rule 107
	'terminates'   reduce using rule 107
	'type'         reduce using rule 107
	'variant'      reduce using rule 107
	'writes'       reduce using rule 107
	'~'            reduce using rule 107
	L_Ident        reduce using rule 107
	L_doubl        reduce using rule 107
	L_integ        reduce using rule 107
	L_quoted       reduce using rule 107
	%eof           reduce using rule 107


State 254

	ListLexprRelInner -> LexprRelInner . ListLexprRelInner    (rule 103)

	'!='           shift, and enter state 248
			(reduce using rule 102)

	'<'            shift, and enter state 249
			(reduce using rule 102)

	'<='           shift, and enter state 250
			(reduce using rule 102)

	'=='           shift, and enter state 251
			(reduce using rule 102)

	'>'            shift, and enter state 252
			(reduce using rule 102)

	'>='           shift, and enter state 253
			(reduce using rule 102)

	%eof           reduce using rule 102

	LexprRelInner  goto state 254
	ListLexprRelInnergoto state 306
	Relation       goto state 256

State 255

	%start_pListLexprRelInner -> ListLexprRelInner .    (rule 18)

	%eof           accept


State 256

	LexprRelInner -> Relation . Lexpr3                  (rule 101)

	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\false'      shift, and enter state 84
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr3         goto state 305
	FullIdentifier goto state 66
	Identifier     goto state 67

State 257

	%start_pLexprRelInner -> LexprRelInner .            (rule 17)

	%eof           accept


State 258

	%start_pLexpr1 -> Lexpr1 .                          (rule 16)

	%eof           accept


State 259

	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)
	ListLexpr -> Lexpr .                                (rule 97)
	ListLexpr -> Lexpr . ',' ListLexpr                  (rule 98)

	')'            reduce using rule 97
	','            shift, and enter state 304
	';'            reduce using rule 97
	'?'            shift, and enter state 303
	'\\from'       reduce using rule 97
	%eof           reduce using rule 97


State 260

	%start_pListLexpr -> ListLexpr .                    (rule 15)

	%eof           accept


State 261

	%start_pLexpr -> Lexpr .                            (rule 14)
	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)

	'?'            shift, and enter state 303
	%eof           accept


State 262

	%start_pCompleteOrDisjoint -> CompleteOrDisjoint .    (rule 13)

	%eof           accept


State 263

	%start_pBehaviors -> Behaviors .                    (rule 12)

	%eof           accept


State 264

	%start_pZones -> Zones .                            (rule 11)

	%eof           accept


State 265

	Zones -> ListLexpr .                                (rule 80)

	';'            reduce using rule 80
	%eof           reduce using rule 80


State 266

	Zones -> '\\nothing' .                              (rule 81)

	';'            reduce using rule 81
	%eof           reduce using rule 81


State 267

	%start_pAssigns -> Assigns .                        (rule 10)

	%eof           accept


State 268

	Assigns -> Zones .                                  (rule 78)

	';'            reduce using rule 78
	%eof           reduce using rule 78


State 269

	Assigns -> ListLexpr . '\\from' Zones               (rule 79)
	Zones -> ListLexpr .                                (rule 80)

	';'            reduce using rule 80
	'\\from'       shift, and enter state 302
	%eof           reduce using rule 80


State 270

	%start_pNESimpleClauses -> NESimpleClauses .        (rule 9)

	%eof           accept


State 271

	NESimpleClauses -> PostCond . Lexpr ';' SimpleClauses    (rule 76)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 301
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 272

	NESimpleClauses -> 'assigns' . Assigns ';' SimpleClauses    (rule 77)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\nothing'    shift, and enter state 266
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Assigns        goto state 300
	Zones          goto state 268
	Lexpr          goto state 259
	ListLexpr      goto state 269
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 273

	%start_pSimpleClauses -> SimpleClauses .            (rule 8)

	%eof           accept


State 274

	SimpleClauses -> NESimpleClauses .                  (rule 75)

	'decreases'    reduce using rule 75
	'requires'     reduce using rule 75
	'terminates'   reduce using rule 75
	%eof           reduce using rule 75


State 275

	%start_pDecreases -> Decreases .                    (rule 7)

	%eof           accept


State 276

	%start_pTerminates -> Terminates .                  (rule 6)

	%eof           accept


State 277

	%start_pNERequires -> NERequires .                  (rule 5)

	%eof           accept


State 278

	NERequires -> 'admit' . 'requires' Lexpr ';' Requires    (rule 71)

	'requires'     shift, and enter state 297


State 279

	NERequires -> 'check' . 'requires' Lexpr ';' Requires    (rule 70)

	'requires'     shift, and enter state 295


State 280

	NERequires -> 'requires' . Lexpr ';' Requires       (rule 69)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 299
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 281

	%start_pRequires -> Requires .                      (rule 4)

	%eof           accept


State 282

	Requires -> NERequires .                            (rule 68)

	'admit'        reduce using rule 68
	'assigns'      reduce using rule 68
	'breaks'       reduce using rule 68
	'check'        reduce using rule 68
	'continues'    reduce using rule 68
	'ensures'      reduce using rule 68
	'exits'        reduce using rule 68
	'returns'      reduce using rule 68
	%eof           reduce using rule 68


State 283

	%start_pContract -> Contract .                      (rule 3)

	%eof           accept


State 284

	Contract -> Requires . Terminates Decreases SimpleClauses Behaviors CompleteOrDisjoint    (rule 63)
	Contract -> Requires . Terminates Decreases NESimpleClauses 'requires'    (rule 64)
	Contract -> Requires . Terminates Decreases NESimpleClauses 'terminates'    (rule 65)
	Contract -> Requires . Terminates Decreases NESimpleClauses 'decreases'    (rule 66)

	'admit'        reduce using rule 72
	'assigns'      reduce using rule 72
	'breaks'       reduce using rule 72
	'check'        reduce using rule 72
	'continues'    reduce using rule 72
	'ensures'      reduce using rule 72
	'exits'        reduce using rule 72
	'returns'      reduce using rule 72
	%eof           reduce using rule 72

	Terminates     goto state 298

State 285

	%start_pCode_Annot -> Code_Annot .                  (rule 2)

	%eof           accept


State 286

	Code_Annot -> Contract .                            (rule 62)

	%eof           reduce using rule 62


State 287

	%start_pAnnot -> Annot .                            (rule 1)

	%eof           accept


State 288

	Annot -> Code_Annot .                               (rule 61)

	%eof           reduce using rule 61


State 289

	%start_pProgram -> Program .                        (rule 0)

	%eof           accept


State 290

	Program -> Annot .                                  (rule 59)

	%eof           reduce using rule 59


State 291

	Program -> LogicPTreeAnnot .                        (rule 60)

	%eof           reduce using rule 60


State 292

	NERequires -> 'admit' . 'requires' Lexpr ';' Requires    (rule 71)
	LoopInvariant -> 'admit' . 'loop' 'invariant' Lexpr ';'    (rule 298)

	'loop'         shift, and enter state 296
	'requires'     shift, and enter state 297


State 293

	NERequires -> 'check' . 'requires' Lexpr ';' Requires    (rule 70)
	LoopInvariant -> 'check' . 'loop' 'invariant' Lexpr ';'    (rule 297)

	'loop'         shift, and enter state 294
	'requires'     shift, and enter state 295


State 294

	LoopInvariant -> 'check' 'loop' . 'invariant' Lexpr ';'    (rule 297)

	'invariant'    shift, and enter state 476


State 295

	NERequires -> 'check' 'requires' . Lexpr ';' Requires    (rule 70)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 475
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 296

	LoopInvariant -> 'admit' 'loop' . 'invariant' Lexpr ';'    (rule 298)

	'invariant'    shift, and enter state 474


State 297

	NERequires -> 'admit' 'requires' . Lexpr ';' Requires    (rule 71)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 473
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 298

	Contract -> Requires Terminates . Decreases SimpleClauses Behaviors CompleteOrDisjoint    (rule 63)
	Contract -> Requires Terminates . Decreases NESimpleClauses 'requires'    (rule 64)
	Contract -> Requires Terminates . Decreases NESimpleClauses 'terminates'    (rule 65)
	Contract -> Requires Terminates . Decreases NESimpleClauses 'decreases'    (rule 66)

	'admit'        reduce using rule 73
	'assigns'      reduce using rule 73
	'breaks'       reduce using rule 73
	'check'        reduce using rule 73
	'continues'    reduce using rule 73
	'ensures'      reduce using rule 73
	'exits'        reduce using rule 73
	'returns'      reduce using rule 73
	%eof           reduce using rule 73

	Decreases      goto state 472

State 299

	NERequires -> 'requires' Lexpr . ';' Requires       (rule 69)
	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)

	';'            shift, and enter state 471
	'?'            shift, and enter state 303


State 300

	NESimpleClauses -> 'assigns' Assigns . ';' SimpleClauses    (rule 77)

	';'            shift, and enter state 470


State 301

	NESimpleClauses -> PostCond Lexpr . ';' SimpleClauses    (rule 76)
	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)

	';'            shift, and enter state 469
	'?'            shift, and enter state 303


State 302

	Assigns -> ListLexpr '\\from' . Zones               (rule 79)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\nothing'    shift, and enter state 266
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Zones          goto state 468
	Lexpr          goto state 259
	ListLexpr      goto state 265
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 303

	Lexpr -> Lexpr '?' . Lexpr ':' Lexpr                (rule 95)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 467
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 304

	ListLexpr -> Lexpr ',' . ListLexpr                  (rule 98)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 259
	ListLexpr      goto state 466
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 305

	LexprRelInner -> Relation Lexpr3 .                  (rule 101)
	Lexpr3 -> Lexpr3 . '+' Lexpr3                       (rule 160)
	Lexpr3 -> Lexpr3 . '-' Lexpr3                       (rule 161)
	Lexpr3 -> Lexpr3 . '*' Lexpr3                       (rule 162)
	Lexpr3 -> Lexpr3 . '/' Lexpr3                       (rule 163)
	Lexpr3 -> Lexpr3 . '%' Lexpr3                       (rule 164)
	Lexpr3 -> Lexpr3 . '[' Range ']'                    (rule 165)
	Lexpr3 -> Lexpr3 . '[' Lexpr ']'                    (rule 166)

	'!='           reduce using rule 101
	'%'            shift, and enter state 307
	'*'            shift, and enter state 308
	'+'            shift, and enter state 309
	'-'            shift, and enter state 310
	'/'            shift, and enter state 311
	'<'            reduce using rule 101
	'<='           reduce using rule 101
	'=='           reduce using rule 101
	'>'            reduce using rule 101
	'>='           reduce using rule 101
	'['            shift, and enter state 312
	%eof           reduce using rule 101


State 306

	ListLexprRelInner -> LexprRelInner ListLexprRelInner .    (rule 103)

	'!='           reduce using rule 103
	'<'            reduce using rule 103
	'<='           reduce using rule 103
	'=='           reduce using rule 103
	'>'            reduce using rule 103
	'>='           reduce using rule 103
	%eof           reduce using rule 103


State 307

	Lexpr3 -> Lexpr3 '%' . Lexpr3                       (rule 164)

	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\false'      shift, and enter state 84
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr3         goto state 465
	FullIdentifier goto state 66
	Identifier     goto state 67

State 308

	Lexpr3 -> Lexpr3 '*' . Lexpr3                       (rule 162)

	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\false'      shift, and enter state 84
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr3         goto state 464
	FullIdentifier goto state 66
	Identifier     goto state 67

State 309

	Lexpr3 -> Lexpr3 '+' . Lexpr3                       (rule 160)

	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\false'      shift, and enter state 84
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr3         goto state 463
	FullIdentifier goto state 66
	Identifier     goto state 67

State 310

	Lexpr3 -> Lexpr3 '-' . Lexpr3                       (rule 161)

	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\false'      shift, and enter state 84
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr3         goto state 462
	FullIdentifier goto state 66
	Identifier     goto state 67

State 311

	Lexpr3 -> Lexpr3 '/' . Lexpr3                       (rule 163)

	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\false'      shift, and enter state 84
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr3         goto state 461
	FullIdentifier goto state 66
	Identifier     goto state 67

State 312

	Lexpr3 -> Lexpr3 '[' . Range ']'                    (rule 165)
	Lexpr3 -> Lexpr3 '[' . Lexpr ']'                    (rule 166)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'..'           reduce using rule 190
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 459
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	Range          goto state 460
	LexprOption    goto state 210
	FullIdentifier goto state 66
	Identifier     goto state 67

State 313

	Binders -> TypeSpecOFTYPENAME VarSpec . ListBindersReentrance    (rule 116)

	','            shift, and enter state 237
	';'            reduce using rule 121
	%eof           reduce using rule 121

	BindersReentrancegoto state 235
	ListBindersReentrancegoto state 458

State 314

	TypeSpecOFTYPENAME -> Ident .                       (rule 117)
	Identifier -> Ident .                               (rule 250)

	'('            reduce using rule 117
	'*'            reduce using rule 117
	','            reduce using rule 250
	';'            reduce using rule 250
	'['            reduce using rule 250
	'admit'        reduce using rule 117
	'allocates'    reduce using rule 117
	'assert'       reduce using rule 117
	'assigns'      reduce using rule 117
	'assumes'      reduce using rule 117
	'at'           reduce using rule 117
	'axiom'        reduce using rule 117
	'axiomatic'    reduce using rule 117
	'behavior'     reduce using rule 117
	'behaviors'    reduce using rule 117
	'breaks'       reduce using rule 117
	'check'        reduce using rule 117
	'complete'     reduce using rule 117
	'continues'    reduce using rule 117
	'contract'     reduce using rule 117
	'decreases'    reduce using rule 117
	'disjoint'     reduce using rule 117
	'ensures'      reduce using rule 117
	'exits'        reduce using rule 117
	'frees'        reduce using rule 117
	'function'     reduce using rule 117
	'global'       reduce using rule 117
	'impact'       reduce using rule 117
	'include'      reduce using rule 117
	'inductive'    reduce using rule 117
	'invariant'    reduce using rule 117
	'label'        reduce using rule 117
	'lemma'        reduce using rule 117
	'let'          reduce using rule 117
	'logic'        reduce using rule 117
	'loop'         reduce using rule 117
	'model'        reduce using rule 117
	'module'       reduce using rule 117
	'pragma'       reduce using rule 117
	'predicate'    reduce using rule 117
	'reads'        reduce using rule 117
	'requires'     reduce using rule 117
	'returns'      reduce using rule 117
	'slice'        reduce using rule 117
	'terminates'   reduce using rule 117
	'type'         reduce using rule 117
	'variant'      reduce using rule 117
	'writes'       reduce using rule 117
	L_Ident        reduce using rule 117
	%eof           reduce using rule 250


State 315

	BindersReentrance -> ',' TypeSpecOFTYPENAME . VarSpec    (rule 119)

	'('            shift, and enter state 227
	'*'            shift, and enter state 230
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	L_Ident        shift, and enter state 56

	Ident          goto state 57
	VarSpec        goto state 457
	Stars          goto state 228
	ListStars      goto state 233
	VarSpec1       goto state 234
	FullIdentifier goto state 226
	Identifier     goto state 67

State 316

	BindersReentrance -> ',' VarSpec .                  (rule 120)

	','            reduce using rule 120
	';'            reduce using rule 120
	%eof           reduce using rule 120


State 317

	ListBindersReentrance -> BindersReentrance ListBindersReentrance .    (rule 122)

	';'            reduce using rule 122
	%eof           reduce using rule 122


State 318

	VarSpec1 -> VarSpec1 '[' . ArraySize ']'            (rule 129)

	']'            reduce using rule 133
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	L_Ident        shift, and enter state 56
	L_integ        shift, and enter state 152

	Ident          goto state 57
	Integer        goto state 222
	ArraySize      goto state 456
	FullIdentifier goto state 224
	Identifier     goto state 67

State 319

	VarSpec -> ListStars VarSpec1 .                     (rule 124)
	VarSpec1 -> VarSpec1 . '[' ArraySize ']'            (rule 129)

	')'            reduce using rule 124
	','            reduce using rule 124
	';'            reduce using rule 124
	'['            shift, and enter state 318
	%eof           reduce using rule 124


State 320

	ListStars -> Stars ListStars .                      (rule 127)

	'('            reduce using rule 127
	'admit'        reduce using rule 127
	'allocates'    reduce using rule 127
	'assert'       reduce using rule 127
	'assigns'      reduce using rule 127
	'assumes'      reduce using rule 127
	'at'           reduce using rule 127
	'axiom'        reduce using rule 127
	'axiomatic'    reduce using rule 127
	'behavior'     reduce using rule 127
	'behaviors'    reduce using rule 127
	'breaks'       reduce using rule 127
	'check'        reduce using rule 127
	'complete'     reduce using rule 127
	'continues'    reduce using rule 127
	'contract'     reduce using rule 127
	'decreases'    reduce using rule 127
	'disjoint'     reduce using rule 127
	'ensures'      reduce using rule 127
	'exits'        reduce using rule 127
	'frees'        reduce using rule 127
	'function'     reduce using rule 127
	'global'       reduce using rule 127
	'impact'       reduce using rule 127
	'include'      reduce using rule 127
	'inductive'    reduce using rule 127
	'invariant'    reduce using rule 127
	'label'        reduce using rule 127
	'lemma'        reduce using rule 127
	'let'          reduce using rule 127
	'logic'        reduce using rule 127
	'loop'         reduce using rule 127
	'model'        reduce using rule 127
	'module'       reduce using rule 127
	'pragma'       reduce using rule 127
	'predicate'    reduce using rule 127
	'reads'        reduce using rule 127
	'requires'     reduce using rule 127
	'returns'      reduce using rule 127
	'slice'        reduce using rule 127
	'terminates'   reduce using rule 127
	'type'         reduce using rule 127
	'variant'      reduce using rule 127
	'writes'       reduce using rule 127
	L_Ident        reduce using rule 127
	%eof           reduce using rule 127


State 321

	VarSpec1 -> '(' VarSpec . ')'                       (rule 130)

	')'            shift, and enter state 455


State 322

	OptLabelList -> '{' ListLabelName . '}'             (rule 185)

	'}'            shift, and enter state 454


State 323

	ListLabelName -> LabelName ',' . ListLabelName      (rule 188)

	'behaviors'    shift, and enter state 115
	'label'        shift, and enter state 132
	'reads'        shift, and enter state 141
	'writes'       shift, and enter state 149
	L_Ident        shift, and enter state 56

	Ident          goto state 57
	LabelName      goto state 211
	ListLabelName  goto state 453
	AnyIdentifier  goto state 213
	Identifier     goto state 206

State 324

	Range -> LexprOption '..' . LexprOption             (rule 189)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	')'            reduce using rule 190
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	']'            reduce using rule 190
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153
	%eof           reduce using rule 190

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 207
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	LexprOption    goto state 452
	FullIdentifier goto state 66
	Identifier     goto state 67

State 325

	PostCond -> 'check' 'breaks' .                      (rule 200)

	'!'            reduce using rule 200
	'&'            reduce using rule 200
	'('            reduce using rule 200
	'*'            reduce using rule 200
	'+'            reduce using rule 200
	'-'            reduce using rule 200
	'\\allocable'  reduce using rule 200
	'\\allocation' reduce using rule 200
	'\\at'         reduce using rule 200
	'\\automatic'  reduce using rule 200
	'\\base_addr'  reduce using rule 200
	'\\block_length'reduce using rule 200
	'\\dangling'   reduce using rule 200
	'\\dynamic'    reduce using rule 200
	'\\exists'     reduce using rule 200
	'\\false'      reduce using rule 200
	'\\forall'     reduce using rule 200
	'\\freeable'   reduce using rule 200
	'\\fresh'      reduce using rule 200
	'\\initialized'reduce using rule 200
	'\\lambda'     reduce using rule 200
	'\\null'       reduce using rule 200
	'\\object_pointer'reduce using rule 200
	'\\offset'     reduce using rule 200
	'\\old'        reduce using rule 200
	'\\pi'         reduce using rule 200
	'\\register'   reduce using rule 200
	'\\result'     reduce using rule 200
	'\\separated'  reduce using rule 200
	'\\static'     reduce using rule 200
	'\\true'       reduce using rule 200
	'\\unallocated'reduce using rule 200
	'\\valid'      reduce using rule 200
	'\\valid_function'reduce using rule 200
	'\\valid_index'reduce using rule 200
	'\\valid_range'reduce using rule 200
	'\\valid_read' reduce using rule 200
	'admit'        reduce using rule 200
	'allocates'    reduce using rule 200
	'assert'       reduce using rule 200
	'assigns'      reduce using rule 200
	'assumes'      reduce using rule 200
	'at'           reduce using rule 200
	'axiom'        reduce using rule 200
	'axiomatic'    reduce using rule 200
	'behavior'     reduce using rule 200
	'behaviors'    reduce using rule 200
	'breaks'       reduce using rule 200
	'check'        reduce using rule 200
	'complete'     reduce using rule 200
	'continues'    reduce using rule 200
	'contract'     reduce using rule 200
	'decreases'    reduce using rule 200
	'disjoint'     reduce using rule 200
	'ensures'      reduce using rule 200
	'exits'        reduce using rule 200
	'frees'        reduce using rule 200
	'function'     reduce using rule 200
	'global'       reduce using rule 200
	'impact'       reduce using rule 200
	'include'      reduce using rule 200
	'inductive'    reduce using rule 200
	'invariant'    reduce using rule 200
	'label'        reduce using rule 200
	'lemma'        reduce using rule 200
	'let'          reduce using rule 200
	'logic'        reduce using rule 200
	'loop'         reduce using rule 200
	'model'        reduce using rule 200
	'module'       reduce using rule 200
	'pragma'       reduce using rule 200
	'predicate'    reduce using rule 200
	'reads'        reduce using rule 200
	'requires'     reduce using rule 200
	'returns'      reduce using rule 200
	'sizeof'       reduce using rule 200
	'slice'        reduce using rule 200
	'terminates'   reduce using rule 200
	'type'         reduce using rule 200
	'variant'      reduce using rule 200
	'writes'       reduce using rule 200
	'~'            reduce using rule 200
	L_Ident        reduce using rule 200
	L_doubl        reduce using rule 200
	L_integ        reduce using rule 200
	L_quoted       reduce using rule 200
	%eof           reduce using rule 200


State 326

	PostCond -> 'check' 'continues' .                   (rule 201)

	'!'            reduce using rule 201
	'&'            reduce using rule 201
	'('            reduce using rule 201
	'*'            reduce using rule 201
	'+'            reduce using rule 201
	'-'            reduce using rule 201
	'\\allocable'  reduce using rule 201
	'\\allocation' reduce using rule 201
	'\\at'         reduce using rule 201
	'\\automatic'  reduce using rule 201
	'\\base_addr'  reduce using rule 201
	'\\block_length'reduce using rule 201
	'\\dangling'   reduce using rule 201
	'\\dynamic'    reduce using rule 201
	'\\exists'     reduce using rule 201
	'\\false'      reduce using rule 201
	'\\forall'     reduce using rule 201
	'\\freeable'   reduce using rule 201
	'\\fresh'      reduce using rule 201
	'\\initialized'reduce using rule 201
	'\\lambda'     reduce using rule 201
	'\\null'       reduce using rule 201
	'\\object_pointer'reduce using rule 201
	'\\offset'     reduce using rule 201
	'\\old'        reduce using rule 201
	'\\pi'         reduce using rule 201
	'\\register'   reduce using rule 201
	'\\result'     reduce using rule 201
	'\\separated'  reduce using rule 201
	'\\static'     reduce using rule 201
	'\\true'       reduce using rule 201
	'\\unallocated'reduce using rule 201
	'\\valid'      reduce using rule 201
	'\\valid_function'reduce using rule 201
	'\\valid_index'reduce using rule 201
	'\\valid_range'reduce using rule 201
	'\\valid_read' reduce using rule 201
	'admit'        reduce using rule 201
	'allocates'    reduce using rule 201
	'assert'       reduce using rule 201
	'assigns'      reduce using rule 201
	'assumes'      reduce using rule 201
	'at'           reduce using rule 201
	'axiom'        reduce using rule 201
	'axiomatic'    reduce using rule 201
	'behavior'     reduce using rule 201
	'behaviors'    reduce using rule 201
	'breaks'       reduce using rule 201
	'check'        reduce using rule 201
	'complete'     reduce using rule 201
	'continues'    reduce using rule 201
	'contract'     reduce using rule 201
	'decreases'    reduce using rule 201
	'disjoint'     reduce using rule 201
	'ensures'      reduce using rule 201
	'exits'        reduce using rule 201
	'frees'        reduce using rule 201
	'function'     reduce using rule 201
	'global'       reduce using rule 201
	'impact'       reduce using rule 201
	'include'      reduce using rule 201
	'inductive'    reduce using rule 201
	'invariant'    reduce using rule 201
	'label'        reduce using rule 201
	'lemma'        reduce using rule 201
	'let'          reduce using rule 201
	'logic'        reduce using rule 201
	'loop'         reduce using rule 201
	'model'        reduce using rule 201
	'module'       reduce using rule 201
	'pragma'       reduce using rule 201
	'predicate'    reduce using rule 201
	'reads'        reduce using rule 201
	'requires'     reduce using rule 201
	'returns'      reduce using rule 201
	'sizeof'       reduce using rule 201
	'slice'        reduce using rule 201
	'terminates'   reduce using rule 201
	'type'         reduce using rule 201
	'variant'      reduce using rule 201
	'writes'       reduce using rule 201
	'~'            reduce using rule 201
	L_Ident        reduce using rule 201
	L_doubl        reduce using rule 201
	L_integ        reduce using rule 201
	L_quoted       reduce using rule 201
	%eof           reduce using rule 201


State 327

	PostCond -> 'check' 'ensures' .                     (rule 198)

	'!'            reduce using rule 198
	'&'            reduce using rule 198
	'('            reduce using rule 198
	'*'            reduce using rule 198
	'+'            reduce using rule 198
	'-'            reduce using rule 198
	'\\allocable'  reduce using rule 198
	'\\allocation' reduce using rule 198
	'\\at'         reduce using rule 198
	'\\automatic'  reduce using rule 198
	'\\base_addr'  reduce using rule 198
	'\\block_length'reduce using rule 198
	'\\dangling'   reduce using rule 198
	'\\dynamic'    reduce using rule 198
	'\\exists'     reduce using rule 198
	'\\false'      reduce using rule 198
	'\\forall'     reduce using rule 198
	'\\freeable'   reduce using rule 198
	'\\fresh'      reduce using rule 198
	'\\initialized'reduce using rule 198
	'\\lambda'     reduce using rule 198
	'\\null'       reduce using rule 198
	'\\object_pointer'reduce using rule 198
	'\\offset'     reduce using rule 198
	'\\old'        reduce using rule 198
	'\\pi'         reduce using rule 198
	'\\register'   reduce using rule 198
	'\\result'     reduce using rule 198
	'\\separated'  reduce using rule 198
	'\\static'     reduce using rule 198
	'\\true'       reduce using rule 198
	'\\unallocated'reduce using rule 198
	'\\valid'      reduce using rule 198
	'\\valid_function'reduce using rule 198
	'\\valid_index'reduce using rule 198
	'\\valid_range'reduce using rule 198
	'\\valid_read' reduce using rule 198
	'admit'        reduce using rule 198
	'allocates'    reduce using rule 198
	'assert'       reduce using rule 198
	'assigns'      reduce using rule 198
	'assumes'      reduce using rule 198
	'at'           reduce using rule 198
	'axiom'        reduce using rule 198
	'axiomatic'    reduce using rule 198
	'behavior'     reduce using rule 198
	'behaviors'    reduce using rule 198
	'breaks'       reduce using rule 198
	'check'        reduce using rule 198
	'complete'     reduce using rule 198
	'continues'    reduce using rule 198
	'contract'     reduce using rule 198
	'decreases'    reduce using rule 198
	'disjoint'     reduce using rule 198
	'ensures'      reduce using rule 198
	'exits'        reduce using rule 198
	'frees'        reduce using rule 198
	'function'     reduce using rule 198
	'global'       reduce using rule 198
	'impact'       reduce using rule 198
	'include'      reduce using rule 198
	'inductive'    reduce using rule 198
	'invariant'    reduce using rule 198
	'label'        reduce using rule 198
	'lemma'        reduce using rule 198
	'let'          reduce using rule 198
	'logic'        reduce using rule 198
	'loop'         reduce using rule 198
	'model'        reduce using rule 198
	'module'       reduce using rule 198
	'pragma'       reduce using rule 198
	'predicate'    reduce using rule 198
	'reads'        reduce using rule 198
	'requires'     reduce using rule 198
	'returns'      reduce using rule 198
	'sizeof'       reduce using rule 198
	'slice'        reduce using rule 198
	'terminates'   reduce using rule 198
	'type'         reduce using rule 198
	'variant'      reduce using rule 198
	'writes'       reduce using rule 198
	'~'            reduce using rule 198
	L_Ident        reduce using rule 198
	L_doubl        reduce using rule 198
	L_integ        reduce using rule 198
	L_quoted       reduce using rule 198
	%eof           reduce using rule 198


State 328

	PostCond -> 'check' 'exits' .                       (rule 199)

	'!'            reduce using rule 199
	'&'            reduce using rule 199
	'('            reduce using rule 199
	'*'            reduce using rule 199
	'+'            reduce using rule 199
	'-'            reduce using rule 199
	'\\allocable'  reduce using rule 199
	'\\allocation' reduce using rule 199
	'\\at'         reduce using rule 199
	'\\automatic'  reduce using rule 199
	'\\base_addr'  reduce using rule 199
	'\\block_length'reduce using rule 199
	'\\dangling'   reduce using rule 199
	'\\dynamic'    reduce using rule 199
	'\\exists'     reduce using rule 199
	'\\false'      reduce using rule 199
	'\\forall'     reduce using rule 199
	'\\freeable'   reduce using rule 199
	'\\fresh'      reduce using rule 199
	'\\initialized'reduce using rule 199
	'\\lambda'     reduce using rule 199
	'\\null'       reduce using rule 199
	'\\object_pointer'reduce using rule 199
	'\\offset'     reduce using rule 199
	'\\old'        reduce using rule 199
	'\\pi'         reduce using rule 199
	'\\register'   reduce using rule 199
	'\\result'     reduce using rule 199
	'\\separated'  reduce using rule 199
	'\\static'     reduce using rule 199
	'\\true'       reduce using rule 199
	'\\unallocated'reduce using rule 199
	'\\valid'      reduce using rule 199
	'\\valid_function'reduce using rule 199
	'\\valid_index'reduce using rule 199
	'\\valid_range'reduce using rule 199
	'\\valid_read' reduce using rule 199
	'admit'        reduce using rule 199
	'allocates'    reduce using rule 199
	'assert'       reduce using rule 199
	'assigns'      reduce using rule 199
	'assumes'      reduce using rule 199
	'at'           reduce using rule 199
	'axiom'        reduce using rule 199
	'axiomatic'    reduce using rule 199
	'behavior'     reduce using rule 199
	'behaviors'    reduce using rule 199
	'breaks'       reduce using rule 199
	'check'        reduce using rule 199
	'complete'     reduce using rule 199
	'continues'    reduce using rule 199
	'contract'     reduce using rule 199
	'decreases'    reduce using rule 199
	'disjoint'     reduce using rule 199
	'ensures'      reduce using rule 199
	'exits'        reduce using rule 199
	'frees'        reduce using rule 199
	'function'     reduce using rule 199
	'global'       reduce using rule 199
	'impact'       reduce using rule 199
	'include'      reduce using rule 199
	'inductive'    reduce using rule 199
	'invariant'    reduce using rule 199
	'label'        reduce using rule 199
	'lemma'        reduce using rule 199
	'let'          reduce using rule 199
	'logic'        reduce using rule 199
	'loop'         reduce using rule 199
	'model'        reduce using rule 199
	'module'       reduce using rule 199
	'pragma'       reduce using rule 199
	'predicate'    reduce using rule 199
	'reads'        reduce using rule 199
	'requires'     reduce using rule 199
	'returns'      reduce using rule 199
	'sizeof'       reduce using rule 199
	'slice'        reduce using rule 199
	'terminates'   reduce using rule 199
	'type'         reduce using rule 199
	'variant'      reduce using rule 199
	'writes'       reduce using rule 199
	'~'            reduce using rule 199
	L_Ident        reduce using rule 199
	L_doubl        reduce using rule 199
	L_integ        reduce using rule 199
	L_quoted       reduce using rule 199
	%eof           reduce using rule 199


State 329

	PostCond -> 'check' 'returns' .                     (rule 202)

	'!'            reduce using rule 202
	'&'            reduce using rule 202
	'('            reduce using rule 202
	'*'            reduce using rule 202
	'+'            reduce using rule 202
	'-'            reduce using rule 202
	'\\allocable'  reduce using rule 202
	'\\allocation' reduce using rule 202
	'\\at'         reduce using rule 202
	'\\automatic'  reduce using rule 202
	'\\base_addr'  reduce using rule 202
	'\\block_length'reduce using rule 202
	'\\dangling'   reduce using rule 202
	'\\dynamic'    reduce using rule 202
	'\\exists'     reduce using rule 202
	'\\false'      reduce using rule 202
	'\\forall'     reduce using rule 202
	'\\freeable'   reduce using rule 202
	'\\fresh'      reduce using rule 202
	'\\initialized'reduce using rule 202
	'\\lambda'     reduce using rule 202
	'\\null'       reduce using rule 202
	'\\object_pointer'reduce using rule 202
	'\\offset'     reduce using rule 202
	'\\old'        reduce using rule 202
	'\\pi'         reduce using rule 202
	'\\register'   reduce using rule 202
	'\\result'     reduce using rule 202
	'\\separated'  reduce using rule 202
	'\\static'     reduce using rule 202
	'\\true'       reduce using rule 202
	'\\unallocated'reduce using rule 202
	'\\valid'      reduce using rule 202
	'\\valid_function'reduce using rule 202
	'\\valid_index'reduce using rule 202
	'\\valid_range'reduce using rule 202
	'\\valid_read' reduce using rule 202
	'admit'        reduce using rule 202
	'allocates'    reduce using rule 202
	'assert'       reduce using rule 202
	'assigns'      reduce using rule 202
	'assumes'      reduce using rule 202
	'at'           reduce using rule 202
	'axiom'        reduce using rule 202
	'axiomatic'    reduce using rule 202
	'behavior'     reduce using rule 202
	'behaviors'    reduce using rule 202
	'breaks'       reduce using rule 202
	'check'        reduce using rule 202
	'complete'     reduce using rule 202
	'continues'    reduce using rule 202
	'contract'     reduce using rule 202
	'decreases'    reduce using rule 202
	'disjoint'     reduce using rule 202
	'ensures'      reduce using rule 202
	'exits'        reduce using rule 202
	'frees'        reduce using rule 202
	'function'     reduce using rule 202
	'global'       reduce using rule 202
	'impact'       reduce using rule 202
	'include'      reduce using rule 202
	'inductive'    reduce using rule 202
	'invariant'    reduce using rule 202
	'label'        reduce using rule 202
	'lemma'        reduce using rule 202
	'let'          reduce using rule 202
	'logic'        reduce using rule 202
	'loop'         reduce using rule 202
	'model'        reduce using rule 202
	'module'       reduce using rule 202
	'pragma'       reduce using rule 202
	'predicate'    reduce using rule 202
	'reads'        reduce using rule 202
	'requires'     reduce using rule 202
	'returns'      reduce using rule 202
	'sizeof'       reduce using rule 202
	'slice'        reduce using rule 202
	'terminates'   reduce using rule 202
	'type'         reduce using rule 202
	'variant'      reduce using rule 202
	'writes'       reduce using rule 202
	'~'            reduce using rule 202
	L_Ident        reduce using rule 202
	L_doubl        reduce using rule 202
	L_integ        reduce using rule 202
	L_quoted       reduce using rule 202
	%eof           reduce using rule 202


State 330

	PostCond -> 'admit' 'breaks' .                      (rule 205)

	'!'            reduce using rule 205
	'&'            reduce using rule 205
	'('            reduce using rule 205
	'*'            reduce using rule 205
	'+'            reduce using rule 205
	'-'            reduce using rule 205
	'\\allocable'  reduce using rule 205
	'\\allocation' reduce using rule 205
	'\\at'         reduce using rule 205
	'\\automatic'  reduce using rule 205
	'\\base_addr'  reduce using rule 205
	'\\block_length'reduce using rule 205
	'\\dangling'   reduce using rule 205
	'\\dynamic'    reduce using rule 205
	'\\exists'     reduce using rule 205
	'\\false'      reduce using rule 205
	'\\forall'     reduce using rule 205
	'\\freeable'   reduce using rule 205
	'\\fresh'      reduce using rule 205
	'\\initialized'reduce using rule 205
	'\\lambda'     reduce using rule 205
	'\\null'       reduce using rule 205
	'\\object_pointer'reduce using rule 205
	'\\offset'     reduce using rule 205
	'\\old'        reduce using rule 205
	'\\pi'         reduce using rule 205
	'\\register'   reduce using rule 205
	'\\result'     reduce using rule 205
	'\\separated'  reduce using rule 205
	'\\static'     reduce using rule 205
	'\\true'       reduce using rule 205
	'\\unallocated'reduce using rule 205
	'\\valid'      reduce using rule 205
	'\\valid_function'reduce using rule 205
	'\\valid_index'reduce using rule 205
	'\\valid_range'reduce using rule 205
	'\\valid_read' reduce using rule 205
	'admit'        reduce using rule 205
	'allocates'    reduce using rule 205
	'assert'       reduce using rule 205
	'assigns'      reduce using rule 205
	'assumes'      reduce using rule 205
	'at'           reduce using rule 205
	'axiom'        reduce using rule 205
	'axiomatic'    reduce using rule 205
	'behavior'     reduce using rule 205
	'behaviors'    reduce using rule 205
	'breaks'       reduce using rule 205
	'check'        reduce using rule 205
	'complete'     reduce using rule 205
	'continues'    reduce using rule 205
	'contract'     reduce using rule 205
	'decreases'    reduce using rule 205
	'disjoint'     reduce using rule 205
	'ensures'      reduce using rule 205
	'exits'        reduce using rule 205
	'frees'        reduce using rule 205
	'function'     reduce using rule 205
	'global'       reduce using rule 205
	'impact'       reduce using rule 205
	'include'      reduce using rule 205
	'inductive'    reduce using rule 205
	'invariant'    reduce using rule 205
	'label'        reduce using rule 205
	'lemma'        reduce using rule 205
	'let'          reduce using rule 205
	'logic'        reduce using rule 205
	'loop'         reduce using rule 205
	'model'        reduce using rule 205
	'module'       reduce using rule 205
	'pragma'       reduce using rule 205
	'predicate'    reduce using rule 205
	'reads'        reduce using rule 205
	'requires'     reduce using rule 205
	'returns'      reduce using rule 205
	'sizeof'       reduce using rule 205
	'slice'        reduce using rule 205
	'terminates'   reduce using rule 205
	'type'         reduce using rule 205
	'variant'      reduce using rule 205
	'writes'       reduce using rule 205
	'~'            reduce using rule 205
	L_Ident        reduce using rule 205
	L_doubl        reduce using rule 205
	L_integ        reduce using rule 205
	L_quoted       reduce using rule 205
	%eof           reduce using rule 205


State 331

	PostCond -> 'admit' 'continues' .                   (rule 206)

	'!'            reduce using rule 206
	'&'            reduce using rule 206
	'('            reduce using rule 206
	'*'            reduce using rule 206
	'+'            reduce using rule 206
	'-'            reduce using rule 206
	'\\allocable'  reduce using rule 206
	'\\allocation' reduce using rule 206
	'\\at'         reduce using rule 206
	'\\automatic'  reduce using rule 206
	'\\base_addr'  reduce using rule 206
	'\\block_length'reduce using rule 206
	'\\dangling'   reduce using rule 206
	'\\dynamic'    reduce using rule 206
	'\\exists'     reduce using rule 206
	'\\false'      reduce using rule 206
	'\\forall'     reduce using rule 206
	'\\freeable'   reduce using rule 206
	'\\fresh'      reduce using rule 206
	'\\initialized'reduce using rule 206
	'\\lambda'     reduce using rule 206
	'\\null'       reduce using rule 206
	'\\object_pointer'reduce using rule 206
	'\\offset'     reduce using rule 206
	'\\old'        reduce using rule 206
	'\\pi'         reduce using rule 206
	'\\register'   reduce using rule 206
	'\\result'     reduce using rule 206
	'\\separated'  reduce using rule 206
	'\\static'     reduce using rule 206
	'\\true'       reduce using rule 206
	'\\unallocated'reduce using rule 206
	'\\valid'      reduce using rule 206
	'\\valid_function'reduce using rule 206
	'\\valid_index'reduce using rule 206
	'\\valid_range'reduce using rule 206
	'\\valid_read' reduce using rule 206
	'admit'        reduce using rule 206
	'allocates'    reduce using rule 206
	'assert'       reduce using rule 206
	'assigns'      reduce using rule 206
	'assumes'      reduce using rule 206
	'at'           reduce using rule 206
	'axiom'        reduce using rule 206
	'axiomatic'    reduce using rule 206
	'behavior'     reduce using rule 206
	'behaviors'    reduce using rule 206
	'breaks'       reduce using rule 206
	'check'        reduce using rule 206
	'complete'     reduce using rule 206
	'continues'    reduce using rule 206
	'contract'     reduce using rule 206
	'decreases'    reduce using rule 206
	'disjoint'     reduce using rule 206
	'ensures'      reduce using rule 206
	'exits'        reduce using rule 206
	'frees'        reduce using rule 206
	'function'     reduce using rule 206
	'global'       reduce using rule 206
	'impact'       reduce using rule 206
	'include'      reduce using rule 206
	'inductive'    reduce using rule 206
	'invariant'    reduce using rule 206
	'label'        reduce using rule 206
	'lemma'        reduce using rule 206
	'let'          reduce using rule 206
	'logic'        reduce using rule 206
	'loop'         reduce using rule 206
	'model'        reduce using rule 206
	'module'       reduce using rule 206
	'pragma'       reduce using rule 206
	'predicate'    reduce using rule 206
	'reads'        reduce using rule 206
	'requires'     reduce using rule 206
	'returns'      reduce using rule 206
	'sizeof'       reduce using rule 206
	'slice'        reduce using rule 206
	'terminates'   reduce using rule 206
	'type'         reduce using rule 206
	'variant'      reduce using rule 206
	'writes'       reduce using rule 206
	'~'            reduce using rule 206
	L_Ident        reduce using rule 206
	L_doubl        reduce using rule 206
	L_integ        reduce using rule 206
	L_quoted       reduce using rule 206
	%eof           reduce using rule 206


State 332

	PostCond -> 'admit' 'ensures' .                     (rule 203)

	'!'            reduce using rule 203
	'&'            reduce using rule 203
	'('            reduce using rule 203
	'*'            reduce using rule 203
	'+'            reduce using rule 203
	'-'            reduce using rule 203
	'\\allocable'  reduce using rule 203
	'\\allocation' reduce using rule 203
	'\\at'         reduce using rule 203
	'\\automatic'  reduce using rule 203
	'\\base_addr'  reduce using rule 203
	'\\block_length'reduce using rule 203
	'\\dangling'   reduce using rule 203
	'\\dynamic'    reduce using rule 203
	'\\exists'     reduce using rule 203
	'\\false'      reduce using rule 203
	'\\forall'     reduce using rule 203
	'\\freeable'   reduce using rule 203
	'\\fresh'      reduce using rule 203
	'\\initialized'reduce using rule 203
	'\\lambda'     reduce using rule 203
	'\\null'       reduce using rule 203
	'\\object_pointer'reduce using rule 203
	'\\offset'     reduce using rule 203
	'\\old'        reduce using rule 203
	'\\pi'         reduce using rule 203
	'\\register'   reduce using rule 203
	'\\result'     reduce using rule 203
	'\\separated'  reduce using rule 203
	'\\static'     reduce using rule 203
	'\\true'       reduce using rule 203
	'\\unallocated'reduce using rule 203
	'\\valid'      reduce using rule 203
	'\\valid_function'reduce using rule 203
	'\\valid_index'reduce using rule 203
	'\\valid_range'reduce using rule 203
	'\\valid_read' reduce using rule 203
	'admit'        reduce using rule 203
	'allocates'    reduce using rule 203
	'assert'       reduce using rule 203
	'assigns'      reduce using rule 203
	'assumes'      reduce using rule 203
	'at'           reduce using rule 203
	'axiom'        reduce using rule 203
	'axiomatic'    reduce using rule 203
	'behavior'     reduce using rule 203
	'behaviors'    reduce using rule 203
	'breaks'       reduce using rule 203
	'check'        reduce using rule 203
	'complete'     reduce using rule 203
	'continues'    reduce using rule 203
	'contract'     reduce using rule 203
	'decreases'    reduce using rule 203
	'disjoint'     reduce using rule 203
	'ensures'      reduce using rule 203
	'exits'        reduce using rule 203
	'frees'        reduce using rule 203
	'function'     reduce using rule 203
	'global'       reduce using rule 203
	'impact'       reduce using rule 203
	'include'      reduce using rule 203
	'inductive'    reduce using rule 203
	'invariant'    reduce using rule 203
	'label'        reduce using rule 203
	'lemma'        reduce using rule 203
	'let'          reduce using rule 203
	'logic'        reduce using rule 203
	'loop'         reduce using rule 203
	'model'        reduce using rule 203
	'module'       reduce using rule 203
	'pragma'       reduce using rule 203
	'predicate'    reduce using rule 203
	'reads'        reduce using rule 203
	'requires'     reduce using rule 203
	'returns'      reduce using rule 203
	'sizeof'       reduce using rule 203
	'slice'        reduce using rule 203
	'terminates'   reduce using rule 203
	'type'         reduce using rule 203
	'variant'      reduce using rule 203
	'writes'       reduce using rule 203
	'~'            reduce using rule 203
	L_Ident        reduce using rule 203
	L_doubl        reduce using rule 203
	L_integ        reduce using rule 203
	L_quoted       reduce using rule 203
	%eof           reduce using rule 203


State 333

	PostCond -> 'admit' 'exits' .                       (rule 204)

	'!'            reduce using rule 204
	'&'            reduce using rule 204
	'('            reduce using rule 204
	'*'            reduce using rule 204
	'+'            reduce using rule 204
	'-'            reduce using rule 204
	'\\allocable'  reduce using rule 204
	'\\allocation' reduce using rule 204
	'\\at'         reduce using rule 204
	'\\automatic'  reduce using rule 204
	'\\base_addr'  reduce using rule 204
	'\\block_length'reduce using rule 204
	'\\dangling'   reduce using rule 204
	'\\dynamic'    reduce using rule 204
	'\\exists'     reduce using rule 204
	'\\false'      reduce using rule 204
	'\\forall'     reduce using rule 204
	'\\freeable'   reduce using rule 204
	'\\fresh'      reduce using rule 204
	'\\initialized'reduce using rule 204
	'\\lambda'     reduce using rule 204
	'\\null'       reduce using rule 204
	'\\object_pointer'reduce using rule 204
	'\\offset'     reduce using rule 204
	'\\old'        reduce using rule 204
	'\\pi'         reduce using rule 204
	'\\register'   reduce using rule 204
	'\\result'     reduce using rule 204
	'\\separated'  reduce using rule 204
	'\\static'     reduce using rule 204
	'\\true'       reduce using rule 204
	'\\unallocated'reduce using rule 204
	'\\valid'      reduce using rule 204
	'\\valid_function'reduce using rule 204
	'\\valid_index'reduce using rule 204
	'\\valid_range'reduce using rule 204
	'\\valid_read' reduce using rule 204
	'admit'        reduce using rule 204
	'allocates'    reduce using rule 204
	'assert'       reduce using rule 204
	'assigns'      reduce using rule 204
	'assumes'      reduce using rule 204
	'at'           reduce using rule 204
	'axiom'        reduce using rule 204
	'axiomatic'    reduce using rule 204
	'behavior'     reduce using rule 204
	'behaviors'    reduce using rule 204
	'breaks'       reduce using rule 204
	'check'        reduce using rule 204
	'complete'     reduce using rule 204
	'continues'    reduce using rule 204
	'contract'     reduce using rule 204
	'decreases'    reduce using rule 204
	'disjoint'     reduce using rule 204
	'ensures'      reduce using rule 204
	'exits'        reduce using rule 204
	'frees'        reduce using rule 204
	'function'     reduce using rule 204
	'global'       reduce using rule 204
	'impact'       reduce using rule 204
	'include'      reduce using rule 204
	'inductive'    reduce using rule 204
	'invariant'    reduce using rule 204
	'label'        reduce using rule 204
	'lemma'        reduce using rule 204
	'let'          reduce using rule 204
	'logic'        reduce using rule 204
	'loop'         reduce using rule 204
	'model'        reduce using rule 204
	'module'       reduce using rule 204
	'pragma'       reduce using rule 204
	'predicate'    reduce using rule 204
	'reads'        reduce using rule 204
	'requires'     reduce using rule 204
	'returns'      reduce using rule 204
	'sizeof'       reduce using rule 204
	'slice'        reduce using rule 204
	'terminates'   reduce using rule 204
	'type'         reduce using rule 204
	'variant'      reduce using rule 204
	'writes'       reduce using rule 204
	'~'            reduce using rule 204
	L_Ident        reduce using rule 204
	L_doubl        reduce using rule 204
	L_integ        reduce using rule 204
	L_quoted       reduce using rule 204
	%eof           reduce using rule 204


State 334

	PostCond -> 'admit' 'returns' .                     (rule 207)

	'!'            reduce using rule 207
	'&'            reduce using rule 207
	'('            reduce using rule 207
	'*'            reduce using rule 207
	'+'            reduce using rule 207
	'-'            reduce using rule 207
	'\\allocable'  reduce using rule 207
	'\\allocation' reduce using rule 207
	'\\at'         reduce using rule 207
	'\\automatic'  reduce using rule 207
	'\\base_addr'  reduce using rule 207
	'\\block_length'reduce using rule 207
	'\\dangling'   reduce using rule 207
	'\\dynamic'    reduce using rule 207
	'\\exists'     reduce using rule 207
	'\\false'      reduce using rule 207
	'\\forall'     reduce using rule 207
	'\\freeable'   reduce using rule 207
	'\\fresh'      reduce using rule 207
	'\\initialized'reduce using rule 207
	'\\lambda'     reduce using rule 207
	'\\null'       reduce using rule 207
	'\\object_pointer'reduce using rule 207
	'\\offset'     reduce using rule 207
	'\\old'        reduce using rule 207
	'\\pi'         reduce using rule 207
	'\\register'   reduce using rule 207
	'\\result'     reduce using rule 207
	'\\separated'  reduce using rule 207
	'\\static'     reduce using rule 207
	'\\true'       reduce using rule 207
	'\\unallocated'reduce using rule 207
	'\\valid'      reduce using rule 207
	'\\valid_function'reduce using rule 207
	'\\valid_index'reduce using rule 207
	'\\valid_range'reduce using rule 207
	'\\valid_read' reduce using rule 207
	'admit'        reduce using rule 207
	'allocates'    reduce using rule 207
	'assert'       reduce using rule 207
	'assigns'      reduce using rule 207
	'assumes'      reduce using rule 207
	'at'           reduce using rule 207
	'axiom'        reduce using rule 207
	'axiomatic'    reduce using rule 207
	'behavior'     reduce using rule 207
	'behaviors'    reduce using rule 207
	'breaks'       reduce using rule 207
	'check'        reduce using rule 207
	'complete'     reduce using rule 207
	'continues'    reduce using rule 207
	'contract'     reduce using rule 207
	'decreases'    reduce using rule 207
	'disjoint'     reduce using rule 207
	'ensures'      reduce using rule 207
	'exits'        reduce using rule 207
	'frees'        reduce using rule 207
	'function'     reduce using rule 207
	'global'       reduce using rule 207
	'impact'       reduce using rule 207
	'include'      reduce using rule 207
	'inductive'    reduce using rule 207
	'invariant'    reduce using rule 207
	'label'        reduce using rule 207
	'lemma'        reduce using rule 207
	'let'          reduce using rule 207
	'logic'        reduce using rule 207
	'loop'         reduce using rule 207
	'model'        reduce using rule 207
	'module'       reduce using rule 207
	'pragma'       reduce using rule 207
	'predicate'    reduce using rule 207
	'reads'        reduce using rule 207
	'requires'     reduce using rule 207
	'returns'      reduce using rule 207
	'sizeof'       reduce using rule 207
	'slice'        reduce using rule 207
	'terminates'   reduce using rule 207
	'type'         reduce using rule 207
	'variant'      reduce using rule 207
	'writes'       reduce using rule 207
	'~'            reduce using rule 207
	L_Ident        reduce using rule 207
	L_doubl        reduce using rule 207
	L_integ        reduce using rule 207
	L_quoted       reduce using rule 207
	%eof           reduce using rule 207


State 335

	ListFullIdentifier -> FullIdentifier ',' . ListFullIdentifier    (rule 249)

	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	L_Ident        shift, and enter state 56

	Ident          goto state 57
	FullIdentifier goto state 194
	ListFullIdentifiergoto state 451
	Identifier     goto state 67

State 336

	TypeSpecSimple -> 'unsigned' 'char' .               (rule 262)

	'('            reduce using rule 262
	'*'            reduce using rule 262
	'admit'        reduce using rule 262
	'allocates'    reduce using rule 262
	'assert'       reduce using rule 262
	'assigns'      reduce using rule 262
	'assumes'      reduce using rule 262
	'at'           reduce using rule 262
	'axiom'        reduce using rule 262
	'axiomatic'    reduce using rule 262
	'behavior'     reduce using rule 262
	'behaviors'    reduce using rule 262
	'breaks'       reduce using rule 262
	'check'        reduce using rule 262
	'complete'     reduce using rule 262
	'continues'    reduce using rule 262
	'contract'     reduce using rule 262
	'decreases'    reduce using rule 262
	'disjoint'     reduce using rule 262
	'ensures'      reduce using rule 262
	'exits'        reduce using rule 262
	'frees'        reduce using rule 262
	'function'     reduce using rule 262
	'global'       reduce using rule 262
	'impact'       reduce using rule 262
	'include'      reduce using rule 262
	'inductive'    reduce using rule 262
	'invariant'    reduce using rule 262
	'label'        reduce using rule 262
	'lemma'        reduce using rule 262
	'let'          reduce using rule 262
	'logic'        reduce using rule 262
	'loop'         reduce using rule 262
	'model'        reduce using rule 262
	'module'       reduce using rule 262
	'pragma'       reduce using rule 262
	'predicate'    reduce using rule 262
	'reads'        reduce using rule 262
	'requires'     reduce using rule 262
	'returns'      reduce using rule 262
	'slice'        reduce using rule 262
	'terminates'   reduce using rule 262
	'type'         reduce using rule 262
	'variant'      reduce using rule 262
	'writes'       reduce using rule 262
	L_Ident        reduce using rule 262
	%eof           reduce using rule 262


State 337

	TypeSpecSimple -> 'unsigned' 'int' .                (rule 265)

	'('            reduce using rule 265
	'*'            reduce using rule 265
	'admit'        reduce using rule 265
	'allocates'    reduce using rule 265
	'assert'       reduce using rule 265
	'assigns'      reduce using rule 265
	'assumes'      reduce using rule 265
	'at'           reduce using rule 265
	'axiom'        reduce using rule 265
	'axiomatic'    reduce using rule 265
	'behavior'     reduce using rule 265
	'behaviors'    reduce using rule 265
	'breaks'       reduce using rule 265
	'check'        reduce using rule 265
	'complete'     reduce using rule 265
	'continues'    reduce using rule 265
	'contract'     reduce using rule 265
	'decreases'    reduce using rule 265
	'disjoint'     reduce using rule 265
	'ensures'      reduce using rule 265
	'exits'        reduce using rule 265
	'frees'        reduce using rule 265
	'function'     reduce using rule 265
	'global'       reduce using rule 265
	'impact'       reduce using rule 265
	'include'      reduce using rule 265
	'inductive'    reduce using rule 265
	'invariant'    reduce using rule 265
	'label'        reduce using rule 265
	'lemma'        reduce using rule 265
	'let'          reduce using rule 265
	'logic'        reduce using rule 265
	'loop'         reduce using rule 265
	'model'        reduce using rule 265
	'module'       reduce using rule 265
	'pragma'       reduce using rule 265
	'predicate'    reduce using rule 265
	'reads'        reduce using rule 265
	'requires'     reduce using rule 265
	'returns'      reduce using rule 265
	'slice'        reduce using rule 265
	'terminates'   reduce using rule 265
	'type'         reduce using rule 265
	'variant'      reduce using rule 265
	'writes'       reduce using rule 265
	L_Ident        reduce using rule 265
	%eof           reduce using rule 265


State 338

	TypeSpecSimple -> 'unsigned' 'long' .               (rule 275)
	TypeSpecSimple -> 'unsigned' 'long' . 'int'         (rule 278)
	TypeSpecSimple -> 'unsigned' 'long' . 'long'        (rule 281)
	TypeSpecSimple -> 'unsigned' 'long' . 'long' 'int'    (rule 284)

	'('            reduce using rule 275
	'*'            reduce using rule 275
	'admit'        reduce using rule 275
	'allocates'    reduce using rule 275
	'assert'       reduce using rule 275
	'assigns'      reduce using rule 275
	'assumes'      reduce using rule 275
	'at'           reduce using rule 275
	'axiom'        reduce using rule 275
	'axiomatic'    reduce using rule 275
	'behavior'     reduce using rule 275
	'behaviors'    reduce using rule 275
	'breaks'       reduce using rule 275
	'check'        reduce using rule 275
	'complete'     reduce using rule 275
	'continues'    reduce using rule 275
	'contract'     reduce using rule 275
	'decreases'    reduce using rule 275
	'disjoint'     reduce using rule 275
	'ensures'      reduce using rule 275
	'exits'        reduce using rule 275
	'frees'        reduce using rule 275
	'function'     reduce using rule 275
	'global'       reduce using rule 275
	'impact'       reduce using rule 275
	'include'      reduce using rule 275
	'inductive'    reduce using rule 275
	'int'          shift, and enter state 449
	'invariant'    reduce using rule 275
	'label'        reduce using rule 275
	'lemma'        reduce using rule 275
	'let'          reduce using rule 275
	'logic'        reduce using rule 275
	'long'         shift, and enter state 450
	'loop'         reduce using rule 275
	'model'        reduce using rule 275
	'module'       reduce using rule 275
	'pragma'       reduce using rule 275
	'predicate'    reduce using rule 275
	'reads'        reduce using rule 275
	'requires'     reduce using rule 275
	'returns'      reduce using rule 275
	'slice'        reduce using rule 275
	'terminates'   reduce using rule 275
	'type'         reduce using rule 275
	'variant'      reduce using rule 275
	'writes'       reduce using rule 275
	L_Ident        reduce using rule 275
	%eof           reduce using rule 275


State 339

	TypeSpecSimple -> 'unsigned' 'short' .              (rule 269)
	TypeSpecSimple -> 'unsigned' 'short' . 'int'        (rule 272)

	'('            reduce using rule 269
	'*'            reduce using rule 269
	'admit'        reduce using rule 269
	'allocates'    reduce using rule 269
	'assert'       reduce using rule 269
	'assigns'      reduce using rule 269
	'assumes'      reduce using rule 269
	'at'           reduce using rule 269
	'axiom'        reduce using rule 269
	'axiomatic'    reduce using rule 269
	'behavior'     reduce using rule 269
	'behaviors'    reduce using rule 269
	'breaks'       reduce using rule 269
	'check'        reduce using rule 269
	'complete'     reduce using rule 269
	'continues'    reduce using rule 269
	'contract'     reduce using rule 269
	'decreases'    reduce using rule 269
	'disjoint'     reduce using rule 269
	'ensures'      reduce using rule 269
	'exits'        reduce using rule 269
	'frees'        reduce using rule 269
	'function'     reduce using rule 269
	'global'       reduce using rule 269
	'impact'       reduce using rule 269
	'include'      reduce using rule 269
	'inductive'    reduce using rule 269
	'int'          shift, and enter state 448
	'invariant'    reduce using rule 269
	'label'        reduce using rule 269
	'lemma'        reduce using rule 269
	'let'          reduce using rule 269
	'logic'        reduce using rule 269
	'loop'         reduce using rule 269
	'model'        reduce using rule 269
	'module'       reduce using rule 269
	'pragma'       reduce using rule 269
	'predicate'    reduce using rule 269
	'reads'        reduce using rule 269
	'requires'     reduce using rule 269
	'returns'      reduce using rule 269
	'slice'        reduce using rule 269
	'terminates'   reduce using rule 269
	'type'         reduce using rule 269
	'variant'      reduce using rule 269
	'writes'       reduce using rule 269
	L_Ident        reduce using rule 269
	%eof           reduce using rule 269


State 340

	TypeSpecSimple -> 'signed' 'char' .                 (rule 261)

	'('            reduce using rule 261
	'*'            reduce using rule 261
	'admit'        reduce using rule 261
	'allocates'    reduce using rule 261
	'assert'       reduce using rule 261
	'assigns'      reduce using rule 261
	'assumes'      reduce using rule 261
	'at'           reduce using rule 261
	'axiom'        reduce using rule 261
	'axiomatic'    reduce using rule 261
	'behavior'     reduce using rule 261
	'behaviors'    reduce using rule 261
	'breaks'       reduce using rule 261
	'check'        reduce using rule 261
	'complete'     reduce using rule 261
	'continues'    reduce using rule 261
	'contract'     reduce using rule 261
	'decreases'    reduce using rule 261
	'disjoint'     reduce using rule 261
	'ensures'      reduce using rule 261
	'exits'        reduce using rule 261
	'frees'        reduce using rule 261
	'function'     reduce using rule 261
	'global'       reduce using rule 261
	'impact'       reduce using rule 261
	'include'      reduce using rule 261
	'inductive'    reduce using rule 261
	'invariant'    reduce using rule 261
	'label'        reduce using rule 261
	'lemma'        reduce using rule 261
	'let'          reduce using rule 261
	'logic'        reduce using rule 261
	'loop'         reduce using rule 261
	'model'        reduce using rule 261
	'module'       reduce using rule 261
	'pragma'       reduce using rule 261
	'predicate'    reduce using rule 261
	'reads'        reduce using rule 261
	'requires'     reduce using rule 261
	'returns'      reduce using rule 261
	'slice'        reduce using rule 261
	'terminates'   reduce using rule 261
	'type'         reduce using rule 261
	'variant'      reduce using rule 261
	'writes'       reduce using rule 261
	L_Ident        reduce using rule 261
	%eof           reduce using rule 261


State 341

	TypeSpecSimple -> 'signed' 'int' .                  (rule 264)

	'('            reduce using rule 264
	'*'            reduce using rule 264
	'admit'        reduce using rule 264
	'allocates'    reduce using rule 264
	'assert'       reduce using rule 264
	'assigns'      reduce using rule 264
	'assumes'      reduce using rule 264
	'at'           reduce using rule 264
	'axiom'        reduce using rule 264
	'axiomatic'    reduce using rule 264
	'behavior'     reduce using rule 264
	'behaviors'    reduce using rule 264
	'breaks'       reduce using rule 264
	'check'        reduce using rule 264
	'complete'     reduce using rule 264
	'continues'    reduce using rule 264
	'contract'     reduce using rule 264
	'decreases'    reduce using rule 264
	'disjoint'     reduce using rule 264
	'ensures'      reduce using rule 264
	'exits'        reduce using rule 264
	'frees'        reduce using rule 264
	'function'     reduce using rule 264
	'global'       reduce using rule 264
	'impact'       reduce using rule 264
	'include'      reduce using rule 264
	'inductive'    reduce using rule 264
	'invariant'    reduce using rule 264
	'label'        reduce using rule 264
	'lemma'        reduce using rule 264
	'let'          reduce using rule 264
	'logic'        reduce using rule 264
	'loop'         reduce using rule 264
	'model'        reduce using rule 264
	'module'       reduce using rule 264
	'pragma'       reduce using rule 264
	'predicate'    reduce using rule 264
	'reads'        reduce using rule 264
	'requires'     reduce using rule 264
	'returns'      reduce using rule 264
	'slice'        reduce using rule 264
	'terminates'   reduce using rule 264
	'type'         reduce using rule 264
	'variant'      reduce using rule 264
	'writes'       reduce using rule 264
	L_Ident        reduce using rule 264
	%eof           reduce using rule 264


State 342

	TypeSpecSimple -> 'signed' 'long' .                 (rule 274)
	TypeSpecSimple -> 'signed' 'long' . 'int'           (rule 276)
	TypeSpecSimple -> 'signed' 'long' . 'long'          (rule 280)
	TypeSpecSimple -> 'signed' 'long' . 'long' 'int'    (rule 283)

	'('            reduce using rule 274
	'*'            reduce using rule 274
	'admit'        reduce using rule 274
	'allocates'    reduce using rule 274
	'assert'       reduce using rule 274
	'assigns'      reduce using rule 274
	'assumes'      reduce using rule 274
	'at'           reduce using rule 274
	'axiom'        reduce using rule 274
	'axiomatic'    reduce using rule 274
	'behavior'     reduce using rule 274
	'behaviors'    reduce using rule 274
	'breaks'       reduce using rule 274
	'check'        reduce using rule 274
	'complete'     reduce using rule 274
	'continues'    reduce using rule 274
	'contract'     reduce using rule 274
	'decreases'    reduce using rule 274
	'disjoint'     reduce using rule 274
	'ensures'      reduce using rule 274
	'exits'        reduce using rule 274
	'frees'        reduce using rule 274
	'function'     reduce using rule 274
	'global'       reduce using rule 274
	'impact'       reduce using rule 274
	'include'      reduce using rule 274
	'inductive'    reduce using rule 274
	'int'          shift, and enter state 446
	'invariant'    reduce using rule 274
	'label'        reduce using rule 274
	'lemma'        reduce using rule 274
	'let'          reduce using rule 274
	'logic'        reduce using rule 274
	'long'         shift, and enter state 447
	'loop'         reduce using rule 274
	'model'        reduce using rule 274
	'module'       reduce using rule 274
	'pragma'       reduce using rule 274
	'predicate'    reduce using rule 274
	'reads'        reduce using rule 274
	'requires'     reduce using rule 274
	'returns'      reduce using rule 274
	'slice'        reduce using rule 274
	'terminates'   reduce using rule 274
	'type'         reduce using rule 274
	'variant'      reduce using rule 274
	'writes'       reduce using rule 274
	L_Ident        reduce using rule 274
	%eof           reduce using rule 274


State 343

	TypeSpecSimple -> 'signed' 'short' .                (rule 268)
	TypeSpecSimple -> 'signed' 'short' . 'int'          (rule 271)

	'('            reduce using rule 268
	'*'            reduce using rule 268
	'admit'        reduce using rule 268
	'allocates'    reduce using rule 268
	'assert'       reduce using rule 268
	'assigns'      reduce using rule 268
	'assumes'      reduce using rule 268
	'at'           reduce using rule 268
	'axiom'        reduce using rule 268
	'axiomatic'    reduce using rule 268
	'behavior'     reduce using rule 268
	'behaviors'    reduce using rule 268
	'breaks'       reduce using rule 268
	'check'        reduce using rule 268
	'complete'     reduce using rule 268
	'continues'    reduce using rule 268
	'contract'     reduce using rule 268
	'decreases'    reduce using rule 268
	'disjoint'     reduce using rule 268
	'ensures'      reduce using rule 268
	'exits'        reduce using rule 268
	'frees'        reduce using rule 268
	'function'     reduce using rule 268
	'global'       reduce using rule 268
	'impact'       reduce using rule 268
	'include'      reduce using rule 268
	'inductive'    reduce using rule 268
	'int'          shift, and enter state 445
	'invariant'    reduce using rule 268
	'label'        reduce using rule 268
	'lemma'        reduce using rule 268
	'let'          reduce using rule 268
	'logic'        reduce using rule 268
	'loop'         reduce using rule 268
	'model'        reduce using rule 268
	'module'       reduce using rule 268
	'pragma'       reduce using rule 268
	'predicate'    reduce using rule 268
	'reads'        reduce using rule 268
	'requires'     reduce using rule 268
	'returns'      reduce using rule 268
	'slice'        reduce using rule 268
	'terminates'   reduce using rule 268
	'type'         reduce using rule 268
	'variant'      reduce using rule 268
	'writes'       reduce using rule 268
	L_Ident        reduce using rule 268
	%eof           reduce using rule 268


State 344

	TypeSpecSimple -> 'short' 'int' .                   (rule 270)

	'('            reduce using rule 270
	'*'            reduce using rule 270
	'admit'        reduce using rule 270
	'allocates'    reduce using rule 270
	'assert'       reduce using rule 270
	'assigns'      reduce using rule 270
	'assumes'      reduce using rule 270
	'at'           reduce using rule 270
	'axiom'        reduce using rule 270
	'axiomatic'    reduce using rule 270
	'behavior'     reduce using rule 270
	'behaviors'    reduce using rule 270
	'breaks'       reduce using rule 270
	'check'        reduce using rule 270
	'complete'     reduce using rule 270
	'continues'    reduce using rule 270
	'contract'     reduce using rule 270
	'decreases'    reduce using rule 270
	'disjoint'     reduce using rule 270
	'ensures'      reduce using rule 270
	'exits'        reduce using rule 270
	'frees'        reduce using rule 270
	'function'     reduce using rule 270
	'global'       reduce using rule 270
	'impact'       reduce using rule 270
	'include'      reduce using rule 270
	'inductive'    reduce using rule 270
	'invariant'    reduce using rule 270
	'label'        reduce using rule 270
	'lemma'        reduce using rule 270
	'let'          reduce using rule 270
	'logic'        reduce using rule 270
	'loop'         reduce using rule 270
	'model'        reduce using rule 270
	'module'       reduce using rule 270
	'pragma'       reduce using rule 270
	'predicate'    reduce using rule 270
	'reads'        reduce using rule 270
	'requires'     reduce using rule 270
	'returns'      reduce using rule 270
	'slice'        reduce using rule 270
	'terminates'   reduce using rule 270
	'type'         reduce using rule 270
	'variant'      reduce using rule 270
	'writes'       reduce using rule 270
	L_Ident        reduce using rule 270
	%eof           reduce using rule 270


State 345

	TypeSpecSimple -> 'long' 'double' .                 (rule 287)

	'('            reduce using rule 287
	'*'            reduce using rule 287
	'admit'        reduce using rule 287
	'allocates'    reduce using rule 287
	'assert'       reduce using rule 287
	'assigns'      reduce using rule 287
	'assumes'      reduce using rule 287
	'at'           reduce using rule 287
	'axiom'        reduce using rule 287
	'axiomatic'    reduce using rule 287
	'behavior'     reduce using rule 287
	'behaviors'    reduce using rule 287
	'breaks'       reduce using rule 287
	'check'        reduce using rule 287
	'complete'     reduce using rule 287
	'continues'    reduce using rule 287
	'contract'     reduce using rule 287
	'decreases'    reduce using rule 287
	'disjoint'     reduce using rule 287
	'ensures'      reduce using rule 287
	'exits'        reduce using rule 287
	'frees'        reduce using rule 287
	'function'     reduce using rule 287
	'global'       reduce using rule 287
	'impact'       reduce using rule 287
	'include'      reduce using rule 287
	'inductive'    reduce using rule 287
	'invariant'    reduce using rule 287
	'label'        reduce using rule 287
	'lemma'        reduce using rule 287
	'let'          reduce using rule 287
	'logic'        reduce using rule 287
	'loop'         reduce using rule 287
	'model'        reduce using rule 287
	'module'       reduce using rule 287
	'pragma'       reduce using rule 287
	'predicate'    reduce using rule 287
	'reads'        reduce using rule 287
	'requires'     reduce using rule 287
	'returns'      reduce using rule 287
	'slice'        reduce using rule 287
	'terminates'   reduce using rule 287
	'type'         reduce using rule 287
	'variant'      reduce using rule 287
	'writes'       reduce using rule 287
	L_Ident        reduce using rule 287
	%eof           reduce using rule 287


State 346

	TypeSpecSimple -> 'long' 'int' .                    (rule 277)

	'('            reduce using rule 277
	'*'            reduce using rule 277
	'admit'        reduce using rule 277
	'allocates'    reduce using rule 277
	'assert'       reduce using rule 277
	'assigns'      reduce using rule 277
	'assumes'      reduce using rule 277
	'at'           reduce using rule 277
	'axiom'        reduce using rule 277
	'axiomatic'    reduce using rule 277
	'behavior'     reduce using rule 277
	'behaviors'    reduce using rule 277
	'breaks'       reduce using rule 277
	'check'        reduce using rule 277
	'complete'     reduce using rule 277
	'continues'    reduce using rule 277
	'contract'     reduce using rule 277
	'decreases'    reduce using rule 277
	'disjoint'     reduce using rule 277
	'ensures'      reduce using rule 277
	'exits'        reduce using rule 277
	'frees'        reduce using rule 277
	'function'     reduce using rule 277
	'global'       reduce using rule 277
	'impact'       reduce using rule 277
	'include'      reduce using rule 277
	'inductive'    reduce using rule 277
	'invariant'    reduce using rule 277
	'label'        reduce using rule 277
	'lemma'        reduce using rule 277
	'let'          reduce using rule 277
	'logic'        reduce using rule 277
	'loop'         reduce using rule 277
	'model'        reduce using rule 277
	'module'       reduce using rule 277
	'pragma'       reduce using rule 277
	'predicate'    reduce using rule 277
	'reads'        reduce using rule 277
	'requires'     reduce using rule 277
	'returns'      reduce using rule 277
	'slice'        reduce using rule 277
	'terminates'   reduce using rule 277
	'type'         reduce using rule 277
	'variant'      reduce using rule 277
	'writes'       reduce using rule 277
	L_Ident        reduce using rule 277
	%eof           reduce using rule 277


State 347

	TypeSpecSimple -> 'long' 'long' .                   (rule 279)
	TypeSpecSimple -> 'long' 'long' . 'int'             (rule 282)

	'('            reduce using rule 279
	'*'            reduce using rule 279
	'admit'        reduce using rule 279
	'allocates'    reduce using rule 279
	'assert'       reduce using rule 279
	'assigns'      reduce using rule 279
	'assumes'      reduce using rule 279
	'at'           reduce using rule 279
	'axiom'        reduce using rule 279
	'axiomatic'    reduce using rule 279
	'behavior'     reduce using rule 279
	'behaviors'    reduce using rule 279
	'breaks'       reduce using rule 279
	'check'        reduce using rule 279
	'complete'     reduce using rule 279
	'continues'    reduce using rule 279
	'contract'     reduce using rule 279
	'decreases'    reduce using rule 279
	'disjoint'     reduce using rule 279
	'ensures'      reduce using rule 279
	'exits'        reduce using rule 279
	'frees'        reduce using rule 279
	'function'     reduce using rule 279
	'global'       reduce using rule 279
	'impact'       reduce using rule 279
	'include'      reduce using rule 279
	'inductive'    reduce using rule 279
	'int'          shift, and enter state 444
	'invariant'    reduce using rule 279
	'label'        reduce using rule 279
	'lemma'        reduce using rule 279
	'let'          reduce using rule 279
	'logic'        reduce using rule 279
	'loop'         reduce using rule 279
	'model'        reduce using rule 279
	'module'       reduce using rule 279
	'pragma'       reduce using rule 279
	'predicate'    reduce using rule 279
	'reads'        reduce using rule 279
	'requires'     reduce using rule 279
	'returns'      reduce using rule 279
	'slice'        reduce using rule 279
	'terminates'   reduce using rule 279
	'type'         reduce using rule 279
	'variant'      reduce using rule 279
	'writes'       reduce using rule 279
	L_Ident        reduce using rule 279
	%eof           reduce using rule 279


State 348

	LoopAllocation -> 'loop' Allocation . ';'           (rule 299)

	';'            shift, and enter state 443


State 349

	LoopEffects -> 'loop' 'assigns' . Assigns ';'       (rule 303)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\nothing'    shift, and enter state 266
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Assigns        goto state 442
	Zones          goto state 268
	Lexpr          goto state 259
	ListLexpr      goto state 269
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 350

	LoopInvariant -> 'loop' 'invariant' . Lexpr ';'     (rule 296)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 441
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 351

	LoopVariant -> 'loop' 'variant' . Variant ';'       (rule 302)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 61
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67
	Variant        goto state 440

State 352

	LoopAnnotStack -> LoopEffects LoopAnnotOpt .        (rule 291)

	%eof           reduce using rule 291


State 353

	LoopAnnotStack -> LoopVariant LoopAnnotOpt .        (rule 293)

	%eof           reduce using rule 293


State 354

	LoopAnnotStack -> LoopAllocation LoopAnnotOpt .     (rule 292)

	%eof           reduce using rule 292


State 355

	LoopAnnotStack -> LoopInvariant LoopAnnotOpt .      (rule 290)

	%eof           reduce using rule 290


State 356

	Allocation -> 'frees' Zones .                       (rule 301)

	';'            reduce using rule 301
	%eof           reduce using rule 301


State 357

	Allocation -> 'allocates' Zones .                   (rule 300)

	';'            reduce using rule 300
	%eof           reduce using rule 300


State 358

	Lexpr3 -> Lexpr3 . '+' Lexpr3                       (rule 160)
	Lexpr3 -> Lexpr3 . '-' Lexpr3                       (rule 161)
	Lexpr3 -> Lexpr3 . '*' Lexpr3                       (rule 162)
	Lexpr3 -> Lexpr3 . '/' Lexpr3                       (rule 163)
	Lexpr3 -> Lexpr3 . '%' Lexpr3                       (rule 164)
	Lexpr3 -> Lexpr3 . '[' Range ']'                    (rule 165)
	Lexpr3 -> Lexpr3 . '[' Lexpr ']'                    (rule 166)
	Lexpr3 -> '~' Lexpr3 .                              (rule 169)

	'!='           reduce using rule 169
	'%'            shift, and enter state 307
			(reduce using rule 169)

	'&'            reduce using rule 169
	'&&'           reduce using rule 169
	')'            reduce using rule 169
	'*'            shift, and enter state 308
			(reduce using rule 169)

	'+'            shift, and enter state 309
			(reduce using rule 169)

	','            reduce using rule 169
	'-'            shift, and enter state 310
			(reduce using rule 169)

	'-->'          reduce using rule 169
	'..'           reduce using rule 169
	'/'            shift, and enter state 311
			(reduce using rule 169)

	':'            reduce using rule 169
	';'            reduce using rule 169
	'<'            reduce using rule 169
	'<-->'         reduce using rule 169
	'<='           reduce using rule 169
	'<==>'         reduce using rule 169
	'=='           reduce using rule 169
	'==>'          reduce using rule 169
	'>'            reduce using rule 169
	'>='           reduce using rule 169
	'?'            reduce using rule 169
	'['            shift, and enter state 312
			(reduce using rule 169)

	'\\from'       reduce using rule 169
	'\\in'         reduce using rule 169
	']'            reduce using rule 169
	'^'            reduce using rule 169
	'^^'           reduce using rule 169
	'for'          reduce using rule 169
	'|'            reduce using rule 169
	'||'           reduce using rule 169
	%eof           reduce using rule 169


State 359

	Lexpr3 -> 'sizeof' '(' . Lexpr ')'                  (rule 172)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 439
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 360

	Lexpr3 -> '\\valid_read' OptLabel1 . '(' Lexpr ')'    (rule 138)

	'('            shift, and enter state 438


State 361

	Lexpr3 -> '\\valid_range' OptLabel1 . '(' Lexpr ',' Lexpr ',' Lexpr ')'    (rule 141)

	'('            shift, and enter state 437


State 362

	Lexpr3 -> '\\valid_index' OptLabel1 . '(' Lexpr ',' Lexpr ')'    (rule 140)

	'('            shift, and enter state 436


State 363

	Lexpr3 -> '\\valid_function' '(' . Lexpr ')'        (rule 139)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 435
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 364

	Lexpr3 -> '\\valid' OptLabel1 . '(' Lexpr ')'       (rule 137)

	'('            shift, and enter state 434


State 365

	Lexpr3 -> '\\separated' '(' . ListLexpr ')'         (rule 176)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 259
	ListLexpr      goto state 433
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 366

	Lexpr3 -> '\\old' '(' . Lexpr ')'                   (rule 173)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 432
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 367

	Lexpr3 -> '\\offset' OptLabel1 . '(' Lexpr ')'      (rule 147)

	'('            shift, and enter state 431


State 368

	Lexpr3 -> '\\object_pointer' OptLabel1 . '(' Lexpr ')'    (rule 136)

	'('            shift, and enter state 430


State 369

	LexprBinder -> '\\lambda' Binders . ';' Lexpr       (rule 115)

	';'            shift, and enter state 429


State 370

	Lexpr3 -> '\\initialized' OptLabel1 . '(' Lexpr ')'    (rule 142)

	'('            shift, and enter state 428


State 371

	Lexpr3 -> '\\fresh' OptLabel2 . '(' Lexpr ',' Lexpr ')'    (rule 144)

	'('            shift, and enter state 427


State 372

	Lexpr3 -> '\\freeable' OptLabel1 . '(' Lexpr ')'    (rule 149)

	'('            shift, and enter state 426


State 373

	LexprBinder -> '\\forall' Binders . ';' Lexpr       (rule 113)

	';'            shift, and enter state 425


State 374

	LexprBinder -> '\\exists' Binders . ';' Lexpr       (rule 114)

	';'            shift, and enter state 424


State 375

	Lexpr3 -> '\\dangling' OptLabel1 . '(' Lexpr ')'    (rule 143)

	'('            shift, and enter state 423


State 376

	Lexpr3 -> '\\block_length' OptLabel1 . '(' Lexpr ')'    (rule 146)

	'('            shift, and enter state 422


State 377

	Lexpr3 -> '\\base_addr' OptLabel1 . '(' Lexpr ')'    (rule 145)

	'('            shift, and enter state 421


State 378

	Lexpr3 -> '\\at' '(' . Lexpr ',' LabelName ')'      (rule 174)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 420
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 379

	Lexpr3 -> '\\allocation' OptLabel1 . '(' Lexpr ')'    (rule 150)

	'('            shift, and enter state 419


State 380

	Lexpr3 -> '\\allocable' OptLabel1 . '(' Lexpr ')'    (rule 148)

	'('            shift, and enter state 418


State 381

	Lexpr3 -> Lexpr3 . '+' Lexpr3                       (rule 160)
	Lexpr3 -> Lexpr3 . '-' Lexpr3                       (rule 161)
	Lexpr3 -> Lexpr3 . '*' Lexpr3                       (rule 162)
	Lexpr3 -> Lexpr3 . '/' Lexpr3                       (rule 163)
	Lexpr3 -> Lexpr3 . '%' Lexpr3                       (rule 164)
	Lexpr3 -> Lexpr3 . '[' Range ']'                    (rule 165)
	Lexpr3 -> Lexpr3 . '[' Lexpr ']'                    (rule 166)
	Lexpr3 -> '-' Lexpr3 .                              (rule 167)

	'!='           reduce using rule 167
	'%'            shift, and enter state 307
			(reduce using rule 167)

	'&'            reduce using rule 167
	'&&'           reduce using rule 167
	')'            reduce using rule 167
	'*'            shift, and enter state 308
			(reduce using rule 167)

	'+'            shift, and enter state 309
			(reduce using rule 167)

	','            reduce using rule 167
	'-'            shift, and enter state 310
			(reduce using rule 167)

	'-->'          reduce using rule 167
	'..'           reduce using rule 167
	'/'            shift, and enter state 311
			(reduce using rule 167)

	':'            reduce using rule 167
	';'            reduce using rule 167
	'<'            reduce using rule 167
	'<-->'         reduce using rule 167
	'<='           reduce using rule 167
	'<==>'         reduce using rule 167
	'=='           reduce using rule 167
	'==>'          reduce using rule 167
	'>'            reduce using rule 167
	'>='           reduce using rule 167
	'?'            reduce using rule 167
	'['            shift, and enter state 312
			(reduce using rule 167)

	'\\from'       reduce using rule 167
	'\\in'         reduce using rule 167
	']'            reduce using rule 167
	'^'            reduce using rule 167
	'^^'           reduce using rule 167
	'for'          reduce using rule 167
	'|'            reduce using rule 167
	'||'           reduce using rule 167
	%eof           reduce using rule 167


State 382

	Lexpr3 -> Lexpr3 . '+' Lexpr3                       (rule 160)
	Lexpr3 -> Lexpr3 . '-' Lexpr3                       (rule 161)
	Lexpr3 -> Lexpr3 . '*' Lexpr3                       (rule 162)
	Lexpr3 -> Lexpr3 . '/' Lexpr3                       (rule 163)
	Lexpr3 -> Lexpr3 . '%' Lexpr3                       (rule 164)
	Lexpr3 -> Lexpr3 . '[' Range ']'                    (rule 165)
	Lexpr3 -> Lexpr3 . '[' Lexpr ']'                    (rule 166)
	Lexpr3 -> '+' Lexpr3 .                              (rule 168)

	'!='           reduce using rule 168
	'%'            shift, and enter state 307
			(reduce using rule 168)

	'&'            reduce using rule 168
	'&&'           reduce using rule 168
	')'            reduce using rule 168
	'*'            shift, and enter state 308
			(reduce using rule 168)

	'+'            shift, and enter state 309
			(reduce using rule 168)

	','            reduce using rule 168
	'-'            shift, and enter state 310
			(reduce using rule 168)

	'-->'          reduce using rule 168
	'..'           reduce using rule 168
	'/'            shift, and enter state 311
			(reduce using rule 168)

	':'            reduce using rule 168
	';'            reduce using rule 168
	'<'            reduce using rule 168
	'<-->'         reduce using rule 168
	'<='           reduce using rule 168
	'<==>'         reduce using rule 168
	'=='           reduce using rule 168
	'==>'          reduce using rule 168
	'>'            reduce using rule 168
	'>='           reduce using rule 168
	'?'            reduce using rule 168
	'['            shift, and enter state 312
			(reduce using rule 168)

	'\\from'       reduce using rule 168
	'\\in'         reduce using rule 168
	']'            reduce using rule 168
	'^'            reduce using rule 168
	'^^'           reduce using rule 168
	'for'          reduce using rule 168
	'|'            reduce using rule 168
	'||'           reduce using rule 168
	%eof           reduce using rule 168


State 383

	Lexpr3 -> Lexpr3 . '+' Lexpr3                       (rule 160)
	Lexpr3 -> Lexpr3 . '-' Lexpr3                       (rule 161)
	Lexpr3 -> Lexpr3 . '*' Lexpr3                       (rule 162)
	Lexpr3 -> Lexpr3 . '/' Lexpr3                       (rule 163)
	Lexpr3 -> Lexpr3 . '%' Lexpr3                       (rule 164)
	Lexpr3 -> Lexpr3 . '[' Range ']'                    (rule 165)
	Lexpr3 -> Lexpr3 . '[' Lexpr ']'                    (rule 166)
	Lexpr3 -> '*' Lexpr3 .                              (rule 170)

	'!='           reduce using rule 170
	'%'            shift, and enter state 307
			(reduce using rule 170)

	'&'            reduce using rule 170
	'&&'           reduce using rule 170
	')'            reduce using rule 170
	'*'            shift, and enter state 308
			(reduce using rule 170)

	'+'            shift, and enter state 309
			(reduce using rule 170)

	','            reduce using rule 170
	'-'            shift, and enter state 310
			(reduce using rule 170)

	'-->'          reduce using rule 170
	'..'           reduce using rule 170
	'/'            shift, and enter state 311
			(reduce using rule 170)

	':'            reduce using rule 170
	';'            reduce using rule 170
	'<'            reduce using rule 170
	'<-->'         reduce using rule 170
	'<='           reduce using rule 170
	'<==>'         reduce using rule 170
	'=='           reduce using rule 170
	'==>'          reduce using rule 170
	'>'            reduce using rule 170
	'>='           reduce using rule 170
	'?'            reduce using rule 170
	'['            shift, and enter state 312
			(reduce using rule 170)

	'\\from'       reduce using rule 170
	'\\in'         reduce using rule 170
	']'            reduce using rule 170
	'^'            reduce using rule 170
	'^^'           reduce using rule 170
	'for'          reduce using rule 170
	'|'            reduce using rule 170
	'||'           reduce using rule 170
	%eof           reduce using rule 170


State 384

	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)
	Lexpr3 -> '(' Lexpr . ')'                           (rule 180)
	LexprOption -> Lexpr .                              (rule 191)

	')'            shift, and enter state 417
	'..'           reduce using rule 191
	'?'            shift, and enter state 303


State 385

	Lexpr3 -> '(' Range . ')'                           (rule 181)

	')'            shift, and enter state 416


State 386

	Lexpr3 -> Lexpr3 . '+' Lexpr3                       (rule 160)
	Lexpr3 -> Lexpr3 . '-' Lexpr3                       (rule 161)
	Lexpr3 -> Lexpr3 . '*' Lexpr3                       (rule 162)
	Lexpr3 -> Lexpr3 . '/' Lexpr3                       (rule 163)
	Lexpr3 -> Lexpr3 . '%' Lexpr3                       (rule 164)
	Lexpr3 -> Lexpr3 . '[' Range ']'                    (rule 165)
	Lexpr3 -> Lexpr3 . '[' Lexpr ']'                    (rule 166)
	Lexpr3 -> '&' Lexpr3 .                              (rule 171)

	'!='           reduce using rule 171
	'%'            shift, and enter state 307
			(reduce using rule 171)

	'&'            reduce using rule 171
	'&&'           reduce using rule 171
	')'            reduce using rule 171
	'*'            shift, and enter state 308
			(reduce using rule 171)

	'+'            shift, and enter state 309
			(reduce using rule 171)

	','            reduce using rule 171
	'-'            shift, and enter state 310
			(reduce using rule 171)

	'-->'          reduce using rule 171
	'..'           reduce using rule 171
	'/'            shift, and enter state 311
			(reduce using rule 171)

	':'            reduce using rule 171
	';'            reduce using rule 171
	'<'            reduce using rule 171
	'<-->'         reduce using rule 171
	'<='           reduce using rule 171
	'<==>'         reduce using rule 171
	'=='           reduce using rule 171
	'==>'          reduce using rule 171
	'>'            reduce using rule 171
	'>='           reduce using rule 171
	'?'            reduce using rule 171
	'['            shift, and enter state 312
			(reduce using rule 171)

	'\\from'       reduce using rule 171
	'\\in'         reduce using rule 171
	']'            reduce using rule 171
	'^'            reduce using rule 171
	'^^'           reduce using rule 171
	'for'          reduce using rule 171
	'|'            reduce using rule 171
	'||'           reduce using rule 171
	%eof           reduce using rule 171


State 387

	Lexpr2 -> '!' LexprBinder .                         (rule 112)

	'&'            reduce using rule 112
	'&&'           reduce using rule 112
	')'            reduce using rule 112
	','            reduce using rule 112
	'-->'          reduce using rule 112
	'..'           reduce using rule 112
	':'            reduce using rule 112
	';'            reduce using rule 112
	'<-->'         reduce using rule 112
	'<==>'         reduce using rule 112
	'==>'          reduce using rule 112
	'?'            reduce using rule 112
	'\\from'       reduce using rule 112
	'\\in'         reduce using rule 112
	']'            reduce using rule 112
	'^'            reduce using rule 112
	'^^'           reduce using rule 112
	'for'          reduce using rule 112
	'|'            reduce using rule 112
	'||'           reduce using rule 112
	%eof           reduce using rule 112


State 388

	Lexpr3 -> FullIdentifier '(' . ListLexpr ')'        (rule 177)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 259
	ListLexpr      goto state 415
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 389

	Lexpr1 -> Lexpr3 ListLexprRelInner . Relation Lexpr2    (rule 100)

	'!='           shift, and enter state 248
	'<'            shift, and enter state 249
	'<='           shift, and enter state 250
	'=='           shift, and enter state 251
	'>'            shift, and enter state 252
	'>='           shift, and enter state 253

	Relation       goto state 414

State 390

	Lexpr -> Lexpr1 '&' . Lexpr                         (rule 89)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 413
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 391

	Lexpr -> Lexpr1 '&&' . Lexpr                        (rule 87)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 412
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 392

	Lexpr -> Lexpr1 '-->' . Lexpr                       (rule 92)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 411
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 393

	Lexpr -> Lexpr1 '<-->' . Lexpr                      (rule 93)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 410
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 394

	Lexpr -> Lexpr1 '<==>' . Lexpr                      (rule 85)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 409
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 395

	Lexpr -> Lexpr1 '==>' . Lexpr                       (rule 84)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 408
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 396

	Lexpr -> Lexpr1 '\\in' . Lexpr                      (rule 94)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 407
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 397

	Lexpr -> Lexpr1 '^' . Lexpr                         (rule 91)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 406
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 398

	Lexpr -> Lexpr1 '^^' . Lexpr                        (rule 88)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 405
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 399

	Lexpr -> Lexpr1 '|' . Lexpr                         (rule 90)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 404
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 400

	Lexpr -> Lexpr1 '||' . Lexpr                        (rule 86)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 403
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 401

	Variant -> Lexpr 'for' . AnyIdentifier              (rule 304)

	'behaviors'    shift, and enter state 115
	'label'        shift, and enter state 132
	'reads'        shift, and enter state 141
	'writes'       shift, and enter state 149
	L_Ident        shift, and enter state 56

	Ident          goto state 57
	AnyIdentifier  goto state 402
	Identifier     goto state 206

State 402

	Variant -> Lexpr 'for' AnyIdentifier .              (rule 304)

	';'            reduce using rule 304
	%eof           reduce using rule 304


State 403

	Lexpr -> Lexpr1 '||' Lexpr .                        (rule 86)
	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)

	'&'            reduce using rule 86
	'&&'           reduce using rule 86
	')'            reduce using rule 86
	','            reduce using rule 86
	'-->'          reduce using rule 86
	'..'           reduce using rule 86
	':'            reduce using rule 86
	';'            reduce using rule 86
	'<-->'         reduce using rule 86
	'<==>'         reduce using rule 86
	'==>'          reduce using rule 86
	'?'            shift, and enter state 303
			(reduce using rule 86)

	'\\from'       reduce using rule 86
	'\\in'         reduce using rule 86
	']'            reduce using rule 86
	'^'            reduce using rule 86
	'^^'           reduce using rule 86
	'for'          reduce using rule 86
	'|'            reduce using rule 86
	'||'           reduce using rule 86
	%eof           reduce using rule 86


State 404

	Lexpr -> Lexpr1 '|' Lexpr .                         (rule 90)
	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)

	'&'            reduce using rule 90
	'&&'           reduce using rule 90
	')'            reduce using rule 90
	','            reduce using rule 90
	'-->'          reduce using rule 90
	'..'           reduce using rule 90
	':'            reduce using rule 90
	';'            reduce using rule 90
	'<-->'         reduce using rule 90
	'<==>'         reduce using rule 90
	'==>'          reduce using rule 90
	'?'            shift, and enter state 303
			(reduce using rule 90)

	'\\from'       reduce using rule 90
	'\\in'         reduce using rule 90
	']'            reduce using rule 90
	'^'            reduce using rule 90
	'^^'           reduce using rule 90
	'for'          reduce using rule 90
	'|'            reduce using rule 90
	'||'           reduce using rule 90
	%eof           reduce using rule 90


State 405

	Lexpr -> Lexpr1 '^^' Lexpr .                        (rule 88)
	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)

	'&'            reduce using rule 88
	'&&'           reduce using rule 88
	')'            reduce using rule 88
	','            reduce using rule 88
	'-->'          reduce using rule 88
	'..'           reduce using rule 88
	':'            reduce using rule 88
	';'            reduce using rule 88
	'<-->'         reduce using rule 88
	'<==>'         reduce using rule 88
	'==>'          reduce using rule 88
	'?'            shift, and enter state 303
			(reduce using rule 88)

	'\\from'       reduce using rule 88
	'\\in'         reduce using rule 88
	']'            reduce using rule 88
	'^'            reduce using rule 88
	'^^'           reduce using rule 88
	'for'          reduce using rule 88
	'|'            reduce using rule 88
	'||'           reduce using rule 88
	%eof           reduce using rule 88


State 406

	Lexpr -> Lexpr1 '^' Lexpr .                         (rule 91)
	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)

	'&'            reduce using rule 91
	'&&'           reduce using rule 91
	')'            reduce using rule 91
	','            reduce using rule 91
	'-->'          reduce using rule 91
	'..'           reduce using rule 91
	':'            reduce using rule 91
	';'            reduce using rule 91
	'<-->'         reduce using rule 91
	'<==>'         reduce using rule 91
	'==>'          reduce using rule 91
	'?'            shift, and enter state 303
			(reduce using rule 91)

	'\\from'       reduce using rule 91
	'\\in'         reduce using rule 91
	']'            reduce using rule 91
	'^'            reduce using rule 91
	'^^'           reduce using rule 91
	'for'          reduce using rule 91
	'|'            reduce using rule 91
	'||'           reduce using rule 91
	%eof           reduce using rule 91


State 407

	Lexpr -> Lexpr1 '\\in' Lexpr .                      (rule 94)
	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)

	'&'            reduce using rule 94
	'&&'           reduce using rule 94
	')'            reduce using rule 94
	','            reduce using rule 94
	'-->'          reduce using rule 94
	'..'           reduce using rule 94
	':'            reduce using rule 94
	';'            reduce using rule 94
	'<-->'         reduce using rule 94
	'<==>'         reduce using rule 94
	'==>'          reduce using rule 94
	'?'            shift, and enter state 303
			(reduce using rule 94)

	'\\from'       reduce using rule 94
	'\\in'         reduce using rule 94
	']'            reduce using rule 94
	'^'            reduce using rule 94
	'^^'           reduce using rule 94
	'for'          reduce using rule 94
	'|'            reduce using rule 94
	'||'           reduce using rule 94
	%eof           reduce using rule 94


State 408

	Lexpr -> Lexpr1 '==>' Lexpr .                       (rule 84)
	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)

	'&'            reduce using rule 84
	'&&'           reduce using rule 84
	')'            reduce using rule 84
	','            reduce using rule 84
	'-->'          reduce using rule 84
	'..'           reduce using rule 84
	':'            reduce using rule 84
	';'            reduce using rule 84
	'<-->'         reduce using rule 84
	'<==>'         reduce using rule 84
	'==>'          reduce using rule 84
	'?'            shift, and enter state 303
			(reduce using rule 84)

	'\\from'       reduce using rule 84
	'\\in'         reduce using rule 84
	']'            reduce using rule 84
	'^'            reduce using rule 84
	'^^'           reduce using rule 84
	'for'          reduce using rule 84
	'|'            reduce using rule 84
	'||'           reduce using rule 84
	%eof           reduce using rule 84


State 409

	Lexpr -> Lexpr1 '<==>' Lexpr .                      (rule 85)
	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)

	'&'            reduce using rule 85
	'&&'           reduce using rule 85
	')'            reduce using rule 85
	','            reduce using rule 85
	'-->'          reduce using rule 85
	'..'           reduce using rule 85
	':'            reduce using rule 85
	';'            reduce using rule 85
	'<-->'         reduce using rule 85
	'<==>'         reduce using rule 85
	'==>'          reduce using rule 85
	'?'            shift, and enter state 303
			(reduce using rule 85)

	'\\from'       reduce using rule 85
	'\\in'         reduce using rule 85
	']'            reduce using rule 85
	'^'            reduce using rule 85
	'^^'           reduce using rule 85
	'for'          reduce using rule 85
	'|'            reduce using rule 85
	'||'           reduce using rule 85
	%eof           reduce using rule 85


State 410

	Lexpr -> Lexpr1 '<-->' Lexpr .                      (rule 93)
	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)

	'&'            reduce using rule 93
	'&&'           reduce using rule 93
	')'            reduce using rule 93
	','            reduce using rule 93
	'-->'          reduce using rule 93
	'..'           reduce using rule 93
	':'            reduce using rule 93
	';'            reduce using rule 93
	'<-->'         reduce using rule 93
	'<==>'         reduce using rule 93
	'==>'          reduce using rule 93
	'?'            shift, and enter state 303
			(reduce using rule 93)

	'\\from'       reduce using rule 93
	'\\in'         reduce using rule 93
	']'            reduce using rule 93
	'^'            reduce using rule 93
	'^^'           reduce using rule 93
	'for'          reduce using rule 93
	'|'            reduce using rule 93
	'||'           reduce using rule 93
	%eof           reduce using rule 93


State 411

	Lexpr -> Lexpr1 '-->' Lexpr .                       (rule 92)
	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)

	'&'            reduce using rule 92
	'&&'           reduce using rule 92
	')'            reduce using rule 92
	','            reduce using rule 92
	'-->'          reduce using rule 92
	'..'           reduce using rule 92
	':'            reduce using rule 92
	';'            reduce using rule 92
	'<-->'         reduce using rule 92
	'<==>'         reduce using rule 92
	'==>'          reduce using rule 92
	'?'            shift, and enter state 303
			(reduce using rule 92)

	'\\from'       reduce using rule 92
	'\\in'         reduce using rule 92
	']'            reduce using rule 92
	'^'            reduce using rule 92
	'^^'           reduce using rule 92
	'for'          reduce using rule 92
	'|'            reduce using rule 92
	'||'           reduce using rule 92
	%eof           reduce using rule 92


State 412

	Lexpr -> Lexpr1 '&&' Lexpr .                        (rule 87)
	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)

	'&'            reduce using rule 87
	'&&'           reduce using rule 87
	')'            reduce using rule 87
	','            reduce using rule 87
	'-->'          reduce using rule 87
	'..'           reduce using rule 87
	':'            reduce using rule 87
	';'            reduce using rule 87
	'<-->'         reduce using rule 87
	'<==>'         reduce using rule 87
	'==>'          reduce using rule 87
	'?'            shift, and enter state 303
			(reduce using rule 87)

	'\\from'       reduce using rule 87
	'\\in'         reduce using rule 87
	']'            reduce using rule 87
	'^'            reduce using rule 87
	'^^'           reduce using rule 87
	'for'          reduce using rule 87
	'|'            reduce using rule 87
	'||'           reduce using rule 87
	%eof           reduce using rule 87


State 413

	Lexpr -> Lexpr1 '&' Lexpr .                         (rule 89)
	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)

	'&'            reduce using rule 89
	'&&'           reduce using rule 89
	')'            reduce using rule 89
	','            reduce using rule 89
	'-->'          reduce using rule 89
	'..'           reduce using rule 89
	':'            reduce using rule 89
	';'            reduce using rule 89
	'<-->'         reduce using rule 89
	'<==>'         reduce using rule 89
	'==>'          reduce using rule 89
	'?'            shift, and enter state 303
			(reduce using rule 89)

	'\\from'       reduce using rule 89
	'\\in'         reduce using rule 89
	']'            reduce using rule 89
	'^'            reduce using rule 89
	'^^'           reduce using rule 89
	'for'          reduce using rule 89
	'|'            reduce using rule 89
	'||'           reduce using rule 89
	%eof           reduce using rule 89


State 414

	Lexpr1 -> Lexpr3 ListLexprRelInner Relation . Lexpr2    (rule 100)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr2         goto state 518
	LexprBinder    goto state 64
	Lexpr3         goto state 246
	FullIdentifier goto state 66
	Identifier     goto state 67

State 415

	Lexpr3 -> FullIdentifier '(' ListLexpr . ')'        (rule 177)

	')'            shift, and enter state 517


State 416

	Lexpr3 -> '(' Range ')' .                           (rule 181)

	'!='           reduce using rule 181
	'%'            reduce using rule 181
	'&'            reduce using rule 181
	'&&'           reduce using rule 181
	')'            reduce using rule 181
	'*'            reduce using rule 181
	'+'            reduce using rule 181
	','            reduce using rule 181
	'-'            reduce using rule 181
	'-->'          reduce using rule 181
	'..'           reduce using rule 181
	'/'            reduce using rule 181
	':'            reduce using rule 181
	';'            reduce using rule 181
	'<'            reduce using rule 181
	'<-->'         reduce using rule 181
	'<='           reduce using rule 181
	'<==>'         reduce using rule 181
	'=='           reduce using rule 181
	'==>'          reduce using rule 181
	'>'            reduce using rule 181
	'>='           reduce using rule 181
	'?'            reduce using rule 181
	'['            reduce using rule 181
	'\\from'       reduce using rule 181
	'\\in'         reduce using rule 181
	']'            reduce using rule 181
	'^'            reduce using rule 181
	'^^'           reduce using rule 181
	'for'          reduce using rule 181
	'|'            reduce using rule 181
	'||'           reduce using rule 181
	%eof           reduce using rule 181


State 417

	Lexpr3 -> '(' Lexpr ')' .                           (rule 180)

	'!='           reduce using rule 180
	'%'            reduce using rule 180
	'&'            reduce using rule 180
	'&&'           reduce using rule 180
	')'            reduce using rule 180
	'*'            reduce using rule 180
	'+'            reduce using rule 180
	','            reduce using rule 180
	'-'            reduce using rule 180
	'-->'          reduce using rule 180
	'..'           reduce using rule 180
	'/'            reduce using rule 180
	':'            reduce using rule 180
	';'            reduce using rule 180
	'<'            reduce using rule 180
	'<-->'         reduce using rule 180
	'<='           reduce using rule 180
	'<==>'         reduce using rule 180
	'=='           reduce using rule 180
	'==>'          reduce using rule 180
	'>'            reduce using rule 180
	'>='           reduce using rule 180
	'?'            reduce using rule 180
	'['            reduce using rule 180
	'\\from'       reduce using rule 180
	'\\in'         reduce using rule 180
	']'            reduce using rule 180
	'^'            reduce using rule 180
	'^^'           reduce using rule 180
	'for'          reduce using rule 180
	'|'            reduce using rule 180
	'||'           reduce using rule 180
	%eof           reduce using rule 180


State 418

	Lexpr3 -> '\\allocable' OptLabel1 '(' . Lexpr ')'    (rule 148)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 516
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 419

	Lexpr3 -> '\\allocation' OptLabel1 '(' . Lexpr ')'    (rule 150)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 515
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 420

	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)
	Lexpr3 -> '\\at' '(' Lexpr . ',' LabelName ')'      (rule 174)

	','            shift, and enter state 514
	'?'            shift, and enter state 303


State 421

	Lexpr3 -> '\\base_addr' OptLabel1 '(' . Lexpr ')'    (rule 145)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 513
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 422

	Lexpr3 -> '\\block_length' OptLabel1 '(' . Lexpr ')'    (rule 146)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 512
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 423

	Lexpr3 -> '\\dangling' OptLabel1 '(' . Lexpr ')'    (rule 143)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 511
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 424

	LexprBinder -> '\\exists' Binders ';' . Lexpr       (rule 114)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 510
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 425

	LexprBinder -> '\\forall' Binders ';' . Lexpr       (rule 113)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 509
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 426

	Lexpr3 -> '\\freeable' OptLabel1 '(' . Lexpr ')'    (rule 149)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 508
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 427

	Lexpr3 -> '\\fresh' OptLabel2 '(' . Lexpr ',' Lexpr ')'    (rule 144)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 507
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 428

	Lexpr3 -> '\\initialized' OptLabel1 '(' . Lexpr ')'    (rule 142)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 506
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 429

	LexprBinder -> '\\lambda' Binders ';' . Lexpr       (rule 115)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 505
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 430

	Lexpr3 -> '\\object_pointer' OptLabel1 '(' . Lexpr ')'    (rule 136)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 504
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 431

	Lexpr3 -> '\\offset' OptLabel1 '(' . Lexpr ')'      (rule 147)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 503
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 432

	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)
	Lexpr3 -> '\\old' '(' Lexpr . ')'                   (rule 173)

	')'            shift, and enter state 502
	'?'            shift, and enter state 303


State 433

	Lexpr3 -> '\\separated' '(' ListLexpr . ')'         (rule 176)

	')'            shift, and enter state 501


State 434

	Lexpr3 -> '\\valid' OptLabel1 '(' . Lexpr ')'       (rule 137)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 500
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 435

	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)
	Lexpr3 -> '\\valid_function' '(' Lexpr . ')'        (rule 139)

	')'            shift, and enter state 499
	'?'            shift, and enter state 303


State 436

	Lexpr3 -> '\\valid_index' OptLabel1 '(' . Lexpr ',' Lexpr ')'    (rule 140)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 498
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 437

	Lexpr3 -> '\\valid_range' OptLabel1 '(' . Lexpr ',' Lexpr ',' Lexpr ')'    (rule 141)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 497
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 438

	Lexpr3 -> '\\valid_read' OptLabel1 '(' . Lexpr ')'    (rule 138)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 496
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 439

	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)
	Lexpr3 -> 'sizeof' '(' Lexpr . ')'                  (rule 172)

	')'            shift, and enter state 495
	'?'            shift, and enter state 303


State 440

	LoopVariant -> 'loop' 'variant' Variant . ';'       (rule 302)

	';'            shift, and enter state 494


State 441

	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)
	LoopInvariant -> 'loop' 'invariant' Lexpr . ';'     (rule 296)

	';'            shift, and enter state 493
	'?'            shift, and enter state 303


State 442

	LoopEffects -> 'loop' 'assigns' Assigns . ';'       (rule 303)

	';'            shift, and enter state 492


State 443

	LoopAllocation -> 'loop' Allocation ';' .           (rule 299)

	'admit'        reduce using rule 299
	'check'        reduce using rule 299
	'loop'         reduce using rule 299
	%eof           reduce using rule 299


State 444

	TypeSpecSimple -> 'long' 'long' 'int' .             (rule 282)

	'('            reduce using rule 282
	'*'            reduce using rule 282
	'admit'        reduce using rule 282
	'allocates'    reduce using rule 282
	'assert'       reduce using rule 282
	'assigns'      reduce using rule 282
	'assumes'      reduce using rule 282
	'at'           reduce using rule 282
	'axiom'        reduce using rule 282
	'axiomatic'    reduce using rule 282
	'behavior'     reduce using rule 282
	'behaviors'    reduce using rule 282
	'breaks'       reduce using rule 282
	'check'        reduce using rule 282
	'complete'     reduce using rule 282
	'continues'    reduce using rule 282
	'contract'     reduce using rule 282
	'decreases'    reduce using rule 282
	'disjoint'     reduce using rule 282
	'ensures'      reduce using rule 282
	'exits'        reduce using rule 282
	'frees'        reduce using rule 282
	'function'     reduce using rule 282
	'global'       reduce using rule 282
	'impact'       reduce using rule 282
	'include'      reduce using rule 282
	'inductive'    reduce using rule 282
	'invariant'    reduce using rule 282
	'label'        reduce using rule 282
	'lemma'        reduce using rule 282
	'let'          reduce using rule 282
	'logic'        reduce using rule 282
	'loop'         reduce using rule 282
	'model'        reduce using rule 282
	'module'       reduce using rule 282
	'pragma'       reduce using rule 282
	'predicate'    reduce using rule 282
	'reads'        reduce using rule 282
	'requires'     reduce using rule 282
	'returns'      reduce using rule 282
	'slice'        reduce using rule 282
	'terminates'   reduce using rule 282
	'type'         reduce using rule 282
	'variant'      reduce using rule 282
	'writes'       reduce using rule 282
	L_Ident        reduce using rule 282
	%eof           reduce using rule 282


State 445

	TypeSpecSimple -> 'signed' 'short' 'int' .          (rule 271)

	'('            reduce using rule 271
	'*'            reduce using rule 271
	'admit'        reduce using rule 271
	'allocates'    reduce using rule 271
	'assert'       reduce using rule 271
	'assigns'      reduce using rule 271
	'assumes'      reduce using rule 271
	'at'           reduce using rule 271
	'axiom'        reduce using rule 271
	'axiomatic'    reduce using rule 271
	'behavior'     reduce using rule 271
	'behaviors'    reduce using rule 271
	'breaks'       reduce using rule 271
	'check'        reduce using rule 271
	'complete'     reduce using rule 271
	'continues'    reduce using rule 271
	'contract'     reduce using rule 271
	'decreases'    reduce using rule 271
	'disjoint'     reduce using rule 271
	'ensures'      reduce using rule 271
	'exits'        reduce using rule 271
	'frees'        reduce using rule 271
	'function'     reduce using rule 271
	'global'       reduce using rule 271
	'impact'       reduce using rule 271
	'include'      reduce using rule 271
	'inductive'    reduce using rule 271
	'invariant'    reduce using rule 271
	'label'        reduce using rule 271
	'lemma'        reduce using rule 271
	'let'          reduce using rule 271
	'logic'        reduce using rule 271
	'loop'         reduce using rule 271
	'model'        reduce using rule 271
	'module'       reduce using rule 271
	'pragma'       reduce using rule 271
	'predicate'    reduce using rule 271
	'reads'        reduce using rule 271
	'requires'     reduce using rule 271
	'returns'      reduce using rule 271
	'slice'        reduce using rule 271
	'terminates'   reduce using rule 271
	'type'         reduce using rule 271
	'variant'      reduce using rule 271
	'writes'       reduce using rule 271
	L_Ident        reduce using rule 271
	%eof           reduce using rule 271


State 446

	TypeSpecSimple -> 'signed' 'long' 'int' .           (rule 276)

	'('            reduce using rule 276
	'*'            reduce using rule 276
	'admit'        reduce using rule 276
	'allocates'    reduce using rule 276
	'assert'       reduce using rule 276
	'assigns'      reduce using rule 276
	'assumes'      reduce using rule 276
	'at'           reduce using rule 276
	'axiom'        reduce using rule 276
	'axiomatic'    reduce using rule 276
	'behavior'     reduce using rule 276
	'behaviors'    reduce using rule 276
	'breaks'       reduce using rule 276
	'check'        reduce using rule 276
	'complete'     reduce using rule 276
	'continues'    reduce using rule 276
	'contract'     reduce using rule 276
	'decreases'    reduce using rule 276
	'disjoint'     reduce using rule 276
	'ensures'      reduce using rule 276
	'exits'        reduce using rule 276
	'frees'        reduce using rule 276
	'function'     reduce using rule 276
	'global'       reduce using rule 276
	'impact'       reduce using rule 276
	'include'      reduce using rule 276
	'inductive'    reduce using rule 276
	'invariant'    reduce using rule 276
	'label'        reduce using rule 276
	'lemma'        reduce using rule 276
	'let'          reduce using rule 276
	'logic'        reduce using rule 276
	'loop'         reduce using rule 276
	'model'        reduce using rule 276
	'module'       reduce using rule 276
	'pragma'       reduce using rule 276
	'predicate'    reduce using rule 276
	'reads'        reduce using rule 276
	'requires'     reduce using rule 276
	'returns'      reduce using rule 276
	'slice'        reduce using rule 276
	'terminates'   reduce using rule 276
	'type'         reduce using rule 276
	'variant'      reduce using rule 276
	'writes'       reduce using rule 276
	L_Ident        reduce using rule 276
	%eof           reduce using rule 276


State 447

	TypeSpecSimple -> 'signed' 'long' 'long' .          (rule 280)
	TypeSpecSimple -> 'signed' 'long' 'long' . 'int'    (rule 283)

	'('            reduce using rule 280
	'*'            reduce using rule 280
	'admit'        reduce using rule 280
	'allocates'    reduce using rule 280
	'assert'       reduce using rule 280
	'assigns'      reduce using rule 280
	'assumes'      reduce using rule 280
	'at'           reduce using rule 280
	'axiom'        reduce using rule 280
	'axiomatic'    reduce using rule 280
	'behavior'     reduce using rule 280
	'behaviors'    reduce using rule 280
	'breaks'       reduce using rule 280
	'check'        reduce using rule 280
	'complete'     reduce using rule 280
	'continues'    reduce using rule 280
	'contract'     reduce using rule 280
	'decreases'    reduce using rule 280
	'disjoint'     reduce using rule 280
	'ensures'      reduce using rule 280
	'exits'        reduce using rule 280
	'frees'        reduce using rule 280
	'function'     reduce using rule 280
	'global'       reduce using rule 280
	'impact'       reduce using rule 280
	'include'      reduce using rule 280
	'inductive'    reduce using rule 280
	'int'          shift, and enter state 491
	'invariant'    reduce using rule 280
	'label'        reduce using rule 280
	'lemma'        reduce using rule 280
	'let'          reduce using rule 280
	'logic'        reduce using rule 280
	'loop'         reduce using rule 280
	'model'        reduce using rule 280
	'module'       reduce using rule 280
	'pragma'       reduce using rule 280
	'predicate'    reduce using rule 280
	'reads'        reduce using rule 280
	'requires'     reduce using rule 280
	'returns'      reduce using rule 280
	'slice'        reduce using rule 280
	'terminates'   reduce using rule 280
	'type'         reduce using rule 280
	'variant'      reduce using rule 280
	'writes'       reduce using rule 280
	L_Ident        reduce using rule 280
	%eof           reduce using rule 280


State 448

	TypeSpecSimple -> 'unsigned' 'short' 'int' .        (rule 272)

	'('            reduce using rule 272
	'*'            reduce using rule 272
	'admit'        reduce using rule 272
	'allocates'    reduce using rule 272
	'assert'       reduce using rule 272
	'assigns'      reduce using rule 272
	'assumes'      reduce using rule 272
	'at'           reduce using rule 272
	'axiom'        reduce using rule 272
	'axiomatic'    reduce using rule 272
	'behavior'     reduce using rule 272
	'behaviors'    reduce using rule 272
	'breaks'       reduce using rule 272
	'check'        reduce using rule 272
	'complete'     reduce using rule 272
	'continues'    reduce using rule 272
	'contract'     reduce using rule 272
	'decreases'    reduce using rule 272
	'disjoint'     reduce using rule 272
	'ensures'      reduce using rule 272
	'exits'        reduce using rule 272
	'frees'        reduce using rule 272
	'function'     reduce using rule 272
	'global'       reduce using rule 272
	'impact'       reduce using rule 272
	'include'      reduce using rule 272
	'inductive'    reduce using rule 272
	'invariant'    reduce using rule 272
	'label'        reduce using rule 272
	'lemma'        reduce using rule 272
	'let'          reduce using rule 272
	'logic'        reduce using rule 272
	'loop'         reduce using rule 272
	'model'        reduce using rule 272
	'module'       reduce using rule 272
	'pragma'       reduce using rule 272
	'predicate'    reduce using rule 272
	'reads'        reduce using rule 272
	'requires'     reduce using rule 272
	'returns'      reduce using rule 272
	'slice'        reduce using rule 272
	'terminates'   reduce using rule 272
	'type'         reduce using rule 272
	'variant'      reduce using rule 272
	'writes'       reduce using rule 272
	L_Ident        reduce using rule 272
	%eof           reduce using rule 272


State 449

	TypeSpecSimple -> 'unsigned' 'long' 'int' .         (rule 278)

	'('            reduce using rule 278
	'*'            reduce using rule 278
	'admit'        reduce using rule 278
	'allocates'    reduce using rule 278
	'assert'       reduce using rule 278
	'assigns'      reduce using rule 278
	'assumes'      reduce using rule 278
	'at'           reduce using rule 278
	'axiom'        reduce using rule 278
	'axiomatic'    reduce using rule 278
	'behavior'     reduce using rule 278
	'behaviors'    reduce using rule 278
	'breaks'       reduce using rule 278
	'check'        reduce using rule 278
	'complete'     reduce using rule 278
	'continues'    reduce using rule 278
	'contract'     reduce using rule 278
	'decreases'    reduce using rule 278
	'disjoint'     reduce using rule 278
	'ensures'      reduce using rule 278
	'exits'        reduce using rule 278
	'frees'        reduce using rule 278
	'function'     reduce using rule 278
	'global'       reduce using rule 278
	'impact'       reduce using rule 278
	'include'      reduce using rule 278
	'inductive'    reduce using rule 278
	'invariant'    reduce using rule 278
	'label'        reduce using rule 278
	'lemma'        reduce using rule 278
	'let'          reduce using rule 278
	'logic'        reduce using rule 278
	'loop'         reduce using rule 278
	'model'        reduce using rule 278
	'module'       reduce using rule 278
	'pragma'       reduce using rule 278
	'predicate'    reduce using rule 278
	'reads'        reduce using rule 278
	'requires'     reduce using rule 278
	'returns'      reduce using rule 278
	'slice'        reduce using rule 278
	'terminates'   reduce using rule 278
	'type'         reduce using rule 278
	'variant'      reduce using rule 278
	'writes'       reduce using rule 278
	L_Ident        reduce using rule 278
	%eof           reduce using rule 278


State 450

	TypeSpecSimple -> 'unsigned' 'long' 'long' .        (rule 281)
	TypeSpecSimple -> 'unsigned' 'long' 'long' . 'int'    (rule 284)

	'('            reduce using rule 281
	'*'            reduce using rule 281
	'admit'        reduce using rule 281
	'allocates'    reduce using rule 281
	'assert'       reduce using rule 281
	'assigns'      reduce using rule 281
	'assumes'      reduce using rule 281
	'at'           reduce using rule 281
	'axiom'        reduce using rule 281
	'axiomatic'    reduce using rule 281
	'behavior'     reduce using rule 281
	'behaviors'    reduce using rule 281
	'breaks'       reduce using rule 281
	'check'        reduce using rule 281
	'complete'     reduce using rule 281
	'continues'    reduce using rule 281
	'contract'     reduce using rule 281
	'decreases'    reduce using rule 281
	'disjoint'     reduce using rule 281
	'ensures'      reduce using rule 281
	'exits'        reduce using rule 281
	'frees'        reduce using rule 281
	'function'     reduce using rule 281
	'global'       reduce using rule 281
	'impact'       reduce using rule 281
	'include'      reduce using rule 281
	'inductive'    reduce using rule 281
	'int'          shift, and enter state 490
	'invariant'    reduce using rule 281
	'label'        reduce using rule 281
	'lemma'        reduce using rule 281
	'let'          reduce using rule 281
	'logic'        reduce using rule 281
	'loop'         reduce using rule 281
	'model'        reduce using rule 281
	'module'       reduce using rule 281
	'pragma'       reduce using rule 281
	'predicate'    reduce using rule 281
	'reads'        reduce using rule 281
	'requires'     reduce using rule 281
	'returns'      reduce using rule 281
	'slice'        reduce using rule 281
	'terminates'   reduce using rule 281
	'type'         reduce using rule 281
	'variant'      reduce using rule 281
	'writes'       reduce using rule 281
	L_Ident        reduce using rule 281
	%eof           reduce using rule 281


State 451

	ListFullIdentifier -> FullIdentifier ',' ListFullIdentifier .    (rule 249)

	%eof           reduce using rule 249


State 452

	Range -> LexprOption '..' LexprOption .             (rule 189)

	')'            reduce using rule 189
	']'            reduce using rule 189
	%eof           reduce using rule 189


State 453

	ListLabelName -> LabelName ',' ListLabelName .      (rule 188)

	'}'            reduce using rule 188
	%eof           reduce using rule 188


State 454

	OptLabelList -> '{' ListLabelName '}' .             (rule 185)

	'('            reduce using rule 185
	%eof           reduce using rule 185


State 455

	VarSpec1 -> '(' VarSpec ')' .                       (rule 130)

	')'            reduce using rule 130
	','            reduce using rule 130
	';'            reduce using rule 130
	'['            reduce using rule 130
	%eof           reduce using rule 130


State 456

	VarSpec1 -> VarSpec1 '[' ArraySize . ']'            (rule 129)

	']'            shift, and enter state 489


State 457

	BindersReentrance -> ',' TypeSpecOFTYPENAME VarSpec .    (rule 119)

	','            reduce using rule 119
	';'            reduce using rule 119
	%eof           reduce using rule 119


State 458

	Binders -> TypeSpecOFTYPENAME VarSpec ListBindersReentrance .    (rule 116)

	';'            reduce using rule 116
	%eof           reduce using rule 116


State 459

	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)
	Lexpr3 -> Lexpr3 '[' Lexpr . ']'                    (rule 166)
	LexprOption -> Lexpr .                              (rule 191)

	'..'           reduce using rule 191
	'?'            shift, and enter state 303
	']'            shift, and enter state 488


State 460

	Lexpr3 -> Lexpr3 '[' Range . ']'                    (rule 165)

	']'            shift, and enter state 487


State 461

	Lexpr3 -> Lexpr3 . '+' Lexpr3                       (rule 160)
	Lexpr3 -> Lexpr3 . '-' Lexpr3                       (rule 161)
	Lexpr3 -> Lexpr3 . '*' Lexpr3                       (rule 162)
	Lexpr3 -> Lexpr3 . '/' Lexpr3                       (rule 163)
	Lexpr3 -> Lexpr3 '/' Lexpr3 .                       (rule 163)
	Lexpr3 -> Lexpr3 . '%' Lexpr3                       (rule 164)
	Lexpr3 -> Lexpr3 . '[' Range ']'                    (rule 165)
	Lexpr3 -> Lexpr3 . '[' Lexpr ']'                    (rule 166)

	'!='           reduce using rule 163
	'%'            shift, and enter state 307
			(reduce using rule 163)

	'&'            reduce using rule 163
	'&&'           reduce using rule 163
	')'            reduce using rule 163
	'*'            shift, and enter state 308
			(reduce using rule 163)

	'+'            shift, and enter state 309
			(reduce using rule 163)

	','            reduce using rule 163
	'-'            shift, and enter state 310
			(reduce using rule 163)

	'-->'          reduce using rule 163
	'..'           reduce using rule 163
	'/'            shift, and enter state 311
			(reduce using rule 163)

	':'            reduce using rule 163
	';'            reduce using rule 163
	'<'            reduce using rule 163
	'<-->'         reduce using rule 163
	'<='           reduce using rule 163
	'<==>'         reduce using rule 163
	'=='           reduce using rule 163
	'==>'          reduce using rule 163
	'>'            reduce using rule 163
	'>='           reduce using rule 163
	'?'            reduce using rule 163
	'['            shift, and enter state 312
			(reduce using rule 163)

	'\\from'       reduce using rule 163
	'\\in'         reduce using rule 163
	']'            reduce using rule 163
	'^'            reduce using rule 163
	'^^'           reduce using rule 163
	'for'          reduce using rule 163
	'|'            reduce using rule 163
	'||'           reduce using rule 163
	%eof           reduce using rule 163


State 462

	Lexpr3 -> Lexpr3 . '+' Lexpr3                       (rule 160)
	Lexpr3 -> Lexpr3 . '-' Lexpr3                       (rule 161)
	Lexpr3 -> Lexpr3 '-' Lexpr3 .                       (rule 161)
	Lexpr3 -> Lexpr3 . '*' Lexpr3                       (rule 162)
	Lexpr3 -> Lexpr3 . '/' Lexpr3                       (rule 163)
	Lexpr3 -> Lexpr3 . '%' Lexpr3                       (rule 164)
	Lexpr3 -> Lexpr3 . '[' Range ']'                    (rule 165)
	Lexpr3 -> Lexpr3 . '[' Lexpr ']'                    (rule 166)

	'!='           reduce using rule 161
	'%'            shift, and enter state 307
			(reduce using rule 161)

	'&'            reduce using rule 161
	'&&'           reduce using rule 161
	')'            reduce using rule 161
	'*'            shift, and enter state 308
			(reduce using rule 161)

	'+'            shift, and enter state 309
			(reduce using rule 161)

	','            reduce using rule 161
	'-'            shift, and enter state 310
			(reduce using rule 161)

	'-->'          reduce using rule 161
	'..'           reduce using rule 161
	'/'            shift, and enter state 311
			(reduce using rule 161)

	':'            reduce using rule 161
	';'            reduce using rule 161
	'<'            reduce using rule 161
	'<-->'         reduce using rule 161
	'<='           reduce using rule 161
	'<==>'         reduce using rule 161
	'=='           reduce using rule 161
	'==>'          reduce using rule 161
	'>'            reduce using rule 161
	'>='           reduce using rule 161
	'?'            reduce using rule 161
	'['            shift, and enter state 312
			(reduce using rule 161)

	'\\from'       reduce using rule 161
	'\\in'         reduce using rule 161
	']'            reduce using rule 161
	'^'            reduce using rule 161
	'^^'           reduce using rule 161
	'for'          reduce using rule 161
	'|'            reduce using rule 161
	'||'           reduce using rule 161
	%eof           reduce using rule 161


State 463

	Lexpr3 -> Lexpr3 . '+' Lexpr3                       (rule 160)
	Lexpr3 -> Lexpr3 '+' Lexpr3 .                       (rule 160)
	Lexpr3 -> Lexpr3 . '-' Lexpr3                       (rule 161)
	Lexpr3 -> Lexpr3 . '*' Lexpr3                       (rule 162)
	Lexpr3 -> Lexpr3 . '/' Lexpr3                       (rule 163)
	Lexpr3 -> Lexpr3 . '%' Lexpr3                       (rule 164)
	Lexpr3 -> Lexpr3 . '[' Range ']'                    (rule 165)
	Lexpr3 -> Lexpr3 . '[' Lexpr ']'                    (rule 166)

	'!='           reduce using rule 160
	'%'            shift, and enter state 307
			(reduce using rule 160)

	'&'            reduce using rule 160
	'&&'           reduce using rule 160
	')'            reduce using rule 160
	'*'            shift, and enter state 308
			(reduce using rule 160)

	'+'            shift, and enter state 309
			(reduce using rule 160)

	','            reduce using rule 160
	'-'            shift, and enter state 310
			(reduce using rule 160)

	'-->'          reduce using rule 160
	'..'           reduce using rule 160
	'/'            shift, and enter state 311
			(reduce using rule 160)

	':'            reduce using rule 160
	';'            reduce using rule 160
	'<'            reduce using rule 160
	'<-->'         reduce using rule 160
	'<='           reduce using rule 160
	'<==>'         reduce using rule 160
	'=='           reduce using rule 160
	'==>'          reduce using rule 160
	'>'            reduce using rule 160
	'>='           reduce using rule 160
	'?'            reduce using rule 160
	'['            shift, and enter state 312
			(reduce using rule 160)

	'\\from'       reduce using rule 160
	'\\in'         reduce using rule 160
	']'            reduce using rule 160
	'^'            reduce using rule 160
	'^^'           reduce using rule 160
	'for'          reduce using rule 160
	'|'            reduce using rule 160
	'||'           reduce using rule 160
	%eof           reduce using rule 160


State 464

	Lexpr3 -> Lexpr3 . '+' Lexpr3                       (rule 160)
	Lexpr3 -> Lexpr3 . '-' Lexpr3                       (rule 161)
	Lexpr3 -> Lexpr3 . '*' Lexpr3                       (rule 162)
	Lexpr3 -> Lexpr3 '*' Lexpr3 .                       (rule 162)
	Lexpr3 -> Lexpr3 . '/' Lexpr3                       (rule 163)
	Lexpr3 -> Lexpr3 . '%' Lexpr3                       (rule 164)
	Lexpr3 -> Lexpr3 . '[' Range ']'                    (rule 165)
	Lexpr3 -> Lexpr3 . '[' Lexpr ']'                    (rule 166)

	'!='           reduce using rule 162
	'%'            shift, and enter state 307
			(reduce using rule 162)

	'&'            reduce using rule 162
	'&&'           reduce using rule 162
	')'            reduce using rule 162
	'*'            shift, and enter state 308
			(reduce using rule 162)

	'+'            shift, and enter state 309
			(reduce using rule 162)

	','            reduce using rule 162
	'-'            shift, and enter state 310
			(reduce using rule 162)

	'-->'          reduce using rule 162
	'..'           reduce using rule 162
	'/'            shift, and enter state 311
			(reduce using rule 162)

	':'            reduce using rule 162
	';'            reduce using rule 162
	'<'            reduce using rule 162
	'<-->'         reduce using rule 162
	'<='           reduce using rule 162
	'<==>'         reduce using rule 162
	'=='           reduce using rule 162
	'==>'          reduce using rule 162
	'>'            reduce using rule 162
	'>='           reduce using rule 162
	'?'            reduce using rule 162
	'['            shift, and enter state 312
			(reduce using rule 162)

	'\\from'       reduce using rule 162
	'\\in'         reduce using rule 162
	']'            reduce using rule 162
	'^'            reduce using rule 162
	'^^'           reduce using rule 162
	'for'          reduce using rule 162
	'|'            reduce using rule 162
	'||'           reduce using rule 162
	%eof           reduce using rule 162


State 465

	Lexpr3 -> Lexpr3 . '+' Lexpr3                       (rule 160)
	Lexpr3 -> Lexpr3 . '-' Lexpr3                       (rule 161)
	Lexpr3 -> Lexpr3 . '*' Lexpr3                       (rule 162)
	Lexpr3 -> Lexpr3 . '/' Lexpr3                       (rule 163)
	Lexpr3 -> Lexpr3 . '%' Lexpr3                       (rule 164)
	Lexpr3 -> Lexpr3 '%' Lexpr3 .                       (rule 164)
	Lexpr3 -> Lexpr3 . '[' Range ']'                    (rule 165)
	Lexpr3 -> Lexpr3 . '[' Lexpr ']'                    (rule 166)

	'!='           reduce using rule 164
	'%'            shift, and enter state 307
			(reduce using rule 164)

	'&'            reduce using rule 164
	'&&'           reduce using rule 164
	')'            reduce using rule 164
	'*'            shift, and enter state 308
			(reduce using rule 164)

	'+'            shift, and enter state 309
			(reduce using rule 164)

	','            reduce using rule 164
	'-'            shift, and enter state 310
			(reduce using rule 164)

	'-->'          reduce using rule 164
	'..'           reduce using rule 164
	'/'            shift, and enter state 311
			(reduce using rule 164)

	':'            reduce using rule 164
	';'            reduce using rule 164
	'<'            reduce using rule 164
	'<-->'         reduce using rule 164
	'<='           reduce using rule 164
	'<==>'         reduce using rule 164
	'=='           reduce using rule 164
	'==>'          reduce using rule 164
	'>'            reduce using rule 164
	'>='           reduce using rule 164
	'?'            reduce using rule 164
	'['            shift, and enter state 312
			(reduce using rule 164)

	'\\from'       reduce using rule 164
	'\\in'         reduce using rule 164
	']'            reduce using rule 164
	'^'            reduce using rule 164
	'^^'           reduce using rule 164
	'for'          reduce using rule 164
	'|'            reduce using rule 164
	'||'           reduce using rule 164
	%eof           reduce using rule 164


State 466

	ListLexpr -> Lexpr ',' ListLexpr .                  (rule 98)

	')'            reduce using rule 98
	';'            reduce using rule 98
	'\\from'       reduce using rule 98
	%eof           reduce using rule 98


State 467

	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)
	Lexpr -> Lexpr '?' Lexpr . ':' Lexpr                (rule 95)

	':'            shift, and enter state 486
	'?'            shift, and enter state 303


State 468

	Assigns -> ListLexpr '\\from' Zones .               (rule 79)

	';'            reduce using rule 79
	%eof           reduce using rule 79


State 469

	NESimpleClauses -> PostCond Lexpr ';' . SimpleClauses    (rule 76)

	'admit'        shift, and enter state 198
	'assigns'      shift, and enter state 272
	'breaks'       shift, and enter state 199
	'check'        shift, and enter state 200
	'continues'    shift, and enter state 201
	'decreases'    reduce using rule 74
	'ensures'      shift, and enter state 202
	'exits'        shift, and enter state 203
	'requires'     reduce using rule 74
	'returns'      shift, and enter state 204
	'terminates'   reduce using rule 74
	%eof           reduce using rule 74

	SimpleClauses  goto state 485
	NESimpleClausesgoto state 274
	PostCond       goto state 271

State 470

	NESimpleClauses -> 'assigns' Assigns ';' . SimpleClauses    (rule 77)

	'admit'        shift, and enter state 198
	'assigns'      shift, and enter state 272
	'breaks'       shift, and enter state 199
	'check'        shift, and enter state 200
	'continues'    shift, and enter state 201
	'decreases'    reduce using rule 74
	'ensures'      shift, and enter state 202
	'exits'        shift, and enter state 203
	'requires'     reduce using rule 74
	'returns'      shift, and enter state 204
	'terminates'   reduce using rule 74
	%eof           reduce using rule 74

	SimpleClauses  goto state 484
	NESimpleClausesgoto state 274
	PostCond       goto state 271

State 471

	NERequires -> 'requires' Lexpr ';' . Requires       (rule 69)

	'admit'        shift, and enter state 278
			(reduce using rule 67)

	'assigns'      reduce using rule 67
	'breaks'       reduce using rule 67
	'check'        shift, and enter state 279
			(reduce using rule 67)

	'continues'    reduce using rule 67
	'ensures'      reduce using rule 67
	'exits'        reduce using rule 67
	'requires'     shift, and enter state 280
	'returns'      reduce using rule 67
	%eof           reduce using rule 67

	Requires       goto state 483
	NERequires     goto state 282

State 472

	Contract -> Requires Terminates Decreases . SimpleClauses Behaviors CompleteOrDisjoint    (rule 63)
	Contract -> Requires Terminates Decreases . NESimpleClauses 'requires'    (rule 64)
	Contract -> Requires Terminates Decreases . NESimpleClauses 'terminates'    (rule 65)
	Contract -> Requires Terminates Decreases . NESimpleClauses 'decreases'    (rule 66)

	'admit'        shift, and enter state 198
	'assigns'      shift, and enter state 272
	'breaks'       shift, and enter state 199
	'check'        shift, and enter state 200
	'continues'    shift, and enter state 201
	'ensures'      shift, and enter state 202
	'exits'        shift, and enter state 203
	'returns'      shift, and enter state 204
	%eof           reduce using rule 74

	SimpleClauses  goto state 481
	NESimpleClausesgoto state 482
	PostCond       goto state 271

State 473

	NERequires -> 'admit' 'requires' Lexpr . ';' Requires    (rule 71)
	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)

	';'            shift, and enter state 480
	'?'            shift, and enter state 303


State 474

	LoopInvariant -> 'admit' 'loop' 'invariant' . Lexpr ';'    (rule 298)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 479
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 475

	NERequires -> 'check' 'requires' Lexpr . ';' Requires    (rule 70)
	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)

	';'            shift, and enter state 478
	'?'            shift, and enter state 303


State 476

	LoopInvariant -> 'check' 'loop' 'invariant' . Lexpr ';'    (rule 297)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 477
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 477

	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)
	LoopInvariant -> 'check' 'loop' 'invariant' Lexpr . ';'    (rule 297)

	';'            shift, and enter state 542
	'?'            shift, and enter state 303


State 478

	NERequires -> 'check' 'requires' Lexpr ';' . Requires    (rule 70)

	'admit'        shift, and enter state 278
			(reduce using rule 67)

	'assigns'      reduce using rule 67
	'breaks'       reduce using rule 67
	'check'        shift, and enter state 279
			(reduce using rule 67)

	'continues'    reduce using rule 67
	'ensures'      reduce using rule 67
	'exits'        reduce using rule 67
	'requires'     shift, and enter state 280
	'returns'      reduce using rule 67
	%eof           reduce using rule 67

	Requires       goto state 541
	NERequires     goto state 282

State 479

	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)
	LoopInvariant -> 'admit' 'loop' 'invariant' Lexpr . ';'    (rule 298)

	';'            shift, and enter state 540
	'?'            shift, and enter state 303


State 480

	NERequires -> 'admit' 'requires' Lexpr ';' . Requires    (rule 71)

	'admit'        shift, and enter state 278
			(reduce using rule 67)

	'assigns'      reduce using rule 67
	'breaks'       reduce using rule 67
	'check'        shift, and enter state 279
			(reduce using rule 67)

	'continues'    reduce using rule 67
	'ensures'      reduce using rule 67
	'exits'        reduce using rule 67
	'requires'     shift, and enter state 280
	'returns'      reduce using rule 67
	%eof           reduce using rule 67

	Requires       goto state 539
	NERequires     goto state 282

State 481

	Contract -> Requires Terminates Decreases SimpleClauses . Behaviors CompleteOrDisjoint    (rule 63)

	%eof           reduce using rule 82

	Behaviors      goto state 538

State 482

	Contract -> Requires Terminates Decreases NESimpleClauses . 'requires'    (rule 64)
	Contract -> Requires Terminates Decreases NESimpleClauses . 'terminates'    (rule 65)
	Contract -> Requires Terminates Decreases NESimpleClauses . 'decreases'    (rule 66)
	SimpleClauses -> NESimpleClauses .                  (rule 75)

	'decreases'    shift, and enter state 535
	'requires'     shift, and enter state 536
	'terminates'   shift, and enter state 537
	%eof           reduce using rule 75


State 483

	NERequires -> 'requires' Lexpr ';' Requires .       (rule 69)

	'admit'        reduce using rule 69
	'assigns'      reduce using rule 69
	'breaks'       reduce using rule 69
	'check'        reduce using rule 69
	'continues'    reduce using rule 69
	'ensures'      reduce using rule 69
	'exits'        reduce using rule 69
	'returns'      reduce using rule 69
	%eof           reduce using rule 69


State 484

	NESimpleClauses -> 'assigns' Assigns ';' SimpleClauses .    (rule 77)

	'decreases'    reduce using rule 77
	'requires'     reduce using rule 77
	'terminates'   reduce using rule 77
	%eof           reduce using rule 77


State 485

	NESimpleClauses -> PostCond Lexpr ';' SimpleClauses .    (rule 76)

	'decreases'    reduce using rule 76
	'requires'     reduce using rule 76
	'terminates'   reduce using rule 76
	%eof           reduce using rule 76


State 486

	Lexpr -> Lexpr '?' Lexpr ':' . Lexpr                (rule 95)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 534
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 487

	Lexpr3 -> Lexpr3 '[' Range ']' .                    (rule 165)

	'!='           reduce using rule 165
	'%'            reduce using rule 165
	'&'            reduce using rule 165
	'&&'           reduce using rule 165
	')'            reduce using rule 165
	'*'            reduce using rule 165
	'+'            reduce using rule 165
	','            reduce using rule 165
	'-'            reduce using rule 165
	'-->'          reduce using rule 165
	'..'           reduce using rule 165
	'/'            reduce using rule 165
	':'            reduce using rule 165
	';'            reduce using rule 165
	'<'            reduce using rule 165
	'<-->'         reduce using rule 165
	'<='           reduce using rule 165
	'<==>'         reduce using rule 165
	'=='           reduce using rule 165
	'==>'          reduce using rule 165
	'>'            reduce using rule 165
	'>='           reduce using rule 165
	'?'            reduce using rule 165
	'['            reduce using rule 165
	'\\from'       reduce using rule 165
	'\\in'         reduce using rule 165
	']'            reduce using rule 165
	'^'            reduce using rule 165
	'^^'           reduce using rule 165
	'for'          reduce using rule 165
	'|'            reduce using rule 165
	'||'           reduce using rule 165
	%eof           reduce using rule 165


State 488

	Lexpr3 -> Lexpr3 '[' Lexpr ']' .                    (rule 166)

	'!='           reduce using rule 166
	'%'            reduce using rule 166
	'&'            reduce using rule 166
	'&&'           reduce using rule 166
	')'            reduce using rule 166
	'*'            reduce using rule 166
	'+'            reduce using rule 166
	','            reduce using rule 166
	'-'            reduce using rule 166
	'-->'          reduce using rule 166
	'..'           reduce using rule 166
	'/'            reduce using rule 166
	':'            reduce using rule 166
	';'            reduce using rule 166
	'<'            reduce using rule 166
	'<-->'         reduce using rule 166
	'<='           reduce using rule 166
	'<==>'         reduce using rule 166
	'=='           reduce using rule 166
	'==>'          reduce using rule 166
	'>'            reduce using rule 166
	'>='           reduce using rule 166
	'?'            reduce using rule 166
	'['            reduce using rule 166
	'\\from'       reduce using rule 166
	'\\in'         reduce using rule 166
	']'            reduce using rule 166
	'^'            reduce using rule 166
	'^^'           reduce using rule 166
	'for'          reduce using rule 166
	'|'            reduce using rule 166
	'||'           reduce using rule 166
	%eof           reduce using rule 166


State 489

	VarSpec1 -> VarSpec1 '[' ArraySize ']' .            (rule 129)

	')'            reduce using rule 129
	','            reduce using rule 129
	';'            reduce using rule 129
	'['            reduce using rule 129
	%eof           reduce using rule 129


State 490

	TypeSpecSimple -> 'unsigned' 'long' 'long' 'int' .    (rule 284)

	'('            reduce using rule 284
	'*'            reduce using rule 284
	'admit'        reduce using rule 284
	'allocates'    reduce using rule 284
	'assert'       reduce using rule 284
	'assigns'      reduce using rule 284
	'assumes'      reduce using rule 284
	'at'           reduce using rule 284
	'axiom'        reduce using rule 284
	'axiomatic'    reduce using rule 284
	'behavior'     reduce using rule 284
	'behaviors'    reduce using rule 284
	'breaks'       reduce using rule 284
	'check'        reduce using rule 284
	'complete'     reduce using rule 284
	'continues'    reduce using rule 284
	'contract'     reduce using rule 284
	'decreases'    reduce using rule 284
	'disjoint'     reduce using rule 284
	'ensures'      reduce using rule 284
	'exits'        reduce using rule 284
	'frees'        reduce using rule 284
	'function'     reduce using rule 284
	'global'       reduce using rule 284
	'impact'       reduce using rule 284
	'include'      reduce using rule 284
	'inductive'    reduce using rule 284
	'invariant'    reduce using rule 284
	'label'        reduce using rule 284
	'lemma'        reduce using rule 284
	'let'          reduce using rule 284
	'logic'        reduce using rule 284
	'loop'         reduce using rule 284
	'model'        reduce using rule 284
	'module'       reduce using rule 284
	'pragma'       reduce using rule 284
	'predicate'    reduce using rule 284
	'reads'        reduce using rule 284
	'requires'     reduce using rule 284
	'returns'      reduce using rule 284
	'slice'        reduce using rule 284
	'terminates'   reduce using rule 284
	'type'         reduce using rule 284
	'variant'      reduce using rule 284
	'writes'       reduce using rule 284
	L_Ident        reduce using rule 284
	%eof           reduce using rule 284


State 491

	TypeSpecSimple -> 'signed' 'long' 'long' 'int' .    (rule 283)

	'('            reduce using rule 283
	'*'            reduce using rule 283
	'admit'        reduce using rule 283
	'allocates'    reduce using rule 283
	'assert'       reduce using rule 283
	'assigns'      reduce using rule 283
	'assumes'      reduce using rule 283
	'at'           reduce using rule 283
	'axiom'        reduce using rule 283
	'axiomatic'    reduce using rule 283
	'behavior'     reduce using rule 283
	'behaviors'    reduce using rule 283
	'breaks'       reduce using rule 283
	'check'        reduce using rule 283
	'complete'     reduce using rule 283
	'continues'    reduce using rule 283
	'contract'     reduce using rule 283
	'decreases'    reduce using rule 283
	'disjoint'     reduce using rule 283
	'ensures'      reduce using rule 283
	'exits'        reduce using rule 283
	'frees'        reduce using rule 283
	'function'     reduce using rule 283
	'global'       reduce using rule 283
	'impact'       reduce using rule 283
	'include'      reduce using rule 283
	'inductive'    reduce using rule 283
	'invariant'    reduce using rule 283
	'label'        reduce using rule 283
	'lemma'        reduce using rule 283
	'let'          reduce using rule 283
	'logic'        reduce using rule 283
	'loop'         reduce using rule 283
	'model'        reduce using rule 283
	'module'       reduce using rule 283
	'pragma'       reduce using rule 283
	'predicate'    reduce using rule 283
	'reads'        reduce using rule 283
	'requires'     reduce using rule 283
	'returns'      reduce using rule 283
	'slice'        reduce using rule 283
	'terminates'   reduce using rule 283
	'type'         reduce using rule 283
	'variant'      reduce using rule 283
	'writes'       reduce using rule 283
	L_Ident        reduce using rule 283
	%eof           reduce using rule 283


State 492

	LoopEffects -> 'loop' 'assigns' Assigns ';' .       (rule 303)

	'admit'        reduce using rule 303
	'check'        reduce using rule 303
	'loop'         reduce using rule 303
	%eof           reduce using rule 303


State 493

	LoopInvariant -> 'loop' 'invariant' Lexpr ';' .     (rule 296)

	'admit'        reduce using rule 296
	'check'        reduce using rule 296
	'loop'         reduce using rule 296
	%eof           reduce using rule 296


State 494

	LoopVariant -> 'loop' 'variant' Variant ';' .       (rule 302)

	'admit'        reduce using rule 302
	'check'        reduce using rule 302
	'loop'         reduce using rule 302
	%eof           reduce using rule 302


State 495

	Lexpr3 -> 'sizeof' '(' Lexpr ')' .                  (rule 172)

	'!='           reduce using rule 172
	'%'            reduce using rule 172
	'&'            reduce using rule 172
	'&&'           reduce using rule 172
	')'            reduce using rule 172
	'*'            reduce using rule 172
	'+'            reduce using rule 172
	','            reduce using rule 172
	'-'            reduce using rule 172
	'-->'          reduce using rule 172
	'..'           reduce using rule 172
	'/'            reduce using rule 172
	':'            reduce using rule 172
	';'            reduce using rule 172
	'<'            reduce using rule 172
	'<-->'         reduce using rule 172
	'<='           reduce using rule 172
	'<==>'         reduce using rule 172
	'=='           reduce using rule 172
	'==>'          reduce using rule 172
	'>'            reduce using rule 172
	'>='           reduce using rule 172
	'?'            reduce using rule 172
	'['            reduce using rule 172
	'\\from'       reduce using rule 172
	'\\in'         reduce using rule 172
	']'            reduce using rule 172
	'^'            reduce using rule 172
	'^^'           reduce using rule 172
	'for'          reduce using rule 172
	'|'            reduce using rule 172
	'||'           reduce using rule 172
	%eof           reduce using rule 172


State 496

	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)
	Lexpr3 -> '\\valid_read' OptLabel1 '(' Lexpr . ')'    (rule 138)

	')'            shift, and enter state 533
	'?'            shift, and enter state 303


State 497

	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)
	Lexpr3 -> '\\valid_range' OptLabel1 '(' Lexpr . ',' Lexpr ',' Lexpr ')'    (rule 141)

	','            shift, and enter state 532
	'?'            shift, and enter state 303


State 498

	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)
	Lexpr3 -> '\\valid_index' OptLabel1 '(' Lexpr . ',' Lexpr ')'    (rule 140)

	','            shift, and enter state 531
	'?'            shift, and enter state 303


State 499

	Lexpr3 -> '\\valid_function' '(' Lexpr ')' .        (rule 139)

	'!='           reduce using rule 139
	'%'            reduce using rule 139
	'&'            reduce using rule 139
	'&&'           reduce using rule 139
	')'            reduce using rule 139
	'*'            reduce using rule 139
	'+'            reduce using rule 139
	','            reduce using rule 139
	'-'            reduce using rule 139
	'-->'          reduce using rule 139
	'..'           reduce using rule 139
	'/'            reduce using rule 139
	':'            reduce using rule 139
	';'            reduce using rule 139
	'<'            reduce using rule 139
	'<-->'         reduce using rule 139
	'<='           reduce using rule 139
	'<==>'         reduce using rule 139
	'=='           reduce using rule 139
	'==>'          reduce using rule 139
	'>'            reduce using rule 139
	'>='           reduce using rule 139
	'?'            reduce using rule 139
	'['            reduce using rule 139
	'\\from'       reduce using rule 139
	'\\in'         reduce using rule 139
	']'            reduce using rule 139
	'^'            reduce using rule 139
	'^^'           reduce using rule 139
	'for'          reduce using rule 139
	'|'            reduce using rule 139
	'||'           reduce using rule 139
	%eof           reduce using rule 139


State 500

	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)
	Lexpr3 -> '\\valid' OptLabel1 '(' Lexpr . ')'       (rule 137)

	')'            shift, and enter state 530
	'?'            shift, and enter state 303


State 501

	Lexpr3 -> '\\separated' '(' ListLexpr ')' .         (rule 176)

	'!='           reduce using rule 176
	'%'            reduce using rule 176
	'&'            reduce using rule 176
	'&&'           reduce using rule 176
	')'            reduce using rule 176
	'*'            reduce using rule 176
	'+'            reduce using rule 176
	','            reduce using rule 176
	'-'            reduce using rule 176
	'-->'          reduce using rule 176
	'..'           reduce using rule 176
	'/'            reduce using rule 176
	':'            reduce using rule 176
	';'            reduce using rule 176
	'<'            reduce using rule 176
	'<-->'         reduce using rule 176
	'<='           reduce using rule 176
	'<==>'         reduce using rule 176
	'=='           reduce using rule 176
	'==>'          reduce using rule 176
	'>'            reduce using rule 176
	'>='           reduce using rule 176
	'?'            reduce using rule 176
	'['            reduce using rule 176
	'\\from'       reduce using rule 176
	'\\in'         reduce using rule 176
	']'            reduce using rule 176
	'^'            reduce using rule 176
	'^^'           reduce using rule 176
	'for'          reduce using rule 176
	'|'            reduce using rule 176
	'||'           reduce using rule 176
	%eof           reduce using rule 176


State 502

	Lexpr3 -> '\\old' '(' Lexpr ')' .                   (rule 173)

	'!='           reduce using rule 173
	'%'            reduce using rule 173
	'&'            reduce using rule 173
	'&&'           reduce using rule 173
	')'            reduce using rule 173
	'*'            reduce using rule 173
	'+'            reduce using rule 173
	','            reduce using rule 173
	'-'            reduce using rule 173
	'-->'          reduce using rule 173
	'..'           reduce using rule 173
	'/'            reduce using rule 173
	':'            reduce using rule 173
	';'            reduce using rule 173
	'<'            reduce using rule 173
	'<-->'         reduce using rule 173
	'<='           reduce using rule 173
	'<==>'         reduce using rule 173
	'=='           reduce using rule 173
	'==>'          reduce using rule 173
	'>'            reduce using rule 173
	'>='           reduce using rule 173
	'?'            reduce using rule 173
	'['            reduce using rule 173
	'\\from'       reduce using rule 173
	'\\in'         reduce using rule 173
	']'            reduce using rule 173
	'^'            reduce using rule 173
	'^^'           reduce using rule 173
	'for'          reduce using rule 173
	'|'            reduce using rule 173
	'||'           reduce using rule 173
	%eof           reduce using rule 173


State 503

	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)
	Lexpr3 -> '\\offset' OptLabel1 '(' Lexpr . ')'      (rule 147)

	')'            shift, and enter state 529
	'?'            shift, and enter state 303


State 504

	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)
	Lexpr3 -> '\\object_pointer' OptLabel1 '(' Lexpr . ')'    (rule 136)

	')'            shift, and enter state 528
	'?'            shift, and enter state 303


State 505

	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)
	LexprBinder -> '\\lambda' Binders ';' Lexpr .       (rule 115)

	'&'            reduce using rule 115
	'&&'           reduce using rule 115
	')'            reduce using rule 115
	','            reduce using rule 115
	'-->'          reduce using rule 115
	'..'           reduce using rule 115
	':'            reduce using rule 115
	';'            reduce using rule 115
	'<-->'         reduce using rule 115
	'<==>'         reduce using rule 115
	'==>'          reduce using rule 115
	'?'            shift, and enter state 303
			(reduce using rule 115)

	'\\from'       reduce using rule 115
	'\\in'         reduce using rule 115
	']'            reduce using rule 115
	'^'            reduce using rule 115
	'^^'           reduce using rule 115
	'for'          reduce using rule 115
	'|'            reduce using rule 115
	'||'           reduce using rule 115
	%eof           reduce using rule 115


State 506

	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)
	Lexpr3 -> '\\initialized' OptLabel1 '(' Lexpr . ')'    (rule 142)

	')'            shift, and enter state 527
	'?'            shift, and enter state 303


State 507

	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)
	Lexpr3 -> '\\fresh' OptLabel2 '(' Lexpr . ',' Lexpr ')'    (rule 144)

	','            shift, and enter state 526
	'?'            shift, and enter state 303


State 508

	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)
	Lexpr3 -> '\\freeable' OptLabel1 '(' Lexpr . ')'    (rule 149)

	')'            shift, and enter state 525
	'?'            shift, and enter state 303


State 509

	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)
	LexprBinder -> '\\forall' Binders ';' Lexpr .       (rule 113)

	'&'            reduce using rule 113
	'&&'           reduce using rule 113
	')'            reduce using rule 113
	','            reduce using rule 113
	'-->'          reduce using rule 113
	'..'           reduce using rule 113
	':'            reduce using rule 113
	';'            reduce using rule 113
	'<-->'         reduce using rule 113
	'<==>'         reduce using rule 113
	'==>'          reduce using rule 113
	'?'            shift, and enter state 303
			(reduce using rule 113)

	'\\from'       reduce using rule 113
	'\\in'         reduce using rule 113
	']'            reduce using rule 113
	'^'            reduce using rule 113
	'^^'           reduce using rule 113
	'for'          reduce using rule 113
	'|'            reduce using rule 113
	'||'           reduce using rule 113
	%eof           reduce using rule 113


State 510

	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)
	LexprBinder -> '\\exists' Binders ';' Lexpr .       (rule 114)

	'&'            reduce using rule 114
	'&&'           reduce using rule 114
	')'            reduce using rule 114
	','            reduce using rule 114
	'-->'          reduce using rule 114
	'..'           reduce using rule 114
	':'            reduce using rule 114
	';'            reduce using rule 114
	'<-->'         reduce using rule 114
	'<==>'         reduce using rule 114
	'==>'          reduce using rule 114
	'?'            shift, and enter state 303
			(reduce using rule 114)

	'\\from'       reduce using rule 114
	'\\in'         reduce using rule 114
	']'            reduce using rule 114
	'^'            reduce using rule 114
	'^^'           reduce using rule 114
	'for'          reduce using rule 114
	'|'            reduce using rule 114
	'||'           reduce using rule 114
	%eof           reduce using rule 114


State 511

	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)
	Lexpr3 -> '\\dangling' OptLabel1 '(' Lexpr . ')'    (rule 143)

	')'            shift, and enter state 524
	'?'            shift, and enter state 303


State 512

	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)
	Lexpr3 -> '\\block_length' OptLabel1 '(' Lexpr . ')'    (rule 146)

	')'            shift, and enter state 523
	'?'            shift, and enter state 303


State 513

	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)
	Lexpr3 -> '\\base_addr' OptLabel1 '(' Lexpr . ')'    (rule 145)

	')'            shift, and enter state 522
	'?'            shift, and enter state 303


State 514

	Lexpr3 -> '\\at' '(' Lexpr ',' . LabelName ')'      (rule 174)

	'behaviors'    shift, and enter state 115
	'label'        shift, and enter state 132
	'reads'        shift, and enter state 141
	'writes'       shift, and enter state 149
	L_Ident        shift, and enter state 56

	Ident          goto state 57
	LabelName      goto state 521
	AnyIdentifier  goto state 213
	Identifier     goto state 206

State 515

	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)
	Lexpr3 -> '\\allocation' OptLabel1 '(' Lexpr . ')'    (rule 150)

	')'            shift, and enter state 520
	'?'            shift, and enter state 303


State 516

	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)
	Lexpr3 -> '\\allocable' OptLabel1 '(' Lexpr . ')'    (rule 148)

	')'            shift, and enter state 519
	'?'            shift, and enter state 303


State 517

	Lexpr3 -> FullIdentifier '(' ListLexpr ')' .        (rule 177)

	'!='           reduce using rule 177
	'%'            reduce using rule 177
	'&'            reduce using rule 177
	'&&'           reduce using rule 177
	')'            reduce using rule 177
	'*'            reduce using rule 177
	'+'            reduce using rule 177
	','            reduce using rule 177
	'-'            reduce using rule 177
	'-->'          reduce using rule 177
	'..'           reduce using rule 177
	'/'            reduce using rule 177
	':'            reduce using rule 177
	';'            reduce using rule 177
	'<'            reduce using rule 177
	'<-->'         reduce using rule 177
	'<='           reduce using rule 177
	'<==>'         reduce using rule 177
	'=='           reduce using rule 177
	'==>'          reduce using rule 177
	'>'            reduce using rule 177
	'>='           reduce using rule 177
	'?'            reduce using rule 177
	'['            reduce using rule 177
	'\\from'       reduce using rule 177
	'\\in'         reduce using rule 177
	']'            reduce using rule 177
	'^'            reduce using rule 177
	'^^'           reduce using rule 177
	'for'          reduce using rule 177
	'|'            reduce using rule 177
	'||'           reduce using rule 177
	%eof           reduce using rule 177


State 518

	Lexpr1 -> Lexpr3 ListLexprRelInner Relation Lexpr2 .    (rule 100)

	'&'            reduce using rule 100
	'&&'           reduce using rule 100
	')'            reduce using rule 100
	','            reduce using rule 100
	'-->'          reduce using rule 100
	'..'           reduce using rule 100
	':'            reduce using rule 100
	';'            reduce using rule 100
	'<-->'         reduce using rule 100
	'<==>'         reduce using rule 100
	'==>'          reduce using rule 100
	'?'            reduce using rule 100
	'\\from'       reduce using rule 100
	'\\in'         reduce using rule 100
	']'            reduce using rule 100
	'^'            reduce using rule 100
	'^^'           reduce using rule 100
	'for'          reduce using rule 100
	'|'            reduce using rule 100
	'||'           reduce using rule 100
	%eof           reduce using rule 100


State 519

	Lexpr3 -> '\\allocable' OptLabel1 '(' Lexpr ')' .    (rule 148)

	'!='           reduce using rule 148
	'%'            reduce using rule 148
	'&'            reduce using rule 148
	'&&'           reduce using rule 148
	')'            reduce using rule 148
	'*'            reduce using rule 148
	'+'            reduce using rule 148
	','            reduce using rule 148
	'-'            reduce using rule 148
	'-->'          reduce using rule 148
	'..'           reduce using rule 148
	'/'            reduce using rule 148
	':'            reduce using rule 148
	';'            reduce using rule 148
	'<'            reduce using rule 148
	'<-->'         reduce using rule 148
	'<='           reduce using rule 148
	'<==>'         reduce using rule 148
	'=='           reduce using rule 148
	'==>'          reduce using rule 148
	'>'            reduce using rule 148
	'>='           reduce using rule 148
	'?'            reduce using rule 148
	'['            reduce using rule 148
	'\\from'       reduce using rule 148
	'\\in'         reduce using rule 148
	']'            reduce using rule 148
	'^'            reduce using rule 148
	'^^'           reduce using rule 148
	'for'          reduce using rule 148
	'|'            reduce using rule 148
	'||'           reduce using rule 148
	%eof           reduce using rule 148


State 520

	Lexpr3 -> '\\allocation' OptLabel1 '(' Lexpr ')' .    (rule 150)

	'!='           reduce using rule 150
	'%'            reduce using rule 150
	'&'            reduce using rule 150
	'&&'           reduce using rule 150
	')'            reduce using rule 150
	'*'            reduce using rule 150
	'+'            reduce using rule 150
	','            reduce using rule 150
	'-'            reduce using rule 150
	'-->'          reduce using rule 150
	'..'           reduce using rule 150
	'/'            reduce using rule 150
	':'            reduce using rule 150
	';'            reduce using rule 150
	'<'            reduce using rule 150
	'<-->'         reduce using rule 150
	'<='           reduce using rule 150
	'<==>'         reduce using rule 150
	'=='           reduce using rule 150
	'==>'          reduce using rule 150
	'>'            reduce using rule 150
	'>='           reduce using rule 150
	'?'            reduce using rule 150
	'['            reduce using rule 150
	'\\from'       reduce using rule 150
	'\\in'         reduce using rule 150
	']'            reduce using rule 150
	'^'            reduce using rule 150
	'^^'           reduce using rule 150
	'for'          reduce using rule 150
	'|'            reduce using rule 150
	'||'           reduce using rule 150
	%eof           reduce using rule 150


State 521

	Lexpr3 -> '\\at' '(' Lexpr ',' LabelName . ')'      (rule 174)

	')'            shift, and enter state 547


State 522

	Lexpr3 -> '\\base_addr' OptLabel1 '(' Lexpr ')' .    (rule 145)

	'!='           reduce using rule 145
	'%'            reduce using rule 145
	'&'            reduce using rule 145
	'&&'           reduce using rule 145
	')'            reduce using rule 145
	'*'            reduce using rule 145
	'+'            reduce using rule 145
	','            reduce using rule 145
	'-'            reduce using rule 145
	'-->'          reduce using rule 145
	'..'           reduce using rule 145
	'/'            reduce using rule 145
	':'            reduce using rule 145
	';'            reduce using rule 145
	'<'            reduce using rule 145
	'<-->'         reduce using rule 145
	'<='           reduce using rule 145
	'<==>'         reduce using rule 145
	'=='           reduce using rule 145
	'==>'          reduce using rule 145
	'>'            reduce using rule 145
	'>='           reduce using rule 145
	'?'            reduce using rule 145
	'['            reduce using rule 145
	'\\from'       reduce using rule 145
	'\\in'         reduce using rule 145
	']'            reduce using rule 145
	'^'            reduce using rule 145
	'^^'           reduce using rule 145
	'for'          reduce using rule 145
	'|'            reduce using rule 145
	'||'           reduce using rule 145
	%eof           reduce using rule 145


State 523

	Lexpr3 -> '\\block_length' OptLabel1 '(' Lexpr ')' .    (rule 146)

	'!='           reduce using rule 146
	'%'            reduce using rule 146
	'&'            reduce using rule 146
	'&&'           reduce using rule 146
	')'            reduce using rule 146
	'*'            reduce using rule 146
	'+'            reduce using rule 146
	','            reduce using rule 146
	'-'            reduce using rule 146
	'-->'          reduce using rule 146
	'..'           reduce using rule 146
	'/'            reduce using rule 146
	':'            reduce using rule 146
	';'            reduce using rule 146
	'<'            reduce using rule 146
	'<-->'         reduce using rule 146
	'<='           reduce using rule 146
	'<==>'         reduce using rule 146
	'=='           reduce using rule 146
	'==>'          reduce using rule 146
	'>'            reduce using rule 146
	'>='           reduce using rule 146
	'?'            reduce using rule 146
	'['            reduce using rule 146
	'\\from'       reduce using rule 146
	'\\in'         reduce using rule 146
	']'            reduce using rule 146
	'^'            reduce using rule 146
	'^^'           reduce using rule 146
	'for'          reduce using rule 146
	'|'            reduce using rule 146
	'||'           reduce using rule 146
	%eof           reduce using rule 146


State 524

	Lexpr3 -> '\\dangling' OptLabel1 '(' Lexpr ')' .    (rule 143)

	'!='           reduce using rule 143
	'%'            reduce using rule 143
	'&'            reduce using rule 143
	'&&'           reduce using rule 143
	')'            reduce using rule 143
	'*'            reduce using rule 143
	'+'            reduce using rule 143
	','            reduce using rule 143
	'-'            reduce using rule 143
	'-->'          reduce using rule 143
	'..'           reduce using rule 143
	'/'            reduce using rule 143
	':'            reduce using rule 143
	';'            reduce using rule 143
	'<'            reduce using rule 143
	'<-->'         reduce using rule 143
	'<='           reduce using rule 143
	'<==>'         reduce using rule 143
	'=='           reduce using rule 143
	'==>'          reduce using rule 143
	'>'            reduce using rule 143
	'>='           reduce using rule 143
	'?'            reduce using rule 143
	'['            reduce using rule 143
	'\\from'       reduce using rule 143
	'\\in'         reduce using rule 143
	']'            reduce using rule 143
	'^'            reduce using rule 143
	'^^'           reduce using rule 143
	'for'          reduce using rule 143
	'|'            reduce using rule 143
	'||'           reduce using rule 143
	%eof           reduce using rule 143


State 525

	Lexpr3 -> '\\freeable' OptLabel1 '(' Lexpr ')' .    (rule 149)

	'!='           reduce using rule 149
	'%'            reduce using rule 149
	'&'            reduce using rule 149
	'&&'           reduce using rule 149
	')'            reduce using rule 149
	'*'            reduce using rule 149
	'+'            reduce using rule 149
	','            reduce using rule 149
	'-'            reduce using rule 149
	'-->'          reduce using rule 149
	'..'           reduce using rule 149
	'/'            reduce using rule 149
	':'            reduce using rule 149
	';'            reduce using rule 149
	'<'            reduce using rule 149
	'<-->'         reduce using rule 149
	'<='           reduce using rule 149
	'<==>'         reduce using rule 149
	'=='           reduce using rule 149
	'==>'          reduce using rule 149
	'>'            reduce using rule 149
	'>='           reduce using rule 149
	'?'            reduce using rule 149
	'['            reduce using rule 149
	'\\from'       reduce using rule 149
	'\\in'         reduce using rule 149
	']'            reduce using rule 149
	'^'            reduce using rule 149
	'^^'           reduce using rule 149
	'for'          reduce using rule 149
	'|'            reduce using rule 149
	'||'           reduce using rule 149
	%eof           reduce using rule 149


State 526

	Lexpr3 -> '\\fresh' OptLabel2 '(' Lexpr ',' . Lexpr ')'    (rule 144)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 546
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 527

	Lexpr3 -> '\\initialized' OptLabel1 '(' Lexpr ')' .    (rule 142)

	'!='           reduce using rule 142
	'%'            reduce using rule 142
	'&'            reduce using rule 142
	'&&'           reduce using rule 142
	')'            reduce using rule 142
	'*'            reduce using rule 142
	'+'            reduce using rule 142
	','            reduce using rule 142
	'-'            reduce using rule 142
	'-->'          reduce using rule 142
	'..'           reduce using rule 142
	'/'            reduce using rule 142
	':'            reduce using rule 142
	';'            reduce using rule 142
	'<'            reduce using rule 142
	'<-->'         reduce using rule 142
	'<='           reduce using rule 142
	'<==>'         reduce using rule 142
	'=='           reduce using rule 142
	'==>'          reduce using rule 142
	'>'            reduce using rule 142
	'>='           reduce using rule 142
	'?'            reduce using rule 142
	'['            reduce using rule 142
	'\\from'       reduce using rule 142
	'\\in'         reduce using rule 142
	']'            reduce using rule 142
	'^'            reduce using rule 142
	'^^'           reduce using rule 142
	'for'          reduce using rule 142
	'|'            reduce using rule 142
	'||'           reduce using rule 142
	%eof           reduce using rule 142


State 528

	Lexpr3 -> '\\object_pointer' OptLabel1 '(' Lexpr ')' .    (rule 136)

	'!='           reduce using rule 136
	'%'            reduce using rule 136
	'&'            reduce using rule 136
	'&&'           reduce using rule 136
	')'            reduce using rule 136
	'*'            reduce using rule 136
	'+'            reduce using rule 136
	','            reduce using rule 136
	'-'            reduce using rule 136
	'-->'          reduce using rule 136
	'..'           reduce using rule 136
	'/'            reduce using rule 136
	':'            reduce using rule 136
	';'            reduce using rule 136
	'<'            reduce using rule 136
	'<-->'         reduce using rule 136
	'<='           reduce using rule 136
	'<==>'         reduce using rule 136
	'=='           reduce using rule 136
	'==>'          reduce using rule 136
	'>'            reduce using rule 136
	'>='           reduce using rule 136
	'?'            reduce using rule 136
	'['            reduce using rule 136
	'\\from'       reduce using rule 136
	'\\in'         reduce using rule 136
	']'            reduce using rule 136
	'^'            reduce using rule 136
	'^^'           reduce using rule 136
	'for'          reduce using rule 136
	'|'            reduce using rule 136
	'||'           reduce using rule 136
	%eof           reduce using rule 136


State 529

	Lexpr3 -> '\\offset' OptLabel1 '(' Lexpr ')' .      (rule 147)

	'!='           reduce using rule 147
	'%'            reduce using rule 147
	'&'            reduce using rule 147
	'&&'           reduce using rule 147
	')'            reduce using rule 147
	'*'            reduce using rule 147
	'+'            reduce using rule 147
	','            reduce using rule 147
	'-'            reduce using rule 147
	'-->'          reduce using rule 147
	'..'           reduce using rule 147
	'/'            reduce using rule 147
	':'            reduce using rule 147
	';'            reduce using rule 147
	'<'            reduce using rule 147
	'<-->'         reduce using rule 147
	'<='           reduce using rule 147
	'<==>'         reduce using rule 147
	'=='           reduce using rule 147
	'==>'          reduce using rule 147
	'>'            reduce using rule 147
	'>='           reduce using rule 147
	'?'            reduce using rule 147
	'['            reduce using rule 147
	'\\from'       reduce using rule 147
	'\\in'         reduce using rule 147
	']'            reduce using rule 147
	'^'            reduce using rule 147
	'^^'           reduce using rule 147
	'for'          reduce using rule 147
	'|'            reduce using rule 147
	'||'           reduce using rule 147
	%eof           reduce using rule 147


State 530

	Lexpr3 -> '\\valid' OptLabel1 '(' Lexpr ')' .       (rule 137)

	'!='           reduce using rule 137
	'%'            reduce using rule 137
	'&'            reduce using rule 137
	'&&'           reduce using rule 137
	')'            reduce using rule 137
	'*'            reduce using rule 137
	'+'            reduce using rule 137
	','            reduce using rule 137
	'-'            reduce using rule 137
	'-->'          reduce using rule 137
	'..'           reduce using rule 137
	'/'            reduce using rule 137
	':'            reduce using rule 137
	';'            reduce using rule 137
	'<'            reduce using rule 137
	'<-->'         reduce using rule 137
	'<='           reduce using rule 137
	'<==>'         reduce using rule 137
	'=='           reduce using rule 137
	'==>'          reduce using rule 137
	'>'            reduce using rule 137
	'>='           reduce using rule 137
	'?'            reduce using rule 137
	'['            reduce using rule 137
	'\\from'       reduce using rule 137
	'\\in'         reduce using rule 137
	']'            reduce using rule 137
	'^'            reduce using rule 137
	'^^'           reduce using rule 137
	'for'          reduce using rule 137
	'|'            reduce using rule 137
	'||'           reduce using rule 137
	%eof           reduce using rule 137


State 531

	Lexpr3 -> '\\valid_index' OptLabel1 '(' Lexpr ',' . Lexpr ')'    (rule 140)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 545
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 532

	Lexpr3 -> '\\valid_range' OptLabel1 '(' Lexpr ',' . Lexpr ',' Lexpr ')'    (rule 141)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 544
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 533

	Lexpr3 -> '\\valid_read' OptLabel1 '(' Lexpr ')' .    (rule 138)

	'!='           reduce using rule 138
	'%'            reduce using rule 138
	'&'            reduce using rule 138
	'&&'           reduce using rule 138
	')'            reduce using rule 138
	'*'            reduce using rule 138
	'+'            reduce using rule 138
	','            reduce using rule 138
	'-'            reduce using rule 138
	'-->'          reduce using rule 138
	'..'           reduce using rule 138
	'/'            reduce using rule 138
	':'            reduce using rule 138
	';'            reduce using rule 138
	'<'            reduce using rule 138
	'<-->'         reduce using rule 138
	'<='           reduce using rule 138
	'<==>'         reduce using rule 138
	'=='           reduce using rule 138
	'==>'          reduce using rule 138
	'>'            reduce using rule 138
	'>='           reduce using rule 138
	'?'            reduce using rule 138
	'['            reduce using rule 138
	'\\from'       reduce using rule 138
	'\\in'         reduce using rule 138
	']'            reduce using rule 138
	'^'            reduce using rule 138
	'^^'           reduce using rule 138
	'for'          reduce using rule 138
	'|'            reduce using rule 138
	'||'           reduce using rule 138
	%eof           reduce using rule 138


State 534

	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)
	Lexpr -> Lexpr '?' Lexpr ':' Lexpr .                (rule 95)

	'&'            reduce using rule 95
	'&&'           reduce using rule 95
	')'            reduce using rule 95
	','            reduce using rule 95
	'-->'          reduce using rule 95
	'..'           reduce using rule 95
	':'            reduce using rule 95
	';'            reduce using rule 95
	'<-->'         reduce using rule 95
	'<==>'         reduce using rule 95
	'==>'          reduce using rule 95
	'?'            shift, and enter state 303
			(reduce using rule 95)

	'\\from'       reduce using rule 95
	'\\in'         reduce using rule 95
	']'            reduce using rule 95
	'^'            reduce using rule 95
	'^^'           reduce using rule 95
	'for'          reduce using rule 95
	'|'            reduce using rule 95
	'||'           reduce using rule 95
	%eof           reduce using rule 95


State 535

	Contract -> Requires Terminates Decreases NESimpleClauses 'decreases' .    (rule 66)

	%eof           reduce using rule 66


State 536

	Contract -> Requires Terminates Decreases NESimpleClauses 'requires' .    (rule 64)

	%eof           reduce using rule 64


State 537

	Contract -> Requires Terminates Decreases NESimpleClauses 'terminates' .    (rule 65)

	%eof           reduce using rule 65


State 538

	Contract -> Requires Terminates Decreases SimpleClauses Behaviors . CompleteOrDisjoint    (rule 63)

	%eof           reduce using rule 83

	CompleteOrDisjointgoto state 543

State 539

	NERequires -> 'admit' 'requires' Lexpr ';' Requires .    (rule 71)

	'admit'        reduce using rule 71
	'assigns'      reduce using rule 71
	'breaks'       reduce using rule 71
	'check'        reduce using rule 71
	'continues'    reduce using rule 71
	'ensures'      reduce using rule 71
	'exits'        reduce using rule 71
	'returns'      reduce using rule 71
	%eof           reduce using rule 71


State 540

	LoopInvariant -> 'admit' 'loop' 'invariant' Lexpr ';' .    (rule 298)

	'admit'        reduce using rule 298
	'check'        reduce using rule 298
	'loop'         reduce using rule 298
	%eof           reduce using rule 298


State 541

	NERequires -> 'check' 'requires' Lexpr ';' Requires .    (rule 70)

	'admit'        reduce using rule 70
	'assigns'      reduce using rule 70
	'breaks'       reduce using rule 70
	'check'        reduce using rule 70
	'continues'    reduce using rule 70
	'ensures'      reduce using rule 70
	'exits'        reduce using rule 70
	'returns'      reduce using rule 70
	%eof           reduce using rule 70


State 542

	LoopInvariant -> 'check' 'loop' 'invariant' Lexpr ';' .    (rule 297)

	'admit'        reduce using rule 297
	'check'        reduce using rule 297
	'loop'         reduce using rule 297
	%eof           reduce using rule 297


State 543

	Contract -> Requires Terminates Decreases SimpleClauses Behaviors CompleteOrDisjoint .    (rule 63)

	%eof           reduce using rule 63


State 544

	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)
	Lexpr3 -> '\\valid_range' OptLabel1 '(' Lexpr ',' Lexpr . ',' Lexpr ')'    (rule 141)

	','            shift, and enter state 550
	'?'            shift, and enter state 303


State 545

	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)
	Lexpr3 -> '\\valid_index' OptLabel1 '(' Lexpr ',' Lexpr . ')'    (rule 140)

	')'            shift, and enter state 549
	'?'            shift, and enter state 303


State 546

	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)
	Lexpr3 -> '\\fresh' OptLabel2 '(' Lexpr ',' Lexpr . ')'    (rule 144)

	')'            shift, and enter state 548
	'?'            shift, and enter state 303


State 547

	Lexpr3 -> '\\at' '(' Lexpr ',' LabelName ')' .      (rule 174)

	'!='           reduce using rule 174
	'%'            reduce using rule 174
	'&'            reduce using rule 174
	'&&'           reduce using rule 174
	')'            reduce using rule 174
	'*'            reduce using rule 174
	'+'            reduce using rule 174
	','            reduce using rule 174
	'-'            reduce using rule 174
	'-->'          reduce using rule 174
	'..'           reduce using rule 174
	'/'            reduce using rule 174
	':'            reduce using rule 174
	';'            reduce using rule 174
	'<'            reduce using rule 174
	'<-->'         reduce using rule 174
	'<='           reduce using rule 174
	'<==>'         reduce using rule 174
	'=='           reduce using rule 174
	'==>'          reduce using rule 174
	'>'            reduce using rule 174
	'>='           reduce using rule 174
	'?'            reduce using rule 174
	'['            reduce using rule 174
	'\\from'       reduce using rule 174
	'\\in'         reduce using rule 174
	']'            reduce using rule 174
	'^'            reduce using rule 174
	'^^'           reduce using rule 174
	'for'          reduce using rule 174
	'|'            reduce using rule 174
	'||'           reduce using rule 174
	%eof           reduce using rule 174


State 548

	Lexpr3 -> '\\fresh' OptLabel2 '(' Lexpr ',' Lexpr ')' .    (rule 144)

	'!='           reduce using rule 144
	'%'            reduce using rule 144
	'&'            reduce using rule 144
	'&&'           reduce using rule 144
	')'            reduce using rule 144
	'*'            reduce using rule 144
	'+'            reduce using rule 144
	','            reduce using rule 144
	'-'            reduce using rule 144
	'-->'          reduce using rule 144
	'..'           reduce using rule 144
	'/'            reduce using rule 144
	':'            reduce using rule 144
	';'            reduce using rule 144
	'<'            reduce using rule 144
	'<-->'         reduce using rule 144
	'<='           reduce using rule 144
	'<==>'         reduce using rule 144
	'=='           reduce using rule 144
	'==>'          reduce using rule 144
	'>'            reduce using rule 144
	'>='           reduce using rule 144
	'?'            reduce using rule 144
	'['            reduce using rule 144
	'\\from'       reduce using rule 144
	'\\in'         reduce using rule 144
	']'            reduce using rule 144
	'^'            reduce using rule 144
	'^^'           reduce using rule 144
	'for'          reduce using rule 144
	'|'            reduce using rule 144
	'||'           reduce using rule 144
	%eof           reduce using rule 144


State 549

	Lexpr3 -> '\\valid_index' OptLabel1 '(' Lexpr ',' Lexpr ')' .    (rule 140)

	'!='           reduce using rule 140
	'%'            reduce using rule 140
	'&'            reduce using rule 140
	'&&'           reduce using rule 140
	')'            reduce using rule 140
	'*'            reduce using rule 140
	'+'            reduce using rule 140
	','            reduce using rule 140
	'-'            reduce using rule 140
	'-->'          reduce using rule 140
	'..'           reduce using rule 140
	'/'            reduce using rule 140
	':'            reduce using rule 140
	';'            reduce using rule 140
	'<'            reduce using rule 140
	'<-->'         reduce using rule 140
	'<='           reduce using rule 140
	'<==>'         reduce using rule 140
	'=='           reduce using rule 140
	'==>'          reduce using rule 140
	'>'            reduce using rule 140
	'>='           reduce using rule 140
	'?'            reduce using rule 140
	'['            reduce using rule 140
	'\\from'       reduce using rule 140
	'\\in'         reduce using rule 140
	']'            reduce using rule 140
	'^'            reduce using rule 140
	'^^'           reduce using rule 140
	'for'          reduce using rule 140
	'|'            reduce using rule 140
	'||'           reduce using rule 140
	%eof           reduce using rule 140


State 550

	Lexpr3 -> '\\valid_range' OptLabel1 '(' Lexpr ',' Lexpr ',' . Lexpr ')'    (rule 141)

	'!'            shift, and enter state 69
	'&'            shift, and enter state 70
	'('            shift, and enter state 71
	'*'            shift, and enter state 72
	'+'            shift, and enter state 73
	'-'            shift, and enter state 74
	'\\allocable'  shift, and enter state 75
	'\\allocation' shift, and enter state 76
	'\\at'         shift, and enter state 77
	'\\automatic'  shift, and enter state 78
	'\\base_addr'  shift, and enter state 79
	'\\block_length'shift, and enter state 80
	'\\dangling'   shift, and enter state 81
	'\\dynamic'    shift, and enter state 82
	'\\exists'     shift, and enter state 83
	'\\false'      shift, and enter state 84
	'\\forall'     shift, and enter state 85
	'\\freeable'   shift, and enter state 86
	'\\fresh'      shift, and enter state 87
	'\\initialized'shift, and enter state 88
	'\\lambda'     shift, and enter state 89
	'\\null'       shift, and enter state 90
	'\\object_pointer'shift, and enter state 91
	'\\offset'     shift, and enter state 92
	'\\old'        shift, and enter state 93
	'\\pi'         shift, and enter state 94
	'\\register'   shift, and enter state 95
	'\\result'     shift, and enter state 96
	'\\separated'  shift, and enter state 97
	'\\static'     shift, and enter state 98
	'\\true'       shift, and enter state 99
	'\\unallocated'shift, and enter state 100
	'\\valid'      shift, and enter state 101
	'\\valid_function'shift, and enter state 102
	'\\valid_index'shift, and enter state 103
	'\\valid_range'shift, and enter state 104
	'\\valid_read' shift, and enter state 105
	'admit'        shift, and enter state 106
	'allocates'    shift, and enter state 107
	'assert'       shift, and enter state 108
	'assigns'      shift, and enter state 109
	'assumes'      shift, and enter state 110
	'at'           shift, and enter state 111
	'axiom'        shift, and enter state 112
	'axiomatic'    shift, and enter state 113
	'behavior'     shift, and enter state 114
	'behaviors'    shift, and enter state 115
	'breaks'       shift, and enter state 116
	'check'        shift, and enter state 117
	'complete'     shift, and enter state 118
	'continues'    shift, and enter state 119
	'contract'     shift, and enter state 120
	'decreases'    shift, and enter state 121
	'disjoint'     shift, and enter state 122
	'ensures'      shift, and enter state 123
	'exits'        shift, and enter state 124
	'frees'        shift, and enter state 125
	'function'     shift, and enter state 126
	'global'       shift, and enter state 127
	'impact'       shift, and enter state 128
	'include'      shift, and enter state 129
	'inductive'    shift, and enter state 130
	'invariant'    shift, and enter state 131
	'label'        shift, and enter state 132
	'lemma'        shift, and enter state 133
	'let'          shift, and enter state 134
	'logic'        shift, and enter state 135
	'loop'         shift, and enter state 136
	'model'        shift, and enter state 137
	'module'       shift, and enter state 138
	'pragma'       shift, and enter state 139
	'predicate'    shift, and enter state 140
	'reads'        shift, and enter state 141
	'requires'     shift, and enter state 142
	'returns'      shift, and enter state 143
	'sizeof'       shift, and enter state 144
	'slice'        shift, and enter state 145
	'terminates'   shift, and enter state 146
	'type'         shift, and enter state 147
	'variant'      shift, and enter state 148
	'writes'       shift, and enter state 149
	'~'            shift, and enter state 150
	L_Ident        shift, and enter state 56
	L_doubl        shift, and enter state 151
	L_integ        shift, and enter state 152
	L_quoted       shift, and enter state 153

	Ident          goto state 57
	Double         goto state 58
	Integer        goto state 59
	String         goto state 60
	Lexpr          goto state 551
	Lexpr1         goto state 62
	Lexpr2         goto state 63
	LexprBinder    goto state 64
	Lexpr3         goto state 65
	FullIdentifier goto state 66
	Identifier     goto state 67

State 551

	Lexpr -> Lexpr . '?' Lexpr ':' Lexpr                (rule 95)
	Lexpr3 -> '\\valid_range' OptLabel1 '(' Lexpr ',' Lexpr ',' Lexpr . ')'    (rule 141)

	')'            shift, and enter state 552
	'?'            shift, and enter state 303


State 552

	Lexpr3 -> '\\valid_range' OptLabel1 '(' Lexpr ',' Lexpr ',' Lexpr ')' .    (rule 141)

	'!='           reduce using rule 141
	'%'            reduce using rule 141
	'&'            reduce using rule 141
	'&&'           reduce using rule 141
	')'            reduce using rule 141
	'*'            reduce using rule 141
	'+'            reduce using rule 141
	','            reduce using rule 141
	'-'            reduce using rule 141
	'-->'          reduce using rule 141
	'..'           reduce using rule 141
	'/'            reduce using rule 141
	':'            reduce using rule 141
	';'            reduce using rule 141
	'<'            reduce using rule 141
	'<-->'         reduce using rule 141
	'<='           reduce using rule 141
	'<==>'         reduce using rule 141
	'=='           reduce using rule 141
	'==>'          reduce using rule 141
	'>'            reduce using rule 141
	'>='           reduce using rule 141
	'?'            reduce using rule 141
	'['            reduce using rule 141
	'\\from'       reduce using rule 141
	'\\in'         reduce using rule 141
	']'            reduce using rule 141
	'^'            reduce using rule 141
	'^^'           reduce using rule 141
	'for'          reduce using rule 141
	'|'            reduce using rule 141
	'||'           reduce using rule 141
	%eof           reduce using rule 141


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 306
Number of terminals: 130
Number of non-terminals: 114
Number of states: 553
