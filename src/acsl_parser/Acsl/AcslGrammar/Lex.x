-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Lexer definition for use with Alex 3
{
{-# OPTIONS -fno-warn-incomplete-patterns #-}
{-# OPTIONS_GHC -w #-}

{-# LANGUAGE PatternSynonyms #-}

module Acsl.AcslGrammar.Lex where

import Prelude

import qualified Data.Bits
import Data.Char     (ord)
import Data.Function (on)
import Data.Word     (Word8)
}

-- Predefined character classes

$c = [A-Z\192-\221] # [\215]  -- capital isolatin1 letter (215 = \times) FIXME
$s = [a-z\222-\255] # [\247]  -- small   isolatin1 letter (247 = \div  ) FIXME
$l = [$c $s]         -- letter
$d = [0-9]           -- digit
$i = [$l $d _ ']     -- identifier character
$u = [. \n]          -- universal: any character

-- Symbols and non-identifier-like reserved words

@rsyms = \; | \\ "from" | \\ "nothing" | \= \= \> | \< \= \= \> | \| \| | \& \& | \^ \^ | \& | \| | \^ | \- \- \> | \< \- \- \> | \\ "in" | \? | \: | \, | \< | \> | \< \= | \> \= | \= \= | \! \= | \! | \\ "forall" | \\ "exists" | \\ "lambda" | \* | \[ | \] | \( | \) | \\ "true" | \\ "false" | \\ "object" \_ "pointer" | \\ "valid" | \\ "valid" \_ "read" | \\ "valid" \_ "function" | \\ "valid" \_ "index" | \\ "valid" \_ "range" | \\ "initialized" | \\ "dangling" | \\ "fresh" | \\ "base" \_ "addr" | \\ "block" \_ "length" | \\ "offset" | \\ "allocable" | \\ "freeable" | \\ "allocation" | \\ "automatic" | \\ "dynamic" | \\ "register" | \\ "static" | \\ "unallocated" | \\ "null" | \+ | \- | \/ | \% | \~ | \\ "old" | \\ "at" | \\ "result" | \\ "separated" | \\ "pi" | \{ | \} | \. \. | \_ "Bool"

:-

-- Whitespace (skipped)
$white+ ;

-- Symbols
@rsyms
    { tok (eitherResIdent TV) }

-- Keywords and Ident
$l $i*
    { tok (eitherResIdent TV) }

-- String
\" ([$u # [\" \\ \n]] | (\\ (\" | \\ | \' | n | t | r | f)))* \"
    { tok (TL . unescapeInitTail) }

-- Integer
$d+
    { tok TI }

-- Double
$d+ \. $d+ (e (\-)? $d+)?
    { tok TD }

{
-- | Create a token with position.
tok :: (String -> Tok) -> (Posn -> String -> Token)
tok f p = PT p . f

-- | Token without position.
data Tok
  = TK {-# UNPACK #-} !TokSymbol  -- ^ Reserved word or symbol.
  | TL !String                    -- ^ String literal.
  | TI !String                    -- ^ Integer literal.
  | TV !String                    -- ^ Identifier.
  | TD !String                    -- ^ Float literal.
  | TC !String                    -- ^ Character literal.
  deriving (Eq, Show, Ord)

-- | Smart constructor for 'Tok' for the sake of backwards compatibility.
pattern TS :: String -> Int -> Tok
pattern TS t i = TK (TokSymbol t i)

-- | Keyword or symbol tokens have a unique ID.
data TokSymbol = TokSymbol
  { tsText :: String
      -- ^ Keyword or symbol text.
  , tsID   :: !Int
      -- ^ Unique ID.
  } deriving (Show)

-- | Keyword/symbol equality is determined by the unique ID.
instance Eq  TokSymbol where (==)    = (==)    `on` tsID

-- | Keyword/symbol ordering is determined by the unique ID.
instance Ord TokSymbol where compare = compare `on` tsID

-- | Token with position.
data Token
  = PT  Posn Tok
  | Err Posn
  deriving (Eq, Show, Ord)

-- | Pretty print a position.
printPosn :: Posn -> String
printPosn (Pn _ l c) = "line " ++ show l ++ ", column " ++ show c

-- | Pretty print the position of the first token in the list.
tokenPos :: [Token] -> String
tokenPos (t:_) = printPosn (tokenPosn t)
tokenPos []    = "end of file"

-- | Get the position of a token.
tokenPosn :: Token -> Posn
tokenPosn (PT p _) = p
tokenPosn (Err p)  = p

-- | Get line and column of a token.
tokenLineCol :: Token -> (Int, Int)
tokenLineCol = posLineCol . tokenPosn

-- | Get line and column of a position.
posLineCol :: Posn -> (Int, Int)
posLineCol (Pn _ l c) = (l,c)

-- | Convert a token into "position token" form.
mkPosToken :: Token -> ((Int, Int), String)
mkPosToken t = (tokenLineCol t, tokenText t)

-- | Convert a token to its text.
tokenText :: Token -> String
tokenText t = case t of
  PT _ (TS s _) -> s
  PT _ (TL s)   -> show s
  PT _ (TI s)   -> s
  PT _ (TV s)   -> s
  PT _ (TD s)   -> s
  PT _ (TC s)   -> s
  Err _         -> "#error"

-- | Convert a token to a string.
prToken :: Token -> String
prToken t = tokenText t

-- | Finite map from text to token organized as binary search tree.
data BTree
  = N -- ^ Nil (leaf).
  | B String Tok BTree BTree
      -- ^ Binary node.
  deriving (Show)

-- | Convert potential keyword into token or use fallback conversion.
eitherResIdent :: (String -> Tok) -> String -> Tok
eitherResIdent tv s = treeFind resWords
  where
  treeFind N = tv s
  treeFind (B a t left right) =
    case compare s a of
      LT -> treeFind left
      GT -> treeFind right
      EQ -> t

-- | The keywords and symbols of the language organized as binary search tree.
resWords :: BTree
resWords =
  b "_Bool" 64
    (b "\\block_length" 32
       (b ";" 16
          (b "*" 8
             (b "&" 4
                (b "!=" 2 (b "!" 1 N N) (b "%" 3 N N))
                (b "(" 6 (b "&&" 5 N N) (b ")" 7 N N)))
             (b "-->" 12
                (b "," 10 (b "+" 9 N N) (b "-" 11 N N))
                (b "/" 14 (b ".." 13 N N) (b ":" 15 N N))))
          (b ">=" 24
             (b "<==>" 20
                (b "<-->" 18 (b "<" 17 N N) (b "<=" 19 N N))
                (b "==>" 22 (b "==" 21 N N) (b ">" 23 N N)))
             (b "\\allocation" 28
                (b "[" 26 (b "?" 25 N N) (b "\\allocable" 27 N N))
                (b "\\automatic" 30 (b "\\at" 29 N N) (b "\\base_addr" 31 N N)))))
       (b "\\old" 48
          (b "\\from" 40
             (b "\\false" 36
                (b "\\dynamic" 34 (b "\\dangling" 33 N N) (b "\\exists" 35 N N))
                (b "\\freeable" 38 (b "\\forall" 37 N N) (b "\\fresh" 39 N N)))
             (b "\\nothing" 44
                (b "\\initialized" 42 (b "\\in" 41 N N) (b "\\lambda" 43 N N))
                (b "\\object_pointer" 46
                   (b "\\null" 45 N N) (b "\\offset" 47 N N))))
          (b "\\valid" 56
             (b "\\separated" 52
                (b "\\register" 50 (b "\\pi" 49 N N) (b "\\result" 51 N N))
                (b "\\true" 54 (b "\\static" 53 N N) (b "\\unallocated" 55 N N)))
             (b "\\valid_read" 60
                (b "\\valid_index" 58
                   (b "\\valid_function" 57 N N) (b "\\valid_range" 59 N N))
                (b "^" 62 (b "]" 61 N N) (b "^^" 63 N N))))))
    (b "integer" 96
       (b "continues" 80
          (b "axiomatic" 72
             (b "assigns" 68
                (b "allocates" 66 (b "admit" 65 N N) (b "assert" 67 N N))
                (b "at" 70 (b "assumes" 69 N N) (b "axiom" 71 N N)))
             (b "breaks" 76
                (b "behaviors" 74 (b "behavior" 73 N N) (b "boolean" 75 N N))
                (b "check" 78 (b "char" 77 N N) (b "complete" 79 N N))))
          (b "for" 88
             (b "double" 84
                (b "decreases" 82 (b "contract" 81 N N) (b "disjoint" 83 N N))
                (b "exits" 86 (b "ensures" 85 N N) (b "float" 87 N N)))
             (b "impact" 92
                (b "function" 90 (b "frees" 89 N N) (b "global" 91 N N))
                (b "inductive" 94 (b "include" 93 N N) (b "int" 95 N N)))))
       (b "short" 112
          (b "model" 104
             (b "let" 100
                (b "label" 98 (b "invariant" 97 N N) (b "lemma" 99 N N))
                (b "long" 102 (b "logic" 101 N N) (b "loop" 103 N N)))
             (b "reads" 108
                (b "pragma" 106 (b "module" 105 N N) (b "predicate" 107 N N))
                (b "requires" 110 (b "real" 109 N N) (b "returns" 111 N N))))
          (b "void" 120
             (b "terminates" 116
                (b "sizeof" 114 (b "signed" 113 N N) (b "slice" 115 N N))
                (b "unsigned" 118 (b "type" 117 N N) (b "variant" 119 N N)))
             (b "||" 124
                (b "{" 122 (b "writes" 121 N N) (b "|" 123 N N))
                (b "~" 126 (b "}" 125 N N) N)))))
  where
  b s n = B bs (TS bs n)
    where
    bs = s

-- | Unquote string literal.
unescapeInitTail :: String -> String
unescapeInitTail = id . unesc . tail . id
  where
  unesc s = case s of
    '\\':c:cs | elem c ['\"', '\\', '\''] -> c : unesc cs
    '\\':'n':cs  -> '\n' : unesc cs
    '\\':'t':cs  -> '\t' : unesc cs
    '\\':'r':cs  -> '\r' : unesc cs
    '\\':'f':cs  -> '\f' : unesc cs
    '"':[]       -> []
    c:cs         -> c : unesc cs
    _            -> []

-------------------------------------------------------------------
-- Alex wrapper code.
-- A modified "posn" wrapper.
-------------------------------------------------------------------

data Posn = Pn !Int !Int !Int
  deriving (Eq, Show, Ord)

alexStartPos :: Posn
alexStartPos = Pn 0 1 1

alexMove :: Posn -> Char -> Posn
alexMove (Pn a l c) '\t' = Pn (a+1)  l     (((c+7) `div` 8)*8+1)
alexMove (Pn a l c) '\n' = Pn (a+1) (l+1)   1
alexMove (Pn a l c) _    = Pn (a+1)  l     (c+1)

type Byte = Word8

type AlexInput = (Posn,     -- current position,
                  Char,     -- previous char
                  [Byte],   -- pending bytes on the current char
                  String)   -- current input string

tokens :: String -> [Token]
tokens str = go (alexStartPos, '\n', [], str)
    where
      go :: AlexInput -> [Token]
      go inp@(pos, _, _, str) =
               case alexScan inp 0 of
                AlexEOF                   -> []
                AlexError (pos, _, _, _)  -> [Err pos]
                AlexSkip  inp' len        -> go inp'
                AlexToken inp' len act    -> act pos (take len str) : (go inp')

alexGetByte :: AlexInput -> Maybe (Byte,AlexInput)
alexGetByte (p, c, (b:bs), s) = Just (b, (p, c, bs, s))
alexGetByte (p, _, [], s) =
  case s of
    []  -> Nothing
    (c:s) ->
             let p'     = alexMove p c
                 (b:bs) = utf8Encode c
              in p' `seq` Just (b, (p', c, bs, s))

alexInputPrevChar :: AlexInput -> Char
alexInputPrevChar (p, c, bs, s) = c

-- | Encode a Haskell String to a list of Word8 values, in UTF8 format.
utf8Encode :: Char -> [Word8]
utf8Encode = map fromIntegral . go . ord
  where
  go oc
   | oc <= 0x7f       = [oc]

   | oc <= 0x7ff      = [ 0xc0 + (oc `Data.Bits.shiftR` 6)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]

   | oc <= 0xffff     = [ 0xe0 + (oc `Data.Bits.shiftR` 12)
                        , 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]
   | otherwise        = [ 0xf0 + (oc `Data.Bits.shiftR` 18)
                        , 0x80 + ((oc `Data.Bits.shiftR` 12) Data.Bits..&. 0x3f)
                        , 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]
}
