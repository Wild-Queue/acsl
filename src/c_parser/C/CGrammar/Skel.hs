-- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module C.CGrammar.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified C.CGrammar.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: C.CGrammar.Abs.Ident -> Result
transIdent x = case x of
  C.CGrammar.Abs.Ident string -> failure x

transTranslationUnit :: C.CGrammar.Abs.TranslationUnit -> Result
transTranslationUnit x = case x of
  C.CGrammar.Abs.ATranslationUnit externaldeclarations -> failure x

transExternal_Declaration :: C.CGrammar.Abs.External_Declaration -> Result
transExternal_Declaration x = case x of
  C.CGrammar.Abs.ExternalFunctionDeffinition functiondefinition -> failure x
  C.CGrammar.Abs.ExternalDeclaration declaration -> failure x

transFunctionDefinition :: C.CGrammar.Abs.FunctionDefinition -> Result
transFunctionDefinition x = case x of
  C.CGrammar.Abs.FunctionDeffinition declarationspecifiers declarator declarations compoundstatement -> failure x

transDeclarationSpecifier :: C.CGrammar.Abs.DeclarationSpecifier -> Result
transDeclarationSpecifier x = case x of
  C.CGrammar.Abs.AStorageClassSpecifier storageclassspecifier -> failure x
  C.CGrammar.Abs.TypeSpecifierDeclSpec typespecifier -> failure x
  C.CGrammar.Abs.TypeQualifierDeclSpec typequalifier -> failure x

transStorageClassSpecifier :: C.CGrammar.Abs.StorageClassSpecifier -> Result
transStorageClassSpecifier x = case x of
  C.CGrammar.Abs.AutoKeyWord -> failure x
  C.CGrammar.Abs.RegisterKeyWord -> failure x
  C.CGrammar.Abs.StaticKeyWord -> failure x
  C.CGrammar.Abs.ExternKeyWord -> failure x
  C.CGrammar.Abs.TypedefKeyWord -> failure x

transTypeSpecifier :: C.CGrammar.Abs.TypeSpecifier -> Result
transTypeSpecifier x = case x of
  C.CGrammar.Abs.VoidKeyWord -> failure x
  C.CGrammar.Abs.CharKeyWord -> failure x
  C.CGrammar.Abs.ShortKeyWord -> failure x
  C.CGrammar.Abs.IntKeyWord -> failure x
  C.CGrammar.Abs.LongKeyWord -> failure x
  C.CGrammar.Abs.FloatKeyWord -> failure x
  C.CGrammar.Abs.DoubleKeyWord -> failure x
  C.CGrammar.Abs.SignedKeyWord -> failure x
  C.CGrammar.Abs.UnsignedKeyWord -> failure x
  C.CGrammar.Abs.StructUnionSpecifier structorunionspecifier -> failure x
  C.CGrammar.Abs.AnEnumSpecifier enumspecifier -> failure x

transStructOrUnionSpecifier :: C.CGrammar.Abs.StructOrUnionSpecifier -> Result
transStructOrUnionSpecifier x = case x of
  C.CGrammar.Abs.NamedStructUnionSpecifier structorunion ident structdeclarations -> failure x
  C.CGrammar.Abs.NoNameStructUnionSpecifier structorunion structdeclarations -> failure x
  C.CGrammar.Abs.IdentStructUnionSpecifier structorunion ident -> failure x

transStructOrUnion :: C.CGrammar.Abs.StructOrUnion -> Result
transStructOrUnion x = case x of
  C.CGrammar.Abs.StructKeyWord -> failure x
  C.CGrammar.Abs.UnionKeyWord -> failure x

transStructDeclaration :: C.CGrammar.Abs.StructDeclaration -> Result
transStructDeclaration x = case x of
  C.CGrammar.Abs.AStructDeclaration specifierqualifiers structdeclarators -> failure x

transSpecifierQualifier :: C.CGrammar.Abs.SpecifierQualifier -> Result
transSpecifierQualifier x = case x of
  C.CGrammar.Abs.TypeSpecifierSpecQual typespecifier -> failure x
  C.CGrammar.Abs.TypeQualifierSpecQual typequalifier -> failure x

transStructDeclarator :: C.CGrammar.Abs.StructDeclarator -> Result
transStructDeclarator x = case x of
  C.CGrammar.Abs.SimpleStructDeclarator declarator -> failure x
  C.CGrammar.Abs.InitStructDeclarator declarator constantexpression -> failure x
  C.CGrammar.Abs.ConstExprStructDeclarator constantexpression -> failure x

transDeclarator :: C.CGrammar.Abs.Declarator -> Result
transDeclarator x = case x of
  C.CGrammar.Abs.ADeclaratior pointer directdeclarator -> failure x
  C.CGrammar.Abs.APointerDeclaratior directdeclarator -> failure x

transPointer :: C.CGrammar.Abs.Pointer -> Result
transPointer x = case x of
  C.CGrammar.Abs.APointer typequalifiers -> failure x

transTypeQualifier :: C.CGrammar.Abs.TypeQualifier -> Result
transTypeQualifier x = case x of
  C.CGrammar.Abs.ConstKeyWord -> failure x
  C.CGrammar.Abs.VolatileKeyWord -> failure x

transDirectDeclarator :: C.CGrammar.Abs.DirectDeclarator -> Result
transDirectDeclarator x = case x of
  C.CGrammar.Abs.IdentDeclarator ident -> failure x
  C.CGrammar.Abs.ParentDeclarator declarator -> failure x
  C.CGrammar.Abs.ArrayDeclarator directdeclarator constantexpression -> failure x
  C.CGrammar.Abs.ArrayEmptyDeclarator directdeclarator -> failure x
  C.CGrammar.Abs.DeclaratorParameters directdeclarator parametertypelist -> failure x
  C.CGrammar.Abs.DeclaratorIdentList directdeclarator idents -> failure x

transConstantExpression :: C.CGrammar.Abs.ConstantExpression -> Result
transConstantExpression x = case x of
  C.CGrammar.Abs.CondConstantExpr expression -> failure x

transExpression :: C.CGrammar.Abs.Expression -> Result
transExpression x = case x of
  C.CGrammar.Abs.TernaryCondExpr expression1 expression2 expression3 -> failure x
  C.CGrammar.Abs.LogicalOrExpr expression1 expression2 -> failure x
  C.CGrammar.Abs.LogicalAndExpr expression1 expression2 -> failure x
  C.CGrammar.Abs.BitOrExpr expression1 expression2 -> failure x
  C.CGrammar.Abs.XorExpr expression1 expression2 -> failure x
  C.CGrammar.Abs.BitAndExpr expression1 expression2 -> failure x
  C.CGrammar.Abs.EqualExpr expression1 expression2 -> failure x
  C.CGrammar.Abs.NotEqualExpr expression1 expression2 -> failure x
  C.CGrammar.Abs.LessExpr expression1 expression2 -> failure x
  C.CGrammar.Abs.GreaterExpr expression1 expression2 -> failure x
  C.CGrammar.Abs.LessOrEqualExpr expression1 expression2 -> failure x
  C.CGrammar.Abs.GreaterOrEqualExpr expression1 expression2 -> failure x
  C.CGrammar.Abs.LeftShiftExpr expression1 expression2 -> failure x
  C.CGrammar.Abs.RightShiftExpr expression1 expression2 -> failure x
  C.CGrammar.Abs.PlusExpr expression1 expression2 -> failure x
  C.CGrammar.Abs.MinusExpr expression1 expression2 -> failure x
  C.CGrammar.Abs.MultExpr expression1 expression2 -> failure x
  C.CGrammar.Abs.DivExpr expression1 expression2 -> failure x
  C.CGrammar.Abs.ModExpr expression1 expression2 -> failure x
  C.CGrammar.Abs.TypeCastExpr typename expression -> failure x
  C.CGrammar.Abs.PrefixPlusPlusExpr expression -> failure x
  C.CGrammar.Abs.PrefixMinusMinusExpr expression -> failure x
  C.CGrammar.Abs.UnaryOpExpr unaryoperator expression -> failure x
  C.CGrammar.Abs.SizeOfExpr expression -> failure x
  C.CGrammar.Abs.SizeOfType typename -> failure x
  C.CGrammar.Abs.ArrayExpr expression1 expression2 -> failure x
  C.CGrammar.Abs.PostfixParentExpr expression -> failure x
  C.CGrammar.Abs.PostfixAssignExpr expression expressions -> failure x
  C.CGrammar.Abs.DotExpr expression ident -> failure x
  C.CGrammar.Abs.ArrowExpr expression ident -> failure x
  C.CGrammar.Abs.PostfixPlusPlusExpr expression -> failure x
  C.CGrammar.Abs.PostfixMinusMinusExpr expression -> failure x
  C.CGrammar.Abs.IdentifierExpr ident -> failure x
  C.CGrammar.Abs.ConstantExpr constant -> failure x
  C.CGrammar.Abs.StringExpr string -> failure x
  C.CGrammar.Abs.AnExpression expressions -> failure x
  C.CGrammar.Abs.AssignmentExpr expression1 assignmentoperator expression2 -> failure x

transConstant :: C.CGrammar.Abs.Constant -> Result
transConstant x = case x of
  C.CGrammar.Abs.IntegerExpr integer -> failure x
  C.CGrammar.Abs.CharExpr char -> failure x
  C.CGrammar.Abs.DoubleExpr double -> failure x

transAssignmentOperator :: C.CGrammar.Abs.AssignmentOperator -> Result
transAssignmentOperator x = case x of
  C.CGrammar.Abs.EqualOp -> failure x
  C.CGrammar.Abs.MultEqualOp -> failure x
  C.CGrammar.Abs.DivEqualOp -> failure x
  C.CGrammar.Abs.ModEqualOp -> failure x
  C.CGrammar.Abs.PlusEqualOp -> failure x
  C.CGrammar.Abs.MinusEqualOp -> failure x
  C.CGrammar.Abs.LeftShiftEqualOp -> failure x
  C.CGrammar.Abs.RoghtShiftEqualOp -> failure x
  C.CGrammar.Abs.AndEqualOp -> failure x
  C.CGrammar.Abs.XorEqualOp -> failure x
  C.CGrammar.Abs.OrEqualOp -> failure x

transUnaryOperator :: C.CGrammar.Abs.UnaryOperator -> Result
transUnaryOperator x = case x of
  C.CGrammar.Abs.UnaryAndOp -> failure x
  C.CGrammar.Abs.UnaryMultOp -> failure x
  C.CGrammar.Abs.UnaryPlusOp -> failure x
  C.CGrammar.Abs.UnaryMinusOp -> failure x
  C.CGrammar.Abs.UnaryTildeOp -> failure x
  C.CGrammar.Abs.UnaryNotOp -> failure x

transTypeName :: C.CGrammar.Abs.TypeName -> Result
transTypeName x = case x of
  C.CGrammar.Abs.TypeNameAbstrDecl specifierqualifier specifierqualifiers abstractdeclarator -> failure x
  C.CGrammar.Abs.ATypeName specifierqualifier specifierqualifiers -> failure x

transParameterTypeList :: C.CGrammar.Abs.ParameterTypeList -> Result
transParameterTypeList x = case x of
  C.CGrammar.Abs.SimpleParameters parameterdeclarations -> failure x
  C.CGrammar.Abs.ParametersDotDotDot parameterdeclarations -> failure x

transParameterDeclaration :: C.CGrammar.Abs.ParameterDeclaration -> Result
transParameterDeclaration x = case x of
  C.CGrammar.Abs.DeclaratorParameter declarationspecifier declarationspecifiers declarator -> failure x
  C.CGrammar.Abs.AbstractDeclaratorParameter declarationspecifier declarationspecifiers abstractdeclarator -> failure x
  C.CGrammar.Abs.SimpleDeclaratorParameter declarationspecifier declarationspecifiers -> failure x

transAbstractDeclarator :: C.CGrammar.Abs.AbstractDeclarator -> Result
transAbstractDeclarator x = case x of
  C.CGrammar.Abs.PointerAbstractDeclarator pointers -> failure x
  C.CGrammar.Abs.PointerDirectAbstractDeclarator pointers directabstractdeclarator -> failure x
  C.CGrammar.Abs.ADirectAbstractDeclarator directabstractdeclarator -> failure x

transDirectAbstractDeclarator :: C.CGrammar.Abs.DirectAbstractDeclarator -> Result
transDirectAbstractDeclarator x = case x of
  C.CGrammar.Abs.SimpleDirectAbstractDeclarator abstractdeclarator -> failure x
  C.CGrammar.Abs.FullBracketsDirectAbstractDeclarator directabstractdeclarator constantexpression -> failure x
  C.CGrammar.Abs.BracketsDirectAbstractDeclarator directabstractdeclarator -> failure x
  C.CGrammar.Abs.ConstExprDirectAbstractDeclarator constantexpression -> failure x
  C.CGrammar.Abs.SquareBracketsDirectAbstractDeclarator -> failure x
  C.CGrammar.Abs.FullParamDirectAbstractDeclarator directabstractdeclarator parametertypelist -> failure x
  C.CGrammar.Abs.ParantNoParamDirectAbstractDeclarator directabstractdeclarator -> failure x
  C.CGrammar.Abs.ParamDirectAbstractDeclarator parametertypelist -> failure x
  C.CGrammar.Abs.ParantDirectAbstractDeclarator -> failure x

transEnumSpecifier :: C.CGrammar.Abs.EnumSpecifier -> Result
transEnumSpecifier x = case x of
  C.CGrammar.Abs.NamedInitEnum ident enumerators -> failure x
  C.CGrammar.Abs.InitEnum enumerators -> failure x
  C.CGrammar.Abs.NamedEnum ident -> failure x

transEnumerator :: C.CGrammar.Abs.Enumerator -> Result
transEnumerator x = case x of
  C.CGrammar.Abs.DefaultEnumerator ident -> failure x
  C.CGrammar.Abs.DefinedEnumerator ident constantexpression -> failure x

transDeclaration :: C.CGrammar.Abs.Declaration -> Result
transDeclaration x = case x of
  C.CGrammar.Abs.ADeclaration declarationspecifier declarationspecifiers initdeclarators -> failure x

transInitDeclarator :: C.CGrammar.Abs.InitDeclarator -> Result
transInitDeclarator x = case x of
  C.CGrammar.Abs.SimpleInitDeclarator declarator -> failure x
  C.CGrammar.Abs.InitializedDeclarator declarator initializer -> failure x

transInitializer :: C.CGrammar.Abs.Initializer -> Result
transInitializer x = case x of
  C.CGrammar.Abs.AssignExprInitializer expression -> failure x
  C.CGrammar.Abs.BlockInitializer initializers -> failure x
  C.CGrammar.Abs.BlockCommaInitializer initializers -> failure x

transCompound_Statement :: C.CGrammar.Abs.Compound_Statement -> Result
transCompound_Statement x = case x of
  C.CGrammar.Abs.CompoundStatement declarations statements -> failure x

transStatement :: C.CGrammar.Abs.Statement -> Result
transStatement x = case x of
  C.CGrammar.Abs.ALabeledStatement labeledstatement -> failure x
  C.CGrammar.Abs.AnExpressionStatement expressionstatement -> failure x
  C.CGrammar.Abs.ACompoundStatement compoundstatement -> failure x
  C.CGrammar.Abs.ASelectionStatement selectionstatement -> failure x
  C.CGrammar.Abs.AnIterationStatement iterationstatement -> failure x
  C.CGrammar.Abs.AJumpStatement jumpstatement -> failure x

transLabeledStatement :: C.CGrammar.Abs.LabeledStatement -> Result
transLabeledStatement x = case x of
  C.CGrammar.Abs.LableStatement ident statement -> failure x
  C.CGrammar.Abs.CaseStatement constantexpression statement -> failure x
  C.CGrammar.Abs.DefaultStatement statement -> failure x

transExpressionStatement :: C.CGrammar.Abs.ExpressionStatement -> Result
transExpressionStatement x = case x of
  C.CGrammar.Abs.ExprStatement maybeexpression -> failure x

transSelectionStatement :: C.CGrammar.Abs.SelectionStatement -> Result
transSelectionStatement x = case x of
  C.CGrammar.Abs.IfStatement expression statement -> failure x
  C.CGrammar.Abs.IfElseStatement expression statement1 statement2 -> failure x
  C.CGrammar.Abs.SwitchStatement expression statement -> failure x

transIterationStatement :: C.CGrammar.Abs.IterationStatement -> Result
transIterationStatement x = case x of
  C.CGrammar.Abs.WhileStatement expression statement -> failure x
  C.CGrammar.Abs.DoWhileStatement statement expression -> failure x
  C.CGrammar.Abs.ForStatement maybeexpression1 maybeexpression2 maybeexpression3 statement -> failure x

transMayBeExpression :: C.CGrammar.Abs.MayBeExpression -> Result
transMayBeExpression x = case x of
  C.CGrammar.Abs.YesExpr expression -> failure x
  C.CGrammar.Abs.NoExpr -> failure x

transJumpStatement :: C.CGrammar.Abs.JumpStatement -> Result
transJumpStatement x = case x of
  C.CGrammar.Abs.GotoStatement ident -> failure x
  C.CGrammar.Abs.ContinueStatement -> failure x
  C.CGrammar.Abs.BreakStatement -> failure x
  C.CGrammar.Abs.ReturnStatement maybeexpression -> failure x
