-- File generated by the BNF Converter (bnfc 2.9.4.1).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language c_grammar.

module C.CGrammar.Abs where

import Prelude (Char, Double, Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data TranslationUnit = ATranslationUnit [External_Declaration]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data External_Declaration
    = ExternalFunctionDeffinition FunctionDefinition
    | ExternalDeclaration Declaration
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data FunctionDefinition
    = FunctionDeffinition [DeclarationSpecifier] Declarator [Declaration] Compound_Statement
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data DeclarationSpecifier
    = AStorageClassSpecifier StorageClassSpecifier
    | TypeSpecifierDeclSpec TypeSpecifier
    | TypeQualifierDeclSpec TypeQualifier
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data StorageClassSpecifier
    = AutoKeyWord
    | RegisterKeyWord
    | StaticKeyWord
    | ExternKeyWord
    | TypedefKeyWord
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TypeSpecifier
    = VoidKeyWord
    | CharKeyWord
    | ShortKeyWord
    | IntKeyWord
    | LongKeyWord
    | FloatKeyWord
    | DoubleKeyWord
    | SignedKeyWord
    | UnsignedKeyWord
    | StructUnionSpecifier StructOrUnionSpecifier
    | AnEnumSpecifier EnumSpecifier
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data StructOrUnionSpecifier
    = NamedStructUnionSpecifier StructOrUnion Ident [StructDeclaration]
    | NoNameStructUnionSpecifier StructOrUnion [StructDeclaration]
    | IdentStructUnionSpecifier StructOrUnion Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data StructOrUnion = StructKeyWord | UnionKeyWord
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data StructDeclaration
    = AStructDeclaration [SpecifierQualifier] [StructDeclarator]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data SpecifierQualifier
    = TypeSpecifierSpecQual TypeSpecifier
    | TypeQualifierSpecQual TypeQualifier
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data StructDeclarator
    = SimpleStructDeclarator Declarator
    | InitStructDeclarator Declarator ConstantExpression
    | ConstExprStructDeclarator ConstantExpression
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Declarator
    = ADeclaratior Pointer DirectDeclarator
    | APointerDeclaratior DirectDeclarator
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Pointer = APointer [TypeQualifier]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TypeQualifier = ConstKeyWord | VolatileKeyWord
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data DirectDeclarator
    = IdentDeclarator Ident
    | ParentDeclarator Declarator
    | ArrayDeclarator DirectDeclarator ConstantExpression
    | ArrayEmptyDeclarator DirectDeclarator
    | DeclaratorParameters DirectDeclarator ParameterTypeList
    | DeclaratorIdentList DirectDeclarator [Ident]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ConstantExpression = CondConstantExpr Expression
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Expression
    = TernaryCondExpr Expression Expression Expression
    | LogicalOrExpr Expression Expression
    | LogicalAndExpr Expression Expression
    | BitOrExpr Expression Expression
    | XorExpr Expression Expression
    | BitAndExpr Expression Expression
    | EqualExpr Expression Expression
    | NotEqualExpr Expression Expression
    | LessExpr Expression Expression
    | GreaterExpr Expression Expression
    | LessOrEqualExpr Expression Expression
    | GreaterOrEqualExpr Expression Expression
    | LeftShiftExpr Expression Expression
    | RightShiftExpr Expression Expression
    | PlusExpr Expression Expression
    | MinusExpr Expression Expression
    | MultExpr Expression Expression
    | DivExpr Expression Expression
    | ModExpr Expression Expression
    | TypeCastExpr TypeName Expression
    | PrefixPlusPlusExpr Expression
    | PrefixMinusMinusExpr Expression
    | UnaryOpExpr UnaryOperator Expression
    | SizeOfExpr Expression
    | SizeOfType TypeName
    | ArrayExpr Expression Expression
    | PostfixParentExpr Expression
    | PostfixAssignExpr Expression [Expression]
    | DotExpr Expression Ident
    | ArrowExpr Expression Ident
    | PostfixPlusPlusExpr Expression
    | PostfixMinusMinusExpr Expression
    | IdentifierExpr Ident
    | ConstantExpr Constant
    | StringExpr String
    | AnExpression [Expression]
    | AssignmentExpr Expression AssignmentOperator Expression
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Constant
    = IntegerExpr Integer | CharExpr Char | DoubleExpr Double
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data AssignmentOperator
    = EqualOp
    | MultEqualOp
    | DivEqualOp
    | ModEqualOp
    | PlusEqualOp
    | MinusEqualOp
    | LeftShiftEqualOp
    | RoghtShiftEqualOp
    | AndEqualOp
    | XorEqualOp
    | OrEqualOp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data UnaryOperator
    = UnaryAndOp
    | UnaryMultOp
    | UnaryPlusOp
    | UnaryMinusOp
    | UnaryTildeOp
    | UnaryNotOp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TypeName
    = TypeNameAbstrDecl SpecifierQualifier [SpecifierQualifier] AbstractDeclarator
    | ATypeName SpecifierQualifier [SpecifierQualifier]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ParameterTypeList
    = SimpleParameters [ParameterDeclaration]
    | ParametersDotDotDot [ParameterDeclaration]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ParameterDeclaration
    = DeclaratorParameter DeclarationSpecifier [DeclarationSpecifier] Declarator
    | AbstractDeclaratorParameter DeclarationSpecifier [DeclarationSpecifier] AbstractDeclarator
    | SimpleDeclaratorParameter DeclarationSpecifier [DeclarationSpecifier]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data AbstractDeclarator
    = PointerAbstractDeclarator [Pointer]
    | PointerDirectAbstractDeclarator [Pointer] DirectAbstractDeclarator
    | ADirectAbstractDeclarator DirectAbstractDeclarator
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data DirectAbstractDeclarator
    = SimpleDirectAbstractDeclarator AbstractDeclarator
    | FullBracketsDirectAbstractDeclarator DirectAbstractDeclarator ConstantExpression
    | BracketsDirectAbstractDeclarator DirectAbstractDeclarator
    | ConstExprDirectAbstractDeclarator ConstantExpression
    | SquareBracketsDirectAbstractDeclarator
    | FullParamDirectAbstractDeclarator DirectAbstractDeclarator ParameterTypeList
    | ParantNoParamDirectAbstractDeclarator DirectAbstractDeclarator
    | ParamDirectAbstractDeclarator ParameterTypeList
    | ParantDirectAbstractDeclarator
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data EnumSpecifier
    = NamedInitEnum Ident [Enumerator]
    | InitEnum [Enumerator]
    | NamedEnum Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Enumerator
    = DefaultEnumerator Ident
    | DefinedEnumerator Ident ConstantExpression
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Declaration
    = ADeclaration DeclarationSpecifier [DeclarationSpecifier] [InitDeclarator]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data InitDeclarator
    = SimpleInitDeclarator Declarator
    | InitializedDeclarator Declarator Initializer
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Initializer
    = AssignExprInitializer Expression
    | BlockInitializer [Initializer]
    | BlockCommaInitializer [Initializer]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Compound_Statement
    = CompoundStatement [Declaration] [Statement]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Statement
    = ALabeledStatement LabeledStatement
    | AnExpressionStatement ExpressionStatement
    | ACompoundStatement Compound_Statement
    | ASelectionStatement SelectionStatement
    | AnIterationStatement IterationStatement
    | AJumpStatement JumpStatement
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LabeledStatement
    = LableStatement Ident Statement
    | CaseStatement ConstantExpression Statement
    | DefaultStatement Statement
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ExpressionStatement = ExprStatement MayBeExpression
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data SelectionStatement
    = IfStatement Expression Statement
    | IfElseStatement Expression Statement Statement
    | SwitchStatement Expression Statement
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data IterationStatement
    = WhileStatement Expression Statement
    | DoWhileStatement Statement Expression
    | ForStatement MayBeExpression MayBeExpression MayBeExpression Statement
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data MayBeExpression = YesExpr Expression | NoExpr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data JumpStatement
    = GotoStatement Ident
    | ContinueStatement
    | BreakStatement
    | ReturnStatement MayBeExpression
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

