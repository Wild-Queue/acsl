-- File generated by the BNF Converter (bnfc 2.9.4.1).

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

-- | The abstract syntax of language full_bnfc_parser.

module AcslHaskell.FullBnfcParser.Abs where

import Prelude (Char, Double, Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

data Program = AProgram Globals
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Globals
    = NoGlobals
    | SimpleGlobals Global Globals
    | SemiColonGlobals Globals
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Global
    = GlobalsFunctionDef FunctionDef | GlobalsDeclataion Declaration
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data FunctionDef
    = SimpleFunctionDef FunctionDefStart Block
    | FunctionDefSpec ACSLProgram FunctionDefStart Block
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data FunctionDefStart
    = FunctionDefStartDeclarator DeclSpecList Declarator
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data DeclSpecList
    = DeclSpecTypeSpec TypeSpec
    | DeclSpecTypeSpecNext TypeSpec DeclSpecListNoNamed
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data DeclSpecListNoNamed
    = DeclSpecNoNamedTypeSpec TypeSpec
    | DeclSpecNoNamedTypeSpecNext TypeSpec DeclSpecListNoNamed
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TypeSpec
    = TypeSpecVoidKeyWord
    | TypeSpecCharKeyWord
    | TypeSpecBoolKeyWord
    | TypeSpecShortKeyWord
    | TypeSpecInt32KeyWord
    | TypeSpecIntKeyWord
    | TypeSpecSizeTKeyWord
    | TypeSpecLongKeyWord
    | TypeSpecInt64KeyWord
    | TypeSpecFloatKeyWord
    | TypeSpecDoubleKeyWord
    | TypeSpecSignedKeyWord SIGNED
    | TypeSpecUnsignedKeyWord
    | StructId IdOrTypename
    | StructIdBraces IdOrTypename StructDeclList
    | StructBraces StructDeclList
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Declarator
    = ADeclarator PointerOpt DirectDecl AttributesWithAsm
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data PointerOpt = NoPointer | SomePointer [Attribute] PointerOpt
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data DirectDecl
    = DirectDeclIdTypename IdOrTypename
    | DirectDeclGhostParam DirectDecl GhostParameterOpt
    | DirectDeclGhostRestParParam DirectDecl RestParList GhostParameterOpt
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data AttributesWithAsm = EmptyAttrWithASM
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data RestParList = SimpleParameterDecl [ParameterDecl]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ParameterDecl
    = ParameterDeclSpecDeclarator DeclSpecList Declarator
    | ParameterDeclSpec DeclSpecList
    | ParameterDeclPar ParameterDecl
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data GhostParameterOpt = NoGhostParameter
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data IdOrTypename = IdTypename IdOrTypenameAsId
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data IdOrTypenameAsId = IdOrTypenameAsIdIdentifier Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Declaration
    = DeclSpecInitDecl DeclSpecList DeclAndInitDeclAttrList
    | DeclSpec DeclSpecList
    | SpecDeclSpecInitDecl ACSLProgram DeclSpecList DeclAndInitDeclAttrList
    | SpecDeclSpec ACSLProgram DeclSpecList
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data DeclAndInitDeclAttrList
    = InitDeclaration InitDeclarator
    | InitDeclarationWithAttr InitDeclarator [InitDeclaratorAttr]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data InitDeclaratorAttr = InitDeclaratorAttribute InitDeclarator
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data InitDeclarator = SimpleInitDeclarator Declarator
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data StructDeclList
    = EmptyStructDecl
    | DeclSpecStructDecl DeclSpecList StructDeclList
    | SemicolonStructDecl StructDeclList
    | SpecFieldDeclStructDecl DeclSpecList [FieldDecl] StructDeclList
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data FieldDecl = FieldDeclDeclarator Declarator
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Attribute = AttributeConst CONST
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Block = ABlock BlockAttrs [BlockElement]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data BlockAttrs
    = NoBlockAttrs | SomeBlockAttrs BLOCKATTRIBUTE [Attr]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data BlockElement
    = DeclarationElement Declaration | StatementElement Statement
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Statement
    = SemicolonStatement
    | SpecStatement ACSLProgram AnnotatedStmt
    | ExprsStatement [Expression]
    | BlockStatement Block
    | IfStatement [Expression] AnnotatedStmt ElsePart
    | SwitchStatement [Expression] AnnotatedStmt
    | WhileStatement [Expression] AnnotatedStmt
    | ForStatement ForClause OptExpression OptExpression AnnotatedStmt
    | CaseStatement Expression AnnotatedStmt
    | CaseSliceStatement Expression Expression AnnotatedStmt
    | DefaultStatement AnnotatedStmt
    | EmptyReturnStatement
    | ReturnStatement [Expression]
    | BreakStatement
    | ContinueStatement
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ForClause
    = ForClauseExpression OptExpression
    | ForClauseDeclaration Declaration
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Attr
    = AnAttr Attr Attr
    | TernaryCond Attr Attr Attr
    | Or Attr Attr
    | And Attr Attr
    | BitOr Attr Attr
    | Xor Attr Attr
    | BitAnd Attr Attr
    | EqualEqual Attr Attr
    | NotEqual Attr Attr
    | Less Attr Attr
    | Greater Attr Attr
    | LessEqual Attr Attr
    | GreaterEqual Attr Attr
    | LeftShiftOp Attr Attr
    | RightShiftOp Attr Attr
    | AddOp Attr Attr
    | SubOp Attr Attr
    | MultOp Attr Attr
    | DivOp Attr Attr
    | ModOp Attr Attr
    | PlusUnaryAttr Attr
    | MinusUnaryAttr Attr
    | MultUnaryAttr Attr
    | AmpUnaryAttr Attr
    | NotUnaryAttr Attr
    | TildeUnaryAttr Attr
    | FuncationCall IdOrTypenameAsId [Attr]
    | ProcedureCall IdOrTypenameAsId
    | ArrowAttr Attr IdOrTypename
    | DotAttr Attr IdOrTypename
    | ArrayAttr Attr Attr
    | BasicAttr BasicAttribute
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data BasicAttribute
    = BasicAttrConsInt Integer | BasicAttrConsFloat Double
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data AnnotatedStmt = AnnotatedStatement Statement
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ElsePart = NoElsePart | SimpleElsePart AnnotatedStmt
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data OptExpression = NoExpression | SomeExpression [Expression]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Expression = AssignmentExpr AssignExpr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data AssignExpr
    = EqAssignExpr AssignExpr AssignExpr
    | PlusEqAssignExpr AssignExpr AssignExpr
    | MinusEqAssignExpr AssignExpr AssignExpr
    | MultEqAssignExpr AssignExpr AssignExpr
    | DivEqAssignExpr AssignExpr AssignExpr
    | ModEqAssignExpr AssignExpr AssignExpr
    | AndEqAssignExpr AssignExpr AssignExpr
    | OrEqAssignExpr AssignExpr AssignExpr
    | XorEqAssignExpr AssignExpr AssignExpr
    | LeftShiftEqAssignExpr AssignExpr AssignExpr
    | RightShiftEqAssignExpr AssignExpr AssignExpr
    | TernaryCondExpr AssignExpr OptExpression AssignExpr
    | OrExpr AssignExpr AssignExpr
    | AndExpr AssignExpr AssignExpr
    | BitOrExpr AssignExpr AssignExpr
    | BitXorExpr AssignExpr AssignExpr
    | BitAndExpr AssignExpr AssignExpr
    | EqExpr AssignExpr AssignExpr
    | NotEqExpr AssignExpr AssignExpr
    | LessExpr AssignExpr AssignExpr
    | GreaterExpr AssignExpr AssignExpr
    | LessEqualExpr AssignExpr AssignExpr
    | GreaterEqualExpr AssignExpr AssignExpr
    | LeftShiftExpr AssignExpr AssignExpr
    | RightShiftExpr AssignExpr AssignExpr
    | PlusExpr AssignExpr AssignExpr
    | MinusExpr AssignExpr AssignExpr
    | MulsExpr AssignExpr AssignExpr
    | DivExpr AssignExpr AssignExpr
    | ModExpr AssignExpr AssignExpr
    | CastExpr TypeName AssignExpr
    | UnaryExprPlusPlus AssignExpr
    | UnaryExprMinusMinus AssignExpr
    | UnaryExprPlus AssignExpr
    | UnaryExprMinus AssignExpr
    | UnaryExprMult AssignExpr
    | UnaryExprAmp AssignExpr
    | UnaryExprNot AssignExpr
    | UnaryExprTilde AssignExpr
    | UnaryExprAddress IdOrTypenameAsId
    | BracketsPostfixExpression AssignExpr [Expression]
    | DotPostfixExpression AssignExpr IdOrTypename
    | ArrowPostfixExpression AssignExpr IdOrTypename
    | PlusPlusPostfixExpression AssignExpr
    | MinusMinusPostfixExpression AssignExpr
    | IdentifierPrimaryExpression Ident
    | ConstantPrimaryExpressin Constant
    | CommaExpressionPrimaryExpressin [Expression]
    | BlockPrimaryExpressin Block
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Constant
    = ConstantInt Integer | ConstantFloat Double | ConstantChar Char
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TypeName = TypeNameDeclSpecList DeclSpecList
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ACSLProgram
    = AnnotProgram Annot | AnnotationProgram LogicPTreeAnnot
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Annot = CodeAnnot Code_Annot
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Code_Annot = CodeAnnotContract Contract
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Contract
    = SimpleContract Requires Terminates Decreases SimpleClauses Behaviors CompleteOrDisjoint
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Requires = NoRequires | SomeRequires NERequires
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data NERequires
    = SimpleRequires Lexpr Requires
    | CheckRequires Lexpr Requires
    | AdimtRequires Lexpr Requires
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Terminates = NoTerminate
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Decreases = NoDecreases
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data SimpleClauses
    = NoSimpleClauses | SomeSimpleClauses NESimpleClauses
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data NESimpleClauses
    = PostCondSimpleClauses PostCond Lexpr SimpleClauses
    | AssignsSimpleClauses Assigns SimpleClauses
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Assigns = AssignZone Zones | AssignZoneFromZone [Lexpr] Zones
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Zones = SomeZone [Lexpr] | NoZone
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Behaviors = NoBehaviors
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data CompleteOrDisjoint = NoComplDisj
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Lexpr
    = ImplLexpr Lexpr Lexpr
    | IffLexpr Lexpr Lexpr
    | OrLexpr Lexpr Lexpr
    | AndLexpr Lexpr Lexpr
    | HatHatLexpr Lexpr Lexpr
    | RelationLexpr Lexpr [LexprRelInner] Relation Lexpr
    | BinderLexpr LexprBinder
    | NotBinderLexpr LexprBinder
    | TrueLexpr
    | FalseLexpr
    | ValidLexpr OptLabel Lexpr
    | AutomaticLexpr
    | DynamicLexpr
    | RegisterLexpr
    | StaticLexpr
    | UnallocatedLexpr
    | NullLexpr
    | LexprIntConst Integer
    | LexprFloatConst Double
    | LexprStringConst String
    | AddLexpr Lexpr Lexpr
    | SubtrLexpr Lexpr Lexpr
    | SquaresRangeLexpr Lexpr Range
    | SquaresLexpr Lexpr Lexpr
    | SeparatedLexpr [Lexpr]
    | FullIdParenLexpr FullIdentifier [Lexpr]
    | FullId FullIdentifier
    | PiLexpr
    | ParenRangeLexpr Range
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LexprRelInner = RelInnerLexpr Relation Lexpr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Relation
    = LessRel
    | GreaterRel
    | LessEqRel
    | GreaterEqRel
    | EqRel
    | NotEqRel
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LexprBinder
    = ForallBinderLexpr Binders Lexpr
    | ExistBinderLexpr Binders Lexpr
    | LambdaBinderLexpr Binders Lexpr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Binders
    = TheBinders TypeSpecOFTYPENAME VarSpec [BindersReentrance]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TypeSpecOFTYPENAME
    = TypeSpecTYPENAME Ident
    | TypeSpecSimpleFromTypenameTypeSpec TypeSpecSimple
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data BindersReentrance
    = BindersReentranceDeclSpec TypeSpecOFTYPENAME VarSpec
    | BindersReentranceVarSpec VarSpec
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data VarSpec
    = StartVarSpec [Stars] VarSpec
    | SimpleSpec FullIdentifier
    | ArraySpec VarSpec ArraySize
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Stars = Star
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data ArraySize
    = IntConstArraySize Integer | SomeArraySize FullIdentifier | NoSize
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data OptLabel = OptLabelOne OptLabelList | OptLabelTwo OptLabelList
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data OptLabelList = NoLableList | LableList [LabelName]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LabelName = LableName AnyIdentifier
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Range = LexprRange LexprOption LexprOption
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LexprOption = NoLexprOption | SomeLexprOption Lexpr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data AnyIdentifier = SimpleIdentifierAny Identifier
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data PostCond
    = EnsuresKeyWord
    | ExitsKeyWord
    | BreaksKeyWord
    | ContinuesKeyWord
    | ReturnsKeyWord
    | CheckEnsuresKeyWord
    | CheckExitsKeyWord
    | CheckBreaksKeyWord
    | CheckContinuesKeyWord
    | CheckReturnsKeyWord
    | AdmitEnsuresKeyWord
    | AdmitExitsKeyWord
    | AdmitBreaksKeyWord
    | AdmitContinuesKeyWord
    | AdmitReturnsKeyWord
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data FullIdentifier = SimpleIdentifierFull Identifier
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Identifier = IdentifierIdent Ident
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data TypeSpecSimple
    = TypeSpecSimpleIntegerKeyWord
    | TypeSpecSimpleRealKeyWord
    | TypeSpecSimpleBooleanKeyWord
    | TypeSpecSimpleVoidKeyWord
    | TypeSpecSimpleBoolKeyWord
    | TypeSpecSimpleCharKeyWord
    | TypeSpecSimpleIntKeyWord
    | TypeSpecSimpleDoubleKeyWord
    | TypeSpecSimpleLongDoubleKeyWord
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LogicPTreeAnnot = AnAnnotation Annotation
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Annotation = LoopAnnotation LoopAnnotStack
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LoopAnnotStack
    = LoopAnnotStackInvariant LoopInvariant LoopAnnotOpt
    | LoopAnnotStackEffects LoopEffects LoopAnnotOpt
    | LoopAnnotStackVariant LoopVariant LoopAnnotOpt
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LoopAnnotOpt = NoLoopAnnot | SomeLoopAnnot LoopAnnotStack
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LoopInvariant
    = SimpleLoopInvariant Lexpr
    | CheckLoopInvariant Lexpr
    | AdmitLoopInvariant Lexpr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LoopVariant = SimpleLoopVariant Variant
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data LoopEffects = LoopAssigns Assigns
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Variant = ForVariant Lexpr AnyIdentifier | LexprVariant Lexpr
  deriving (C.Eq, C.Ord, C.Show, C.Read)

newtype Ident = Ident String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype SIGNED = SIGNED String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype LBRACE = LBRACE String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype RBRACE = RBRACE String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype CONST = CONST String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype RESTRICT = RESTRICT String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype VOLATILE = VOLATILE String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype BLOCKATTRIBUTE = BLOCKATTRIBUTE String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype LBRACKET = LBRACKET String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

newtype RBRACKET = RBRACKET String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

