-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Lexer definition for use with Alex 3
{
{-# OPTIONS -fno-warn-incomplete-patterns #-}
{-# OPTIONS_GHC -w #-}

{-# LANGUAGE PatternSynonyms #-}

module FullCAcsl.FullCAcslParser.Lex where

import Prelude

import qualified Data.Bits
import Data.Char     (ord)
import Data.Function (on)
import Data.Word     (Word8)
}

-- Predefined character classes

$c = [A-Z\192-\221] # [\215]  -- capital isolatin1 letter (215 = \times) FIXME
$s = [a-z\222-\255] # [\247]  -- small   isolatin1 letter (247 = \div  ) FIXME
$l = [$c $s]         -- letter
$d = [0-9]           -- digit
$i = [$l $d _ ']     -- identifier character
$u = [. \n]          -- universal: any character

-- Symbols and non-identifier-like reserved words

@rsyms = \; | \_ "Bool" | \_ \_ "int32" | \_ \_ "int64" | \{ | \} | \* | \( | \) | \, | \: | \. \. \. | \= | \? | \| \| | \& \& | \| | \^ | \& | \= \= | \! \= | \< | \> | \< \= | \> \= | \< \< | \> \> | \+ | \- | \/ | \% | \! | \~ | \- \> | \. | \[ | \] | \+ \= | \- \= | \* \= | \/ \= | \% \= | \& \= | \| \= | \^ \= | \< \< \= | \> \> \= | \+ \+ | \- \- | \\ "from" | \\ "nothing" | \= \= \> | \< \= \= \> | \^ \^ | \\ "forall" | \\ "exists" | \\ "lambda" | \\ "true" | \\ "false" | \\ "valid" | \\ "automatic" | \\ "dynamic" | \\ "register" | \\ "static" | \\ "unallocated" | \\ "null" | \\ "separated" | \\ "pi" | \. \.

:-

-- Whitespace (skipped)
$white+ ;

-- Symbols
@rsyms
    { tok (eitherResIdent TV) }

-- token SIGNED
\_ \_ s i g n e d \_ \_ | s i g n e d | \_ \_ s i g n e d
    { tok (eitherResIdent T_SIGNED) }

-- token LBRACE
\< \% | \{
    { tok (eitherResIdent T_LBRACE) }

-- token RBRACE
\% \> | \}
    { tok (eitherResIdent T_RBRACE) }

-- token CONST
c o n s t | \_ \_ c o n s t | \_ \_ c o n s t \_ \_
    { tok (eitherResIdent T_CONST) }

-- token RESTRICT
\_ \_ r e s t r i c t | r e s t r i c t
    { tok (eitherResIdent T_RESTRICT) }

-- token VOLATILE
v o l a t i l e | \_ \_ v o l a t i l e | \_ \_ v o l a t i l e \_ \_ | \_ \_ v o l a t i l e
    { tok (eitherResIdent T_VOLATILE) }

-- token BLOCKATTRIBUTE
\_ \_ b l o c k a t t r i b u t e \_ \_ | \_ \_ b l o c k a t t r i b u t e
    { tok (eitherResIdent T_BLOCKATTRIBUTE) }

-- token LBRACKET
\< \: | \[
    { tok (eitherResIdent T_LBRACKET) }

-- token RBRACKET
\: \> | \]
    { tok (eitherResIdent T_RBRACKET) }

-- Keywords and Ident
$l $i*
    { tok (eitherResIdent TV) }

-- String
\" ([$u # [\" \\ \n]] | (\\ (\" | \\ | \' | n | t | r | f)))* \"
    { tok (TL . unescapeInitTail) }

-- Char
\' ($u # [\' \\] | \\ [\\ \' n t r f]) \'
    { tok TC }

-- Integer
$d+
    { tok TI }

-- Double
$d+ \. $d+ (e (\-)? $d+)?
    { tok TD }

{
-- | Create a token with position.
tok :: (String -> Tok) -> (Posn -> String -> Token)
tok f p = PT p . f

-- | Token without position.
data Tok
  = TK {-# UNPACK #-} !TokSymbol  -- ^ Reserved word or symbol.
  | TL !String                    -- ^ String literal.
  | TI !String                    -- ^ Integer literal.
  | TV !String                    -- ^ Identifier.
  | TD !String                    -- ^ Float literal.
  | TC !String                    -- ^ Character literal.
  | T_SIGNED !String
  | T_LBRACE !String
  | T_RBRACE !String
  | T_CONST !String
  | T_RESTRICT !String
  | T_VOLATILE !String
  | T_BLOCKATTRIBUTE !String
  | T_LBRACKET !String
  | T_RBRACKET !String
  deriving (Eq, Show, Ord)

-- | Smart constructor for 'Tok' for the sake of backwards compatibility.
pattern TS :: String -> Int -> Tok
pattern TS t i = TK (TokSymbol t i)

-- | Keyword or symbol tokens have a unique ID.
data TokSymbol = TokSymbol
  { tsText :: String
      -- ^ Keyword or symbol text.
  , tsID   :: !Int
      -- ^ Unique ID.
  } deriving (Show)

-- | Keyword/symbol equality is determined by the unique ID.
instance Eq  TokSymbol where (==)    = (==)    `on` tsID

-- | Keyword/symbol ordering is determined by the unique ID.
instance Ord TokSymbol where compare = compare `on` tsID

-- | Token with position.
data Token
  = PT  Posn Tok
  | Err Posn
  deriving (Eq, Show, Ord)

-- | Pretty print a position.
printPosn :: Posn -> String
printPosn (Pn _ l c) = "line " ++ show l ++ ", column " ++ show c

-- | Pretty print the position of the first token in the list.
tokenPos :: [Token] -> String
tokenPos (t:_) = printPosn (tokenPosn t)
tokenPos []    = "end of file"

-- | Get the position of a token.
tokenPosn :: Token -> Posn
tokenPosn (PT p _) = p
tokenPosn (Err p)  = p

-- | Get line and column of a token.
tokenLineCol :: Token -> (Int, Int)
tokenLineCol = posLineCol . tokenPosn

-- | Get line and column of a position.
posLineCol :: Posn -> (Int, Int)
posLineCol (Pn _ l c) = (l,c)

-- | Convert a token into "position token" form.
mkPosToken :: Token -> ((Int, Int), String)
mkPosToken t = (tokenLineCol t, tokenText t)

-- | Convert a token to its text.
tokenText :: Token -> String
tokenText t = case t of
  PT _ (TS s _) -> s
  PT _ (TL s)   -> show s
  PT _ (TI s)   -> s
  PT _ (TV s)   -> s
  PT _ (TD s)   -> s
  PT _ (TC s)   -> s
  Err _         -> "#error"
  PT _ (T_SIGNED s) -> s
  PT _ (T_LBRACE s) -> s
  PT _ (T_RBRACE s) -> s
  PT _ (T_CONST s) -> s
  PT _ (T_RESTRICT s) -> s
  PT _ (T_VOLATILE s) -> s
  PT _ (T_BLOCKATTRIBUTE s) -> s
  PT _ (T_LBRACKET s) -> s
  PT _ (T_RBRACKET s) -> s

-- | Convert a token to a string.
prToken :: Token -> String
prToken t = tokenText t

-- | Finite map from text to token organized as binary search tree.
data BTree
  = N -- ^ Nil (leaf).
  | B String Tok BTree BTree
      -- ^ Binary node.
  deriving (Show)

-- | Convert potential keyword into token or use fallback conversion.
eitherResIdent :: (String -> Tok) -> String -> Tok
eitherResIdent tv s = treeFind resWords
  where
  treeFind N = tv s
  treeFind (B a t left right) =
    case compare s a of
      LT -> treeFind left
      GT -> treeFind right
      EQ -> t

-- | The keywords and symbols of the language organized as binary search tree.
resWords :: BTree
resWords =
  b "\\separated" 54
    (b "<" 27
       (b "+=" 14
          (b "&=" 7
             (b "%=" 4
                (b "!=" 2 (b "!" 1 N N) (b "%" 3 N N)) (b "&&" 6 (b "&" 5 N N) N))
             (b "*=" 11
                (b ")" 9 (b "(" 8 N N) (b "*" 10 N N))
                (b "++" 13 (b "+" 12 N N) N)))
          (b ".." 21
             (b "-=" 18
                (b "-" 16 (b "," 15 N N) (b "--" 17 N N))
                (b "." 20 (b "->" 19 N N) N))
             (b "/=" 24
                (b "/" 23 (b "..." 22 N N) N) (b ";" 26 (b ":" 25 N N) N))))
       (b "ACSL_START" 41
          (b "==>" 34
             (b "<==>" 31
                (b "<<=" 29 (b "<<" 28 N N) (b "<=" 30 N N))
                (b "==" 33 (b "=" 32 N N) N))
             (b ">>=" 38
                (b ">=" 36 (b ">" 35 N N) (b ">>" 37 N N))
                (b "ACSL_END" 40 (b "?" 39 N N) N)))
          (b "\\from" 48
             (b "\\exists" 45
                (b "\\automatic" 43 (b "[" 42 N N) (b "\\dynamic" 44 N N))
                (b "\\forall" 47 (b "\\false" 46 N N) N))
             (b "\\null" 51
                (b "\\nothing" 50 (b "\\lambda" 49 N N) N)
                (b "\\register" 53 (b "\\pi" 52 N N) N)))))
    (b "float" 81
       (b "boolean" 68
          (b "^=" 61
             (b "\\valid" 58
                (b "\\true" 56 (b "\\static" 55 N N) (b "\\unallocated" 57 N N))
                (b "^" 60 (b "]" 59 N N) N))
             (b "__int64" 65
                (b "_Bool" 63 (b "^^" 62 N N) (b "__int32" 64 N N))
                (b "assigns" 67 (b "admit" 66 N N) N)))
          (b "continues" 75
             (b "char" 72
                (b "breaks" 70 (b "break" 69 N N) (b "case" 71 N N))
                (b "continue" 74 (b "check" 73 N N) N))
             (b "else" 78
                (b "double" 77 (b "default" 76 N N) N)
                (b "exits" 80 (b "ensures" 79 N N) N))))
       (b "size_t" 94
          (b "loop" 88
             (b "integer" 85
                (b "if" 83 (b "for" 82 N N) (b "int" 84 N N))
                (b "long" 87 (b "invariant" 86 N N) N))
             (b "return" 91
                (b "requires" 90 (b "real" 89 N N) N)
                (b "short" 93 (b "returns" 92 N N) N)))
          (b "{" 101
             (b "variant" 98
                (b "switch" 96 (b "struct" 95 N N) (b "unsigned" 97 N N))
                (b "while" 100 (b "void" 99 N N) N))
             (b "||" 104
                (b "|=" 103 (b "|" 102 N N) N) (b "~" 106 (b "}" 105 N N) N)))))
  where
  b s n = B bs (TS bs n)
    where
    bs = s

-- | Unquote string literal.
unescapeInitTail :: String -> String
unescapeInitTail = id . unesc . tail . id
  where
  unesc s = case s of
    '\\':c:cs | elem c ['\"', '\\', '\''] -> c : unesc cs
    '\\':'n':cs  -> '\n' : unesc cs
    '\\':'t':cs  -> '\t' : unesc cs
    '\\':'r':cs  -> '\r' : unesc cs
    '\\':'f':cs  -> '\f' : unesc cs
    '"':[]       -> []
    c:cs         -> c : unesc cs
    _            -> []

-------------------------------------------------------------------
-- Alex wrapper code.
-- A modified "posn" wrapper.
-------------------------------------------------------------------

data Posn = Pn !Int !Int !Int
  deriving (Eq, Show, Ord)

alexStartPos :: Posn
alexStartPos = Pn 0 1 1

alexMove :: Posn -> Char -> Posn
alexMove (Pn a l c) '\t' = Pn (a+1)  l     (((c+7) `div` 8)*8+1)
alexMove (Pn a l c) '\n' = Pn (a+1) (l+1)   1
alexMove (Pn a l c) _    = Pn (a+1)  l     (c+1)

type Byte = Word8

type AlexInput = (Posn,     -- current position,
                  Char,     -- previous char
                  [Byte],   -- pending bytes on the current char
                  String)   -- current input string

tokens :: String -> [Token]
tokens str = go (alexStartPos, '\n', [], str)
    where
      go :: AlexInput -> [Token]
      go inp@(pos, _, _, str) =
               case alexScan inp 0 of
                AlexEOF                   -> []
                AlexError (pos, _, _, _)  -> [Err pos]
                AlexSkip  inp' len        -> go inp'
                AlexToken inp' len act    -> act pos (take len str) : (go inp')

alexGetByte :: AlexInput -> Maybe (Byte,AlexInput)
alexGetByte (p, c, (b:bs), s) = Just (b, (p, c, bs, s))
alexGetByte (p, _, [], s) =
  case s of
    []  -> Nothing
    (c:s) ->
             let p'     = alexMove p c
                 (b:bs) = utf8Encode c
              in p' `seq` Just (b, (p', c, bs, s))

alexInputPrevChar :: AlexInput -> Char
alexInputPrevChar (p, c, bs, s) = c

-- | Encode a Haskell String to a list of Word8 values, in UTF8 format.
utf8Encode :: Char -> [Word8]
utf8Encode = map fromIntegral . go . ord
  where
  go oc
   | oc <= 0x7f       = [oc]

   | oc <= 0x7ff      = [ 0xc0 + (oc `Data.Bits.shiftR` 6)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]

   | oc <= 0xffff     = [ 0xe0 + (oc `Data.Bits.shiftR` 12)
                        , 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]
   | otherwise        = [ 0xf0 + (oc `Data.Bits.shiftR` 18)
                        , 0x80 + ((oc `Data.Bits.shiftR` 12) Data.Bits..&. 0x3f)
                        , 0x80 + ((oc `Data.Bits.shiftR` 6) Data.Bits..&. 0x3f)
                        , 0x80 + oc Data.Bits..&. 0x3f
                        ]
}
