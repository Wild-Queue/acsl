-- -*- haskell -*- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Parser definition for use with Happy
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
{-# LANGUAGE PatternSynonyms #-}

module FullCAcsl.FullCAcslParser.Par
  ( happyError
  , myLexer
  , pProgram
  , pGlobals
  , pGlobal
  , pFunctionDef
  , pFunctionDefStart
  , pDeclSpecList
  , pDeclSpecListNoNamed
  , pTypeSpec
  , pDeclarator
  , pPointerOpt
  , pDirectDecl
  , pAttributesWithAsm
  , pRestParList
  , pParameterDecl
  , pListParameterDecl
  , pGhostParameterOpt
  , pIdOrTypename
  , pIdOrTypenameAsId
  , pDeclaration
  , pDeclAndInitDeclAttrList
  , pInitDeclaratorAttr
  , pListInitDeclaratorAttr
  , pInitDeclarator
  , pStructDeclList
  , pFieldDecl
  , pListFieldDecl
  , pAttribute
  , pListAttribute
  , pBlock
  , pBlockAttrs
  , pBlockElement
  , pListBlockElement
  , pStatement
  , pForClause
  , pAttr
  , pListAttr
  , pAttr1
  , pAttr2
  , pAttr3
  , pAttr4
  , pAttr5
  , pAttr6
  , pAttr7
  , pAttr8
  , pAttr9
  , pAttr10
  , pAttr11
  , pAttr12
  , pAttr13
  , pAttr14
  , pBasicAttribute
  , pAnnotatedStmt
  , pElsePart
  , pOptExpression
  , pExpression
  , pListExpression
  , pAssignExpr
  , pAssignExpr1
  , pAssignExpr2
  , pAssignExpr3
  , pAssignExpr4
  , pAssignExpr5
  , pAssignExpr6
  , pAssignExpr7
  , pAssignExpr8
  , pAssignExpr9
  , pAssignExpr10
  , pAssignExpr11
  , pAssignExpr12
  , pAssignExpr13
  , pAssignExpr14
  , pAssignExpr15
  , pConstant
  , pTypeName
  , pACSLProgram
  , pAnnot
  , pCode_Annot
  , pContract
  , pRequires
  , pNERequires
  , pTerminates
  , pDecreases
  , pSimpleClauses
  , pNESimpleClauses
  , pAssigns
  , pZones
  , pBehaviors
  , pCompleteOrDisjoint
  , pLexpr
  , pListLexpr
  , pLexpr1
  , pLexprRelInner
  , pListLexprRelInner
  , pRelation
  , pLexpr2
  , pLexprBinder
  , pBinders
  , pTypeSpecOFTYPENAME
  , pBindersReentrance
  , pListBindersReentrance
  , pVarSpec
  , pStars
  , pListStars
  , pVarSpec1
  , pArraySize
  , pLexpr3
  , pOptLabel1
  , pOptLabel2
  , pOptLabelList
  , pLabelName
  , pListLabelName
  , pRange
  , pLexprOption
  , pAnyIdentifier
  , pPostCond
  , pFullIdentifier
  , pListFullIdentifier
  , pIdentifier
  , pTypeSpecSimple
  , pLogicPTreeAnnot
  , pAnnotation
  , pLoopAnnotStack
  , pLoopAnnotOpt
  , pLoopInvariant
  , pLoopVariant
  , pLoopEffects
  , pVariant
  ) where

import Prelude

import qualified FullCAcsl.FullCAcslParser.Abs
import FullCAcsl.FullCAcslParser.Lex

}

%name pProgram Program
%name pGlobals Globals
%name pGlobal Global
%name pFunctionDef FunctionDef
%name pFunctionDefStart FunctionDefStart
%name pDeclSpecList DeclSpecList
%name pDeclSpecListNoNamed DeclSpecListNoNamed
%name pTypeSpec TypeSpec
%name pDeclarator Declarator
%name pPointerOpt PointerOpt
%name pDirectDecl DirectDecl
%name pAttributesWithAsm AttributesWithAsm
%name pRestParList RestParList
%name pParameterDecl ParameterDecl
%name pListParameterDecl ListParameterDecl
%name pGhostParameterOpt GhostParameterOpt
%name pIdOrTypename IdOrTypename
%name pIdOrTypenameAsId IdOrTypenameAsId
%name pDeclaration Declaration
%name pDeclAndInitDeclAttrList DeclAndInitDeclAttrList
%name pInitDeclaratorAttr InitDeclaratorAttr
%name pListInitDeclaratorAttr ListInitDeclaratorAttr
%name pInitDeclarator InitDeclarator
%name pStructDeclList StructDeclList
%name pFieldDecl FieldDecl
%name pListFieldDecl ListFieldDecl
%name pAttribute Attribute
%name pListAttribute ListAttribute
%name pBlock Block
%name pBlockAttrs BlockAttrs
%name pBlockElement BlockElement
%name pListBlockElement ListBlockElement
%name pStatement Statement
%name pForClause ForClause
%name pAttr Attr
%name pListAttr ListAttr
%name pAttr1 Attr1
%name pAttr2 Attr2
%name pAttr3 Attr3
%name pAttr4 Attr4
%name pAttr5 Attr5
%name pAttr6 Attr6
%name pAttr7 Attr7
%name pAttr8 Attr8
%name pAttr9 Attr9
%name pAttr10 Attr10
%name pAttr11 Attr11
%name pAttr12 Attr12
%name pAttr13 Attr13
%name pAttr14 Attr14
%name pBasicAttribute BasicAttribute
%name pAnnotatedStmt AnnotatedStmt
%name pElsePart ElsePart
%name pOptExpression OptExpression
%name pExpression Expression
%name pListExpression ListExpression
%name pAssignExpr AssignExpr
%name pAssignExpr1 AssignExpr1
%name pAssignExpr2 AssignExpr2
%name pAssignExpr3 AssignExpr3
%name pAssignExpr4 AssignExpr4
%name pAssignExpr5 AssignExpr5
%name pAssignExpr6 AssignExpr6
%name pAssignExpr7 AssignExpr7
%name pAssignExpr8 AssignExpr8
%name pAssignExpr9 AssignExpr9
%name pAssignExpr10 AssignExpr10
%name pAssignExpr11 AssignExpr11
%name pAssignExpr12 AssignExpr12
%name pAssignExpr13 AssignExpr13
%name pAssignExpr14 AssignExpr14
%name pAssignExpr15 AssignExpr15
%name pConstant Constant
%name pTypeName TypeName
%name pACSLProgram ACSLProgram
%name pAnnot Annot
%name pCode_Annot Code_Annot
%name pContract Contract
%name pRequires Requires
%name pNERequires NERequires
%name pTerminates Terminates
%name pDecreases Decreases
%name pSimpleClauses SimpleClauses
%name pNESimpleClauses NESimpleClauses
%name pAssigns Assigns
%name pZones Zones
%name pBehaviors Behaviors
%name pCompleteOrDisjoint CompleteOrDisjoint
%name pLexpr Lexpr
%name pListLexpr ListLexpr
%name pLexpr1 Lexpr1
%name pLexprRelInner LexprRelInner
%name pListLexprRelInner ListLexprRelInner
%name pRelation Relation
%name pLexpr2 Lexpr2
%name pLexprBinder LexprBinder
%name pBinders Binders
%name pTypeSpecOFTYPENAME TypeSpecOFTYPENAME
%name pBindersReentrance BindersReentrance
%name pListBindersReentrance ListBindersReentrance
%name pVarSpec VarSpec
%name pStars Stars
%name pListStars ListStars
%name pVarSpec1 VarSpec1
%name pArraySize ArraySize
%name pLexpr3 Lexpr3
%name pOptLabel1 OptLabel1
%name pOptLabel2 OptLabel2
%name pOptLabelList OptLabelList
%name pLabelName LabelName
%name pListLabelName ListLabelName
%name pRange Range
%name pLexprOption LexprOption
%name pAnyIdentifier AnyIdentifier
%name pPostCond PostCond
%name pFullIdentifier FullIdentifier
%name pListFullIdentifier ListFullIdentifier
%name pIdentifier Identifier
%name pTypeSpecSimple TypeSpecSimple
%name pLogicPTreeAnnot LogicPTreeAnnot
%name pAnnotation Annotation
%name pLoopAnnotStack LoopAnnotStack
%name pLoopAnnotOpt LoopAnnotOpt
%name pLoopInvariant LoopInvariant
%name pLoopVariant LoopVariant
%name pLoopEffects LoopEffects
%name pVariant Variant
-- no lexer declaration
%monad { Err } { (>>=) } { return }
%tokentype {Token}
%token
  '!'              { PT _ (TS _ 1)              }
  '!='             { PT _ (TS _ 2)              }
  '%'              { PT _ (TS _ 3)              }
  '%='             { PT _ (TS _ 4)              }
  '&'              { PT _ (TS _ 5)              }
  '&&'             { PT _ (TS _ 6)              }
  '&='             { PT _ (TS _ 7)              }
  '('              { PT _ (TS _ 8)              }
  ')'              { PT _ (TS _ 9)              }
  '*'              { PT _ (TS _ 10)             }
  '*='             { PT _ (TS _ 11)             }
  '+'              { PT _ (TS _ 12)             }
  '++'             { PT _ (TS _ 13)             }
  '+='             { PT _ (TS _ 14)             }
  ','              { PT _ (TS _ 15)             }
  '-'              { PT _ (TS _ 16)             }
  '--'             { PT _ (TS _ 17)             }
  '-='             { PT _ (TS _ 18)             }
  '->'             { PT _ (TS _ 19)             }
  '.'              { PT _ (TS _ 20)             }
  '..'             { PT _ (TS _ 21)             }
  '...'            { PT _ (TS _ 22)             }
  '/'              { PT _ (TS _ 23)             }
  '/='             { PT _ (TS _ 24)             }
  ':'              { PT _ (TS _ 25)             }
  ';'              { PT _ (TS _ 26)             }
  '<'              { PT _ (TS _ 27)             }
  '<<'             { PT _ (TS _ 28)             }
  '<<='            { PT _ (TS _ 29)             }
  '<='             { PT _ (TS _ 30)             }
  '<==>'           { PT _ (TS _ 31)             }
  '='              { PT _ (TS _ 32)             }
  '=='             { PT _ (TS _ 33)             }
  '==>'            { PT _ (TS _ 34)             }
  '>'              { PT _ (TS _ 35)             }
  '>='             { PT _ (TS _ 36)             }
  '>>'             { PT _ (TS _ 37)             }
  '>>='            { PT _ (TS _ 38)             }
  '?'              { PT _ (TS _ 39)             }
  'ACSL_END'       { PT _ (TS _ 40)             }
  'ACSL_START'     { PT _ (TS _ 41)             }
  '['              { PT _ (TS _ 42)             }
  '\\automatic'    { PT _ (TS _ 43)             }
  '\\dynamic'      { PT _ (TS _ 44)             }
  '\\exists'       { PT _ (TS _ 45)             }
  '\\false'        { PT _ (TS _ 46)             }
  '\\forall'       { PT _ (TS _ 47)             }
  '\\from'         { PT _ (TS _ 48)             }
  '\\lambda'       { PT _ (TS _ 49)             }
  '\\nothing'      { PT _ (TS _ 50)             }
  '\\null'         { PT _ (TS _ 51)             }
  '\\pi'           { PT _ (TS _ 52)             }
  '\\register'     { PT _ (TS _ 53)             }
  '\\separated'    { PT _ (TS _ 54)             }
  '\\static'       { PT _ (TS _ 55)             }
  '\\true'         { PT _ (TS _ 56)             }
  '\\unallocated'  { PT _ (TS _ 57)             }
  '\\valid'        { PT _ (TS _ 58)             }
  ']'              { PT _ (TS _ 59)             }
  '^'              { PT _ (TS _ 60)             }
  '^='             { PT _ (TS _ 61)             }
  '^^'             { PT _ (TS _ 62)             }
  '_Bool'          { PT _ (TS _ 63)             }
  '__int32'        { PT _ (TS _ 64)             }
  '__int64'        { PT _ (TS _ 65)             }
  'admit'          { PT _ (TS _ 66)             }
  'assigns'        { PT _ (TS _ 67)             }
  'boolean'        { PT _ (TS _ 68)             }
  'break'          { PT _ (TS _ 69)             }
  'breaks'         { PT _ (TS _ 70)             }
  'case'           { PT _ (TS _ 71)             }
  'char'           { PT _ (TS _ 72)             }
  'check'          { PT _ (TS _ 73)             }
  'continue'       { PT _ (TS _ 74)             }
  'continues'      { PT _ (TS _ 75)             }
  'default'        { PT _ (TS _ 76)             }
  'double'         { PT _ (TS _ 77)             }
  'else'           { PT _ (TS _ 78)             }
  'ensures'        { PT _ (TS _ 79)             }
  'exits'          { PT _ (TS _ 80)             }
  'float'          { PT _ (TS _ 81)             }
  'for'            { PT _ (TS _ 82)             }
  'if'             { PT _ (TS _ 83)             }
  'int'            { PT _ (TS _ 84)             }
  'integer'        { PT _ (TS _ 85)             }
  'invariant'      { PT _ (TS _ 86)             }
  'long'           { PT _ (TS _ 87)             }
  'loop'           { PT _ (TS _ 88)             }
  'real'           { PT _ (TS _ 89)             }
  'requires'       { PT _ (TS _ 90)             }
  'return'         { PT _ (TS _ 91)             }
  'returns'        { PT _ (TS _ 92)             }
  'short'          { PT _ (TS _ 93)             }
  'size_t'         { PT _ (TS _ 94)             }
  'struct'         { PT _ (TS _ 95)             }
  'switch'         { PT _ (TS _ 96)             }
  'unsigned'       { PT _ (TS _ 97)             }
  'variant'        { PT _ (TS _ 98)             }
  'void'           { PT _ (TS _ 99)             }
  'while'          { PT _ (TS _ 100)            }
  '{'              { PT _ (TS _ 101)            }
  '|'              { PT _ (TS _ 102)            }
  '|='             { PT _ (TS _ 103)            }
  '||'             { PT _ (TS _ 104)            }
  '}'              { PT _ (TS _ 105)            }
  '~'              { PT _ (TS _ 106)            }
  L_Ident          { PT _ (TV $$)               }
  L_charac         { PT _ (TC $$)               }
  L_doubl          { PT _ (TD $$)               }
  L_integ          { PT _ (TI $$)               }
  L_quoted         { PT _ (TL $$)               }
  L_SIGNED         { PT _ (T_SIGNED $$)         }
  L_LBRACE         { PT _ (T_LBRACE $$)         }
  L_RBRACE         { PT _ (T_RBRACE $$)         }
  L_CONST          { PT _ (T_CONST $$)          }
  L_RESTRICT       { PT _ (T_RESTRICT $$)       }
  L_VOLATILE       { PT _ (T_VOLATILE $$)       }
  L_BLOCKATTRIBUTE { PT _ (T_BLOCKATTRIBUTE $$) }
  L_LBRACKET       { PT _ (T_LBRACKET $$)       }
  L_RBRACKET       { PT _ (T_RBRACKET $$)       }

%%

Ident :: { FullCAcsl.FullCAcslParser.Abs.Ident }
Ident  : L_Ident { FullCAcsl.FullCAcslParser.Abs.Ident $1 }

Char    :: { Char }
Char     : L_charac { (read $1) :: Char }

Double  :: { Double }
Double   : L_doubl  { (read $1) :: Double }

Integer :: { Integer }
Integer  : L_integ  { (read $1) :: Integer }

String  :: { String }
String   : L_quoted { $1 }

SIGNED :: { FullCAcsl.FullCAcslParser.Abs.SIGNED }
SIGNED  : L_SIGNED { FullCAcsl.FullCAcslParser.Abs.SIGNED $1 }

LBRACE :: { FullCAcsl.FullCAcslParser.Abs.LBRACE }
LBRACE  : L_LBRACE { FullCAcsl.FullCAcslParser.Abs.LBRACE $1 }

RBRACE :: { FullCAcsl.FullCAcslParser.Abs.RBRACE }
RBRACE  : L_RBRACE { FullCAcsl.FullCAcslParser.Abs.RBRACE $1 }

CONST :: { FullCAcsl.FullCAcslParser.Abs.CONST }
CONST  : L_CONST { FullCAcsl.FullCAcslParser.Abs.CONST $1 }

RESTRICT :: { FullCAcsl.FullCAcslParser.Abs.RESTRICT }
RESTRICT  : L_RESTRICT { FullCAcsl.FullCAcslParser.Abs.RESTRICT $1 }

VOLATILE :: { FullCAcsl.FullCAcslParser.Abs.VOLATILE }
VOLATILE  : L_VOLATILE { FullCAcsl.FullCAcslParser.Abs.VOLATILE $1 }

BLOCKATTRIBUTE :: { FullCAcsl.FullCAcslParser.Abs.BLOCKATTRIBUTE }
BLOCKATTRIBUTE  : L_BLOCKATTRIBUTE { FullCAcsl.FullCAcslParser.Abs.BLOCKATTRIBUTE $1 }

LBRACKET :: { FullCAcsl.FullCAcslParser.Abs.LBRACKET }
LBRACKET  : L_LBRACKET { FullCAcsl.FullCAcslParser.Abs.LBRACKET $1 }

RBRACKET :: { FullCAcsl.FullCAcslParser.Abs.RBRACKET }
RBRACKET  : L_RBRACKET { FullCAcsl.FullCAcslParser.Abs.RBRACKET $1 }

Program :: { FullCAcsl.FullCAcslParser.Abs.Program }
Program : Globals { FullCAcsl.FullCAcslParser.Abs.AProgram $1 }

Globals :: { FullCAcsl.FullCAcslParser.Abs.Globals }
Globals
  : {- empty -} { FullCAcsl.FullCAcslParser.Abs.NoGlobals }
  | Global Globals { FullCAcsl.FullCAcslParser.Abs.SimpleGlobals $1 $2 }
  | ';' Globals { FullCAcsl.FullCAcslParser.Abs.SemiColonGlobals $2 }

Global :: { FullCAcsl.FullCAcslParser.Abs.Global }
Global
  : FunctionDef { FullCAcsl.FullCAcslParser.Abs.GlobalsFunctionDef $1 }
  | Declaration { FullCAcsl.FullCAcslParser.Abs.GlobalsDeclataion $1 }

FunctionDef :: { FullCAcsl.FullCAcslParser.Abs.FunctionDef }
FunctionDef
  : FunctionDefStart Block { FullCAcsl.FullCAcslParser.Abs.SimpleFunctionDef $1 $2 }
  | ACSLProgram FunctionDefStart Block { FullCAcsl.FullCAcslParser.Abs.FunctionDefSpec $1 $2 $3 }

FunctionDefStart :: { FullCAcsl.FullCAcslParser.Abs.FunctionDefStart }
FunctionDefStart
  : DeclSpecList Declarator { FullCAcsl.FullCAcslParser.Abs.FunctionDefStartDeclarator $1 $2 }

DeclSpecList :: { FullCAcsl.FullCAcslParser.Abs.DeclSpecList }
DeclSpecList
  : TypeSpec { FullCAcsl.FullCAcslParser.Abs.DeclSpecTypeSpec $1 }
  | TypeSpec DeclSpecListNoNamed { FullCAcsl.FullCAcslParser.Abs.DeclSpecTypeSpecNext $1 $2 }

DeclSpecListNoNamed :: { FullCAcsl.FullCAcslParser.Abs.DeclSpecListNoNamed }
DeclSpecListNoNamed
  : TypeSpec { FullCAcsl.FullCAcslParser.Abs.DeclSpecNoNamedTypeSpec $1 }
  | TypeSpec DeclSpecListNoNamed { FullCAcsl.FullCAcslParser.Abs.DeclSpecNoNamedTypeSpecNext $1 $2 }

TypeSpec :: { FullCAcsl.FullCAcslParser.Abs.TypeSpec }
TypeSpec
  : 'void' { FullCAcsl.FullCAcslParser.Abs.TypeSpecVoidKeyWord }
  | 'char' { FullCAcsl.FullCAcslParser.Abs.TypeSpecCharKeyWord }
  | '_Bool' { FullCAcsl.FullCAcslParser.Abs.TypeSpecBoolKeyWord }
  | 'short' { FullCAcsl.FullCAcslParser.Abs.TypeSpecShortKeyWord }
  | '__int32' { FullCAcsl.FullCAcslParser.Abs.TypeSpecInt32KeyWord }
  | 'int' { FullCAcsl.FullCAcslParser.Abs.TypeSpecIntKeyWord }
  | 'size_t' { FullCAcsl.FullCAcslParser.Abs.TypeSpecSizeTKeyWord }
  | 'long' { FullCAcsl.FullCAcslParser.Abs.TypeSpecLongKeyWord }
  | '__int64' { FullCAcsl.FullCAcslParser.Abs.TypeSpecInt64KeyWord }
  | 'float' { FullCAcsl.FullCAcslParser.Abs.TypeSpecFloatKeyWord }
  | 'double' { FullCAcsl.FullCAcslParser.Abs.TypeSpecDoubleKeyWord }
  | SIGNED { FullCAcsl.FullCAcslParser.Abs.TypeSpecSignedKeyWord $1 }
  | 'unsigned' { FullCAcsl.FullCAcslParser.Abs.TypeSpecUnsignedKeyWord }
  | 'struct' IdOrTypename { FullCAcsl.FullCAcslParser.Abs.StructId $2 }
  | 'struct' IdOrTypename '{' StructDeclList '}' { FullCAcsl.FullCAcslParser.Abs.StructIdBraces $2 $4 }
  | 'struct' '{' StructDeclList '}' { FullCAcsl.FullCAcslParser.Abs.StructBraces $3 }

Declarator :: { FullCAcsl.FullCAcslParser.Abs.Declarator }
Declarator
  : PointerOpt DirectDecl AttributesWithAsm { FullCAcsl.FullCAcslParser.Abs.ADeclarator $1 $2 $3 }

PointerOpt :: { FullCAcsl.FullCAcslParser.Abs.PointerOpt }
PointerOpt
  : {- empty -} { FullCAcsl.FullCAcslParser.Abs.NoPointer }
  | '*' ListAttribute PointerOpt { FullCAcsl.FullCAcslParser.Abs.SomePointer $2 $3 }

DirectDecl :: { FullCAcsl.FullCAcslParser.Abs.DirectDecl }
DirectDecl
  : IdOrTypename { FullCAcsl.FullCAcslParser.Abs.DirectDeclIdTypename $1 }
  | DirectDecl '(' ')' GhostParameterOpt { FullCAcsl.FullCAcslParser.Abs.DirectDeclGhostParam $1 $4 }
  | DirectDecl '(' RestParList ')' GhostParameterOpt { FullCAcsl.FullCAcslParser.Abs.DirectDeclGhostRestParParam $1 $3 $5 }

AttributesWithAsm :: { FullCAcsl.FullCAcslParser.Abs.AttributesWithAsm }
AttributesWithAsm
  : {- empty -} { FullCAcsl.FullCAcslParser.Abs.EmptyAttrWithASM }

RestParList :: { FullCAcsl.FullCAcslParser.Abs.RestParList }
RestParList
  : ListParameterDecl { FullCAcsl.FullCAcslParser.Abs.SimpleParameterDecl $1 }

ParameterDecl :: { FullCAcsl.FullCAcslParser.Abs.ParameterDecl }
ParameterDecl
  : DeclSpecList Declarator { FullCAcsl.FullCAcslParser.Abs.ParameterDeclSpecDeclarator $1 $2 }
  | DeclSpecList { FullCAcsl.FullCAcslParser.Abs.ParameterDeclSpec $1 }
  | '(' ParameterDecl ')' { FullCAcsl.FullCAcslParser.Abs.ParameterDeclPar $2 }

ListParameterDecl :: { [FullCAcsl.FullCAcslParser.Abs.ParameterDecl] }
ListParameterDecl
  : ParameterDecl { (:[]) $1 }
  | ParameterDecl ',' ListParameterDecl { (:) $1 $3 }

GhostParameterOpt :: { FullCAcsl.FullCAcslParser.Abs.GhostParameterOpt }
GhostParameterOpt
  : {- empty -} { FullCAcsl.FullCAcslParser.Abs.NoGhostParameter }

IdOrTypename :: { FullCAcsl.FullCAcslParser.Abs.IdOrTypename }
IdOrTypename
  : IdOrTypenameAsId { FullCAcsl.FullCAcslParser.Abs.IdTypename $1 }

IdOrTypenameAsId :: { FullCAcsl.FullCAcslParser.Abs.IdOrTypenameAsId }
IdOrTypenameAsId
  : Ident { FullCAcsl.FullCAcslParser.Abs.IdOrTypenameAsIdIdentifier $1 }

Declaration :: { FullCAcsl.FullCAcslParser.Abs.Declaration }
Declaration
  : DeclSpecList DeclAndInitDeclAttrList ';' { FullCAcsl.FullCAcslParser.Abs.DeclSpecInitDecl $1 $2 }
  | DeclSpecList ';' { FullCAcsl.FullCAcslParser.Abs.DeclSpec $1 }
  | ACSLProgram DeclSpecList DeclAndInitDeclAttrList ';' { FullCAcsl.FullCAcslParser.Abs.SpecDeclSpecInitDecl $1 $2 $3 }
  | ACSLProgram DeclSpecList ';' { FullCAcsl.FullCAcslParser.Abs.SpecDeclSpec $1 $2 }

DeclAndInitDeclAttrList :: { FullCAcsl.FullCAcslParser.Abs.DeclAndInitDeclAttrList }
DeclAndInitDeclAttrList
  : InitDeclarator { FullCAcsl.FullCAcslParser.Abs.InitDeclaration $1 }
  | InitDeclarator ',' ListInitDeclaratorAttr { FullCAcsl.FullCAcslParser.Abs.InitDeclarationWithAttr $1 $3 }

InitDeclaratorAttr :: { FullCAcsl.FullCAcslParser.Abs.InitDeclaratorAttr }
InitDeclaratorAttr
  : InitDeclarator { FullCAcsl.FullCAcslParser.Abs.InitDeclaratorAttribute $1 }

ListInitDeclaratorAttr :: { [FullCAcsl.FullCAcslParser.Abs.InitDeclaratorAttr] }
ListInitDeclaratorAttr
  : InitDeclaratorAttr { (:[]) $1 }
  | InitDeclaratorAttr ',' ListInitDeclaratorAttr { (:) $1 $3 }

InitDeclarator :: { FullCAcsl.FullCAcslParser.Abs.InitDeclarator }
InitDeclarator
  : Declarator { FullCAcsl.FullCAcslParser.Abs.SimpleInitDeclarator $1 }

StructDeclList :: { FullCAcsl.FullCAcslParser.Abs.StructDeclList }
StructDeclList
  : {- empty -} { FullCAcsl.FullCAcslParser.Abs.EmptyStructDecl }
  | DeclSpecList ';' StructDeclList { FullCAcsl.FullCAcslParser.Abs.DeclSpecStructDecl $1 $3 }
  | ';' StructDeclList { FullCAcsl.FullCAcslParser.Abs.SemicolonStructDecl $2 }
  | DeclSpecList ListFieldDecl ';' StructDeclList { FullCAcsl.FullCAcslParser.Abs.SpecFieldDeclStructDecl $1 $2 $4 }

FieldDecl :: { FullCAcsl.FullCAcslParser.Abs.FieldDecl }
FieldDecl
  : Declarator { FullCAcsl.FullCAcslParser.Abs.FieldDeclDeclarator $1 }

ListFieldDecl :: { [FullCAcsl.FullCAcslParser.Abs.FieldDecl] }
ListFieldDecl
  : FieldDecl { (:[]) $1 }
  | FieldDecl ',' ListFieldDecl { (:) $1 $3 }

Attribute :: { FullCAcsl.FullCAcslParser.Abs.Attribute }
Attribute
  : CONST { FullCAcsl.FullCAcslParser.Abs.AttributeConst $1 }

ListAttribute :: { [FullCAcsl.FullCAcslParser.Abs.Attribute] }
ListAttribute
  : {- empty -} { [] } | Attribute ListAttribute { (:) $1 $2 }

Block :: { FullCAcsl.FullCAcslParser.Abs.Block }
Block
  : '{' BlockAttrs ListBlockElement '}' { FullCAcsl.FullCAcslParser.Abs.ABlock $2 $3 }

BlockAttrs :: { FullCAcsl.FullCAcslParser.Abs.BlockAttrs }
BlockAttrs
  : {- empty -} { FullCAcsl.FullCAcslParser.Abs.NoBlockAttrs }
  | BLOCKATTRIBUTE '(' ListAttr ')' { FullCAcsl.FullCAcslParser.Abs.SomeBlockAttrs $1 $3 }

BlockElement :: { FullCAcsl.FullCAcslParser.Abs.BlockElement }
BlockElement
  : Declaration { FullCAcsl.FullCAcslParser.Abs.DeclarationElement $1 }
  | Statement { FullCAcsl.FullCAcslParser.Abs.StatementElement $1 }

ListBlockElement :: { [FullCAcsl.FullCAcslParser.Abs.BlockElement] }
ListBlockElement
  : {- empty -} { [] } | BlockElement ListBlockElement { (:) $1 $2 }

Statement :: { FullCAcsl.FullCAcslParser.Abs.Statement }
Statement
  : ';' { FullCAcsl.FullCAcslParser.Abs.SemicolonStatement }
  | ACSLProgram AnnotatedStmt { FullCAcsl.FullCAcslParser.Abs.SpecStatement $1 $2 }
  | ListExpression ';' { FullCAcsl.FullCAcslParser.Abs.ExprsStatement $1 }
  | Block { FullCAcsl.FullCAcslParser.Abs.BlockStatement $1 }
  | 'if' '(' ListExpression ')' AnnotatedStmt ElsePart { FullCAcsl.FullCAcslParser.Abs.IfStatement $3 $5 $6 }
  | 'switch' '(' ListExpression ')' AnnotatedStmt { FullCAcsl.FullCAcslParser.Abs.SwitchStatement $3 $5 }
  | 'while' '(' ListExpression ')' AnnotatedStmt { FullCAcsl.FullCAcslParser.Abs.WhileStatement $3 $5 }
  | 'for' '(' ForClause OptExpression ';' OptExpression ')' AnnotatedStmt { FullCAcsl.FullCAcslParser.Abs.ForStatement $3 $4 $6 $8 }
  | 'case' Expression ':' AnnotatedStmt { FullCAcsl.FullCAcslParser.Abs.CaseStatement $2 $4 }
  | 'case' Expression '...' Expression ':' AnnotatedStmt { FullCAcsl.FullCAcslParser.Abs.CaseSliceStatement $2 $4 $6 }
  | 'default' ':' AnnotatedStmt { FullCAcsl.FullCAcslParser.Abs.DefaultStatement $3 }
  | 'return' ';' { FullCAcsl.FullCAcslParser.Abs.EmptyReturnStatement }
  | 'return' ListExpression ';' { FullCAcsl.FullCAcslParser.Abs.ReturnStatement $2 }
  | 'break' ';' { FullCAcsl.FullCAcslParser.Abs.BreakStatement }
  | 'continue' ';' { FullCAcsl.FullCAcslParser.Abs.ContinueStatement }

ForClause :: { FullCAcsl.FullCAcslParser.Abs.ForClause }
ForClause
  : OptExpression ';' { FullCAcsl.FullCAcslParser.Abs.ForClauseExpression $1 }
  | Declaration { FullCAcsl.FullCAcslParser.Abs.ForClauseDeclaration $1 }

Attr :: { FullCAcsl.FullCAcslParser.Abs.Attr }
Attr
  : Attr1 { $1 }
  | Attr1 '=' Attr1 { FullCAcsl.FullCAcslParser.Abs.AnAttr $1 $3 }

ListAttr :: { [FullCAcsl.FullCAcslParser.Abs.Attr] }
ListAttr : Attr { (:[]) $1 } | Attr ',' ListAttr { (:) $1 $3 }

Attr1 :: { FullCAcsl.FullCAcslParser.Abs.Attr }
Attr1
  : Attr2 { $1 }
  | Attr2 '?' Attr1 ':' Attr1 { FullCAcsl.FullCAcslParser.Abs.TernaryCond $1 $3 $5 }

Attr2 :: { FullCAcsl.FullCAcslParser.Abs.Attr }
Attr2
  : Attr3 { $1 }
  | Attr2 '||' Attr3 { FullCAcsl.FullCAcslParser.Abs.Or $1 $3 }

Attr3 :: { FullCAcsl.FullCAcslParser.Abs.Attr }
Attr3
  : Attr4 { $1 }
  | Attr3 '&&' Attr4 { FullCAcsl.FullCAcslParser.Abs.And $1 $3 }

Attr4 :: { FullCAcsl.FullCAcslParser.Abs.Attr }
Attr4
  : Attr5 { $1 }
  | Attr4 '|' Attr5 { FullCAcsl.FullCAcslParser.Abs.BitOr $1 $3 }

Attr5 :: { FullCAcsl.FullCAcslParser.Abs.Attr }
Attr5
  : Attr6 { $1 }
  | Attr5 '^' Attr6 { FullCAcsl.FullCAcslParser.Abs.Xor $1 $3 }

Attr6 :: { FullCAcsl.FullCAcslParser.Abs.Attr }
Attr6
  : Attr7 { $1 }
  | Attr6 '&' Attr7 { FullCAcsl.FullCAcslParser.Abs.BitAnd $1 $3 }

Attr7 :: { FullCAcsl.FullCAcslParser.Abs.Attr }
Attr7
  : Attr8 { $1 }
  | Attr7 '==' Attr8 { FullCAcsl.FullCAcslParser.Abs.EqualEqual $1 $3 }
  | Attr7 '!=' Attr8 { FullCAcsl.FullCAcslParser.Abs.NotEqual $1 $3 }

Attr8 :: { FullCAcsl.FullCAcslParser.Abs.Attr }
Attr8
  : Attr9 { $1 }
  | Attr8 '<' Attr9 { FullCAcsl.FullCAcslParser.Abs.Less $1 $3 }
  | Attr8 '>' Attr9 { FullCAcsl.FullCAcslParser.Abs.Greater $1 $3 }
  | Attr8 '<=' Attr9 { FullCAcsl.FullCAcslParser.Abs.LessEqual $1 $3 }
  | Attr8 '>=' Attr9 { FullCAcsl.FullCAcslParser.Abs.GreaterEqual $1 $3 }

Attr9 :: { FullCAcsl.FullCAcslParser.Abs.Attr }
Attr9
  : Attr10 { $1 }
  | Attr9 '<<' Attr10 { FullCAcsl.FullCAcslParser.Abs.LeftShiftOp $1 $3 }
  | Attr9 '>>' Attr10 { FullCAcsl.FullCAcslParser.Abs.RightShiftOp $1 $3 }

Attr10 :: { FullCAcsl.FullCAcslParser.Abs.Attr }
Attr10
  : Attr11 { $1 }
  | Attr10 '+' Attr11 { FullCAcsl.FullCAcslParser.Abs.AddOp $1 $3 }
  | Attr10 '-' Attr11 { FullCAcsl.FullCAcslParser.Abs.SubOp $1 $3 }

Attr11 :: { FullCAcsl.FullCAcslParser.Abs.Attr }
Attr11
  : Attr12 { $1 }
  | Attr11 '*' Attr12 { FullCAcsl.FullCAcslParser.Abs.MultOp $1 $3 }
  | Attr11 '/' Attr12 { FullCAcsl.FullCAcslParser.Abs.DivOp $1 $3 }
  | Attr11 '%' Attr12 { FullCAcsl.FullCAcslParser.Abs.ModOp $1 $3 }

Attr12 :: { FullCAcsl.FullCAcslParser.Abs.Attr }
Attr12
  : Attr13 { $1 }
  | '+' Attr12 { FullCAcsl.FullCAcslParser.Abs.PlusUnaryAttr $2 }
  | '-' Attr12 { FullCAcsl.FullCAcslParser.Abs.MinusUnaryAttr $2 }
  | '*' Attr12 { FullCAcsl.FullCAcslParser.Abs.MultUnaryAttr $2 }
  | '&' Attr12 { FullCAcsl.FullCAcslParser.Abs.AmpUnaryAttr $2 }
  | '!' Attr12 { FullCAcsl.FullCAcslParser.Abs.NotUnaryAttr $2 }
  | '~' Attr12 { FullCAcsl.FullCAcslParser.Abs.TildeUnaryAttr $2 }

Attr13 :: { FullCAcsl.FullCAcslParser.Abs.Attr }
Attr13
  : Attr14 { $1 }
  | IdOrTypenameAsId '(' ListAttr ')' { FullCAcsl.FullCAcslParser.Abs.FuncationCall $1 $3 }
  | IdOrTypenameAsId '(' ')' { FullCAcsl.FullCAcslParser.Abs.ProcedureCall $1 }
  | Attr13 '->' IdOrTypename { FullCAcsl.FullCAcslParser.Abs.ArrowAttr $1 $3 }
  | Attr13 '.' IdOrTypename { FullCAcsl.FullCAcslParser.Abs.DotAttr $1 $3 }
  | Attr13 '[' Attr ']' { FullCAcsl.FullCAcslParser.Abs.ArrayAttr $1 $3 }

Attr14 :: { FullCAcsl.FullCAcslParser.Abs.Attr }
Attr14
  : BasicAttribute { FullCAcsl.FullCAcslParser.Abs.BasicAttr $1 }
  | '(' Attr ')' { $2 }

BasicAttribute :: { FullCAcsl.FullCAcslParser.Abs.BasicAttribute }
BasicAttribute
  : Integer { FullCAcsl.FullCAcslParser.Abs.BasicAttrConsInt $1 }
  | Double { FullCAcsl.FullCAcslParser.Abs.BasicAttrConsFloat $1 }

AnnotatedStmt :: { FullCAcsl.FullCAcslParser.Abs.AnnotatedStmt }
AnnotatedStmt
  : Statement { FullCAcsl.FullCAcslParser.Abs.AnnotatedStatement $1 }

ElsePart :: { FullCAcsl.FullCAcslParser.Abs.ElsePart }
ElsePart
  : {- empty -} { FullCAcsl.FullCAcslParser.Abs.NoElsePart }
  | 'else' AnnotatedStmt { FullCAcsl.FullCAcslParser.Abs.SimpleElsePart $2 }

OptExpression :: { FullCAcsl.FullCAcslParser.Abs.OptExpression }
OptExpression
  : {- empty -} { FullCAcsl.FullCAcslParser.Abs.NoExpression }
  | ListExpression { FullCAcsl.FullCAcslParser.Abs.SomeExpression $1 }

Expression :: { FullCAcsl.FullCAcslParser.Abs.Expression }
Expression
  : AssignExpr { FullCAcsl.FullCAcslParser.Abs.AssignmentExpr $1 }

ListExpression :: { [FullCAcsl.FullCAcslParser.Abs.Expression] }
ListExpression
  : Expression { (:[]) $1 }
  | Expression ',' ListExpression { (:) $1 $3 }

AssignExpr :: { FullCAcsl.FullCAcslParser.Abs.AssignExpr }
AssignExpr
  : AssignExpr1 { $1 }
  | AssignExpr12 '=' AssignExpr { FullCAcsl.FullCAcslParser.Abs.EqAssignExpr $1 $3 }
  | AssignExpr12 '+=' AssignExpr { FullCAcsl.FullCAcslParser.Abs.PlusEqAssignExpr $1 $3 }
  | AssignExpr12 '-=' AssignExpr { FullCAcsl.FullCAcslParser.Abs.MinusEqAssignExpr $1 $3 }
  | AssignExpr12 '*=' AssignExpr { FullCAcsl.FullCAcslParser.Abs.MultEqAssignExpr $1 $3 }
  | AssignExpr12 '/=' AssignExpr { FullCAcsl.FullCAcslParser.Abs.DivEqAssignExpr $1 $3 }
  | AssignExpr12 '%=' AssignExpr { FullCAcsl.FullCAcslParser.Abs.ModEqAssignExpr $1 $3 }
  | AssignExpr12 '&=' AssignExpr { FullCAcsl.FullCAcslParser.Abs.AndEqAssignExpr $1 $3 }
  | AssignExpr12 '|=' AssignExpr { FullCAcsl.FullCAcslParser.Abs.OrEqAssignExpr $1 $3 }
  | AssignExpr12 '^=' AssignExpr { FullCAcsl.FullCAcslParser.Abs.XorEqAssignExpr $1 $3 }
  | AssignExpr12 '<<=' AssignExpr { FullCAcsl.FullCAcslParser.Abs.LeftShiftEqAssignExpr $1 $3 }
  | AssignExpr12 '>>=' AssignExpr { FullCAcsl.FullCAcslParser.Abs.RightShiftEqAssignExpr $1 $3 }

AssignExpr1 :: { FullCAcsl.FullCAcslParser.Abs.AssignExpr }
AssignExpr1
  : AssignExpr2 { $1 }
  | AssignExpr2 '?' OptExpression ':' AssignExpr1 { FullCAcsl.FullCAcslParser.Abs.TernaryCondExpr $1 $3 $5 }

AssignExpr2 :: { FullCAcsl.FullCAcslParser.Abs.AssignExpr }
AssignExpr2
  : AssignExpr3 { $1 }
  | AssignExpr2 '||' AssignExpr3 { FullCAcsl.FullCAcslParser.Abs.OrExpr $1 $3 }

AssignExpr3 :: { FullCAcsl.FullCAcslParser.Abs.AssignExpr }
AssignExpr3
  : AssignExpr4 { $1 }
  | AssignExpr3 '&&' AssignExpr4 { FullCAcsl.FullCAcslParser.Abs.AndExpr $1 $3 }

AssignExpr4 :: { FullCAcsl.FullCAcslParser.Abs.AssignExpr }
AssignExpr4
  : AssignExpr5 { $1 }
  | AssignExpr4 '|' AssignExpr5 { FullCAcsl.FullCAcslParser.Abs.BitOrExpr $1 $3 }

AssignExpr5 :: { FullCAcsl.FullCAcslParser.Abs.AssignExpr }
AssignExpr5
  : AssignExpr6 { $1 }
  | AssignExpr5 '^' AssignExpr6 { FullCAcsl.FullCAcslParser.Abs.BitXorExpr $1 $3 }

AssignExpr6 :: { FullCAcsl.FullCAcslParser.Abs.AssignExpr }
AssignExpr6
  : AssignExpr7 { $1 }
  | AssignExpr6 '&' AssignExpr7 { FullCAcsl.FullCAcslParser.Abs.BitAndExpr $1 $3 }

AssignExpr7 :: { FullCAcsl.FullCAcslParser.Abs.AssignExpr }
AssignExpr7
  : AssignExpr8 { $1 }
  | AssignExpr7 '==' AssignExpr8 { FullCAcsl.FullCAcslParser.Abs.EqExpr $1 $3 }
  | AssignExpr7 '!=' AssignExpr8 { FullCAcsl.FullCAcslParser.Abs.NotEqExpr $1 $3 }

AssignExpr8 :: { FullCAcsl.FullCAcslParser.Abs.AssignExpr }
AssignExpr8
  : AssignExpr9 { $1 }
  | AssignExpr8 '<' AssignExpr9 { FullCAcsl.FullCAcslParser.Abs.LessExpr $1 $3 }
  | AssignExpr8 '>' AssignExpr9 { FullCAcsl.FullCAcslParser.Abs.GreaterExpr $1 $3 }
  | AssignExpr8 '<=' AssignExpr9 { FullCAcsl.FullCAcslParser.Abs.LessEqualExpr $1 $3 }
  | AssignExpr8 '>=' AssignExpr9 { FullCAcsl.FullCAcslParser.Abs.GreaterEqualExpr $1 $3 }

AssignExpr9 :: { FullCAcsl.FullCAcslParser.Abs.AssignExpr }
AssignExpr9
  : AssignExpr10 { $1 }
  | AssignExpr9 '<<' AssignExpr10 { FullCAcsl.FullCAcslParser.Abs.LeftShiftExpr $1 $3 }
  | AssignExpr9 '>>' AssignExpr10 { FullCAcsl.FullCAcslParser.Abs.RightShiftExpr $1 $3 }

AssignExpr10 :: { FullCAcsl.FullCAcslParser.Abs.AssignExpr }
AssignExpr10
  : AssignExpr11 { $1 }
  | AssignExpr10 '+' AssignExpr11 { FullCAcsl.FullCAcslParser.Abs.PlusExpr $1 $3 }
  | AssignExpr10 '-' AssignExpr11 { FullCAcsl.FullCAcslParser.Abs.MinusExpr $1 $3 }

AssignExpr11 :: { FullCAcsl.FullCAcslParser.Abs.AssignExpr }
AssignExpr11
  : AssignExpr12 { $1 }
  | AssignExpr11 '*' AssignExpr12 { FullCAcsl.FullCAcslParser.Abs.MulsExpr $1 $3 }
  | AssignExpr11 '/' AssignExpr12 { FullCAcsl.FullCAcslParser.Abs.DivExpr $1 $3 }
  | AssignExpr11 '%' AssignExpr12 { FullCAcsl.FullCAcslParser.Abs.ModExpr $1 $3 }

AssignExpr12 :: { FullCAcsl.FullCAcslParser.Abs.AssignExpr }
AssignExpr12
  : AssignExpr13 { $1 }
  | '(' TypeName ')' AssignExpr12 { FullCAcsl.FullCAcslParser.Abs.CastExpr $2 $4 }

AssignExpr13 :: { FullCAcsl.FullCAcslParser.Abs.AssignExpr }
AssignExpr13
  : AssignExpr14 { $1 }
  | '++' AssignExpr13 { FullCAcsl.FullCAcslParser.Abs.UnaryExprPlusPlus $2 }
  | '--' AssignExpr13 { FullCAcsl.FullCAcslParser.Abs.UnaryExprMinusMinus $2 }
  | '+' AssignExpr12 { FullCAcsl.FullCAcslParser.Abs.UnaryExprPlus $2 }
  | '-' AssignExpr12 { FullCAcsl.FullCAcslParser.Abs.UnaryExprMinus $2 }
  | '*' AssignExpr12 { FullCAcsl.FullCAcslParser.Abs.UnaryExprMult $2 }
  | '&' AssignExpr12 { FullCAcsl.FullCAcslParser.Abs.UnaryExprAmp $2 }
  | '!' AssignExpr12 { FullCAcsl.FullCAcslParser.Abs.UnaryExprNot $2 }
  | '~' AssignExpr12 { FullCAcsl.FullCAcslParser.Abs.UnaryExprTilde $2 }
  | '&&' IdOrTypenameAsId { FullCAcsl.FullCAcslParser.Abs.UnaryExprAddress $2 }

AssignExpr14 :: { FullCAcsl.FullCAcslParser.Abs.AssignExpr }
AssignExpr14
  : AssignExpr15 { $1 }
  | AssignExpr14 '[' ListExpression ']' { FullCAcsl.FullCAcslParser.Abs.BracketsPostfixExpression $1 $3 }
  | AssignExpr14 '.' IdOrTypename { FullCAcsl.FullCAcslParser.Abs.DotPostfixExpression $1 $3 }
  | AssignExpr14 '->' IdOrTypename { FullCAcsl.FullCAcslParser.Abs.ArrowPostfixExpression $1 $3 }
  | AssignExpr14 '++' { FullCAcsl.FullCAcslParser.Abs.PlusPlusPostfixExpression $1 }
  | AssignExpr14 '--' { FullCAcsl.FullCAcslParser.Abs.MinusMinusPostfixExpression $1 }

AssignExpr15 :: { FullCAcsl.FullCAcslParser.Abs.AssignExpr }
AssignExpr15
  : Ident { FullCAcsl.FullCAcslParser.Abs.IdentifierPrimaryExpression $1 }
  | Constant { FullCAcsl.FullCAcslParser.Abs.ConstantPrimaryExpressin $1 }
  | '(' ListExpression ')' { FullCAcsl.FullCAcslParser.Abs.CommaExpressionPrimaryExpressin $2 }
  | '(' Block ')' { FullCAcsl.FullCAcslParser.Abs.BlockPrimaryExpressin $2 }

Constant :: { FullCAcsl.FullCAcslParser.Abs.Constant }
Constant
  : Integer { FullCAcsl.FullCAcslParser.Abs.ConstantInt $1 }
  | Double { FullCAcsl.FullCAcslParser.Abs.ConstantFloat $1 }
  | Char { FullCAcsl.FullCAcslParser.Abs.ConstantChar $1 }

TypeName :: { FullCAcsl.FullCAcslParser.Abs.TypeName }
TypeName
  : DeclSpecList { FullCAcsl.FullCAcslParser.Abs.TypeNameDeclSpecList $1 }

ACSLProgram :: { FullCAcsl.FullCAcslParser.Abs.ACSLProgram }
ACSLProgram
  : 'ACSL_START' Annot 'ACSL_END' { FullCAcsl.FullCAcslParser.Abs.AnnotProgram $2 }
  | 'ACSL_START' LogicPTreeAnnot 'ACSL_END' { FullCAcsl.FullCAcslParser.Abs.AnnotationProgram $2 }

Annot :: { FullCAcsl.FullCAcslParser.Abs.Annot }
Annot : Code_Annot { FullCAcsl.FullCAcslParser.Abs.CodeAnnot $1 }

Code_Annot :: { FullCAcsl.FullCAcslParser.Abs.Code_Annot }
Code_Annot
  : Contract { FullCAcsl.FullCAcslParser.Abs.CodeAnnotContract $1 }

Contract :: { FullCAcsl.FullCAcslParser.Abs.Contract }
Contract
  : Requires Terminates Decreases SimpleClauses Behaviors CompleteOrDisjoint { FullCAcsl.FullCAcslParser.Abs.SimpleContract $1 $2 $3 $4 $5 $6 }

Requires :: { FullCAcsl.FullCAcslParser.Abs.Requires }
Requires
  : {- empty -} { FullCAcsl.FullCAcslParser.Abs.NoRequires }
  | NERequires { FullCAcsl.FullCAcslParser.Abs.SomeRequires $1 }

NERequires :: { FullCAcsl.FullCAcslParser.Abs.NERequires }
NERequires
  : 'requires' Lexpr ';' Requires { FullCAcsl.FullCAcslParser.Abs.SimpleRequires $2 $4 }
  | 'check' 'requires' Lexpr ';' Requires { FullCAcsl.FullCAcslParser.Abs.CheckRequires $3 $5 }
  | 'admit' 'requires' Lexpr ';' Requires { FullCAcsl.FullCAcslParser.Abs.AdimtRequires $3 $5 }

Terminates :: { FullCAcsl.FullCAcslParser.Abs.Terminates }
Terminates
  : {- empty -} { FullCAcsl.FullCAcslParser.Abs.NoTerminate }

Decreases :: { FullCAcsl.FullCAcslParser.Abs.Decreases }
Decreases
  : {- empty -} { FullCAcsl.FullCAcslParser.Abs.NoDecreases }

SimpleClauses :: { FullCAcsl.FullCAcslParser.Abs.SimpleClauses }
SimpleClauses
  : {- empty -} { FullCAcsl.FullCAcslParser.Abs.NoSimpleClauses }
  | NESimpleClauses { FullCAcsl.FullCAcslParser.Abs.SomeSimpleClauses $1 }

NESimpleClauses :: { FullCAcsl.FullCAcslParser.Abs.NESimpleClauses }
NESimpleClauses
  : PostCond Lexpr ';' SimpleClauses { FullCAcsl.FullCAcslParser.Abs.PostCondSimpleClauses $1 $2 $4 }
  | 'assigns' Assigns ';' SimpleClauses { FullCAcsl.FullCAcslParser.Abs.AssignsSimpleClauses $2 $4 }

Assigns :: { FullCAcsl.FullCAcslParser.Abs.Assigns }
Assigns
  : Zones { FullCAcsl.FullCAcslParser.Abs.AssignZone $1 }
  | ListLexpr '\\from' Zones { FullCAcsl.FullCAcslParser.Abs.AssignZoneFromZone $1 $3 }

Zones :: { FullCAcsl.FullCAcslParser.Abs.Zones }
Zones
  : ListLexpr { FullCAcsl.FullCAcslParser.Abs.SomeZone $1 }
  | '\\nothing' { FullCAcsl.FullCAcslParser.Abs.NoZone }

Behaviors :: { FullCAcsl.FullCAcslParser.Abs.Behaviors }
Behaviors
  : {- empty -} { FullCAcsl.FullCAcslParser.Abs.NoBehaviors }

CompleteOrDisjoint :: { FullCAcsl.FullCAcslParser.Abs.CompleteOrDisjoint }
CompleteOrDisjoint
  : {- empty -} { FullCAcsl.FullCAcslParser.Abs.NoComplDisj }

Lexpr :: { FullCAcsl.FullCAcslParser.Abs.Lexpr }
Lexpr
  : Lexpr '==>' Lexpr1 { FullCAcsl.FullCAcslParser.Abs.ImplLexpr $1 $3 }
  | Lexpr '<==>' Lexpr1 { FullCAcsl.FullCAcslParser.Abs.IffLexpr $1 $3 }
  | Lexpr '||' Lexpr1 { FullCAcsl.FullCAcslParser.Abs.OrLexpr $1 $3 }
  | Lexpr '&&' Lexpr1 { FullCAcsl.FullCAcslParser.Abs.AndLexpr $1 $3 }
  | Lexpr '^^' Lexpr1 { FullCAcsl.FullCAcslParser.Abs.HatHatLexpr $1 $3 }
  | Lexpr1 { $1 }

ListLexpr :: { [FullCAcsl.FullCAcslParser.Abs.Lexpr] }
ListLexpr : Lexpr { (:[]) $1 } | Lexpr ',' ListLexpr { (:) $1 $3 }

Lexpr1 :: { FullCAcsl.FullCAcslParser.Abs.Lexpr }
Lexpr1
  : Lexpr2 { $1 }
  | Lexpr3 ListLexprRelInner Relation Lexpr2 { FullCAcsl.FullCAcslParser.Abs.RelationLexpr $1 $2 $3 $4 }

LexprRelInner :: { FullCAcsl.FullCAcslParser.Abs.LexprRelInner }
LexprRelInner
  : Relation Lexpr3 { FullCAcsl.FullCAcslParser.Abs.RelInnerLexpr $1 $2 }

ListLexprRelInner :: { [FullCAcsl.FullCAcslParser.Abs.LexprRelInner] }
ListLexprRelInner
  : {- empty -} { [] }
  | LexprRelInner ListLexprRelInner { (:) $1 $2 }

Relation :: { FullCAcsl.FullCAcslParser.Abs.Relation }
Relation
  : '<' { FullCAcsl.FullCAcslParser.Abs.LessRel }
  | '>' { FullCAcsl.FullCAcslParser.Abs.GreaterRel }
  | '<=' { FullCAcsl.FullCAcslParser.Abs.LessEqRel }
  | '>=' { FullCAcsl.FullCAcslParser.Abs.GreaterEqRel }
  | '==' { FullCAcsl.FullCAcslParser.Abs.EqRel }
  | '!=' { FullCAcsl.FullCAcslParser.Abs.NotEqRel }

Lexpr2 :: { FullCAcsl.FullCAcslParser.Abs.Lexpr }
Lexpr2
  : Lexpr3 { $1 }
  | LexprBinder { FullCAcsl.FullCAcslParser.Abs.BinderLexpr $1 }
  | '!' LexprBinder { FullCAcsl.FullCAcslParser.Abs.NotBinderLexpr $2 }

LexprBinder :: { FullCAcsl.FullCAcslParser.Abs.LexprBinder }
LexprBinder
  : '\\forall' Binders ';' Lexpr { FullCAcsl.FullCAcslParser.Abs.ForallBinderLexpr $2 $4 }
  | '\\exists' Binders ';' Lexpr { FullCAcsl.FullCAcslParser.Abs.ExistBinderLexpr $2 $4 }
  | '\\lambda' Binders ';' Lexpr { FullCAcsl.FullCAcslParser.Abs.LambdaBinderLexpr $2 $4 }

Binders :: { FullCAcsl.FullCAcslParser.Abs.Binders }
Binders
  : TypeSpecOFTYPENAME VarSpec ListBindersReentrance { FullCAcsl.FullCAcslParser.Abs.TheBinders $1 $2 $3 }

TypeSpecOFTYPENAME :: { FullCAcsl.FullCAcslParser.Abs.TypeSpecOFTYPENAME }
TypeSpecOFTYPENAME
  : Ident { FullCAcsl.FullCAcslParser.Abs.TypeSpecTYPENAME $1 }
  | TypeSpecSimple { FullCAcsl.FullCAcslParser.Abs.TypeSpecSimpleFromTypenameTypeSpec $1 }

BindersReentrance :: { FullCAcsl.FullCAcslParser.Abs.BindersReentrance }
BindersReentrance
  : ',' TypeSpecOFTYPENAME VarSpec { FullCAcsl.FullCAcslParser.Abs.BindersReentranceDeclSpec $2 $3 }
  | ',' VarSpec { FullCAcsl.FullCAcslParser.Abs.BindersReentranceVarSpec $2 }

ListBindersReentrance :: { [FullCAcsl.FullCAcslParser.Abs.BindersReentrance] }
ListBindersReentrance
  : {- empty -} { [] }
  | BindersReentrance ListBindersReentrance { (:) $1 $2 }

VarSpec :: { FullCAcsl.FullCAcslParser.Abs.VarSpec }
VarSpec
  : VarSpec1 { $1 }
  | ListStars VarSpec1 { FullCAcsl.FullCAcslParser.Abs.StartVarSpec $1 $2 }

Stars :: { FullCAcsl.FullCAcslParser.Abs.Stars }
Stars : '*' { FullCAcsl.FullCAcslParser.Abs.Star }

ListStars :: { [FullCAcsl.FullCAcslParser.Abs.Stars] }
ListStars : Stars { (:[]) $1 } | Stars ListStars { (:) $1 $2 }

VarSpec1 :: { FullCAcsl.FullCAcslParser.Abs.VarSpec }
VarSpec1
  : FullIdentifier { FullCAcsl.FullCAcslParser.Abs.SimpleSpec $1 }
  | VarSpec1 '[' ArraySize ']' { FullCAcsl.FullCAcslParser.Abs.ArraySpec $1 $3 }
  | '(' VarSpec ')' { $2 }

ArraySize :: { FullCAcsl.FullCAcslParser.Abs.ArraySize }
ArraySize
  : Integer { FullCAcsl.FullCAcslParser.Abs.IntConstArraySize $1 }
  | FullIdentifier { FullCAcsl.FullCAcslParser.Abs.SomeArraySize $1 }
  | {- empty -} { FullCAcsl.FullCAcslParser.Abs.NoSize }

Lexpr3 :: { FullCAcsl.FullCAcslParser.Abs.Lexpr }
Lexpr3
  : '\\true' { FullCAcsl.FullCAcslParser.Abs.TrueLexpr }
  | '\\false' { FullCAcsl.FullCAcslParser.Abs.FalseLexpr }
  | '\\valid' OptLabel1 '(' Lexpr ')' { FullCAcsl.FullCAcslParser.Abs.ValidLexpr $2 $4 }
  | '\\automatic' { FullCAcsl.FullCAcslParser.Abs.AutomaticLexpr }
  | '\\dynamic' { FullCAcsl.FullCAcslParser.Abs.DynamicLexpr }
  | '\\register' { FullCAcsl.FullCAcslParser.Abs.RegisterLexpr }
  | '\\static' { FullCAcsl.FullCAcslParser.Abs.StaticLexpr }
  | '\\unallocated' { FullCAcsl.FullCAcslParser.Abs.UnallocatedLexpr }
  | '\\null' { FullCAcsl.FullCAcslParser.Abs.NullLexpr }
  | Integer { FullCAcsl.FullCAcslParser.Abs.LexprIntConst $1 }
  | Double { FullCAcsl.FullCAcslParser.Abs.LexprFloatConst $1 }
  | String { FullCAcsl.FullCAcslParser.Abs.LexprStringConst $1 }
  | Lexpr3 '+' Lexpr3 { FullCAcsl.FullCAcslParser.Abs.AddLexpr $1 $3 }
  | Lexpr3 '-' Lexpr3 { FullCAcsl.FullCAcslParser.Abs.SubtrLexpr $1 $3 }
  | Lexpr3 '[' Range ']' { FullCAcsl.FullCAcslParser.Abs.SquaresRangeLexpr $1 $3 }
  | Lexpr3 '[' Lexpr ']' { FullCAcsl.FullCAcslParser.Abs.SquaresLexpr $1 $3 }
  | '\\separated' '(' ListLexpr ')' { FullCAcsl.FullCAcslParser.Abs.SeparatedLexpr $3 }
  | FullIdentifier '(' ListLexpr ')' { FullCAcsl.FullCAcslParser.Abs.FullIdParenLexpr $1 $3 }
  | FullIdentifier { FullCAcsl.FullCAcslParser.Abs.FullId $1 }
  | '\\pi' { FullCAcsl.FullCAcslParser.Abs.PiLexpr }
  | '(' Lexpr ')' { $2 }
  | '(' Range ')' { FullCAcsl.FullCAcslParser.Abs.ParenRangeLexpr $2 }

OptLabel1 :: { FullCAcsl.FullCAcslParser.Abs.OptLabel }
OptLabel1
  : OptLabelList { FullCAcsl.FullCAcslParser.Abs.OptLabelOne $1 }

OptLabel2 :: { FullCAcsl.FullCAcslParser.Abs.OptLabel }
OptLabel2
  : OptLabelList { FullCAcsl.FullCAcslParser.Abs.OptLabelTwo $1 }

OptLabelList :: { FullCAcsl.FullCAcslParser.Abs.OptLabelList }
OptLabelList
  : {- empty -} { FullCAcsl.FullCAcslParser.Abs.NoLableList }
  | '{' ListLabelName '}' { FullCAcsl.FullCAcslParser.Abs.LableList $2 }

LabelName :: { FullCAcsl.FullCAcslParser.Abs.LabelName }
LabelName
  : AnyIdentifier { FullCAcsl.FullCAcslParser.Abs.LableName $1 }

ListLabelName :: { [FullCAcsl.FullCAcslParser.Abs.LabelName] }
ListLabelName
  : LabelName { (:[]) $1 }
  | LabelName ',' ListLabelName { (:) $1 $3 }

Range :: { FullCAcsl.FullCAcslParser.Abs.Range }
Range
  : LexprOption '..' LexprOption { FullCAcsl.FullCAcslParser.Abs.LexprRange $1 $3 }

LexprOption :: { FullCAcsl.FullCAcslParser.Abs.LexprOption }
LexprOption
  : {- empty -} { FullCAcsl.FullCAcslParser.Abs.NoLexprOption }
  | Lexpr { FullCAcsl.FullCAcslParser.Abs.SomeLexprOption $1 }

AnyIdentifier :: { FullCAcsl.FullCAcslParser.Abs.AnyIdentifier }
AnyIdentifier
  : Identifier { FullCAcsl.FullCAcslParser.Abs.SimpleIdentifierAny $1 }

PostCond :: { FullCAcsl.FullCAcslParser.Abs.PostCond }
PostCond
  : 'ensures' { FullCAcsl.FullCAcslParser.Abs.EnsuresKeyWord }
  | 'exits' { FullCAcsl.FullCAcslParser.Abs.ExitsKeyWord }
  | 'breaks' { FullCAcsl.FullCAcslParser.Abs.BreaksKeyWord }
  | 'continues' { FullCAcsl.FullCAcslParser.Abs.ContinuesKeyWord }
  | 'returns' { FullCAcsl.FullCAcslParser.Abs.ReturnsKeyWord }
  | 'check' 'ensures' { FullCAcsl.FullCAcslParser.Abs.CheckEnsuresKeyWord }
  | 'check' 'exits' { FullCAcsl.FullCAcslParser.Abs.CheckExitsKeyWord }
  | 'check' 'breaks' { FullCAcsl.FullCAcslParser.Abs.CheckBreaksKeyWord }
  | 'check' 'continues' { FullCAcsl.FullCAcslParser.Abs.CheckContinuesKeyWord }
  | 'check' 'returns' { FullCAcsl.FullCAcslParser.Abs.CheckReturnsKeyWord }
  | 'admit' 'ensures' { FullCAcsl.FullCAcslParser.Abs.AdmitEnsuresKeyWord }
  | 'admit' 'exits' { FullCAcsl.FullCAcslParser.Abs.AdmitExitsKeyWord }
  | 'admit' 'breaks' { FullCAcsl.FullCAcslParser.Abs.AdmitBreaksKeyWord }
  | 'admit' 'continues' { FullCAcsl.FullCAcslParser.Abs.AdmitContinuesKeyWord }
  | 'admit' 'returns' { FullCAcsl.FullCAcslParser.Abs.AdmitReturnsKeyWord }

FullIdentifier :: { FullCAcsl.FullCAcslParser.Abs.FullIdentifier }
FullIdentifier
  : Identifier { FullCAcsl.FullCAcslParser.Abs.SimpleIdentifierFull $1 }

ListFullIdentifier :: { [FullCAcsl.FullCAcslParser.Abs.FullIdentifier] }
ListFullIdentifier
  : FullIdentifier { (:[]) $1 }
  | FullIdentifier ',' ListFullIdentifier { (:) $1 $3 }

Identifier :: { FullCAcsl.FullCAcslParser.Abs.Identifier }
Identifier
  : Ident { FullCAcsl.FullCAcslParser.Abs.IdentifierIdent $1 }

TypeSpecSimple :: { FullCAcsl.FullCAcslParser.Abs.TypeSpecSimple }
TypeSpecSimple
  : 'integer' { FullCAcsl.FullCAcslParser.Abs.TypeSpecSimpleIntegerKeyWord }
  | 'real' { FullCAcsl.FullCAcslParser.Abs.TypeSpecSimpleRealKeyWord }
  | 'boolean' { FullCAcsl.FullCAcslParser.Abs.TypeSpecSimpleBooleanKeyWord }
  | 'void' { FullCAcsl.FullCAcslParser.Abs.TypeSpecSimpleVoidKeyWord }
  | '_Bool' { FullCAcsl.FullCAcslParser.Abs.TypeSpecSimpleBoolKeyWord }
  | 'char' { FullCAcsl.FullCAcslParser.Abs.TypeSpecSimpleCharKeyWord }
  | 'int' { FullCAcsl.FullCAcslParser.Abs.TypeSpecSimpleIntKeyWord }
  | 'double' { FullCAcsl.FullCAcslParser.Abs.TypeSpecSimpleDoubleKeyWord }
  | 'long' 'double' { FullCAcsl.FullCAcslParser.Abs.TypeSpecSimpleLongDoubleKeyWord }

LogicPTreeAnnot :: { FullCAcsl.FullCAcslParser.Abs.LogicPTreeAnnot }
LogicPTreeAnnot
  : Annotation { FullCAcsl.FullCAcslParser.Abs.AnAnnotation $1 }

Annotation :: { FullCAcsl.FullCAcslParser.Abs.Annotation }
Annotation
  : LoopAnnotStack { FullCAcsl.FullCAcslParser.Abs.LoopAnnotation $1 }

LoopAnnotStack :: { FullCAcsl.FullCAcslParser.Abs.LoopAnnotStack }
LoopAnnotStack
  : LoopInvariant LoopAnnotOpt { FullCAcsl.FullCAcslParser.Abs.LoopAnnotStackInvariant $1 $2 }
  | LoopEffects LoopAnnotOpt { FullCAcsl.FullCAcslParser.Abs.LoopAnnotStackEffects $1 $2 }
  | LoopVariant LoopAnnotOpt { FullCAcsl.FullCAcslParser.Abs.LoopAnnotStackVariant $1 $2 }

LoopAnnotOpt :: { FullCAcsl.FullCAcslParser.Abs.LoopAnnotOpt }
LoopAnnotOpt
  : {- empty -} { FullCAcsl.FullCAcslParser.Abs.NoLoopAnnot }
  | LoopAnnotStack { FullCAcsl.FullCAcslParser.Abs.SomeLoopAnnot $1 }

LoopInvariant :: { FullCAcsl.FullCAcslParser.Abs.LoopInvariant }
LoopInvariant
  : 'loop' 'invariant' Lexpr ';' { FullCAcsl.FullCAcslParser.Abs.SimpleLoopInvariant $3 }
  | 'check' 'loop' 'invariant' Lexpr ';' { FullCAcsl.FullCAcslParser.Abs.CheckLoopInvariant $4 }
  | 'admit' 'loop' 'invariant' Lexpr ';' { FullCAcsl.FullCAcslParser.Abs.AdmitLoopInvariant $4 }

LoopVariant :: { FullCAcsl.FullCAcslParser.Abs.LoopVariant }
LoopVariant
  : 'loop' 'variant' Variant ';' { FullCAcsl.FullCAcslParser.Abs.SimpleLoopVariant $3 }

LoopEffects :: { FullCAcsl.FullCAcslParser.Abs.LoopEffects }
LoopEffects
  : 'loop' 'assigns' Assigns ';' { FullCAcsl.FullCAcslParser.Abs.LoopAssigns $3 }

Variant :: { FullCAcsl.FullCAcslParser.Abs.Variant }
Variant
  : Lexpr 'for' AnyIdentifier { FullCAcsl.FullCAcslParser.Abs.ForVariant $1 $3 }
  | Lexpr { FullCAcsl.FullCAcslParser.Abs.LexprVariant $1 }

{

type Err = Either String

happyError :: [Token] -> Err a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer :: String -> [Token]
myLexer = tokens

}

