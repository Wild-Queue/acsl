/* File generated by the BNF Converter (bnfc 2.9.4.1). */

#ifndef PARTIAN_ACSL_SKELETON_HEADER
#define PARTIAN_ACSL_SKELETON_HEADER
/* You might want to change the above name. */

#include "Absyn.H"

namespace partian_acsl
{
class Skeleton : public Visitor
{
public:
  void visitProgram(Program *p);
  void visitGlobals(Globals *p);
  void visitGlobal(Global *p);
  void visitFunctionDef(FunctionDef *p);
  void visitBlock(Block *p);
  void visitFunctionDefStart(FunctionDefStart *p);
  void visitDeclSpecList(DeclSpecList *p);
  void visitDeclSpecListNoNamed(DeclSpecListNoNamed *p);
  void visitTypeSpec(TypeSpec *p);
  void visitDeclarator(Declarator *p);
  void visitPointerOpt(PointerOpt *p);
  void visitDirectDecl(DirectDecl *p);
  void visitAttributesWithAsm(AttributesWithAsm *p);
  void visitRestParList(RestParList *p);
  void visitParameterDecl(ParameterDecl *p);
  void visitGhostParameterOpt(GhostParameterOpt *p);
  void visitIdOrTypename(IdOrTypename *p);
  void visitIdOrTypenameAsId(IdOrTypenameAsId *p);
  void visitDeclaration(Declaration *p);
  void visitDeclAndInitDeclAttrList(DeclAndInitDeclAttrList *p);
  void visitInitDeclaratorAttr(InitDeclaratorAttr *p);
  void visitInitDeclarator(InitDeclarator *p);
  void visitStructDeclList(StructDeclList *p);
  void visitFieldDecl(FieldDecl *p);
  void visitAttribute(Attribute *p);
  void visitAProgram(AProgram *p);
  void visitNoGlobals(NoGlobals *p);
  void visitSimpleGlobals(SimpleGlobals *p);
  void visitSemiColonGlobals(SemiColonGlobals *p);
  void visitGlobalsDeclataion(GlobalsDeclataion *p);
  void visitGlobalsFunctionDef(GlobalsFunctionDef *p);
  void visitSimpleFunctionDef(SimpleFunctionDef *p);
  void visitABlock(ABlock *p);
  void visitFunctionDefStartDeclarator(FunctionDefStartDeclarator *p);
  void visitDeclSpecTypeSpec(DeclSpecTypeSpec *p);
  void visitDeclSpecTypeSpecNext(DeclSpecTypeSpecNext *p);
  void visitDeclSpecNoNamedTypeSpec(DeclSpecNoNamedTypeSpec *p);
  void visitDeclSpecNoNamedTypeSpecNext(DeclSpecNoNamedTypeSpecNext *p);
  void visitTypeSpecVoidKeyWord(TypeSpecVoidKeyWord *p);
  void visitTypeSpecCharKeyWord(TypeSpecCharKeyWord *p);
  void visitTypeSpecBoolKeyWord(TypeSpecBoolKeyWord *p);
  void visitTypeSpecShortKeyWord(TypeSpecShortKeyWord *p);
  void visitTypeSpecInt32KeyWord(TypeSpecInt32KeyWord *p);
  void visitTypeSpecIntKeyWord(TypeSpecIntKeyWord *p);
  void visitTypeSpecLongKeyWord(TypeSpecLongKeyWord *p);
  void visitTypeSpecInt64KeyWord(TypeSpecInt64KeyWord *p);
  void visitTypeSpecFloatKeyWord(TypeSpecFloatKeyWord *p);
  void visitTypeSpecDoubleKeyWord(TypeSpecDoubleKeyWord *p);
  void visitTypeSpecSignedKeyWord(TypeSpecSignedKeyWord *p);
  void visitTypeSpecUnsignedKeyWord(TypeSpecUnsignedKeyWord *p);
  void visitStructId(StructId *p);
  void visitStructIdBraces(StructIdBraces *p);
  void visitStructBraces(StructBraces *p);
  void visitADeclarator(ADeclarator *p);
  void visitNoPointer(NoPointer *p);
  void visitSomePointer(SomePointer *p);
  void visitDirectDeclIdTypename(DirectDeclIdTypename *p);
  void visitDirectDeclGhostParam(DirectDeclGhostParam *p);
  void visitDirectDeclGhostRestParParam(DirectDeclGhostRestParParam *p);
  void visitEmptyAttrWithASM(EmptyAttrWithASM *p);
  void visitSimpleParameterDecl(SimpleParameterDecl *p);
  void visitParameterDeclSpecDeclarator(ParameterDeclSpecDeclarator *p);
  void visitParameterDeclSpec(ParameterDeclSpec *p);
  void visitParameterDeclPar(ParameterDeclPar *p);
  void visitNoGhostParameter(NoGhostParameter *p);
  void visitIdTypename(IdTypename *p);
  void visitIdOrTypenameAsIdIdentifier(IdOrTypenameAsIdIdentifier *p);
  void visitDeclSpecInitDecl(DeclSpecInitDecl *p);
  void visitDeclSpec(DeclSpec *p);
  void visitInitDeclaration(InitDeclaration *p);
  void visitInitDeclarationWithAttr(InitDeclarationWithAttr *p);
  void visitInitDeclaratorAttribute(InitDeclaratorAttribute *p);
  void visitSimpleInitDeclarator(SimpleInitDeclarator *p);
  void visitEmptyStructDecl(EmptyStructDecl *p);
  void visitDeclSpecStructDecl(DeclSpecStructDecl *p);
  void visitSemicolonStructDecl(SemicolonStructDecl *p);
  void visitSpecFieldDeclStructDecl(SpecFieldDeclStructDecl *p);
  void visitFieldDeclDeclarator(FieldDeclDeclarator *p);
  void visitAttributeConst(AttributeConst *p);
  void visitListDeclarator(ListDeclarator *p);
  void visitListParameterDecl(ListParameterDecl *p);
  void visitListInitDeclaratorAttr(ListInitDeclaratorAttr *p);
  void visitListFieldDecl(ListFieldDecl *p);
  void visitListAttribute(ListAttribute *p);

  void visitInteger(Integer x);
  void visitChar(Char x);
  void visitDouble(Double x);
  void visitString(String x);
  void visitIdent(Ident x);
  void visitSIGNED(SIGNED x);
  void visitLBRACE(LBRACE x);
  void visitRBRACE(RBRACE x);
  void visitCONST(CONST x);
  void visitRESTRICT(RESTRICT x);
  void visitVOLATILE(VOLATILE x);

};
}

#endif
