/* -*- c++ -*- File generated by the BNF Converter (bnfc 2.9.4.1). */

/* Lexer definition for use with FLex */

%option noyywrap noinput nounput
%option reentrant bison-bridge bison-locations

%option prefix="partian_acsl"
%{
#include "Absyn.H"
#include "Bison.H"

#define initialize_lexer partian_acsl_initialize_lexer

static void update_loc(YYLTYPE* loc, char* text)
{
  loc->first_line = loc->last_line;
  loc->first_column = loc->last_column;
  int i = 0;
  for (; text[i] != '\0'; ++i) {
      if (text[i] == '\n') {
          ++loc->last_line;
          loc->last_column = 0;
      } else {
          ++loc->last_column;
      }
  }
}
#define YY_USER_ACTION update_loc(yylloc, yytext);

%}

LETTER [a-zA-Z]
CAPITAL [A-Z]
SMALL [a-z]
DIGIT [0-9]
IDENT [a-zA-Z0-9'_]
%START CHAR CHARESC CHAREND STRING ESCAPED

%%  /* Rules. */

<INITIAL>";"      	 return _SEMI;
<INITIAL>"_Bool"      	 return _SYMB_1;
<INITIAL>"__int32"      	 return _SYMB_2;
<INITIAL>"__int64"      	 return _SYMB_3;
<INITIAL>","      	 return _COMMA;
<INITIAL>"*"      	 return _STAR;
<INITIAL>"("      	 return _LPAREN;
<INITIAL>")"      	 return _RPAREN;
<INITIAL>"char"      	 return _KW_char;
<INITIAL>"double"      	 return _KW_double;
<INITIAL>"float"      	 return _KW_float;
<INITIAL>"int"      	 return _KW_int;
<INITIAL>"long"      	 return _KW_long;
<INITIAL>"short"      	 return _KW_short;
<INITIAL>"unsigned"      	 return _KW_unsigned;
<INITIAL>"void"      	 return _KW_void;



<INITIAL>\_\_signed\_\_|signed|\_\_signed    	 yylval->_string = strdup(yytext); return T_SIGNED;
<INITIAL>\<\%|\{    	 yylval->_string = strdup(yytext); return T_LBRACE;
<INITIAL>\%\>|\}    	 yylval->_string = strdup(yytext); return T_RBRACE;
<INITIAL>{LETTER}{IDENT}*      	 yylval->_string = strdup(yytext); return _IDENT_;
<INITIAL>[ \t\r\n\f]      	 /* ignore white space. */;
<INITIAL>.      	 return _ERROR_;

%%  /* Initialization code. */

yyscan_t initialize_lexer(FILE *inp)
{
  yyscan_t scanner;
  if (yylex_init_extra(NULL, &scanner)) return 0;
  if (inp) yyrestart(inp, scanner);
  return scanner;
}

