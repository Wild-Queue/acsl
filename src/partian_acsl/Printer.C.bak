/* File generated by the BNF Converter (bnfc 2.9.4.1). */

/*** Pretty Printer and Abstract Syntax Viewer ***/

#include <string>
#include "Printer.H"
#define INDENT_WIDTH 2

namespace partian_acsl
{
//You may wish to change render
void PrintAbsyn::render(Char c)
{
  if (c == '{')
  {
     onEmptyLine();
     bufAppend(c);
     _n_ = _n_ + INDENT_WIDTH;
     bufAppend('\n');
     indent();
  }
  else if (c == '(' || c == '[')
     bufAppend(c);
  else if (c == ')' || c == ']')
  {
     removeTrailingWhitespace();
     bufAppend(c);
     bufAppend(' ');
  }
  else if (c == '}')
  {
     _n_ = _n_ - INDENT_WIDTH;
     onEmptyLine();
     bufAppend(c);
     bufAppend('\n');
     indent();
  }
  else if (c == ',')
  {
     removeTrailingWhitespace();
     bufAppend(c);
     bufAppend(' ');
  }
  else if (c == ';')
  {
     removeTrailingWhitespace();
     bufAppend(c);
     bufAppend('\n');
     indent();
  }
  else if (c == ' ') bufAppend(c);
  else if (c == 0) return;
  else
  {
     bufAppend(c);
     bufAppend(' ');
  }
}

void PrintAbsyn::render(String s)
{
  render(s.c_str());
}

bool allIsSpace(const char *s)
{
  char c;
  while ((c = *s++))
    if (! isspace(c)) return false;
  return true;
}

void PrintAbsyn::render(const char *s)
{
  if (*s) /* C string not empty */
  {
    if (allIsSpace(s)) {
      backup();
      bufAppend(s);
    } else {
      bufAppend(s);
      bufAppend(' ');
    }
  }
}

void PrintAbsyn::indent()
{
  int n = _n_;
  while (--n >= 0)
    bufAppend(' ');
}

void PrintAbsyn::backup()
{
  if (cur_ && buf_[cur_ - 1] == ' ')
    buf_[--cur_] = 0;
}

void PrintAbsyn::removeTrailingSpaces()
{
  while (cur_ && buf_[cur_ - 1] == ' ') --cur_;
  buf_[cur_] = 0;
}

void PrintAbsyn::removeTrailingWhitespace()
{
  while (cur_ && (buf_[cur_ - 1] == ' ' || buf_[cur_ - 1] == '\n')) --cur_;
  buf_[cur_] = 0;
}

void PrintAbsyn::onEmptyLine()
{
  removeTrailingSpaces();
  if (cur_ && buf_[cur_ - 1 ] != '\n') bufAppend('\n');
  indent();
}

PrintAbsyn::PrintAbsyn(void)
{
  _i_ = 0; _n_ = 0;
  buf_ = 0;
  bufReset();
}

PrintAbsyn::~PrintAbsyn(void)
{
}

char *PrintAbsyn::print(Visitable *v)
{
  _i_ = 0; _n_ = 0;
  bufReset();
  v->accept(this);
  return buf_;
}

void PrintAbsyn::visitProgram(Program *p) {} //abstract class

void PrintAbsyn::visitAProgram(AProgram *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAN_ACSL__L_PAREN);

  _i_ = 0; p->globals_->accept(this);

  if (oldi > 0) render(PARTIAN_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitGlobals(Globals *p) {} //abstract class

void PrintAbsyn::visitNoGlobals(NoGlobals *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAN_ACSL__L_PAREN);


  if (oldi > 0) render(PARTIAN_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitSimpleGlobals(SimpleGlobals *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAN_ACSL__L_PAREN);

  _i_ = 0; p->global_->accept(this);
  _i_ = 0; p->globals_->accept(this);

  if (oldi > 0) render(PARTIAN_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitSemiColonGlobals(SemiColonGlobals *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAN_ACSL__L_PAREN);

  render(';');
  _i_ = 0; p->globals_->accept(this);

  if (oldi > 0) render(PARTIAN_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitGlobal(Global *p) {} //abstract class

void PrintAbsyn::visitGlobalsFunctionDef(GlobalsFunctionDef *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAN_ACSL__L_PAREN);

  _i_ = 0; p->functiondef_->accept(this);

  if (oldi > 0) render(PARTIAN_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitFunctionDef(FunctionDef *p) {} //abstract class

void PrintAbsyn::visitSimpleFunctionDef(SimpleFunctionDef *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAN_ACSL__L_PAREN);

  _i_ = 0; p->functiondefstart_->accept(this);
  _i_ = 0; p->block_->accept(this);

  if (oldi > 0) render(PARTIAN_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitBlock(Block *p) {} //abstract class

void PrintAbsyn::visitABlock(ABlock *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAN_ACSL__L_PAREN);

  visitLBRACE(p->lbrace_);
  visitRBRACE(p->rbrace_);

  if (oldi > 0) render(PARTIAN_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitFunctionDefStart(FunctionDefStart *p) {} //abstract class

void PrintAbsyn::visitFunctionDefStartDeclarator(FunctionDefStartDeclarator *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAN_ACSL__L_PAREN);

  _i_ = 0; p->declspeclist_->accept(this);
  _i_ = 0; p->declarator_->accept(this);

  if (oldi > 0) render(PARTIAN_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitDeclSpecList(DeclSpecList *p) {} //abstract class

void PrintAbsyn::visitDeclSpecTypeSpec(DeclSpecTypeSpec *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAN_ACSL__L_PAREN);

  _i_ = 0; p->typespec_->accept(this);

  if (oldi > 0) render(PARTIAN_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitDeclSpecTypeSpecNext(DeclSpecTypeSpecNext *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAN_ACSL__L_PAREN);

  _i_ = 0; p->typespec_->accept(this);
  _i_ = 0; p->declspeclistnonamed_->accept(this);

  if (oldi > 0) render(PARTIAN_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitDeclSpecListNoNamed(DeclSpecListNoNamed *p) {} //abstract class

void PrintAbsyn::visitDeclSpecNoNamedTypeSpec(DeclSpecNoNamedTypeSpec *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAN_ACSL__L_PAREN);

  _i_ = 0; p->typespec_->accept(this);

  if (oldi > 0) render(PARTIAN_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitDeclSpecNoNamedTypeSpecNext(DeclSpecNoNamedTypeSpecNext *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAN_ACSL__L_PAREN);

  _i_ = 0; p->typespec_->accept(this);
  _i_ = 0; p->declspeclistnonamed_->accept(this);

  if (oldi > 0) render(PARTIAN_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpec(TypeSpec *p) {} //abstract class

void PrintAbsyn::visitTypeSpecVoidKeyWord(TypeSpecVoidKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAN_ACSL__L_PAREN);

  render("void");

  if (oldi > 0) render(PARTIAN_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecCharKeyWord(TypeSpecCharKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAN_ACSL__L_PAREN);

  render("char");

  if (oldi > 0) render(PARTIAN_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecBoolKeyWord(TypeSpecBoolKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAN_ACSL__L_PAREN);

  render("_Bool");

  if (oldi > 0) render(PARTIAN_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecShortKeyWord(TypeSpecShortKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAN_ACSL__L_PAREN);

  render("short");

  if (oldi > 0) render(PARTIAN_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecInt32KeyWord(TypeSpecInt32KeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAN_ACSL__L_PAREN);

  render("__int32");

  if (oldi > 0) render(PARTIAN_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecIntKeyWord(TypeSpecIntKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAN_ACSL__L_PAREN);

  render("int");

  if (oldi > 0) render(PARTIAN_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecLongKeyWord(TypeSpecLongKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAN_ACSL__L_PAREN);

  render("long");

  if (oldi > 0) render(PARTIAN_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecInt64KeyWord(TypeSpecInt64KeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAN_ACSL__L_PAREN);

  render("__int64");

  if (oldi > 0) render(PARTIAN_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecFloatKeyWord(TypeSpecFloatKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAN_ACSL__L_PAREN);

  render("float");

  if (oldi > 0) render(PARTIAN_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecDoubleKeyWord(TypeSpecDoubleKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAN_ACSL__L_PAREN);

  render("double");

  if (oldi > 0) render(PARTIAN_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecSignedKeyWord(TypeSpecSignedKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAN_ACSL__L_PAREN);

  visitSIGNED(p->signed_);

  if (oldi > 0) render(PARTIAN_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitTypeSpecUnsignedKeyWord(TypeSpecUnsignedKeyWord *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAN_ACSL__L_PAREN);

  render("unsigned");

  if (oldi > 0) render(PARTIAN_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitDeclarator(Declarator *p) {} //abstract class

void PrintAbsyn::visitADeclarator(ADeclarator *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAN_ACSL__L_PAREN);

  _i_ = 0; p->pointeropt_->accept(this);
  _i_ = 0; p->directdecl_->accept(this);
  _i_ = 0; p->attributeswithasm_->accept(this);

  if (oldi > 0) render(PARTIAN_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitListDeclarator(ListDeclarator *listdeclarator)
{
  iterListDeclarator(listdeclarator->begin(), listdeclarator->end());
}

void PrintAbsyn::iterListDeclarator(ListDeclarator::const_iterator i, ListDeclarator::const_iterator j)
{
  if (i == j) return;
  if (i == j-1)
  { /* last */
    (*i)->accept(this);
  }
  else
  { /* cons */
    (*i)->accept(this); render(','); iterListDeclarator(i+1, j);
  }
}

void PrintAbsyn::visitPointerOpt(PointerOpt *p) {} //abstract class

void PrintAbsyn::visitNoPointer(NoPointer *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAN_ACSL__L_PAREN);


  if (oldi > 0) render(PARTIAN_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitSomePointer(SomePointer *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAN_ACSL__L_PAREN);

  render('*');
  _i_ = 0; p->pointeropt_->accept(this);

  if (oldi > 0) render(PARTIAN_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitDirectDecl(DirectDecl *p) {} //abstract class

void PrintAbsyn::visitDirectDeclIdTypename(DirectDeclIdTypename *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAN_ACSL__L_PAREN);

  _i_ = 0; p->idortypename_->accept(this);

  if (oldi > 0) render(PARTIAN_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitDirectDeclGhostParam(DirectDeclGhostParam *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAN_ACSL__L_PAREN);

  _i_ = 0; p->directdecl_->accept(this);
  render('(');
  render(')');
  _i_ = 0; p->ghostparameteropt_->accept(this);

  if (oldi > 0) render(PARTIAN_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitDirectDeclGhostRestParParam(DirectDeclGhostRestParParam *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAN_ACSL__L_PAREN);

  _i_ = 0; p->directdecl_->accept(this);
  render('(');
  _i_ = 0; p->restparlist_->accept(this);
  render(')');
  _i_ = 0; p->ghostparameteropt_->accept(this);

  if (oldi > 0) render(PARTIAN_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitAttributesWithAsm(AttributesWithAsm *p) {} //abstract class

void PrintAbsyn::visitEmptyAttrWithASM(EmptyAttrWithASM *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAN_ACSL__L_PAREN);


  if (oldi > 0) render(PARTIAN_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitRestParList(RestParList *p) {} //abstract class

void PrintAbsyn::visitSimpleParameterDecl(SimpleParameterDecl *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAN_ACSL__L_PAREN);

  _i_ = 0; visitListParameterDecl(p->listparameterdecl_);

  if (oldi > 0) render(PARTIAN_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitParameterDecl(ParameterDecl *p) {} //abstract class

void PrintAbsyn::visitParameterDeclSpecDeclarator(ParameterDeclSpecDeclarator *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAN_ACSL__L_PAREN);

  _i_ = 0; p->declspeclist_->accept(this);
  _i_ = 0; p->declarator_->accept(this);

  if (oldi > 0) render(PARTIAN_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitParameterDeclSpec(ParameterDeclSpec *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAN_ACSL__L_PAREN);

  _i_ = 0; p->declspeclist_->accept(this);

  if (oldi > 0) render(PARTIAN_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitParameterDeclPar(ParameterDeclPar *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAN_ACSL__L_PAREN);

  render('(');
  _i_ = 0; p->parameterdecl_->accept(this);
  render(')');

  if (oldi > 0) render(PARTIAN_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitListParameterDecl(ListParameterDecl *listparameterdecl)
{
  iterListParameterDecl(listparameterdecl->begin(), listparameterdecl->end());
}

void PrintAbsyn::iterListParameterDecl(ListParameterDecl::const_iterator i, ListParameterDecl::const_iterator j)
{
  if (i == j) return;
  if (i == j-1)
  { /* last */
    (*i)->accept(this);
  }
  else
  { /* cons */
    (*i)->accept(this); render(','); iterListParameterDecl(i+1, j);
  }
}

void PrintAbsyn::visitGhostParameterOpt(GhostParameterOpt *p) {} //abstract class

void PrintAbsyn::visitNoGhostParameter(NoGhostParameter *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAN_ACSL__L_PAREN);


  if (oldi > 0) render(PARTIAN_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitIdOrTypename(IdOrTypename *p) {} //abstract class

void PrintAbsyn::visitIdTypename(IdTypename *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAN_ACSL__L_PAREN);

  _i_ = 0; p->idortypenameasid_->accept(this);

  if (oldi > 0) render(PARTIAN_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitIdOrTypenameAsId(IdOrTypenameAsId *p) {} //abstract class

void PrintAbsyn::visitIdOrTypenameAsIdIdentifier(IdOrTypenameAsIdIdentifier *p)
{
  int oldi = _i_;
  if (oldi > 0) render(PARTIAN_ACSL__L_PAREN);

  visitIdent(p->ident_);

  if (oldi > 0) render(PARTIAN_ACSL__R_PAREN);
  _i_ = oldi;
}

void PrintAbsyn::visitInteger(Integer i)
{
  char tmp[20];
  sprintf(tmp, "%d", i);
  render(tmp);
}

void PrintAbsyn::visitDouble(Double d)
{
  char tmp[24];
  sprintf(tmp, "%.15g", d);
  render(tmp);
}

void PrintAbsyn::visitChar(Char c)
{
  char tmp[4];
  sprintf(tmp, "'%c'", c);
  render(tmp);
}

void PrintAbsyn::visitString(String s)
{
  bufAppend('\"');
  bufAppend(s);
  bufAppend('\"');
  bufAppend(' ');
}

void PrintAbsyn::visitIdent(String s)
{
  render(s);
}

void PrintAbsyn::visitSIGNED(String s)
{
  render(s);
}


void PrintAbsyn::visitLBRACE(String s)
{
  render(s);
}


void PrintAbsyn::visitRBRACE(String s)
{
  render(s);
}


ShowAbsyn::ShowAbsyn(void)
{
  buf_ = 0;
  bufReset();
}

ShowAbsyn::~ShowAbsyn(void)
{
}

char *ShowAbsyn::show(Visitable *v)
{
  bufReset();
  v->accept(this);
  return buf_;
}

void ShowAbsyn::visitProgram(Program *p) {} //abstract class

void ShowAbsyn::visitAProgram(AProgram *p)
{
  bufAppend('(');
  bufAppend("AProgram");
  bufAppend(' ');
  bufAppend('[');
  if (p->globals_)  p->globals_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitGlobals(Globals *p) {} //abstract class

void ShowAbsyn::visitNoGlobals(NoGlobals *p)
{
  bufAppend("NoGlobals");
}
void ShowAbsyn::visitSimpleGlobals(SimpleGlobals *p)
{
  bufAppend('(');
  bufAppend("SimpleGlobals");
  bufAppend(' ');
  bufAppend('[');
  if (p->global_)  p->global_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->globals_)  p->globals_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitSemiColonGlobals(SemiColonGlobals *p)
{
  bufAppend('(');
  bufAppend("SemiColonGlobals");
  bufAppend(' ');
  bufAppend('[');
  if (p->globals_)  p->globals_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitGlobal(Global *p) {} //abstract class

void ShowAbsyn::visitGlobalsFunctionDef(GlobalsFunctionDef *p)
{
  bufAppend('(');
  bufAppend("GlobalsFunctionDef");
  bufAppend(' ');
  bufAppend('[');
  if (p->functiondef_)  p->functiondef_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitFunctionDef(FunctionDef *p) {} //abstract class

void ShowAbsyn::visitSimpleFunctionDef(SimpleFunctionDef *p)
{
  bufAppend('(');
  bufAppend("SimpleFunctionDef");
  bufAppend(' ');
  bufAppend('[');
  if (p->functiondefstart_)  p->functiondefstart_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->block_)  p->block_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitBlock(Block *p) {} //abstract class

void ShowAbsyn::visitABlock(ABlock *p)
{
  bufAppend('(');
  bufAppend("ABlock");
  bufAppend(' ');
  visitLBRACE(p->lbrace_);
  bufAppend(' ');
  visitRBRACE(p->rbrace_);
  bufAppend(')');
}
void ShowAbsyn::visitFunctionDefStart(FunctionDefStart *p) {} //abstract class

void ShowAbsyn::visitFunctionDefStartDeclarator(FunctionDefStartDeclarator *p)
{
  bufAppend('(');
  bufAppend("FunctionDefStartDeclarator");
  bufAppend(' ');
  bufAppend('[');
  if (p->declspeclist_)  p->declspeclist_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->declarator_)  p->declarator_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitDeclSpecList(DeclSpecList *p) {} //abstract class

void ShowAbsyn::visitDeclSpecTypeSpec(DeclSpecTypeSpec *p)
{
  bufAppend('(');
  bufAppend("DeclSpecTypeSpec");
  bufAppend(' ');
  bufAppend('[');
  if (p->typespec_)  p->typespec_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitDeclSpecTypeSpecNext(DeclSpecTypeSpecNext *p)
{
  bufAppend('(');
  bufAppend("DeclSpecTypeSpecNext");
  bufAppend(' ');
  bufAppend('[');
  if (p->typespec_)  p->typespec_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->declspeclistnonamed_)  p->declspeclistnonamed_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitDeclSpecListNoNamed(DeclSpecListNoNamed *p) {} //abstract class

void ShowAbsyn::visitDeclSpecNoNamedTypeSpec(DeclSpecNoNamedTypeSpec *p)
{
  bufAppend('(');
  bufAppend("DeclSpecNoNamedTypeSpec");
  bufAppend(' ');
  bufAppend('[');
  if (p->typespec_)  p->typespec_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitDeclSpecNoNamedTypeSpecNext(DeclSpecNoNamedTypeSpecNext *p)
{
  bufAppend('(');
  bufAppend("DeclSpecNoNamedTypeSpecNext");
  bufAppend(' ');
  bufAppend('[');
  if (p->typespec_)  p->typespec_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->declspeclistnonamed_)  p->declspeclistnonamed_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitTypeSpec(TypeSpec *p) {} //abstract class

void ShowAbsyn::visitTypeSpecVoidKeyWord(TypeSpecVoidKeyWord *p)
{
  bufAppend("TypeSpecVoidKeyWord");
}
void ShowAbsyn::visitTypeSpecCharKeyWord(TypeSpecCharKeyWord *p)
{
  bufAppend("TypeSpecCharKeyWord");
}
void ShowAbsyn::visitTypeSpecBoolKeyWord(TypeSpecBoolKeyWord *p)
{
  bufAppend("TypeSpecBoolKeyWord");
}
void ShowAbsyn::visitTypeSpecShortKeyWord(TypeSpecShortKeyWord *p)
{
  bufAppend("TypeSpecShortKeyWord");
}
void ShowAbsyn::visitTypeSpecInt32KeyWord(TypeSpecInt32KeyWord *p)
{
  bufAppend("TypeSpecInt32KeyWord");
}
void ShowAbsyn::visitTypeSpecIntKeyWord(TypeSpecIntKeyWord *p)
{
  bufAppend("TypeSpecIntKeyWord");
}
void ShowAbsyn::visitTypeSpecLongKeyWord(TypeSpecLongKeyWord *p)
{
  bufAppend("TypeSpecLongKeyWord");
}
void ShowAbsyn::visitTypeSpecInt64KeyWord(TypeSpecInt64KeyWord *p)
{
  bufAppend("TypeSpecInt64KeyWord");
}
void ShowAbsyn::visitTypeSpecFloatKeyWord(TypeSpecFloatKeyWord *p)
{
  bufAppend("TypeSpecFloatKeyWord");
}
void ShowAbsyn::visitTypeSpecDoubleKeyWord(TypeSpecDoubleKeyWord *p)
{
  bufAppend("TypeSpecDoubleKeyWord");
}
void ShowAbsyn::visitTypeSpecSignedKeyWord(TypeSpecSignedKeyWord *p)
{
  bufAppend('(');
  bufAppend("TypeSpecSignedKeyWord");
  bufAppend(' ');
  visitSIGNED(p->signed_);
  bufAppend(')');
}
void ShowAbsyn::visitTypeSpecUnsignedKeyWord(TypeSpecUnsignedKeyWord *p)
{
  bufAppend("TypeSpecUnsignedKeyWord");
}
void ShowAbsyn::visitDeclarator(Declarator *p) {} //abstract class

void ShowAbsyn::visitADeclarator(ADeclarator *p)
{
  bufAppend('(');
  bufAppend("ADeclarator");
  bufAppend(' ');
  bufAppend('[');
  if (p->pointeropt_)  p->pointeropt_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->directdecl_)  p->directdecl_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->attributeswithasm_)  p->attributeswithasm_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitListDeclarator(ListDeclarator *listdeclarator)
{
  for (ListDeclarator::const_iterator i = listdeclarator->begin() ; i != listdeclarator->end() ; ++i)
  {
    (*i)->accept(this);
    if (i != listdeclarator->end() - 1) bufAppend(", ");
  }
}

void ShowAbsyn::visitPointerOpt(PointerOpt *p) {} //abstract class

void ShowAbsyn::visitNoPointer(NoPointer *p)
{
  bufAppend("NoPointer");
}
void ShowAbsyn::visitSomePointer(SomePointer *p)
{
  bufAppend('(');
  bufAppend("SomePointer");
  bufAppend(' ');
  bufAppend('[');
  if (p->pointeropt_)  p->pointeropt_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitDirectDecl(DirectDecl *p) {} //abstract class

void ShowAbsyn::visitDirectDeclIdTypename(DirectDeclIdTypename *p)
{
  bufAppend('(');
  bufAppend("DirectDeclIdTypename");
  bufAppend(' ');
  bufAppend('[');
  if (p->idortypename_)  p->idortypename_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitDirectDeclGhostParam(DirectDeclGhostParam *p)
{
  bufAppend('(');
  bufAppend("DirectDeclGhostParam");
  bufAppend(' ');
  bufAppend('[');
  if (p->directdecl_)  p->directdecl_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->ghostparameteropt_)  p->ghostparameteropt_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitDirectDeclGhostRestParParam(DirectDeclGhostRestParParam *p)
{
  bufAppend('(');
  bufAppend("DirectDeclGhostRestParParam");
  bufAppend(' ');
  bufAppend('[');
  if (p->directdecl_)  p->directdecl_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->restparlist_)  p->restparlist_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->ghostparameteropt_)  p->ghostparameteropt_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitAttributesWithAsm(AttributesWithAsm *p) {} //abstract class

void ShowAbsyn::visitEmptyAttrWithASM(EmptyAttrWithASM *p)
{
  bufAppend("EmptyAttrWithASM");
}
void ShowAbsyn::visitRestParList(RestParList *p) {} //abstract class

void ShowAbsyn::visitSimpleParameterDecl(SimpleParameterDecl *p)
{
  bufAppend('(');
  bufAppend("SimpleParameterDecl");
  bufAppend(' ');
  bufAppend('[');
  if (p->listparameterdecl_)  p->listparameterdecl_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitParameterDecl(ParameterDecl *p) {} //abstract class

void ShowAbsyn::visitParameterDeclSpecDeclarator(ParameterDeclSpecDeclarator *p)
{
  bufAppend('(');
  bufAppend("ParameterDeclSpecDeclarator");
  bufAppend(' ');
  bufAppend('[');
  if (p->declspeclist_)  p->declspeclist_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend('[');
  if (p->declarator_)  p->declarator_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitParameterDeclSpec(ParameterDeclSpec *p)
{
  bufAppend('(');
  bufAppend("ParameterDeclSpec");
  bufAppend(' ');
  bufAppend('[');
  if (p->declspeclist_)  p->declspeclist_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitParameterDeclPar(ParameterDeclPar *p)
{
  bufAppend('(');
  bufAppend("ParameterDeclPar");
  bufAppend(' ');
  bufAppend('[');
  if (p->parameterdecl_)  p->parameterdecl_->accept(this);
  bufAppend(']');
  bufAppend(' ');
  bufAppend(')');
}
void ShowAbsyn::visitListParameterDecl(ListParameterDecl *listparameterdecl)
{
  for (ListParameterDecl::const_iterator i = listparameterdecl->begin() ; i != listparameterdecl->end() ; ++i)
  {
    (*i)->accept(this);
    if (i != listparameterdecl->end() - 1) bufAppend(", ");
  }
}

void ShowAbsyn::visitGhostParameterOpt(GhostParameterOpt *p) {} //abstract class

void ShowAbsyn::visitNoGhostParameter(NoGhostParameter *p)
{
  bufAppend("NoGhostParameter");
}
void ShowAbsyn::visitIdOrTypename(IdOrTypename *p) {} //abstract class

void ShowAbsyn::visitIdTypename(IdTypename *p)
{
  bufAppend('(');
  bufAppend("IdTypename");
  bufAppend(' ');
  bufAppend('[');
  if (p->idortypenameasid_)  p->idortypenameasid_->accept(this);
  bufAppend(']');
  bufAppend(')');
}
void ShowAbsyn::visitIdOrTypenameAsId(IdOrTypenameAsId *p) {} //abstract class

void ShowAbsyn::visitIdOrTypenameAsIdIdentifier(IdOrTypenameAsIdIdentifier *p)
{
  bufAppend('(');
  bufAppend("IdOrTypenameAsIdIdentifier");
  bufAppend(' ');
  visitIdent(p->ident_);
  bufAppend(')');
}
void ShowAbsyn::visitInteger(Integer i)
{
  char tmp[20];
  sprintf(tmp, "%d", i);
  bufAppend(tmp);
}
void ShowAbsyn::visitDouble(Double d)
{
  char tmp[24];
  sprintf(tmp, "%.15g", d);
  bufAppend(tmp);
}
void ShowAbsyn::visitChar(Char c)
{
  bufAppend('\'');
  bufAppend(c);
  bufAppend('\'');
}
void ShowAbsyn::visitString(String s)
{
  bufAppend('\"');
  bufAppend(s);
  bufAppend('\"');
}
void ShowAbsyn::visitIdent(String s)
{
  bufAppend('\"');
  bufAppend(s);
  bufAppend('\"');
}

void ShowAbsyn::visitSIGNED(String s)
{
  bufAppend('\"');
  bufAppend(s);
  bufAppend('\"');
}


void ShowAbsyn::visitLBRACE(String s)
{
  bufAppend('\"');
  bufAppend(s);
  bufAppend('\"');
}


void ShowAbsyn::visitRBRACE(String s)
{
  bufAppend('\"');
  bufAppend(s);
  bufAppend('\"');
}


}
