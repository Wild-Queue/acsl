/* File generated by the BNF Converter (bnfc 2.9.4.1). */

#ifndef PARTIAN_ACSL_PRINTER_HEADER
#define PARTIAN_ACSL_PRINTER_HEADER

#include "Absyn.H"
#include <stdio.h>
#include <stddef.h>
#include <string.h>
#include <stdlib.h>

namespace partian_acsl
{
/* Certain applications may improve performance by changing the buffer size */
#define PARTIAN_ACSL_BUFFER_INITIAL 2000
/* You may wish to change _L_PAREN or _R_PAREN */
#define PARTIAN_ACSL__L_PAREN '('
#define PARTIAN_ACSL__R_PAREN ')'

class PrintAbsyn : public Visitor
{
 protected:
  int _n_, _i_;
  /* The following are simple heuristics for rendering terminals */
  /* You may wish to change them */
  void render(Char c);
  void render(String s);
  void render(const char *s);
  void indent(void);
  void backup(void);
  void onEmptyLine(void);
  void removeTrailingSpaces(void);
  void removeTrailingWhitespace(void);
 public:
  PrintAbsyn(void);
  ~PrintAbsyn(void);
  char *print(Visitable *v);

  void visitProgram(Program *p); /* abstract class */
  void visitAProgram(AProgram *p);
  void visitGlobals(Globals *p); /* abstract class */
  void visitNoGlobals(NoGlobals *p);
  void visitSimpleGlobals(SimpleGlobals *p);
  void visitSemiColonGlobals(SemiColonGlobals *p);
  void visitGlobal(Global *p); /* abstract class */
  void visitGlobalsFunctionDef(GlobalsFunctionDef *p);
  void visitFunctionDef(FunctionDef *p); /* abstract class */
  void visitSimpleFunctionDef(SimpleFunctionDef *p);
  void visitBlock(Block *p); /* abstract class */
  void visitABlock(ABlock *p);
  void visitFunctionDefStart(FunctionDefStart *p); /* abstract class */
  void visitFunctionDefStartDeclarator(FunctionDefStartDeclarator *p);
  void visitDeclSpecList(DeclSpecList *p); /* abstract class */
  void visitDeclSpecTypeSpec(DeclSpecTypeSpec *p);
  void visitDeclSpecTypeSpecNext(DeclSpecTypeSpecNext *p);
  void visitDeclSpecListNoNamed(DeclSpecListNoNamed *p); /* abstract class */
  void visitDeclSpecNoNamedTypeSpec(DeclSpecNoNamedTypeSpec *p);
  void visitDeclSpecNoNamedTypeSpecNext(DeclSpecNoNamedTypeSpecNext *p);
  void visitTypeSpec(TypeSpec *p); /* abstract class */
  void visitTypeSpecVoidKeyWord(TypeSpecVoidKeyWord *p);
  void visitTypeSpecCharKeyWord(TypeSpecCharKeyWord *p);
  void visitTypeSpecBoolKeyWord(TypeSpecBoolKeyWord *p);
  void visitTypeSpecShortKeyWord(TypeSpecShortKeyWord *p);
  void visitTypeSpecInt32KeyWord(TypeSpecInt32KeyWord *p);
  void visitTypeSpecIntKeyWord(TypeSpecIntKeyWord *p);
  void visitTypeSpecLongKeyWord(TypeSpecLongKeyWord *p);
  void visitTypeSpecInt64KeyWord(TypeSpecInt64KeyWord *p);
  void visitTypeSpecFloatKeyWord(TypeSpecFloatKeyWord *p);
  void visitTypeSpecDoubleKeyWord(TypeSpecDoubleKeyWord *p);
  void visitTypeSpecSignedKeyWord(TypeSpecSignedKeyWord *p);
  void visitTypeSpecUnsignedKeyWord(TypeSpecUnsignedKeyWord *p);
  void visitDeclarator(Declarator *p); /* abstract class */
  void visitADeclarator(ADeclarator *p);
  void visitListDeclarator(ListDeclarator *p);
  void iterListDeclarator(ListDeclarator::const_iterator i, ListDeclarator::const_iterator j);
  void visitPointerOpt(PointerOpt *p); /* abstract class */
  void visitNoPointer(NoPointer *p);
  void visitSomePointer(SomePointer *p);
  void visitDirectDecl(DirectDecl *p); /* abstract class */
  void visitDirectDeclIdTypename(DirectDeclIdTypename *p);
  void visitDirectDeclGhostParam(DirectDeclGhostParam *p);
  void visitDirectDeclGhostRestParParam(DirectDeclGhostRestParParam *p);
  void visitAttributesWithAsm(AttributesWithAsm *p); /* abstract class */
  void visitEmptyAttrWithASM(EmptyAttrWithASM *p);
  void visitRestParList(RestParList *p); /* abstract class */
  void visitSimpleParameterDecl(SimpleParameterDecl *p);
  void visitParameterDecl(ParameterDecl *p); /* abstract class */
  void visitParameterDeclSpecDeclarator(ParameterDeclSpecDeclarator *p);
  void visitParameterDeclSpec(ParameterDeclSpec *p);
  void visitParameterDeclPar(ParameterDeclPar *p);
  void visitListParameterDecl(ListParameterDecl *p);
  void iterListParameterDecl(ListParameterDecl::const_iterator i, ListParameterDecl::const_iterator j);
  void visitGhostParameterOpt(GhostParameterOpt *p); /* abstract class */
  void visitNoGhostParameter(NoGhostParameter *p);
  void visitIdOrTypename(IdOrTypename *p); /* abstract class */
  void visitIdTypename(IdTypename *p);
  void visitIdOrTypenameAsId(IdOrTypenameAsId *p); /* abstract class */
  void visitIdOrTypenameAsIdIdentifier(IdOrTypenameAsIdIdentifier *p);

  void visitInteger(Integer i);
  void visitDouble(Double d);
  void visitChar(Char c);
  void visitString(String s);
  void visitIdent(String s);
  void visitSIGNED(String s);
  void visitLBRACE(String s);
  void visitRBRACE(String s);
 protected:
  char *buf_;
  size_t cur_, buf_size;

  void inline bufAppend(const char *s)
  {
    size_t end = cur_ + strlen(s);
    if (end >= buf_size) {
      do buf_size *= 2; /* Double the buffer size */
      while (end >= buf_size);
      resizeBuffer();
    }
    strcpy(&buf_[cur_], s);
    cur_ = end;
  }

  void inline bufAppend(const char c)
  {
    if (cur_ + 1 >= buf_size)
    {
      buf_size *= 2; /* Double the buffer size */
      resizeBuffer();
    }
    buf_[cur_] = c;
    buf_[++cur_] = 0;
  }

  void inline bufAppend(String str)
  {
    const char *s = str.c_str();
    bufAppend(s);
  }
  void inline bufReset(void)
  {
    if (buf_) delete[] buf_;
    buf_size = PARTIAN_ACSL_BUFFER_INITIAL;
    buf_ = new char[buf_size];
    memset(buf_, 0, buf_size);
    cur_ = 0;
  }

  void inline resizeBuffer(void)
  {
    char *temp = new char[buf_size];
    if (buf_)
    {
      strcpy(temp, buf_);
      delete[] buf_;
    }
    buf_ = temp;
  }
};



class ShowAbsyn : public Visitor
{
 public:
  ShowAbsyn(void);
  ~ShowAbsyn(void);
  char *show(Visitable *v);

  void visitProgram(Program *p); /* abstract class */
  void visitAProgram(AProgram *p);
  void visitGlobals(Globals *p); /* abstract class */
  void visitNoGlobals(NoGlobals *p);
  void visitSimpleGlobals(SimpleGlobals *p);
  void visitSemiColonGlobals(SemiColonGlobals *p);
  void visitGlobal(Global *p); /* abstract class */
  void visitGlobalsFunctionDef(GlobalsFunctionDef *p);
  void visitFunctionDef(FunctionDef *p); /* abstract class */
  void visitSimpleFunctionDef(SimpleFunctionDef *p);
  void visitBlock(Block *p); /* abstract class */
  void visitABlock(ABlock *p);
  void visitFunctionDefStart(FunctionDefStart *p); /* abstract class */
  void visitFunctionDefStartDeclarator(FunctionDefStartDeclarator *p);
  void visitDeclSpecList(DeclSpecList *p); /* abstract class */
  void visitDeclSpecTypeSpec(DeclSpecTypeSpec *p);
  void visitDeclSpecTypeSpecNext(DeclSpecTypeSpecNext *p);
  void visitDeclSpecListNoNamed(DeclSpecListNoNamed *p); /* abstract class */
  void visitDeclSpecNoNamedTypeSpec(DeclSpecNoNamedTypeSpec *p);
  void visitDeclSpecNoNamedTypeSpecNext(DeclSpecNoNamedTypeSpecNext *p);
  void visitTypeSpec(TypeSpec *p); /* abstract class */
  void visitTypeSpecVoidKeyWord(TypeSpecVoidKeyWord *p);
  void visitTypeSpecCharKeyWord(TypeSpecCharKeyWord *p);
  void visitTypeSpecBoolKeyWord(TypeSpecBoolKeyWord *p);
  void visitTypeSpecShortKeyWord(TypeSpecShortKeyWord *p);
  void visitTypeSpecInt32KeyWord(TypeSpecInt32KeyWord *p);
  void visitTypeSpecIntKeyWord(TypeSpecIntKeyWord *p);
  void visitTypeSpecLongKeyWord(TypeSpecLongKeyWord *p);
  void visitTypeSpecInt64KeyWord(TypeSpecInt64KeyWord *p);
  void visitTypeSpecFloatKeyWord(TypeSpecFloatKeyWord *p);
  void visitTypeSpecDoubleKeyWord(TypeSpecDoubleKeyWord *p);
  void visitTypeSpecSignedKeyWord(TypeSpecSignedKeyWord *p);
  void visitTypeSpecUnsignedKeyWord(TypeSpecUnsignedKeyWord *p);
  void visitDeclarator(Declarator *p); /* abstract class */
  void visitADeclarator(ADeclarator *p);
  void visitListDeclarator(ListDeclarator *p);
  void iterListDeclarator(ListDeclarator::const_iterator i, ListDeclarator::const_iterator j);
  void visitPointerOpt(PointerOpt *p); /* abstract class */
  void visitNoPointer(NoPointer *p);
  void visitSomePointer(SomePointer *p);
  void visitDirectDecl(DirectDecl *p); /* abstract class */
  void visitDirectDeclIdTypename(DirectDeclIdTypename *p);
  void visitDirectDeclGhostParam(DirectDeclGhostParam *p);
  void visitDirectDeclGhostRestParParam(DirectDeclGhostRestParParam *p);
  void visitAttributesWithAsm(AttributesWithAsm *p); /* abstract class */
  void visitEmptyAttrWithASM(EmptyAttrWithASM *p);
  void visitRestParList(RestParList *p); /* abstract class */
  void visitSimpleParameterDecl(SimpleParameterDecl *p);
  void visitParameterDecl(ParameterDecl *p); /* abstract class */
  void visitParameterDeclSpecDeclarator(ParameterDeclSpecDeclarator *p);
  void visitParameterDeclSpec(ParameterDeclSpec *p);
  void visitParameterDeclPar(ParameterDeclPar *p);
  void visitListParameterDecl(ListParameterDecl *p);
  void iterListParameterDecl(ListParameterDecl::const_iterator i, ListParameterDecl::const_iterator j);
  void visitGhostParameterOpt(GhostParameterOpt *p); /* abstract class */
  void visitNoGhostParameter(NoGhostParameter *p);
  void visitIdOrTypename(IdOrTypename *p); /* abstract class */
  void visitIdTypename(IdTypename *p);
  void visitIdOrTypenameAsId(IdOrTypenameAsId *p); /* abstract class */
  void visitIdOrTypenameAsIdIdentifier(IdOrTypenameAsIdIdentifier *p);

  void visitInteger(Integer i);
  void visitDouble(Double d);
  void visitChar(Char c);
  void visitString(String s);
  void visitIdent(String s);
  void visitSIGNED(String s);
  void visitLBRACE(String s);
  void visitRBRACE(String s);
 protected:
  char *buf_;
  size_t cur_, buf_size;

  void inline bufAppend(const char *s)
  {
    size_t end = cur_ + strlen(s);
    if (end >= buf_size) {
      do buf_size *= 2; /* Double the buffer size */
      while (end >= buf_size);
      resizeBuffer();
    }
    strcpy(&buf_[cur_], s);
    cur_ = end;
  }

  void inline bufAppend(const char c)
  {
    if (cur_ + 1 >= buf_size)
    {
      buf_size *= 2; /* Double the buffer size */
      resizeBuffer();
    }
    buf_[cur_] = c;
    buf_[++cur_] = 0;
  }

  void inline bufAppend(String str)
  {
    const char *s = str.c_str();
    bufAppend(s);
  }
  void inline bufReset(void)
  {
    if (buf_) delete[] buf_;
    buf_size = PARTIAN_ACSL_BUFFER_INITIAL;
    buf_ = new char[buf_size];
    memset(buf_, 0, buf_size);
    cur_ = 0;
  }

  void inline resizeBuffer(void)
  {
    char *temp = new char[buf_size];
    if (buf_)
    {
      strcpy(temp, buf_);
      delete[] buf_;
    }
    buf_ = temp;
  }
};


}

#endif

