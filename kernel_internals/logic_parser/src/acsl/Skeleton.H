/* File generated by the BNF Converter (bnfc 2.9.4.1). */

#ifndef ACSL_SKELETON_HEADER
#define ACSL_SKELETON_HEADER
/* You might want to change the above name. */

#include "Absyn.H"

namespace acsl
{
class Skeleton : public Visitor
{
public:
  void visitLexprEOF(LexprEOF *p);
  void visitLexprList(LexprList *p);
  void visitLexprOption(LexprOption *p);
  void visitLexpr(Lexpr *p);
  void visitLexprBinder(LexprBinder *p);
  void visitLexprRelInner(LexprRelInner *p);
  void visitRelation(Relation *p);
  void visitRange(Range *p);
  void visitFieldInitElt(FieldInitElt *p);
  void visitArrayInitElt(ArrayInitElt *p);
  void visitUpdateElt(UpdateElt *p);
  void visitPathElt(PathElt *p);
  void visitBinders(Binders *p);
  void visitBindersReentrance(BindersReentrance *p);
  void visitVarSpec(VarSpec *p);
  void visitArraySize(ArraySize *p);
  void visitAbsParamTypeList(AbsParamTypeList *p);
  void visitAbsParam(AbsParam *p);
  void visitParameter(Parameter *p);
  void visitLogicTypeGenOFTYPENAME(LogicTypeGenOFTYPENAME *p);
  void visitLogicTypeGenOFIdentifierOrTypename(LogicTypeGenOFIdentifierOrTypename *p);
  void visitCV(CV *p);
  void visitTypeSpecCVOFTYPENAME(TypeSpecCVOFTYPENAME *p);
  void visitCastLogicType(CastLogicType *p);
  void visitLogicRtType(LogicRtType *p);
  void visitAbsSpecOption(AbsSpecOption *p);
  void visitAbsSpecCVOption(AbsSpecCVOption *p);
  void visitAbsSpec(AbsSpec *p);
  void visitAbsSpecCV(AbsSpecCV *p);
  void visitStars(Stars *p);
  void visitStarsCV(StarsCV *p);
  void visitTabs(Tabs *p);
  void visitTypeSpecSimple(TypeSpecSimple *p);
  void visitTypeSpecOFTYPENAME(TypeSpecOFTYPENAME *p);
  void visitTypeSpecOFIdentifierOrTypename(TypeSpecOFIdentifierOrTypename *p);
  void visitFullIdentifier(FullIdentifier *p);
  void visitExtSpec(ExtSpec *p);
  void visitExtGlobalClausesOpt(ExtGlobalClausesOpt *p);
  void visitExtGlobalClause(ExtGlobalClause *p);
  void visitExtGlobalSpecsOpt(ExtGlobalSpecsOpt *p);
  void visitExtGlobalSpec(ExtGlobalSpec *p);
  void visitExtModuleSpecsOpt(ExtModuleSpecsOpt *p);
  void visitExtModuleSpec(ExtModuleSpec *p);
  void visitExtFunctionSpecsOpt(ExtFunctionSpecsOpt *p);
  void visitExtFunctionSpecs(ExtFunctionSpecs *p);
  void visitExtFunctionSpec(ExtFunctionSpec *p);
  void visitExtFunSpec(ExtFunSpec *p);
  void visitExtIdentifierOpt(ExtIdentifierOpt *p);
  void visitStmtMarkup(StmtMarkup *p);
  void visitSpec(Spec *p);
  void visitContract(Contract *p);
  void visitClauseKW(ClauseKW *p);
  void visitRequires(Requires *p);
  void visitNERequires(NERequires *p);
  void visitTerminates(Terminates *p);
  void visitNETerminates(NETerminates *p);
  void visitDecreases(Decreases *p);
  void visitNEDecreases(NEDecreases *p);
  void visitVariant(Variant *p);
  void visitSimpleClauses(SimpleClauses *p);
  void visitAllocation(Allocation *p);
  void visitNESimpleClauses(NESimpleClauses *p);
  void visitExtensionContent(ExtensionContent *p);
  void visitBehaviors(Behaviors *p);
  void visitNEBehaviors(NEBehaviors *p);
  void visitBehaviorBody(BehaviorBody *p);
  void visitAssumes(Assumes *p);
  void visitCompleteOrDisjoint(CompleteOrDisjoint *p);
  void visitNECompleteOrDisjoint(NECompleteOrDisjoint *p);
  void visitAssigns(Assigns *p);
  void visitZones(Zones *p);
  void visitAnnot(Annot *p);
  void visitAnnotation(Annotation *p);
  void visitLoopAnnotStack(LoopAnnotStack *p);
  void visitLoopAnnotOpt(LoopAnnotOpt *p);
  void visitLoopEffects(LoopEffects *p);
  void visitLoopAllocation(LoopAllocation *p);
  void visitLoopInvariant(LoopInvariant *p);
  void visitLoopVariant(LoopVariant *p);
  void visitLoopGrammarExtension(LoopGrammarExtension *p);
  void visitLoopPragma(LoopPragma *p);
  void visitBegPragmaOrCodeAnnotation(BegPragmaOrCodeAnnotation *p);
  void visitPragmaOrCodeAnnotation(PragmaOrCodeAnnotation *p);
  void visitCodeAnnotation(CodeAnnotation *p);
  void visitSlicePragma(SlicePragma *p);
  void visitImpactPragma(ImpactPragma *p);
  void visitDecl(Decl *p);
  void visitExtDecl(ExtDecl *p);
  void visitVolatileOpt(VolatileOpt *p);
  void visitTypeAnnot(TypeAnnot *p);
  void visitOptSemicolon(OptSemicolon *p);
  void visitModelAnnot(ModelAnnot *p);
  void visitPolyIdType(PolyIdType *p);
  void visitPolyId(PolyId *p);
  void visitOptParameters(OptParameters *p);
  void visitParameters(Parameters *p);
  void visitLogicDef(LogicDef *p);
  void visitDeprecatedLogicDecl(DeprecatedLogicDecl *p);
  void visitLogicDecl(LogicDecl *p);
  void visitReadsClause(ReadsClause *p);
  void visitTypedef(Typedef *p);
  void visitDataconsWithSeparator(DataconsWithSeparator *p);
  void visitDatacons(Datacons *p);
  void visitIndcase(Indcase *p);
  void visitOptLabel(OptLabel *p);
  void visitOptLabelList(OptLabelList *p);
  void visitLabelName(LabelName *p);
  void visitBehaviorNameList(BehaviorNameList *p);
  void visitBehaviorName(BehaviorName *p);
  void visitAnyIdentifier(AnyIdentifier *p);
  void visitIdentifierOrTypename(IdentifierOrTypename *p);
  void visitIdentifierOrTypenameFull(IdentifierOrTypenameFull *p);
  void visitIdentifier(Identifier *p);
  void visitBoundedVar(BoundedVar *p);
  void visitCKeyword(CKeyword *p);
  void visitACSLCKeyword(ACSLCKeyword *p);
  void visitPostCond(PostCond *p);
  void visitIsACSLSpec(IsACSLSpec *p);
  void visitIsACSLDeclOrCodeAnnot(IsACSLDeclOrCodeAnnot *p);
  void visitIsACSLTypename(IsACSLTypename *p);
  void visitIsExtSpec(IsExtSpec *p);
  void visitKeyword(Keyword *p);
  void visitBSKeyword(BSKeyword *p);
  void visitWildcard(Wildcard *p);
  void visitLexprEof(LexprEof *p);
  void visitEmptyLexprList(EmptyLexprList *p);
  void visitNonEmptyLexprList(NonEmptyLexprList *p);
  void visitNoLexprOption(NoLexprOption *p);
  void visitSomeLexprOption(SomeLexprOption *p);
  void visitNoLexpr(NoLexpr *p);
  void visitImplLexpr(ImplLexpr *p);
  void visitIffLexpr(IffLexpr *p);
  void visitOrLexpr(OrLexpr *p);
  void visitAndLexpr(AndLexpr *p);
  void visitHatHatLexpr(HatHatLexpr *p);
  void visitAmpLexpr(AmpLexpr *p);
  void visitPipeLexpr(PipeLexpr *p);
  void visitHatLexpr(HatLexpr *p);
  void visitBimpliesLexpr(BimpliesLexpr *p);
  void visitBiffLexpr(BiffLexpr *p);
  void visitInLexpr(InLexpr *p);
  void visitTernaryLexpr(TernaryLexpr *p);
  void visitIdAssignLexpr(IdAssignLexpr *p);
  void visitStrAssignLexpr(StrAssignLexpr *p);
  void visitRelationLexpr(RelationLexpr *p);
  void visitBinderLexpr(BinderLexpr *p);
  void visitNotBinderLexpr(NotBinderLexpr *p);
  void visitLetBinderLexpr(LetBinderLexpr *p);
  void visitForallBinderLexpr(ForallBinderLexpr *p);
  void visitExistBinderLexpr(ExistBinderLexpr *p);
  void visitLambdaBinderLexpr(LambdaBinderLexpr *p);
  void visitRelInnerLexpr(RelInnerLexpr *p);
  void visitLessRel(LessRel *p);
  void visitGreaterRel(GreaterRel *p);
  void visitLessEqRel(LessEqRel *p);
  void visitGreaterEqRel(GreaterEqRel *p);
  void visitEqRel(EqRel *p);
  void visitNotEqRel(NotEqRel *p);
  void visitEQUALRel(EQUALRel *p);
  void visitStringLexpr(StringLexpr *p);
  void visitNotLexprInner(NotLexprInner *p);
  void visitTrueLexpr(TrueLexpr *p);
  void visitFalseLexpr(FalseLexpr *p);
  void visitPointerLexpr(PointerLexpr *p);
  void visitValidLexpr(ValidLexpr *p);
  void visitValidReadLexpr(ValidReadLexpr *p);
  void visitValidFuncLexpr(ValidFuncLexpr *p);
  void visitValidIndxLexpr(ValidIndxLexpr *p);
  void visitValidRangeLexpr(ValidRangeLexpr *p);
  void visitInitializedLexpr(InitializedLexpr *p);
  void visitDanglingLexpr(DanglingLexpr *p);
  void visitFreshLexpr(FreshLexpr *p);
  void visitBaseAddrLexpr(BaseAddrLexpr *p);
  void visitBlockLengthLexpr(BlockLengthLexpr *p);
  void visitOffsetLexpr(OffsetLexpr *p);
  void visitAllocableLexpr(AllocableLexpr *p);
  void visitFreeableLexpr(FreeableLexpr *p);
  void visitAllocationLexpr(AllocationLexpr *p);
  void visitAutomaticLexpr(AutomaticLexpr *p);
  void visitDynamicLexpr(DynamicLexpr *p);
  void visitRegisterLexpr(RegisterLexpr *p);
  void visitStaticLexpr(StaticLexpr *p);
  void visitUnallocatedLexpr(UnallocatedLexpr *p);
  void visitNullLexpr(NullLexpr *p);
  void visitIntConst(IntConst *p);
  void visitFloatConst(FloatConst *p);
  void visitStringConst(StringConst *p);
  void visitWStringConst(WStringConst *p);
  void visitAddLexpr(AddLexpr *p);
  void visitSubtrLexpr(SubtrLexpr *p);
  void visitMultLexpr(MultLexpr *p);
  void visitDivLexpr(DivLexpr *p);
  void visitModLexpr(ModLexpr *p);
  void visitStarHatLexpr(StarHatLexpr *p);
  void visitArrowLexpr(ArrowLexpr *p);
  void visitDotLexpr(DotLexpr *p);
  void visitSquaresRangeLexpr(SquaresRangeLexpr *p);
  void visitSquaresLexpr(SquaresLexpr *p);
  void visitSquaresPipeLexpr(SquaresPipeLexpr *p);
  void visitMinusLexpr(MinusLexpr *p);
  void visitPlusLexpr(PlusLexpr *p);
  void visitTildeLexpr(TildeLexpr *p);
  void visitStarLexpr(StarLexpr *p);
  void visitAmpUnaryLexpr(AmpUnaryLexpr *p);
  void visitSizeOfLexpr(SizeOfLexpr *p);
  void visitSizeOfLogicTypeLexpr(SizeOfLogicTypeLexpr *p);
  void visitOldLexpr(OldLexpr *p);
  void visitAtLexpr(AtLexpr *p);
  void visitResultLexpr(ResultLexpr *p);
  void visitSeparatedLexpr(SeparatedLexpr *p);
  void visitFullIdParenLexpr(FullIdParenLexpr *p);
  void visitFullIdBraceParenLexpr(FullIdBraceParenLexpr *p);
  void visitFullIdBracesLexpr(FullIdBracesLexpr *p);
  void visitFullId(FullId *p);
  void visitPiLexpr(PiLexpr *p);
  void visitLessLessLexpr(LessLessLexpr *p);
  void visitGreaterGreaterLexpr(GreaterGreaterLexpr *p);
  void visitParenRangeLexpr(ParenRangeLexpr *p);
  void visitCastLexpr(CastLexpr *p);
  void visitTypeOfLexpr(TypeOfLexpr *p);
  void visitTypeLexpr(TypeLexpr *p);
  void visitTypeWithStarsLexpr(TypeWithStarsLexpr *p);
  void visitEmptyLexpr(EmptyLexpr *p);
  void visitUnionLexpr(UnionLexpr *p);
  void visitInterLexpr(InterLexpr *p);
  void visitBraceLexprList(BraceLexprList *p);
  void visitBraceBinderLexpr(BraceBinderLexpr *p);
  void visitBraceBinderLexprLexpr(BraceBinderLexprLexpr *p);
  void visitFieldInitLexpr(FieldInitLexpr *p);
  void visitArrayInitLexpr(ArrayInitLexpr *p);
  void visitUpdateBraceLexpr(UpdateBraceLexpr *p);
  void visitLexprRange(LexprRange *p);
  void visitAFieldInitElt(AFieldInitElt *p);
  void visitAnArrayInitElt(AnArrayInitElt *p);
  void visitArrayInitRangeElt(ArrayInitRangeElt *p);
  void visitAnUpdateElt(AnUpdateElt *p);
  void visitUpdateEltWith(UpdateEltWith *p);
  void visitFieldElt(FieldElt *p);
  void visitArrayElt(ArrayElt *p);
  void visitArrayRangeElt(ArrayRangeElt *p);
  void visitTheBinders(TheBinders *p);
  void visitBindersReentranceDeclSpec(BindersReentranceDeclSpec *p);
  void visitBindersReentranceVarSpec(BindersReentranceVarSpec *p);
  void visitStartVarSpec(StartVarSpec *p);
  void visitIntConstArraySize(IntConstArraySize *p);
  void visitSomeArraySize(SomeArraySize *p);
  void visitNoSize(NoSize *p);
  void visitSimpleSpec(SimpleSpec *p);
  void visitArraySpec(ArraySpec *p);
  void visitFunctionSpec(FunctionSpec *p);
  void visitEmptyTypeParam(EmptyTypeParam *p);
  void visitSomeTypeParam(SomeTypeParam *p);
  void visitInfTypeParam(InfTypeParam *p);
  void visitAbsParamsElement(AbsParamsElement *p);
  void visitPrartemer(Prartemer *p);
  void visitLogicTypeGenTypemane(LogicTypeGenTypemane *p);
  void visitLogicTypeGenIdOrTypename(LogicTypeGenIdOrTypename *p);
  void visitConstCV(ConstCV *p);
  void visitVolatileCV(VolatileCV *p);
  void visitGhostCV(GhostCV *p);
  void visitTypeSpecCVTypename(TypeSpecCVTypename *p);
  void visitAnCastLogicType(AnCastLogicType *p);
  void visitLogicRTType(LogicRTType *p);
  void visitNoAbsSpec(NoAbsSpec *p);
  void visitSomeAbsSpec(SomeAbsSpec *p);
  void visitNoAbsSpecCV(NoAbsSpecCV *p);
  void visitSomeAbsSpecCV(SomeAbsSpecCV *p);
  void visitAbsSpecTabs(AbsSpecTabs *p);
  void visitAbsSpecStars(AbsSpecStars *p);
  void visitAbsSpecStarsTabs(AbsSpecStarsTabs *p);
  void visitAbsSpecBitsStars(AbsSpecBitsStars *p);
  void visitAbsSpecBitsStarsTabs(AbsSpecBitsStarsTabs *p);
  void visitAbsSpecBitsTabs(AbsSpecBitsTabs *p);
  void visitAbsSpecBits(AbsSpecBits *p);
  void visitAbsSpecCVTabs(AbsSpecCVTabs *p);
  void visitAbsSpecCVStars(AbsSpecCVStars *p);
  void visitAbsSpecCVStarsTabs(AbsSpecCVStarsTabs *p);
  void visitAbsSpecCVBitsStars(AbsSpecCVBitsStars *p);
  void visitAbsSpecCVBitsStarsTabs(AbsSpecCVBitsStarsTabs *p);
  void visitAbsSpecCVBitsTabs(AbsSpecCVBitsTabs *p);
  void visitAbsSpecCVBits(AbsSpecCVBits *p);
  void visitAbsSpecBitsParams(AbsSpecBitsParams *p);
  void visitAbsSpecBitsCVParams(AbsSpecBitsCVParams *p);
  void visitStar(Star *p);
  void visitStarCV(StarCV *p);
  void visitStarCVWithCV(StarCVWithCV *p);
  void visitTab(Tab *p);
  void visitTypeSpecIntegerKeyWord(TypeSpecIntegerKeyWord *p);
  void visitTypeSpecRealKeyWord(TypeSpecRealKeyWord *p);
  void visitTypeSpecBooleanKeyWord(TypeSpecBooleanKeyWord *p);
  void visitTypeSpecVoidKeyWord(TypeSpecVoidKeyWord *p);
  void visitTypeSpecBoolKeyWord(TypeSpecBoolKeyWord *p);
  void visitTypeSpecCharKeyWord(TypeSpecCharKeyWord *p);
  void visitTypeSpecSignedCharKeyWord(TypeSpecSignedCharKeyWord *p);
  void visitTypeSpecUnsignedCharKeyWord(TypeSpecUnsignedCharKeyWord *p);
  void visitTypeSpecIntKeyWord(TypeSpecIntKeyWord *p);
  void visitTypeSpecSignedIntKeyWord(TypeSpecSignedIntKeyWord *p);
  void visitTypeSpecUnsignedIntKeyWord(TypeSpecUnsignedIntKeyWord *p);
  void visitTypeSpecUnsignedKeyWord(TypeSpecUnsignedKeyWord *p);
  void visitTypeSpecShortKeyWord(TypeSpecShortKeyWord *p);
  void visitTypeSpecSignedShortKeyWord(TypeSpecSignedShortKeyWord *p);
  void visitTypeSpecUnsignedShortKeyWord(TypeSpecUnsignedShortKeyWord *p);
  void visitTypeSpecShortIntKeyWord(TypeSpecShortIntKeyWord *p);
  void visitTypeSpecSignedShortIntKeyWord(TypeSpecSignedShortIntKeyWord *p);
  void visitTypeSpecUnsignedShortIntKeyWord(TypeSpecUnsignedShortIntKeyWord *p);
  void visitTypeSpecLongKeyWord(TypeSpecLongKeyWord *p);
  void visitTypeSpecSignedLongKeyWord(TypeSpecSignedLongKeyWord *p);
  void visitTypeSpecUnsignedLongKeyWord(TypeSpecUnsignedLongKeyWord *p);
  void visitTypeSpecSignedLongIntKeyWord(TypeSpecSignedLongIntKeyWord *p);
  void visitTypeSpecLongIntKeyWord(TypeSpecLongIntKeyWord *p);
  void visitTypeSpecUnsignedLongIntKeyWord(TypeSpecUnsignedLongIntKeyWord *p);
  void visitTypeSpecLongLongKeyWord(TypeSpecLongLongKeyWord *p);
  void visitTypeSpecSignedLongLongKeyWord(TypeSpecSignedLongLongKeyWord *p);
  void visitTypeSpecUnsignedLongLongKeyWord(TypeSpecUnsignedLongLongKeyWord *p);
  void visitTypeSpecLongLongIntKeyWord(TypeSpecLongLongIntKeyWord *p);
  void visitTypeSpecSignedLongLongIntKeyWord(TypeSpecSignedLongLongIntKeyWord *p);
  void visitTypeSpecUnsignedLongLongIntKeyWord(TypeSpecUnsignedLongLongIntKeyWord *p);
  void visitTypeSpecFloatKeyWord(TypeSpecFloatKeyWord *p);
  void visitTypeSpecDoubleKeyWord(TypeSpecDoubleKeyWord *p);
  void visitTypeSpecLongDoubleKeyWord(TypeSpecLongDoubleKeyWord *p);
  void visitTypeSpecStruct(TypeSpecStruct *p);
  void visitTypeSpecEnum(TypeSpecEnum *p);
  void visitTypeSpecUnion(TypeSpecUnion *p);
  void visitTYPENAME(TYPENAME *p);
  void visitTypeSpecTYPENAME(TypeSpecTYPENAME *p);
  void visitTypeSpecSimpleFromTypenameTypeSpec(TypeSpecSimpleFromTypenameTypeSpec *p);
  void visitTypeSpecIdentifierOrTypename(TypeSpecIdentifierOrTypename *p);
  void visitTypeSpecIdentifierOrTypenameAngles(TypeSpecIdentifierOrTypenameAngles *p);
  void visitTypeSpecSimpleFromIdTypenameTypeSpec(TypeSpecSimpleFromIdTypenameTypeSpec *p);
  void visitSimpleIdentifierFull(SimpleIdentifierFull *p);
  void visitAdmitKeyWordFullIdent(AdmitKeyWordFullIdent *p);
  void visitAllocatesKeyWordFullIdent(AllocatesKeyWordFullIdent *p);
  void visitAssertKeyWordFullIdent(AssertKeyWordFullIdent *p);
  void visitAssignsKeyWordFullIdent(AssignsKeyWordFullIdent *p);
  void visitAssumesKeyWordFullIdent(AssumesKeyWordFullIdent *p);
  void visitAtKeyWordFullIdent(AtKeyWordFullIdent *p);
  void visitAxiomKeyWordFullIdent(AxiomKeyWordFullIdent *p);
  void visitAxiomaticKeyWordFullIdent(AxiomaticKeyWordFullIdent *p);
  void visitBehaviorKeyWordFullIdent(BehaviorKeyWordFullIdent *p);
  void visitBreaksKeyWordFullIdent(BreaksKeyWordFullIdent *p);
  void visitCheckKeyWordFullIdent(CheckKeyWordFullIdent *p);
  void visitCompleteKeyWordFullIdent(CompleteKeyWordFullIdent *p);
  void visitContinuesKeyWordFullIdent(ContinuesKeyWordFullIdent *p);
  void visitContractKeyWordFullIdent(ContractKeyWordFullIdent *p);
  void visitDecreasesKeyWordFullIdent(DecreasesKeyWordFullIdent *p);
  void visitDisjointKeyWordFullIdent(DisjointKeyWordFullIdent *p);
  void visitEnsuresKeyWordFullIdent(EnsuresKeyWordFullIdent *p);
  void visitExitsKeyWordFullIdent(ExitsKeyWordFullIdent *p);
  void visitFreesKeyWordFullIdent(FreesKeyWordFullIdent *p);
  void visitFunctionKeyWordFullIdent(FunctionKeyWordFullIdent *p);
  void visitGlobalKeyWordFullIdent(GlobalKeyWordFullIdent *p);
  void visitImpactKeyWordFullIdent(ImpactKeyWordFullIdent *p);
  void visitInductiveKeyWordFullIdent(InductiveKeyWordFullIdent *p);
  void visitIncludeKeyWordFullIdent(IncludeKeyWordFullIdent *p);
  void visitInvariantKeyWordFullIdent(InvariantKeyWordFullIdent *p);
  void visitLemmaKeyWordFullIdent(LemmaKeyWordFullIdent *p);
  void visitLetKeyWordFullIdent(LetKeyWordFullIdent *p);
  void visitLogicKeyWordFullIdent(LogicKeyWordFullIdent *p);
  void visitLoopKeyWordFullIdent(LoopKeyWordFullIdent *p);
  void visitModelKeyWordFullIdent(ModelKeyWordFullIdent *p);
  void visitModuleKeyWordFullIdent(ModuleKeyWordFullIdent *p);
  void visitPragmaKeyWordFullIdent(PragmaKeyWordFullIdent *p);
  void visitPredicateKeyWordFullIdent(PredicateKeyWordFullIdent *p);
  void visitRequiresKeyWordFullIdent(RequiresKeyWordFullIdent *p);
  void visitReturnsKeyWordFullIdent(ReturnsKeyWordFullIdent *p);
  void visitSliceKeyWordFullIdent(SliceKeyWordFullIdent *p);
  void visitTerminatesKeyWordFullIdent(TerminatesKeyWordFullIdent *p);
  void visitTypeKeyWordFullIdent(TypeKeyWordFullIdent *p);
  void visitVariantKeyWordFullIdent(VariantKeyWordFullIdent *p);
  void visitIdentExtCodeAnnotFullIdent(IdentExtCodeAnnotFullIdent *p);
  void visitIdentExtContractFullIdent(IdentExtContractFullIdent *p);
  void visitIdentExtGlobalFullIdent(IdentExtGlobalFullIdent *p);
  void visitIdentExtGlobalBlockFullIdent(IdentExtGlobalBlockFullIdent *p);
  void visitExrSpec(ExrSpec *p);
  void visitEmptyExtGlobalClauses(EmptyExtGlobalClauses *p);
  void visitSomeExtGlobalClauses(SomeExtGlobalClauses *p);
  void visitDeclClause(DeclClause *p);
  void visitLetClause(LetClause *p);
  void visitGlobalLetClause(GlobalLetClause *p);
  void visitIncludeClause(IncludeClause *p);
  void visitEmptyExtGlobalSpecs(EmptyExtGlobalSpecs *p);
  void visitSomeExtGlobalSpecs(SomeExtGlobalSpecs *p);
  void visitExtGlobalSpecClauseModule(ExtGlobalSpecClauseModule *p);
  void visitExtGlobalSpecModule(ExtGlobalSpecModule *p);
  void visitExtGlobalSpecClause(ExtGlobalSpecClause *p);
  void visitExtGlobalSpecSimple(ExtGlobalSpecSimple *p);
  void visitEmptyExtModuleSpecs(EmptyExtModuleSpecs *p);
  void visitListExtModuleSpecs(ListExtModuleSpecs *p);
  void visitFunSpecExtModuleSpecs(FunSpecExtModuleSpecs *p);
  void visitFunSpecWithListModules(FunSpecWithListModules *p);
  void visitAnExtModuleSpec(AnExtModuleSpec *p);
  void visitNoExtFunctionSpecs(NoExtFunctionSpecs *p);
  void visitSomeExtFunctionSpecs(SomeExtFunctionSpecs *p);
  void visitAtMarkup(AtMarkup *p);
  void visitListFunctionSpecs(ListFunctionSpecs *p);
  void visitListFunctionSpecsAtMarkup(ListFunctionSpecsAtMarkup *p);
  void visitAnExtGlobalClause(AnExtGlobalClause *p);
  void visitAnExtFunSpec(AnExtFunSpec *p);
  void visitFunSpecAtAnnotation(FunSpecAtAnnotation *p);
  void visitFunSpecAtContract(FunSpecAtContract *p);
  void visitFunSpecContract(FunSpecContract *p);
  void visitExtIdentifierEmpty(ExtIdentifierEmpty *p);
  void visitExtIdentifierSome(ExtIdentifierSome *p);
  void visitMarkupStmtIdentifier(MarkupStmtIdentifier *p);
  void visitMarkupIntConstant(MarkupIntConstant *p);
  void visitSpecConstract(SpecConstract *p);
  void visitSimpleContract(SimpleContract *p);
  void visitTerminatesRequiresContract(TerminatesRequiresContract *p);
  void visitDecreasesRequiresContract(DecreasesRequiresContract *p);
  void visitDecreasesTerminatesContract(DecreasesTerminatesContract *p);
  void visitClausesRequiresContract(ClausesRequiresContract *p);
  void visitClausesTerminatesContract(ClausesTerminatesContract *p);
  void visitClausesDecreasesContract(ClausesDecreasesContract *p);
  void visitBehaviorsTerminatesContract(BehaviorsTerminatesContract *p);
  void visitBehaviorsDecreasesContract(BehaviorsDecreasesContract *p);
  void visitComplDisjRequiresContract(ComplDisjRequiresContract *p);
  void visitComplDisjTerminatesContract(ComplDisjTerminatesContract *p);
  void visitComplDisjDecreasesContract(ComplDisjDecreasesContract *p);
  void visitComplDisjBehaviorContract(ComplDisjBehaviorContract *p);
  void visitComplDisjAssignsContract(ComplDisjAssignsContract *p);
  void visitComplDisjAllocatesContract(ComplDisjAllocatesContract *p);
  void visitComplDisjFreesContract(ComplDisjFreesContract *p);
  void visitComplDisjPostCondContract(ComplDisjPostCondContract *p);
  void visitAdmitRequiresClause(AdmitRequiresClause *p);
  void visitAdmitInvariantClause(AdmitInvariantClause *p);
  void visitAdmitLemmaClause(AdmitLemmaClause *p);
  void visitAdmitLoopClause(AdmitLoopClause *p);
  void visitCheckRequiresClause(CheckRequiresClause *p);
  void visitCheckInvariantClause(CheckInvariantClause *p);
  void visitCheckLemmaClause(CheckLemmaClause *p);
  void visitCheckLoopClause(CheckLoopClause *p);
  void visitRequiresClause(RequiresClause *p);
  void visitAssumesClause(AssumesClause *p);
  void visitAssignsClause(AssignsClause *p);
  void visitPostCondClause(PostCondClause *p);
  void visitDecreasesClause(DecreasesClause *p);
  void visitBehaviorClause(BehaviorClause *p);
  void visitAllocatesClause(AllocatesClause *p);
  void visitFreesClause(FreesClause *p);
  void visitCompleteClause(CompleteClause *p);
  void visitDisjointClause(DisjointClause *p);
  void visitClauseExtConstract(ClauseExtConstract *p);
  void visitEmptyClauseKW(EmptyClauseKW *p);
  void visitNoRequires(NoRequires *p);
  void visitSomeRequires(SomeRequires *p);
  void visitSimpleRequires(SimpleRequires *p);
  void visitCheckRequires(CheckRequires *p);
  void visitAdimtRequires(AdimtRequires *p);
  void visitClauseSimpleRequires(ClauseSimpleRequires *p);
  void visitClauseCheckRequires(ClauseCheckRequires *p);
  void visitClauseAdimtRequires(ClauseAdimtRequires *p);
  void visitNoTerminate(NoTerminate *p);
  void visitSomeTerminate(SomeTerminate *p);
  void visitSimpleTerminates(SimpleTerminates *p);
  void visitClauseTerminates(ClauseTerminates *p);
  void visitNoDecreases(NoDecreases *p);
  void visitSomeDecreases(SomeDecreases *p);
  void visitSimpleDecreases(SimpleDecreases *p);
  void visitClauseDecreases(ClauseDecreases *p);
  void visitForVariant(ForVariant *p);
  void visitLexprVariant(LexprVariant *p);
  void visitNoSimpleClauses(NoSimpleClauses *p);
  void visitSomeSimpleClauses(SomeSimpleClauses *p);
  void visitAllocatesZones(AllocatesZones *p);
  void visitFreesZones(FreesZones *p);
  void visitPostCondSimpleClauses(PostCondSimpleClauses *p);
  void visitAllocationSimpleClauses(AllocationSimpleClauses *p);
  void visitAssignsSimpleClauses(AssignsSimpleClauses *p);
  void visitExtContractSimpleClauses(ExtContractSimpleClauses *p);
  void visitClausesPostCondSimpleClauses(ClausesPostCondSimpleClauses *p);
  void visitClausesAllocationSimpleClauses(ClausesAllocationSimpleClauses *p);
  void visitClausesAssignsSimpleClauses(ClausesAssignsSimpleClauses *p);
  void visitExtConClausestractSimpleClauses(ExtConClausestractSimpleClauses *p);
  void visitNoExtensionContent(NoExtensionContent *p);
  void visitSomeExtensionContent(SomeExtensionContent *p);
  void visitNoBehaviors(NoBehaviors *p);
  void visitSomeBehaviors(SomeBehaviors *p);
  void visitTheBehaviors(TheBehaviors *p);
  void visitSimpleClausesBehavior(SimpleClausesBehavior *p);
  void visitRequiresAssumes(RequiresAssumes *p);
  void visitSimpleClausesAssumes(SimpleClausesAssumes *p);
  void visitRequiresRequires(RequiresRequires *p);
  void visitNoAssumes(NoAssumes *p);
  void visitSimpleAssumes(SimpleAssumes *p);
  void visitClauseAssumes(ClauseAssumes *p);
  void visitNoComplDisj(NoComplDisj *p);
  void visitSomeComplDisj(SomeComplDisj *p);
  void visitCompleteBehavior(CompleteBehavior *p);
  void visitDisjointBehavior(DisjointBehavior *p);
  void visitCompleteBehaviorClause(CompleteBehaviorClause *p);
  void visitDisjointBehaviorClause(DisjointBehaviorClause *p);
  void visitAssignZone(AssignZone *p);
  void visitAssignZoneFromZone(AssignZoneFromZone *p);
  void visitSomeZone(SomeZone *p);
  void visitNoZone(NoZone *p);
  void visitAnAnnotation(AnAnnotation *p);
  void visitACSLSpec(ACSLSpec *p);
  void visitAnnotDecl(AnnotDecl *p);
  void visitLoopAnnotation(LoopAnnotation *p);
  void visitForContractAnnotation(ForContractAnnotation *p);
  void visitForCodeAnnotation(ForCodeAnnotation *p);
  void visitSimplePragmaOrCodeAnnotation(SimplePragmaOrCodeAnnotation *p);
  void visitPragmaOrCodeAnnotationBeg(PragmaOrCodeAnnotationBeg *p);
  void visitIdentifierAnnotation(IdentifierAnnotation *p);
  void visitGhostAnnotation(GhostAnnotation *p);
  void visitLoopAnnotStackInvariant(LoopAnnotStackInvariant *p);
  void visitLoopAnnotStackEffects(LoopAnnotStackEffects *p);
  void visitLoopAnnotStackAllocation(LoopAnnotStackAllocation *p);
  void visitLoopAnnotStackForBehavior(LoopAnnotStackForBehavior *p);
  void visitLoopAnnotStackVariant(LoopAnnotStackVariant *p);
  void visitLoopAnnotStackPragma(LoopAnnotStackPragma *p);
  void visitLoopAnnotStackGrammarExten(LoopAnnotStackGrammarExten *p);
  void visitNoLoopAnnot(NoLoopAnnot *p);
  void visitSomeLoopAnnot(SomeLoopAnnot *p);
  void visitLoopAssigns(LoopAssigns *p);
  void visitSimpleLoopAllocation(SimpleLoopAllocation *p);
  void visitSimpleLoopInvariant(SimpleLoopInvariant *p);
  void visitCheckLoopInvariant(CheckLoopInvariant *p);
  void visitAdmitLoopInvariant(AdmitLoopInvariant *p);
  void visitSimpleLoopVariant(SimpleLoopVariant *p);
  void visitSimpleLoopGrammarExten(SimpleLoopGrammarExten *p);
  void visitPragmaLoop(PragmaLoop *p);
  void visitImpactKeyWordBegPragma(ImpactKeyWordBegPragma *p);
  void visitSliceKeyWordBegPragma(SliceKeyWordBegPragma *p);
  void visitForKeyWordBegPragma(ForKeyWordBegPragma *p);
  void visitAssertKeyWordBegPragma(AssertKeyWordBegPragma *p);
  void visitCheckKeyWordBegPragma(CheckKeyWordBegPragma *p);
  void visitAdmitKeyWordBegPragma(AdmitKeyWordBegPragma *p);
  void visitInvariantKeyWordBegPragma(InvariantKeyWordBegPragma *p);
  void visitCheckInvariantKeyWordBegPragma(CheckInvariantKeyWordBegPragma *p);
  void visitAdmitInvariantKeyWordBegPragma(AdmitInvariantKeyWordBegPragma *p);
  void visitCheckLoopKeyWordBegPragma(CheckLoopKeyWordBegPragma *p);
  void visitAdmitLoopKeyWordBegPragma(AdmitLoopKeyWordBegPragma *p);
  void visitBegExtCodeAnnotBegPragma(BegExtCodeAnnotBegPragma *p);
  void visitPragmaCodeAnnotSlice(PragmaCodeAnnotSlice *p);
  void visitPragmaCodeAnnotImpact(PragmaCodeAnnotImpact *p);
  void visitCodeAnnot(CodeAnnot *p);
  void visitAssertCodeAnnot(AssertCodeAnnot *p);
  void visitCheckCodeAnnot(CheckCodeAnnot *p);
  void visitAdmitCodeAnnot(AdmitCodeAnnot *p);
  void visitInvariantCodeAnnot(InvariantCodeAnnot *p);
  void visitCheckInvariantCodeAnnot(CheckInvariantCodeAnnot *p);
  void visitAdmitInvariantCodeAnnot(AdmitInvariantCodeAnnot *p);
  void visitExtCodeAnnotCodeAnnot(ExtCodeAnnotCodeAnnot *p);
  void visitPragmaSliceLexpr(PragmaSliceLexpr *p);
  void visitPragmaSlice(PragmaSlice *p);
  void visitImpactPragmaLexpr(ImpactPragmaLexpr *p);
  void visitAnImpactPragma(AnImpactPragma *p);
  void visitDeclGlobalInvariant(DeclGlobalInvariant *p);
  void visitDeclVolatile(DeclVolatile *p);
  void visitDeclTypeAnnot(DeclTypeAnnot *p);
  void visitDeclModelAnnot(DeclModelAnnot *p);
  void visitDeclLogicDef(DeclLogicDef *p);
  void visitDeclExt(DeclExt *p);
  void visitDeclDeprecatedLogic(DeclDeprecatedLogic *p);
  void visitExtGlobalDecl(ExtGlobalDecl *p);
  void visitExtGlobalBlockDecl(ExtGlobalBlockDecl *p);
  void visitReadVolotile(ReadVolotile *p);
  void visitWriteVolotile(WriteVolotile *p);
  void visitTypeInvariant(TypeInvariant *p);
  void visitNoSemicolon(NoSemicolon *p);
  void visitSemicolon(Semicolon *p);
  void visitModelAnnotation(ModelAnnotation *p);
  void visitSimplePolyIdType(SimplePolyIdType *p);
  void visitPolyIdTypeAngles(PolyIdTypeAngles *p);
  void visitPolyTypeId(PolyTypeId *p);
  void visitPolyIdTypeSquares(PolyIdTypeSquares *p);
  void visitPolyIdTypeSquaresAngles(PolyIdTypeSquaresAngles *p);
  void visitNoParameters(NoParameters *p);
  void visitSomeParameters(SomeParameters *p);
  void visitAParameters(AParameters *p);
  void visitSimpleLogicDef(SimpleLogicDef *p);
  void visitPredicateLogicDef(PredicateLogicDef *p);
  void visitInductiveLogicDef(InductiveLogicDef *p);
  void visitLemmaLogicDef(LemmaLogicDef *p);
  void visitCheckLemmaLogicDef(CheckLemmaLogicDef *p);
  void visitAdmitLemmaLogicDef(AdmitLemmaLogicDef *p);
  void visitAxiomaticLogicDef(AxiomaticLogicDef *p);
  void visitTypeLogicDef(TypeLogicDef *p);
  void visitSimpleDeprecatedLogicDecl(SimpleDeprecatedLogicDecl *p);
  void visitPredicateDeprecatedLogicDecl(PredicateDeprecatedLogicDecl *p);
  void visitTypeDeprecatedLogicDecl(TypeDeprecatedLogicDecl *p);
  void visitAxiomDeprecatedLogicDecl(AxiomDeprecatedLogicDecl *p);
  void visitLocidDeclDef(LocidDeclDef *p);
  void visitSimpleLogicDecl(SimpleLogicDecl *p);
  void visitPredicateLogicDecl(PredicateLogicDecl *p);
  void visitTypeLogicDecl(TypeLogicDecl *p);
  void visitAxiomLogicDecl(AxiomLogicDecl *p);
  void visitNoReadsClause(NoReadsClause *p);
  void visitSomeReadsClause(SomeReadsClause *p);
  void visitListOfDatacons(ListOfDatacons *p);
  void visitTypedefLogicTypeGen(TypedefLogicTypeGen *p);
  void visitSimpleDataCons(SimpleDataCons *p);
  void visitDataConsWithPipe(DataConsWithPipe *p);
  void visitDataConsFullIdentifier(DataConsFullIdentifier *p);
  void visitDataConsFullIdentifierFun(DataConsFullIdentifierFun *p);
  void visitIndCase(IndCase *p);
  void visitOptLabelOne(OptLabelOne *p);
  void visitOptLabelTwo(OptLabelTwo *p);
  void visitNoLableList(NoLableList *p);
  void visitLableList(LableList *p);
  void visitLableName(LableName *p);
  void visitEmptyBehaviorNameList(EmptyBehaviorNameList *p);
  void visitAnBehaviorNameList(AnBehaviorNameList *p);
  void visitBehaviorNameAnyIdent(BehaviorNameAnyIdent *p);
  void visitSimpleIdentifierAny(SimpleIdentifierAny *p);
  void visitACSLTypenameIdentifier(ACSLTypenameIdentifier *p);
  void visitTypenameIdentifier(TypenameIdentifier *p);
  void visitKeywordIdentifier(KeywordIdentifier *p);
  void visitTypename(Typename *p);
  void visitAnFullIdentifier(AnFullIdentifier *p);
  void visitACSLTypename(ACSLTypename *p);
  void visitAnIdentifierOrTypename(AnIdentifierOrTypename *p);
  void visitIdentifierIdent(IdentifierIdent *p);
  void visitBehaviorsKeyWord(BehaviorsKeyWord *p);
  void visitLabelKeyWord(LabelKeyWord *p);
  void visitReadsKeyWord(ReadsKeyWord *p);
  void visitWritesKeyWord(WritesKeyWord *p);
  void visitBoendedVarFullIdentifier(BoendedVarFullIdentifier *p);
  void visitBoendedVarACSLTypename(BoendedVarACSLTypename *p);
  void visitBoendedVarTypename(BoendedVarTypename *p);
  void visitCharKeyWord(CharKeyWord *p);
  void visitBooleanKeyWord(BooleanKeyWord *p);
  void visitBoolKeyWord(BoolKeyWord *p);
  void visitConstKeyWord(ConstKeyWord *p);
  void visitDoubleKeyWord(DoubleKeyWord *p);
  void visitEnumKeyWord(EnumKeyWord *p);
  void visitElseKeyWord(ElseKeyWord *p);
  void visitFloatKeyWord(FloatKeyWord *p);
  void visitIfKeyWord(IfKeyWord *p);
  void visitIntKeyWord(IntKeyWord *p);
  void visitLongKeyWord(LongKeyWord *p);
  void visitShortKeyWord(ShortKeyWord *p);
  void visitSignedKeyWord(SignedKeyWord *p);
  void visitSizeofKeyWord(SizeofKeyWord *p);
  void visitStaticKeyWord(StaticKeyWord *p);
  void visitStructKeyWord(StructKeyWord *p);
  void visitUnionKeyWord(UnionKeyWord *p);
  void visitUnsignedKeyWord(UnsignedKeyWord *p);
  void visitVoidKeyWord(VoidKeyWord *p);
  void visitCaseKeyWord(CaseKeyWord *p);
  void visitForKeyWord(ForKeyWord *p);
  void visitVolatileKeyWord(VolatileKeyWord *p);
  void visitEnsuresKeyWord(EnsuresKeyWord *p);
  void visitExitsKeyWord(ExitsKeyWord *p);
  void visitBreaksKeyWord(BreaksKeyWord *p);
  void visitContinuesKeyWord(ContinuesKeyWord *p);
  void visitReturnsKeyWord(ReturnsKeyWord *p);
  void visitCheckEnsuresKeyWord(CheckEnsuresKeyWord *p);
  void visitCheckExitsKeyWord(CheckExitsKeyWord *p);
  void visitCheckBreaksKeyWord(CheckBreaksKeyWord *p);
  void visitCheckContinuesKeyWord(CheckContinuesKeyWord *p);
  void visitCheckReturnsKeyWord(CheckReturnsKeyWord *p);
  void visitAdmitEnsuresKeyWord(AdmitEnsuresKeyWord *p);
  void visitAdmitExitsKeyWord(AdmitExitsKeyWord *p);
  void visitAdmitBreaksKeyWord(AdmitBreaksKeyWord *p);
  void visitAdmitContinuesKeyWord(AdmitContinuesKeyWord *p);
  void visitAdmitReturnsKeyWord(AdmitReturnsKeyWord *p);
  void visitPostCondKeyWord(PostCondKeyWord *p);
  void visitExtContractKeyWord(ExtContractKeyWord *p);
  void visitAssignsKeyWord(AssignsKeyWord *p);
  void visitAllocatesKeyWord(AllocatesKeyWord *p);
  void visitFreesKeyWord(FreesKeyWord *p);
  void visitBehaviorKeyWord(BehaviorKeyWord *p);
  void visitRequiresKeyWord(RequiresKeyWord *p);
  void visitCheckRequiresKeyWord(CheckRequiresKeyWord *p);
  void visitAdmitRequiresKeyWord(AdmitRequiresKeyWord *p);
  void visitTerminatesKeyWord(TerminatesKeyWord *p);
  void visitCompleteKeyWord(CompleteKeyWord *p);
  void visitDecreasesKeyWord(DecreasesKeyWord *p);
  void visitDisjointKeyWord(DisjointKeyWord *p);
  void visitExtCodeAnnotKeyWord(ExtCodeAnnotKeyWord *p);
  void visitExtGlobalKeyWord(ExtGlobalKeyWord *p);
  void visitExtGlobalBlockKeyWord(ExtGlobalBlockKeyWord *p);
  void visitAssumesKeyWord(AssumesKeyWord *p);
  void visitAssertKeyWord(AssertKeyWord *p);
  void visitCheckKeyWord(CheckKeyWord *p);
  void visitAdmitKeyWord(AdmitKeyWord *p);
  void visitGlobalKeyWord(GlobalKeyWord *p);
  void visitImpactKeyWord(ImpactKeyWord *p);
  void visitInductiveKeyWord(InductiveKeyWord *p);
  void visitInvariantKeyWord(InvariantKeyWord *p);
  void visitAdmitInvariantKeyWord(AdmitInvariantKeyWord *p);
  void visitCheckInvariantKeyWord(CheckInvariantKeyWord *p);
  void visitLemmaKeyWord(LemmaKeyWord *p);
  void visitAdmitLemmaKeyWord(AdmitLemmaKeyWord *p);
  void visitCheckLemmaKeyWord(CheckLemmaKeyWord *p);
  void visitLoopKeyWord(LoopKeyWord *p);
  void visitAdmitLoopKeyWord(AdmitLoopKeyWord *p);
  void visitCheckLoopKeyWord(CheckLoopKeyWord *p);
  void visitPragmaKeyWord(PragmaKeyWord *p);
  void visitPredicateKeyWord(PredicateKeyWord *p);
  void visitSliceKeyWord(SliceKeyWord *p);
  void visitTypeKeyWord(TypeKeyWord *p);
  void visitModelKeyWord(ModelKeyWord *p);
  void visitAxiomKeyWord(AxiomKeyWord *p);
  void visitVariantKeyWord(VariantKeyWord *p);
  void visitAxiomaticKeyWord(AxiomaticKeyWord *p);
  void visitInteger(Integer *p);
  void visitReal(Real *p);
  void visitContractKeyWord(ContractKeyWord *p);
  void visitFunctionKeyWord(FunctionKeyWord *p);
  void visitModuleKeyWord(ModuleKeyWord *p);
  void visitIncludeKeyWord(IncludeKeyWord *p);
  void visitAtKeyWord(AtKeyWord *p);
  void visitLetKeyWord(LetKeyWord *p);
  void visitLogicKeyWord(LogicKeyWord *p);
  void visitCKeyWord(CKeyWord *p);
  void visitACSLCKeyWord(ACSLCKeyWord *p);
  void visitExtSpecKeyWord(ExtSpecKeyWord *p);
  void visitACSLSpecKeyWord(ACSLSpecKeyWord *p);
  void visitACSLDeclCodeAnnotKeyWord(ACSLDeclCodeAnnotKeyWord *p);
  void visitSlashAllocableKeyWord(SlashAllocableKeyWord *p);
  void visitSlashAllocationKeyWord(SlashAllocationKeyWord *p);
  void visitSlashAutomaticKeyWord(SlashAutomaticKeyWord *p);
  void visitSlashAtKeyWord(SlashAtKeyWord *p);
  void visitSlashBaseAddrKeyWord(SlashBaseAddrKeyWord *p);
  void visitSlashBlockLengthKeyWord(SlashBlockLengthKeyWord *p);
  void visitSlashGhostKeyWord(SlashGhostKeyWord *p);
  void visitSlashDynamicKeyWord(SlashDynamicKeyWord *p);
  void visitSlashEmptyKeyWord(SlashEmptyKeyWord *p);
  void visitSlashFalseKeyWord(SlashFalseKeyWord *p);
  void visitSlashForallKeyWord(SlashForallKeyWord *p);
  void visitSlashFreeableKeyWord(SlashFreeableKeyWord *p);
  void visitSlashFreshKeyWord(SlashFreshKeyWord *p);
  void visitSlashFromKeyWord(SlashFromKeyWord *p);
  void visitSlashInterKeyWord(SlashInterKeyWord *p);
  void visitSlashLambdaKeyWord(SlashLambdaKeyWord *p);
  void visitSlashLetKeyWord(SlashLetKeyWord *p);
  void visitSlashNothingKeyWord(SlashNothingKeyWord *p);
  void visitSlashNullKeyWord(SlashNullKeyWord *p);
  void visitSlashOldKeyWord(SlashOldKeyWord *p);
  void visitSlashOffsetKeyWord(SlashOffsetKeyWord *p);
  void visitSlashRegisterKeyWord(SlashRegisterKeyWord *p);
  void visitSlashResultKeyWord(SlashResultKeyWord *p);
  void visitSlashSeparatedKeyWord(SlashSeparatedKeyWord *p);
  void visitSlashTrueKeyWord(SlashTrueKeyWord *p);
  void visitSlashTypeKeyWord(SlashTypeKeyWord *p);
  void visitSlashTypeofKeyWord(SlashTypeofKeyWord *p);
  void visitSlashUnionKeyWord(SlashUnionKeyWord *p);
  void visitSlashUnallocatedKeyWord(SlashUnallocatedKeyWord *p);
  void visitSlashObjectPointerKeyWord(SlashObjectPointerKeyWord *p);
  void visitSlashValidKeyWord(SlashValidKeyWord *p);
  void visitSlashValidIndexKeyWord(SlashValidIndexKeyWord *p);
  void visitSlashValidRangeKeyWord(SlashValidRangeKeyWord *p);
  void visitSlashValidReadKeyWord(SlashValidReadKeyWord *p);
  void visitSlashValidFunctionKeyWord(SlashValidFunctionKeyWord *p);
  void visitSlashInitializedKeyWord(SlashInitializedKeyWord *p);
  void visitSlashDanglingKeyWord(SlashDanglingKeyWord *p);
  void visitSlashWithKeyWord(SlashWithKeyWord *p);
  void visitWildCardAnyIdent(WildCardAnyIdent *p);
  void visitWildCardBSKeyWord(WildCardBSKeyWord *p);
  void visitAmp(Amp *p);
  void visitAnd(And *p);
  void visitArrow(Arrow *p);
  void visitBIff(BIff *p);
  void visitBImplicate(BImplicate *p);
  void visitColon(Colon *p);
  void visitColonColon(ColonColon *p);
  void visitComma(Comma *p);
  void visitIntConstant(IntConstant *p);
  void visitFloatConstant(FloatConstant *p);
  void visitStringConstant(StringConstant *p);
  void visitWstringConstant(WstringConstant *p);
  void visitDollar(Dollar *p);
  void visitDot(Dot *p);
  void visitDotDot(DotDot *p);
  void visitDotDotDot(DotDotDot *p);
  void visitEQ(EQ *p);
  void visitEqual(Equal *p);
  void visitExistsKeyWord(ExistsKeyWord *p);
  void visitGreaterEq(GreaterEq *p);
  void visitGhostKeyWord(GhostKeyWord *p);
  void visitGreater(Greater *p);
  void visitGreaterGreater(GreaterGreater *p);
  void visitHat(Hat *p);
  void visitHatHat(HatHat *p);
  void visitIff(Iff *p);
  void visitImplicate(Implicate *p);
  void visitLeftBrace(LeftBrace *p);
  void visitLessEq(LessEq *p);
  void visitLeftPar(LeftPar *p);
  void visitLeftSquare(LeftSquare *p);
  void visitLeftSquarePipe(LeftSquarePipe *p);
  void visitLess(Less *p);
  void visitLessLess(LessLess *p);
  void visitMinus(Minus *p);
  void visitNotEq(NotEq *p);
  void visitNot(Not *p);
  void visitPipePipe(PipePipe *p);
  void visitMod(Mod *p);
  void visitPiKeyWord(PiKeyWord *p);
  void visitPipe(Pipe *p);
  void visitPlus(Plus *p);
  void visitQuestion(Question *p);
  void visitRightBrace(RightBrace *p);
  void visitRightPar(RightPar *p);
  void visitRightSquare(RightSquare *p);
  void visitRightSquarePipe(RightSquarePipe *p);
  void visitSemiColon(SemiColon *p);
  void visitDivide(Divide *p);
  void visitMult(Mult *p);
  void visitMultHat(MultHat *p);
  void visitStringLiteral(StringLiteral *p);
  void visitTildeKeyWord(TildeKeyWord *p);
  void visitInKeyWord(InKeyWord *p);
  void visitListLexpr(ListLexpr *p);
  void visitListLexprRelInner(ListLexprRelInner *p);
  void visitListSTRING_LITERAL(ListSTRING_LITERAL *p);
  void visitListFieldInitElt(ListFieldInitElt *p);
  void visitListArrayInitElt(ListArrayInitElt *p);
  void visitListUpdateElt(ListUpdateElt *p);
  void visitListPathElt(ListPathElt *p);
  void visitListBindersReentrance(ListBindersReentrance *p);
  void visitListAbsParam(ListAbsParam *p);
  void visitListParameter(ListParameter *p);
  void visitListLogicTypeGenOFTYPENAME(ListLogicTypeGenOFTYPENAME *p);
  void visitListLogicTypeGenOFIdentifierOrTypename(ListLogicTypeGenOFIdentifierOrTypename *p);
  void visitListCV(ListCV *p);
  void visitListStars(ListStars *p);
  void visitListStarsCV(ListStarsCV *p);
  void visitListTabs(ListTabs *p);
  void visitListFullIdentifier(ListFullIdentifier *p);
  void visitListExtGlobalClause(ListExtGlobalClause *p);
  void visitListExtGlobalSpec(ListExtGlobalSpec *p);
  void visitListExtModuleSpec(ListExtModuleSpec *p);
  void visitListExtFunctionSpec(ListExtFunctionSpec *p);
  void visitListExtFunSpec(ListExtFunSpec *p);
  void visitListStmtMarkup(ListStmtMarkup *p);
  void visitListDecl(ListDecl *p);
  void visitListExtDecl(ListExtDecl *p);
  void visitListVolatileOpt(ListVolatileOpt *p);
  void visitListLogicDecl(ListLogicDecl *p);
  void visitListDataconsWithSeparator(ListDataconsWithSeparator *p);
  void visitListIndcase(ListIndcase *p);
  void visitListLabelName(ListLabelName *p);
  void visitListBehaviorName(ListBehaviorName *p);
  void visitListIdentifierOrTypenameFull(ListIdentifierOrTypenameFull *p);
  void visitListWildcard(ListWildcard *p);

  void visitInteger(Integer x);
  void visitChar(Char x);
  void visitDouble(Double x);
  void visitString(String x);
  void visitIdent(Ident x);
  void visitEXT_GLOBAL(EXT_GLOBAL x);
  void visitEXT_GLOBAL_BLOCK(EXT_GLOBAL_BLOCK x);
  void visitEXT_CODE_ANNOT(EXT_CODE_ANNOT x);
  void visitEXT_CONTRACT(EXT_CONTRACT x);
  void visitSTRING_LITERAL(STRING_LITERAL x);
  void visitWSTRING_CONSTANT(WSTRING_CONSTANT x);
  void visitTYPENAME(TYPENAME x);

};
}

#endif
