/* -*- c++ -*- File generated by the BNF Converter (bnfc 2.9.4.1). */

/* Parser definition to be used with Bison. */

/* Generate header file for lexer. */
%defines "Bison.H"
%name-prefix = "acsl"
  /* From Bison 2.6: %define api.prefix {acsl} */

/* Reentrant parser */
%pure_parser
  /* From Bison 2.3b (2008): %define api.pure full */
%lex-param   { yyscan_t scanner }
%parse-param { yyscan_t scanner }

/* Turn on line/column tracking in the acsllloc structure: */
%locations

/* Argument to the parser to be filled with the parsed tree. */
%parse-param { YYSTYPE *result }

%{
/* Begin C preamble code */

#include <algorithm> /* for std::reverse */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "Absyn.H"

#define YYMAXDEPTH 10000000

/* The type yyscan_t is defined by flex, but we need it in the parser already. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

typedef struct yy_buffer_state *YY_BUFFER_STATE;
extern YY_BUFFER_STATE acsl_scan_string(const char *str, yyscan_t scanner);
extern void acsl_delete_buffer(YY_BUFFER_STATE buf, yyscan_t scanner);

extern void acsllex_destroy(yyscan_t scanner);
extern char* acslget_text(yyscan_t scanner);

extern yyscan_t acsl_initialize_lexer(FILE * inp);

/* End C preamble code */
%}

%union
{
  int    _int;
  char   _char;
  double _double;
  char*  _string;
  acsl::LexprEOF* lexpreof_;
  acsl::LexprList* lexprlist_;
  acsl::ListLexpr* listlexpr_;
  acsl::LexprOption* lexproption_;
  acsl::Lexpr* lexpr_;
  acsl::LexprBinder* lexprbinder_;
  acsl::LexprRelInner* lexprrelinner_;
  acsl::ListLexprRelInner* listlexprrelinner_;
  acsl::Relation* relation_;
  acsl::ListSTRING_LITERAL* liststring_literal_;
  acsl::Range* range_;
  acsl::FieldInitElt* fieldinitelt_;
  acsl::ListFieldInitElt* listfieldinitelt_;
  acsl::ArrayInitElt* arrayinitelt_;
  acsl::ListArrayInitElt* listarrayinitelt_;
  acsl::UpdateElt* updateelt_;
  acsl::ListUpdateElt* listupdateelt_;
  acsl::PathElt* pathelt_;
  acsl::ListPathElt* listpathelt_;
  acsl::Binders* binders_;
  acsl::BindersReentrance* bindersreentrance_;
  acsl::ListBindersReentrance* listbindersreentrance_;
  acsl::VarSpec* varspec_;
  acsl::ArraySize* arraysize_;
  acsl::AbsParamTypeList* absparamtypelist_;
  acsl::AbsParam* absparam_;
  acsl::ListAbsParam* listabsparam_;
  acsl::Parameter* parameter_;
  acsl::ListParameter* listparameter_;
  acsl::LogicTypeGenOFTYPENAME* logictypegenoftypename_;
  acsl::ListLogicTypeGenOFTYPENAME* listlogictypegenoftypename_;
  acsl::LogicTypeGenOFIdentifierOrTypename* logictypegenofidentifierortypename_;
  acsl::ListLogicTypeGenOFIdentifierOrTypename* listlogictypegenofidentifierortypename_;
  acsl::CV* cv_;
  acsl::ListCV* listcv_;
  acsl::TypeSpecCVOFTYPENAME* typespeccvoftypename_;
  acsl::CastLogicType* castlogictype_;
  acsl::LogicRtType* logicrttype_;
  acsl::AbsSpecOption* absspecoption_;
  acsl::AbsSpecCVOption* absspeccvoption_;
  acsl::AbsSpec* absspec_;
  acsl::AbsSpecCV* absspeccv_;
  acsl::Stars* stars_;
  acsl::ListStars* liststars_;
  acsl::StarsCV* starscv_;
  acsl::ListStarsCV* liststarscv_;
  acsl::Tabs* tabs_;
  acsl::ListTabs* listtabs_;
  acsl::TypeSpecSimple* typespecsimple_;
  acsl::TypeSpecOFTYPENAME* typespecoftypename_;
  acsl::TypeSpecOFIdentifierOrTypename* typespecofidentifierortypename_;
  acsl::FullIdentifier* fullidentifier_;
  acsl::ListFullIdentifier* listfullidentifier_;
  acsl::ExtSpec* extspec_;
  acsl::ExtGlobalClausesOpt* extglobalclausesopt_;
  acsl::ExtGlobalClause* extglobalclause_;
  acsl::ListExtGlobalClause* listextglobalclause_;
  acsl::ExtGlobalSpecsOpt* extglobalspecsopt_;
  acsl::ExtGlobalSpec* extglobalspec_;
  acsl::ListExtGlobalSpec* listextglobalspec_;
  acsl::ExtModuleSpecsOpt* extmodulespecsopt_;
  acsl::ExtModuleSpec* extmodulespec_;
  acsl::ListExtModuleSpec* listextmodulespec_;
  acsl::ExtFunctionSpecsOpt* extfunctionspecsopt_;
  acsl::ExtFunctionSpecs* extfunctionspecs_;
  acsl::ExtFunctionSpec* extfunctionspec_;
  acsl::ListExtFunctionSpec* listextfunctionspec_;
  acsl::ExtFunSpec* extfunspec_;
  acsl::ListExtFunSpec* listextfunspec_;
  acsl::ExtIdentifierOpt* extidentifieropt_;
  acsl::StmtMarkup* stmtmarkup_;
  acsl::ListStmtMarkup* liststmtmarkup_;
  acsl::Spec* spec_;
  acsl::Contract* contract_;
  acsl::ClauseKW* clausekw_;
  acsl::Requires* requires_;
  acsl::NERequires* nerequires_;
  acsl::Terminates* terminates_;
  acsl::NETerminates* neterminates_;
  acsl::Decreases* decreases_;
  acsl::NEDecreases* nedecreases_;
  acsl::Variant* variant_;
  acsl::SimpleClauses* simpleclauses_;
  acsl::Allocation* allocation_;
  acsl::NESimpleClauses* nesimpleclauses_;
  acsl::ExtensionContent* extensioncontent_;
  acsl::Behaviors* behaviors_;
  acsl::NEBehaviors* nebehaviors_;
  acsl::BehaviorBody* behaviorbody_;
  acsl::Assumes* assumes_;
  acsl::CompleteOrDisjoint* completeordisjoint_;
  acsl::NECompleteOrDisjoint* necompleteordisjoint_;
  acsl::Assigns* assigns_;
  acsl::Zones* zones_;
  acsl::Annot* annot_;
  acsl::Annotation* annotation_;
  acsl::LoopAnnotStack* loopannotstack_;
  acsl::LoopAnnotOpt* loopannotopt_;
  acsl::LoopEffects* loopeffects_;
  acsl::LoopAllocation* loopallocation_;
  acsl::LoopInvariant* loopinvariant_;
  acsl::LoopVariant* loopvariant_;
  acsl::LoopGrammarExtension* loopgrammarextension_;
  acsl::LoopPragma* looppragma_;
  acsl::BegPragmaOrCodeAnnotation* begpragmaorcodeannotation_;
  acsl::PragmaOrCodeAnnotation* pragmaorcodeannotation_;
  acsl::CodeAnnotation* codeannotation_;
  acsl::SlicePragma* slicepragma_;
  acsl::ImpactPragma* impactpragma_;
  acsl::Decl* decl_;
  acsl::ListDecl* listdecl_;
  acsl::ExtDecl* extdecl_;
  acsl::ListExtDecl* listextdecl_;
  acsl::VolatileOpt* volatileopt_;
  acsl::ListVolatileOpt* listvolatileopt_;
  acsl::TypeAnnot* typeannot_;
  acsl::OptSemicolon* optsemicolon_;
  acsl::ModelAnnot* modelannot_;
  acsl::PolyIdType* polyidtype_;
  acsl::PolyId* polyid_;
  acsl::OptParameters* optparameters_;
  acsl::Parameters* parameters_;
  acsl::LogicDef* logicdef_;
  acsl::DeprecatedLogicDecl* deprecatedlogicdecl_;
  acsl::LogicDecl* logicdecl_;
  acsl::ListLogicDecl* listlogicdecl_;
  acsl::ReadsClause* readsclause_;
  acsl::Typedef* typedef_;
  acsl::DataconsWithSeparator* dataconswithseparator_;
  acsl::ListDataconsWithSeparator* listdataconswithseparator_;
  acsl::Datacons* datacons_;
  acsl::Indcase* indcase_;
  acsl::ListIndcase* listindcase_;
  acsl::OptLabel* optlabel_;
  acsl::OptLabelList* optlabellist_;
  acsl::LabelName* labelname_;
  acsl::ListLabelName* listlabelname_;
  acsl::BehaviorNameList* behaviornamelist_;
  acsl::BehaviorName* behaviorname_;
  acsl::ListBehaviorName* listbehaviorname_;
  acsl::AnyIdentifier* anyidentifier_;
  acsl::IdentifierOrTypename* identifierortypename_;
  acsl::IdentifierOrTypenameFull* identifierortypenamefull_;
  acsl::ListIdentifierOrTypenameFull* listidentifierortypenamefull_;
  acsl::Identifier* identifier_;
  acsl::BoundedVar* boundedvar_;
  acsl::CKeyword* ckeyword_;
  acsl::ACSLCKeyword* acslckeyword_;
  acsl::PostCond* postcond_;
  acsl::IsACSLSpec* isacslspec_;
  acsl::IsACSLDeclOrCodeAnnot* isacsldeclorcodeannot_;
  acsl::IsACSLTypename* isacsltypename_;
  acsl::IsExtSpec* isextspec_;
  acsl::Keyword* keyword_;
  acsl::BSKeyword* bskeyword_;
  acsl::Wildcard* wildcard_;
  acsl::ListWildcard* listwildcard_;
}

%{
void yyerror(YYLTYPE *loc, yyscan_t scanner, YYSTYPE *result, const char *msg)
{
  fprintf(stderr, "error: %d,%d: %s at %s\n",
    loc->first_line, loc->first_column, msg, acslget_text(scanner));
}

int yyparse(yyscan_t scanner, YYSTYPE *result);

extern int yylex(YYSTYPE *lvalp, YYLTYPE *llocp, yyscan_t scanner);
%}

%token          _ERROR_
%token          _BANG               /* ! */
%token          _BANGEQ             /* != */
%token          _DOLLAR             /* $ */
%token          _PERCENT            /* % */
%token          _AMP                /* & */
%token          _DAMP               /* && */
%token          _LPAREN             /* ( */
%token          _RPAREN             /* ) */
%token          _STAR               /* * */
%token          _SYMB_57            /* *^ */
%token          _PLUS               /* + */
%token          _COMMA              /* , */
%token          _MINUS              /* - */
%token          _SYMB_9             /* --> */
%token          _RARROW             /* -> */
%token          _DOT                /* . */
%token          _DDOT               /* .. */
%token          _ELLIPSIS           /* ... */
%token          _SLASH              /* / */
%token          _COLON              /* : */
%token          _DCOLON             /* :: */
%token          _SEMI               /* ; */
%token          _LT                 /* < */
%token          _SYMB_10            /* <--> */
%token          _DLT                /* << */
%token          _LDARROW            /* <= */
%token          _SYMB_2             /* <==> */
%token          _EQ                 /* = */
%token          _DEQ                /* == */
%token          _SYMB_1             /* ==> */
%token          _GT                 /* > */
%token          _GTEQ               /* >= */
%token          _DGT                /* >> */
%token          _QUESTION           /* ? */
%token          _KW_Assigns         /* Assigns */
%token          _KW_Assumes         /* Assumes */
%token          _KW_Behaviors       /* Behaviors */
%token          _KW_Contract        /* Contract */
%token          _KW_Decreases       /* Decreases */
%token          _KW_Requires        /* Requires */
%token          _KW_Terminates      /* Terminates */
%token          _KW_Variant         /* Variant */
%token          _LBRACK             /* [ */
%token          _SYMB_62            /* [| */
%token          _SYMB_45            /* \\Allocation */
%token          _SYMB_43            /* \\allocable */
%token          _SYMB_66            /* \\at */
%token          _SYMB_46            /* \\automatic */
%token          _SYMB_40            /* \\base_addr */
%token          _SYMB_41            /* \\block_length */
%token          _SYMB_38            /* \\dangling */
%token          _SYMB_47            /* \\dynamic */
%token          _SYMB_76            /* \\empty */
%token          _SYMB_19            /* \\exists */
%token          _SYMB_28            /* \\false */
%token          _SYMB_18            /* \\forall */
%token          _SYMB_44            /* \\freeable */
%token          _SYMB_39            /* \\fresh */
%token          _SYMB_84            /* \\from */
%token          _SYMB_82            /* \\ghost */
%token          _SYMB_11            /* \\in */
%token          _SYMB_37            /* \\initialized */
%token          _SYMB_78            /* \\inter */
%token          _SYMB_20            /* \\lambda */
%token          _SYMB_15            /* \\let */
%token          _SYMB_85            /* \\nothing */
%token          _SYMB_51            /* \\null */
%token          _SYMB_29            /* \\object_pointer */
%token          _SYMB_42            /* \\offset */
%token          _SYMB_65            /* \\old */
%token          _SYMB_71            /* \\pi */
%token          _SYMB_48            /* \\register */
%token          _SYMB_67            /* \\result */
%token          _SYMB_68            /* \\separated */
%token          _SYMB_49            /* \\static */
%token          _SYMB_27            /* \\true */
%token          _SYMB_75            /* \\type */
%token          _SYMB_74            /* \\typeof */
%token          _SYMB_50            /* \\unallocated */
%token          _SYMB_77            /* \\union */
%token          _SYMB_32            /* \\valid */
%token          _SYMB_34            /* \\valid_function */
%token          _SYMB_35            /* \\valid_index */
%token          _SYMB_36            /* \\valid_range */
%token          _SYMB_33            /* \\valid_read */
%token          _SYMB_79            /* \\with */
%token          _RBRACK             /* ] */
%token          _CARET              /* ^ */
%token          _DCARET             /* ^^ */
%token          _SYMB_83            /* _Bool */
%token          _KW_admit           /* admit */
%token          _KW_allocates       /* allocates */
%token          _KW_assert          /* assert */
%token          _KW_at              /* at */
%token          _KW_axiom           /* axiom */
%token          _KW_axiomatic       /* axiomatic */
%token          _KW_behavior        /* behavior */
%token          _KW_boolean         /* boolean */
%token          _KW_breaks          /* breaks */
%token          _KW_case            /* case */
%token          _KW_char            /* char */
%token          _KW_check           /* check */
%token          _KW_complete        /* complete */
%token          _KW_const           /* const */
%token          _KW_continues       /* continues */
%token          _KW_disjoint        /* disjoint */
%token          _KW_double          /* double */
%token          _KW_else            /* else */
%token          _KW_ensures         /* ensures */
%token          _KW_enum            /* enum */
%token          _KW_exits           /* exits */
%token          _KW_float           /* float */
%token          _KW_for             /* for */
%token          _KW_frees           /* frees */
%token          _KW_function        /* function */
%token          _KW_global          /* global */
%token          _KW_if              /* if */
%token          _KW_impact          /* impact */
%token          _KW_include         /* include */
%token          _KW_inductive       /* inductive */
%token          _KW_int             /* int */
%token          _KW_integer         /* integer */
%token          _KW_invariant       /* invariant */
%token          _KW_label           /* label */
%token          _KW_lemma           /* lemma */
%token          _KW_let             /* let */
%token          _KW_logic           /* logic */
%token          _KW_long            /* long */
%token          _KW_loop            /* loop */
%token          _KW_model           /* model */
%token          _KW_module          /* module */
%token          _KW_pragma          /* pragma */
%token          _KW_predicate       /* predicate */
%token          _KW_reads           /* reads */
%token          _KW_real            /* real */
%token          _KW_requires        /* requires */
%token          _KW_returns         /* returns */
%token          _KW_short           /* short */
%token          _KW_signed          /* signed */
%token          _KW_sizeof          /* sizeof */
%token          _KW_slice           /* slice */
%token          _KW_struct          /* struct */
%token          _KW_type            /* type */
%token          _KW_union           /* union */
%token          _KW_unsigned        /* unsigned */
%token          _KW_void            /* void */
%token          _KW_volatile        /* volatile */
%token          _KW_writes          /* writes */
%token          _LBRACE             /* { */
%token          _BAR                /* | */
%token          _SYMB_63            /* |] */
%token          _DBAR               /* || */
%token          _RBRACE             /* } */
%token          _TILDE              /* ~ */
%token<_string> T_EXT_CODE_ANNOT    /* EXT_CODE_ANNOT */
%token<_string> T_EXT_CONTRACT      /* EXT_CONTRACT */
%token<_string> T_EXT_GLOBAL        /* EXT_GLOBAL */
%token<_string> T_EXT_GLOBAL_BLOCK  /* EXT_GLOBAL_BLOCK */
%token<_string> T_STRING_LITERAL    /* STRING_LITERAL */
%token<_string> T_TYPENAME          /* TYPENAME */
%token<_string> T_WSTRING_CONSTANT  /* WSTRING_CONSTANT */
%token<_string> _STRING_
%token<_int>    _INTEGER_
%token<_double> _DOUBLE_
%token<_string> _IDENT_

%type <lexpreof_> LexprEOF
%type <lexprlist_> LexprList
%type <listlexpr_> ListLexpr
%type <lexproption_> LexprOption
%type <lexpr_> Lexpr
%type <lexpr_> Lexpr1
%type <lexpr_> Lexpr2
%type <lexprbinder_> LexprBinder
%type <lexprrelinner_> LexprRelInner
%type <listlexprrelinner_> ListLexprRelInner
%type <relation_> Relation
%type <lexpr_> Lexpr3
%type <liststring_literal_> ListSTRING_LITERAL
%type <range_> Range
%type <fieldinitelt_> FieldInitElt
%type <listfieldinitelt_> ListFieldInitElt
%type <arrayinitelt_> ArrayInitElt
%type <listarrayinitelt_> ListArrayInitElt
%type <updateelt_> UpdateElt
%type <listupdateelt_> ListUpdateElt
%type <pathelt_> PathElt
%type <listpathelt_> ListPathElt
%type <binders_> Binders
%type <bindersreentrance_> BindersReentrance
%type <listbindersreentrance_> ListBindersReentrance
%type <varspec_> VarSpec
%type <arraysize_> ArraySize
%type <varspec_> VarSpec1
%type <absparamtypelist_> AbsParamTypeList
%type <absparam_> AbsParam
%type <listabsparam_> ListAbsParam
%type <parameter_> Parameter
%type <listparameter_> ListParameter
%type <logictypegenoftypename_> LogicTypeGenOFTYPENAME
%type <listlogictypegenoftypename_> ListLogicTypeGenOFTYPENAME
%type <logictypegenofidentifierortypename_> LogicTypeGenOFIdentifierOrTypename
%type <listlogictypegenofidentifierortypename_> ListLogicTypeGenOFIdentifierOrTypename
%type <cv_> CV
%type <listcv_> ListCV
%type <typespeccvoftypename_> TypeSpecCVOFTYPENAME
%type <castlogictype_> CastLogicType
%type <logicrttype_> LogicRtType
%type <absspecoption_> AbsSpecOption
%type <absspeccvoption_> AbsSpecCVOption
%type <absspec_> AbsSpec
%type <absspeccv_> AbsSpecCV
%type <absspec_> AbsSpec1
%type <absspeccv_> AbsSpecCV1
%type <stars_> Stars
%type <liststars_> ListStars
%type <starscv_> StarsCV
%type <liststarscv_> ListStarsCV
%type <tabs_> Tabs
%type <listtabs_> ListTabs
%type <typespecsimple_> TypeSpecSimple
%type <typespecoftypename_> TypeSpecOFTYPENAME
%type <typespecofidentifierortypename_> TypeSpecOFIdentifierOrTypename
%type <fullidentifier_> FullIdentifier
%type <listfullidentifier_> ListFullIdentifier
%type <extspec_> ExtSpec
%type <extglobalclausesopt_> ExtGlobalClausesOpt
%type <extglobalclause_> ExtGlobalClause
%type <listextglobalclause_> ListExtGlobalClause
%type <extglobalspecsopt_> ExtGlobalSpecsOpt
%type <extglobalspec_> ExtGlobalSpec
%type <listextglobalspec_> ListExtGlobalSpec
%type <extmodulespecsopt_> ExtModuleSpecsOpt
%type <extmodulespec_> ExtModuleSpec
%type <listextmodulespec_> ListExtModuleSpec
%type <extfunctionspecsopt_> ExtFunctionSpecsOpt
%type <extfunctionspecs_> ExtFunctionSpecs
%type <extfunctionspec_> ExtFunctionSpec
%type <listextfunctionspec_> ListExtFunctionSpec
%type <extfunspec_> ExtFunSpec
%type <listextfunspec_> ListExtFunSpec
%type <extidentifieropt_> ExtIdentifierOpt
%type <stmtmarkup_> StmtMarkup
%type <liststmtmarkup_> ListStmtMarkup
%type <spec_> Spec
%type <contract_> Contract
%type <clausekw_> ClauseKW
%type <requires_> Requires
%type <nerequires_> NERequires
%type <terminates_> Terminates
%type <neterminates_> NETerminates
%type <decreases_> Decreases
%type <nedecreases_> NEDecreases
%type <variant_> Variant
%type <simpleclauses_> SimpleClauses
%type <allocation_> Allocation
%type <nesimpleclauses_> NESimpleClauses
%type <extensioncontent_> ExtensionContent
%type <behaviors_> Behaviors
%type <nebehaviors_> NEBehaviors
%type <behaviorbody_> BehaviorBody
%type <assumes_> Assumes
%type <completeordisjoint_> CompleteOrDisjoint
%type <necompleteordisjoint_> NECompleteOrDisjoint
%type <assigns_> Assigns
%type <zones_> Zones
%type <annot_> Annot
%type <annotation_> Annotation
%type <loopannotstack_> LoopAnnotStack
%type <loopannotopt_> LoopAnnotOpt
%type <loopeffects_> LoopEffects
%type <loopallocation_> LoopAllocation
%type <loopinvariant_> LoopInvariant
%type <loopvariant_> LoopVariant
%type <loopgrammarextension_> LoopGrammarExtension
%type <looppragma_> LoopPragma
%type <begpragmaorcodeannotation_> BegPragmaOrCodeAnnotation
%type <pragmaorcodeannotation_> PragmaOrCodeAnnotation
%type <codeannotation_> CodeAnnotation
%type <slicepragma_> SlicePragma
%type <impactpragma_> ImpactPragma
%type <decl_> Decl
%type <listdecl_> ListDecl
%type <extdecl_> ExtDecl
%type <listextdecl_> ListExtDecl
%type <volatileopt_> VolatileOpt
%type <listvolatileopt_> ListVolatileOpt
%type <typeannot_> TypeAnnot
%type <optsemicolon_> OptSemicolon
%type <modelannot_> ModelAnnot
%type <polyidtype_> PolyIdType
%type <polyid_> PolyId
%type <optparameters_> OptParameters
%type <parameters_> Parameters
%type <logicdef_> LogicDef
%type <deprecatedlogicdecl_> DeprecatedLogicDecl
%type <logicdecl_> LogicDecl
%type <listlogicdecl_> ListLogicDecl
%type <readsclause_> ReadsClause
%type <typedef_> Typedef
%type <dataconswithseparator_> DataconsWithSeparator
%type <listdataconswithseparator_> ListDataconsWithSeparator
%type <datacons_> Datacons
%type <indcase_> Indcase
%type <listindcase_> ListIndcase
%type <optlabel_> OptLabel1
%type <optlabel_> OptLabel2
%type <optlabellist_> OptLabelList
%type <labelname_> LabelName
%type <listlabelname_> ListLabelName
%type <behaviornamelist_> BehaviorNameList
%type <behaviorname_> BehaviorName
%type <listbehaviorname_> ListBehaviorName
%type <anyidentifier_> AnyIdentifier
%type <identifierortypename_> IdentifierOrTypename
%type <identifierortypenamefull_> IdentifierOrTypenameFull
%type <listidentifierortypenamefull_> ListIdentifierOrTypenameFull
%type <identifier_> Identifier
%type <boundedvar_> BoundedVar
%type <ckeyword_> CKeyword
%type <acslckeyword_> ACSLCKeyword
%type <postcond_> PostCond
%type <isacslspec_> IsACSLSpec
%type <isacsldeclorcodeannot_> IsACSLDeclOrCodeAnnot
%type <isacsltypename_> IsACSLTypename
%type <isextspec_> IsExtSpec
%type <keyword_> Keyword
%type <bskeyword_> BSKeyword
%type <wildcard_> Wildcard
%type <listwildcard_> ListWildcard

%start LexprEOF

%%

LexprEOF : Lexpr { $$ = new acsl::LexprEof($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpreof_ = $$; }
;
LexprList : /* empty */ { $$ = new acsl::EmptyLexprList(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexprlist_ = $$; }
  | ListLexpr { std::reverse($1->begin(),$1->end()) ;$$ = new acsl::NonEmptyLexprList($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexprlist_ = $$; }
;
ListLexpr : Lexpr { $$ = new acsl::ListLexpr(); $$->push_back($1); result->listlexpr_ = $$; }
  | Lexpr _COMMA ListLexpr { $3->push_back($1); $$ = $3; result->listlexpr_ = $$; }
;
LexprOption : /* empty */ { $$ = new acsl::NoLexprOption(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexproption_ = $$; }
  | Lexpr { $$ = new acsl::SomeLexprOption($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexproption_ = $$; }
;
Lexpr : /* empty */ { $$ = new acsl::NoLexpr(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | Lexpr _SYMB_1 Lexpr { $$ = new acsl::ImplLexpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | Lexpr _SYMB_2 Lexpr { $$ = new acsl::IffLexpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | Lexpr _DBAR Lexpr { $$ = new acsl::OrLexpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | Lexpr _DAMP Lexpr { $$ = new acsl::AndLexpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | Lexpr _DCARET Lexpr { $$ = new acsl::HatHatLexpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | Lexpr _AMP Lexpr { $$ = new acsl::AmpLexpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | Lexpr _BAR Lexpr { $$ = new acsl::PipeLexpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | Lexpr _CARET Lexpr { $$ = new acsl::HatLexpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | Lexpr _SYMB_9 Lexpr { $$ = new acsl::BimpliesLexpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | Lexpr _SYMB_10 Lexpr { $$ = new acsl::BiffLexpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | Lexpr _SYMB_11 Lexpr { $$ = new acsl::InLexpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | Lexpr _QUESTION Lexpr _COLON Lexpr { $$ = new acsl::TernaryLexpr($1, $3, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | AnyIdentifier _COLON Lexpr { $$ = new acsl::IdAssignLexpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | ListSTRING_LITERAL _COLON Lexpr { std::reverse($1->begin(),$1->end()) ;$$ = new acsl::StrAssignLexpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | Lexpr1 { $$ = $1; $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
;
Lexpr1 : Lexpr2 { $$ = $1; $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | Lexpr3 ListLexprRelInner Relation Lexpr2 { $$ = new acsl::RelationLexpr($1, $2, $3, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
;
Lexpr2 : Lexpr3 { $$ = $1; $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | LexprBinder { $$ = new acsl::BinderLexpr($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _BANG LexprBinder { $$ = new acsl::NotBinderLexpr($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
;
LexprBinder : _SYMB_15 BoundedVar _EQ Lexpr _SEMI Lexpr { $$ = new acsl::LetBinderLexpr($2, $4, $6); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexprbinder_ = $$; }
  | _SYMB_18 Binders _SEMI Lexpr { $$ = new acsl::ForallBinderLexpr($2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexprbinder_ = $$; }
  | _SYMB_19 Binders _SEMI Lexpr { $$ = new acsl::ExistBinderLexpr($2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexprbinder_ = $$; }
  | _SYMB_20 Binders _SEMI Lexpr { $$ = new acsl::LambdaBinderLexpr($2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexprbinder_ = $$; }
;
LexprRelInner : Relation Lexpr3 { $$ = new acsl::RelInnerLexpr($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexprrelinner_ = $$; }
;
ListLexprRelInner : /* empty */ { $$ = new acsl::ListLexprRelInner(); result->listlexprrelinner_ = $$; }
  | ListLexprRelInner LexprRelInner { $1->push_back($2); $$ = $1; result->listlexprrelinner_ = $$; }
;
Relation : _LT { $$ = new acsl::LessRel(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->relation_ = $$; }
  | _GT { $$ = new acsl::GreaterRel(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->relation_ = $$; }
  | _LDARROW { $$ = new acsl::LessEqRel(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->relation_ = $$; }
  | _GTEQ { $$ = new acsl::GreaterEqRel(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->relation_ = $$; }
  | _DEQ { $$ = new acsl::EqRel(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->relation_ = $$; }
  | _BANGEQ { $$ = new acsl::NotEqRel(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->relation_ = $$; }
  | _EQ { $$ = new acsl::EQUALRel(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->relation_ = $$; }
;
Lexpr3 : ListSTRING_LITERAL { std::reverse($1->begin(),$1->end()) ;$$ = new acsl::StringLexpr($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _BANG Lexpr3 { $$ = new acsl::NotLexprInner($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _SYMB_27 { $$ = new acsl::TrueLexpr(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _SYMB_28 { $$ = new acsl::FalseLexpr(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _SYMB_29 OptLabel1 _LPAREN Lexpr _RPAREN { $$ = new acsl::PointerLexpr($2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _SYMB_32 OptLabel1 _LPAREN Lexpr _RPAREN { $$ = new acsl::ValidLexpr($2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _SYMB_33 OptLabel1 _LPAREN Lexpr _RPAREN { $$ = new acsl::ValidReadLexpr($2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _SYMB_34 _LPAREN Lexpr _RPAREN { $$ = new acsl::ValidFuncLexpr($3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _SYMB_35 OptLabel1 _LPAREN Lexpr _COMMA Lexpr _RPAREN { $$ = new acsl::ValidIndxLexpr($2, $4, $6); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _SYMB_36 OptLabel1 _LPAREN Lexpr _COMMA Lexpr _COMMA Lexpr _RPAREN { $$ = new acsl::ValidRangeLexpr($2, $4, $6, $8); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _SYMB_37 OptLabel1 _LPAREN Lexpr _RPAREN { $$ = new acsl::InitializedLexpr($2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _SYMB_38 OptLabel1 _LPAREN Lexpr _RPAREN { $$ = new acsl::DanglingLexpr($2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _SYMB_39 OptLabel2 _LPAREN Lexpr _COMMA Lexpr _RPAREN { $$ = new acsl::FreshLexpr($2, $4, $6); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _SYMB_40 OptLabel1 _LPAREN Lexpr _RPAREN { $$ = new acsl::BaseAddrLexpr($2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _SYMB_41 OptLabel1 _LPAREN Lexpr _RPAREN { $$ = new acsl::BlockLengthLexpr($2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _SYMB_42 OptLabel1 _LPAREN Lexpr _RPAREN { $$ = new acsl::OffsetLexpr($2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _SYMB_43 OptLabel1 _LPAREN Lexpr _RPAREN { $$ = new acsl::AllocableLexpr($2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _SYMB_44 OptLabel1 _LPAREN Lexpr _RPAREN { $$ = new acsl::FreeableLexpr($2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _SYMB_45 OptLabel1 _LPAREN Lexpr _RPAREN { $$ = new acsl::AllocationLexpr($2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _SYMB_46 { $$ = new acsl::AutomaticLexpr(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _SYMB_47 { $$ = new acsl::DynamicLexpr(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _SYMB_48 { $$ = new acsl::RegisterLexpr(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _SYMB_49 { $$ = new acsl::StaticLexpr(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _SYMB_50 { $$ = new acsl::UnallocatedLexpr(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _SYMB_51 { $$ = new acsl::NullLexpr(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _INTEGER_ { $$ = new acsl::IntConst($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _DOUBLE_ { $$ = new acsl::FloatConst($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _STRING_ { $$ = new acsl::StringConst($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | T_WSTRING_CONSTANT { $$ = new acsl::WStringConst($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | Lexpr3 _PLUS Lexpr3 { $$ = new acsl::AddLexpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | Lexpr3 _MINUS Lexpr3 { $$ = new acsl::SubtrLexpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | Lexpr3 _STAR Lexpr3 { $$ = new acsl::MultLexpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | Lexpr3 _SLASH Lexpr3 { $$ = new acsl::DivLexpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | Lexpr3 _PERCENT Lexpr3 { $$ = new acsl::ModLexpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | Lexpr3 _SYMB_57 Lexpr3 { $$ = new acsl::StarHatLexpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | Lexpr3 _RARROW IdentifierOrTypenameFull { $$ = new acsl::ArrowLexpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | Lexpr3 _DOT IdentifierOrTypenameFull { $$ = new acsl::DotLexpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | Lexpr3 _LBRACK Range _RBRACK { $$ = new acsl::SquaresRangeLexpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | Lexpr3 _LBRACK Lexpr _RBRACK { $$ = new acsl::SquaresLexpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _SYMB_62 LexprList _SYMB_63 { $$ = new acsl::SquaresPipeLexpr($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _MINUS Lexpr3 { $$ = new acsl::MinusLexpr($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _PLUS Lexpr3 { $$ = new acsl::PlusLexpr($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _TILDE Lexpr3 { $$ = new acsl::TildeLexpr($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _STAR Lexpr3 { $$ = new acsl::StarLexpr($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _AMP Lexpr3 { $$ = new acsl::AmpUnaryLexpr($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _KW_sizeof _LPAREN Lexpr _RPAREN { $$ = new acsl::SizeOfLexpr($3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _KW_sizeof _LPAREN CastLogicType _RPAREN { $$ = new acsl::SizeOfLogicTypeLexpr($3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _SYMB_65 _LPAREN Lexpr _RPAREN { $$ = new acsl::OldLexpr($3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _SYMB_66 _LPAREN Lexpr _COMMA LabelName _RPAREN { $$ = new acsl::AtLexpr($3, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _SYMB_67 { $$ = new acsl::ResultLexpr(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _SYMB_68 _LPAREN ListLexpr _RPAREN { std::reverse($3->begin(),$3->end()) ;$$ = new acsl::SeparatedLexpr($3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | FullIdentifier _LPAREN ListLexpr _RPAREN { std::reverse($3->begin(),$3->end()) ;$$ = new acsl::FullIdParenLexpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | FullIdentifier _LBRACE ListIdentifierOrTypenameFull _RBRACE _LPAREN ListLexpr _RPAREN { std::reverse($3->begin(),$3->end()) ; std::reverse($6->begin(),$6->end()) ;$$ = new acsl::FullIdBraceParenLexpr($1, $3, $6); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | FullIdentifier _LBRACE ListIdentifierOrTypenameFull _RBRACE { std::reverse($3->begin(),$3->end()) ;$$ = new acsl::FullIdBracesLexpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | FullIdentifier { $$ = new acsl::FullId($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _SYMB_71 { $$ = new acsl::PiLexpr(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | Lexpr3 _DGT Lexpr3 { $$ = new acsl::LessLessLexpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | Lexpr3 _DLT Lexpr3 { $$ = new acsl::GreaterGreaterLexpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _LPAREN Lexpr _RPAREN { $$ = $2; $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _LPAREN Range _RPAREN { $$ = new acsl::ParenRangeLexpr($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _LPAREN CastLogicType _RPAREN Lexpr3 { $$ = new acsl::CastLexpr($2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _SYMB_74 _LPAREN Lexpr _RPAREN { $$ = new acsl::TypeOfLexpr($3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _SYMB_75 _LPAREN TypeSpecOFTYPENAME _RPAREN { $$ = new acsl::TypeLexpr($3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _SYMB_75 _LPAREN TypeSpecOFTYPENAME ListStars _RPAREN { std::reverse($4->begin(),$4->end()) ;$$ = new acsl::TypeWithStarsLexpr($3, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _SYMB_76 { $$ = new acsl::EmptyLexpr(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _SYMB_77 _LPAREN LexprList _RPAREN { $$ = new acsl::UnionLexpr($3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _SYMB_78 _LPAREN LexprList _RPAREN { $$ = new acsl::InterLexpr($3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _LBRACE LexprList _RBRACE { $$ = new acsl::BraceLexprList($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _LBRACE Lexpr _BAR Binders _RBRACE { $$ = new acsl::BraceBinderLexpr($2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _LBRACE Lexpr _BAR Binders _SEMI Lexpr _RBRACE { $$ = new acsl::BraceBinderLexprLexpr($2, $4, $6); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _LBRACE ListFieldInitElt _RBRACE { std::reverse($2->begin(),$2->end()) ;$$ = new acsl::FieldInitLexpr($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _LBRACE ListArrayInitElt _RBRACE { std::reverse($2->begin(),$2->end()) ;$$ = new acsl::ArrayInitLexpr($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
  | _LBRACE Lexpr _SYMB_79 ListUpdateElt _RBRACE { std::reverse($4->begin(),$4->end()) ;$$ = new acsl::UpdateBraceLexpr($2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->lexpr_ = $$; }
;
ListSTRING_LITERAL : T_STRING_LITERAL { $$ = new acsl::ListSTRING_LITERAL(); $$->push_back($1); result->liststring_literal_ = $$; }
  | T_STRING_LITERAL ListSTRING_LITERAL { $2->push_back($1); $$ = $2; result->liststring_literal_ = $$; }
;
Range : LexprOption _DDOT LexprOption { $$ = new acsl::LexprRange($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->range_ = $$; }
;
FieldInitElt : _DOT IdentifierOrTypenameFull _EQ Lexpr { $$ = new acsl::AFieldInitElt($2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fieldinitelt_ = $$; }
;
ListFieldInitElt : FieldInitElt { $$ = new acsl::ListFieldInitElt(); $$->push_back($1); result->listfieldinitelt_ = $$; }
  | FieldInitElt _COMMA ListFieldInitElt { $3->push_back($1); $$ = $3; result->listfieldinitelt_ = $$; }
;
ArrayInitElt : _LBRACK Lexpr _RBRACK _EQ Lexpr { $$ = new acsl::AnArrayInitElt($2, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->arrayinitelt_ = $$; }
  | _LBRACK Range _RBRACK _EQ Lexpr { $$ = new acsl::ArrayInitRangeElt($2, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->arrayinitelt_ = $$; }
;
ListArrayInitElt : ArrayInitElt { $$ = new acsl::ListArrayInitElt(); $$->push_back($1); result->listarrayinitelt_ = $$; }
  | ArrayInitElt _COMMA ListArrayInitElt { $3->push_back($1); $$ = $3; result->listarrayinitelt_ = $$; }
;
UpdateElt : ListPathElt _EQ Lexpr { std::reverse($1->begin(),$1->end()) ;$$ = new acsl::AnUpdateElt($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->updateelt_ = $$; }
  | ListPathElt _EQ _LBRACE _SYMB_79 ListUpdateElt _RBRACE { std::reverse($1->begin(),$1->end()) ; std::reverse($5->begin(),$5->end()) ;$$ = new acsl::UpdateEltWith($1, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->updateelt_ = $$; }
;
ListUpdateElt : UpdateElt { $$ = new acsl::ListUpdateElt(); $$->push_back($1); result->listupdateelt_ = $$; }
  | UpdateElt _COMMA ListUpdateElt { $3->push_back($1); $$ = $3; result->listupdateelt_ = $$; }
;
PathElt : _DOT IdentifierOrTypenameFull { $$ = new acsl::FieldElt($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->pathelt_ = $$; }
  | _LBRACK Lexpr _RBRACK { $$ = new acsl::ArrayElt($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->pathelt_ = $$; }
  | _LBRACK Range _RBRACK { $$ = new acsl::ArrayRangeElt($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->pathelt_ = $$; }
;
ListPathElt : PathElt { $$ = new acsl::ListPathElt(); $$->push_back($1); result->listpathelt_ = $$; }
  | PathElt ListPathElt { $2->push_back($1); $$ = $2; result->listpathelt_ = $$; }
;
Binders : TypeSpecOFTYPENAME VarSpec _COMMA ListBindersReentrance { std::reverse($4->begin(),$4->end()) ;$$ = new acsl::TheBinders($1, $2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->binders_ = $$; }
;
BindersReentrance : TypeSpecOFTYPENAME VarSpec { $$ = new acsl::BindersReentranceDeclSpec($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->bindersreentrance_ = $$; }
  | VarSpec { $$ = new acsl::BindersReentranceVarSpec($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->bindersreentrance_ = $$; }
;
ListBindersReentrance : BindersReentrance { $$ = new acsl::ListBindersReentrance(); $$->push_back($1); result->listbindersreentrance_ = $$; }
  | BindersReentrance _COMMA ListBindersReentrance { $3->push_back($1); $$ = $3; result->listbindersreentrance_ = $$; }
;
VarSpec : VarSpec1 { $$ = $1; $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->varspec_ = $$; }
  | ListStars VarSpec1 { std::reverse($1->begin(),$1->end()) ;$$ = new acsl::StartVarSpec($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->varspec_ = $$; }
;
ArraySize : _INTEGER_ { $$ = new acsl::IntConstArraySize($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->arraysize_ = $$; }
  | FullIdentifier { $$ = new acsl::SomeArraySize($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->arraysize_ = $$; }
  | /* empty */ { $$ = new acsl::NoSize(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->arraysize_ = $$; }
;
VarSpec1 : FullIdentifier { $$ = new acsl::SimpleSpec($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->varspec_ = $$; }
  | VarSpec1 _LBRACK ArraySize _RBRACK { $$ = new acsl::ArraySpec($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->varspec_ = $$; }
  | _LPAREN VarSpec _RPAREN { $$ = $2; $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->varspec_ = $$; }
  | VarSpec1 _LPAREN AbsParamTypeList _RPAREN { $$ = new acsl::FunctionSpec($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->varspec_ = $$; }
;
AbsParamTypeList : /* empty */ { $$ = new acsl::EmptyTypeParam(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->absparamtypelist_ = $$; }
  | ListAbsParam { std::reverse($1->begin(),$1->end()) ;$$ = new acsl::SomeTypeParam($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->absparamtypelist_ = $$; }
  | ListAbsParam _COMMA _ELLIPSIS { std::reverse($1->begin(),$1->end()) ;$$ = new acsl::InfTypeParam($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->absparamtypelist_ = $$; }
;
AbsParam : LogicTypeGenOFTYPENAME { $$ = new acsl::AbsParamsElement($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->absparam_ = $$; }
;
ListAbsParam : AbsParam { $$ = new acsl::ListAbsParam(); $$->push_back($1); result->listabsparam_ = $$; }
  | AbsParam _COMMA ListAbsParam { $3->push_back($1); $$ = $3; result->listabsparam_ = $$; }
;
Parameter : TypeSpecOFIdentifierOrTypename VarSpec { $$ = new acsl::Prartemer($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->parameter_ = $$; }
;
ListParameter : Parameter { $$ = new acsl::ListParameter(); $$->push_back($1); result->listparameter_ = $$; }
  | Parameter _COMMA ListParameter { $3->push_back($1); $$ = $3; result->listparameter_ = $$; }
;
LogicTypeGenOFTYPENAME : TypeSpecOFTYPENAME AbsSpecOption { $$ = new acsl::LogicTypeGenTypemane($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->logictypegenoftypename_ = $$; }
;
ListLogicTypeGenOFTYPENAME : LogicTypeGenOFTYPENAME { $$ = new acsl::ListLogicTypeGenOFTYPENAME(); $$->push_back($1); result->listlogictypegenoftypename_ = $$; }
  | LogicTypeGenOFTYPENAME _COMMA ListLogicTypeGenOFTYPENAME { $3->push_back($1); $$ = $3; result->listlogictypegenoftypename_ = $$; }
;
LogicTypeGenOFIdentifierOrTypename : TypeSpecOFIdentifierOrTypename AbsSpecOption { $$ = new acsl::LogicTypeGenIdOrTypename($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->logictypegenofidentifierortypename_ = $$; }
;
ListLogicTypeGenOFIdentifierOrTypename : LogicTypeGenOFIdentifierOrTypename { $$ = new acsl::ListLogicTypeGenOFIdentifierOrTypename(); $$->push_back($1); result->listlogictypegenofidentifierortypename_ = $$; }
  | LogicTypeGenOFIdentifierOrTypename _COMMA ListLogicTypeGenOFIdentifierOrTypename { $3->push_back($1); $$ = $3; result->listlogictypegenofidentifierortypename_ = $$; }
;
CV : _KW_const { $$ = new acsl::ConstCV(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->cv_ = $$; }
  | _KW_volatile { $$ = new acsl::VolatileCV(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->cv_ = $$; }
  | _SYMB_82 { $$ = new acsl::GhostCV(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->cv_ = $$; }
;
ListCV : /* empty */ { $$ = new acsl::ListCV(); result->listcv_ = $$; }
  | ListCV CV { $1->push_back($2); $$ = $1; result->listcv_ = $$; }
;
TypeSpecCVOFTYPENAME : ListCV TypeSpecOFTYPENAME ListCV { $$ = new acsl::TypeSpecCVTypename($1, $2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespeccvoftypename_ = $$; }
;
CastLogicType : TypeSpecCVOFTYPENAME AbsSpecCVOption { $$ = new acsl::AnCastLogicType($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->castlogictype_ = $$; }
;
LogicRtType : LogicTypeGenOFIdentifierOrTypename { $$ = new acsl::LogicRTType($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->logicrttype_ = $$; }
;
AbsSpecOption : /* empty */ { $$ = new acsl::NoAbsSpec(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->absspecoption_ = $$; }
  | AbsSpec { $$ = new acsl::SomeAbsSpec($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->absspecoption_ = $$; }
;
AbsSpecCVOption : /* empty */ { $$ = new acsl::NoAbsSpecCV(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->absspeccvoption_ = $$; }
  | AbsSpecCV { $$ = new acsl::SomeAbsSpecCV($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->absspeccvoption_ = $$; }
;
AbsSpec : ListTabs { std::reverse($1->begin(),$1->end()) ;$$ = new acsl::AbsSpecTabs($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->absspec_ = $$; }
  | ListStars { std::reverse($1->begin(),$1->end()) ;$$ = new acsl::AbsSpecStars($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->absspec_ = $$; }
  | ListStars ListTabs { std::reverse($1->begin(),$1->end()) ; std::reverse($2->begin(),$2->end()) ;$$ = new acsl::AbsSpecStarsTabs($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->absspec_ = $$; }
  | ListStars AbsSpec1 { std::reverse($1->begin(),$1->end()) ;$$ = new acsl::AbsSpecBitsStars($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->absspec_ = $$; }
  | ListStars AbsSpec1 ListTabs { std::reverse($1->begin(),$1->end()) ; std::reverse($3->begin(),$3->end()) ;$$ = new acsl::AbsSpecBitsStarsTabs($1, $2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->absspec_ = $$; }
  | AbsSpec1 ListTabs { std::reverse($2->begin(),$2->end()) ;$$ = new acsl::AbsSpecBitsTabs($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->absspec_ = $$; }
  | AbsSpec1 { $$ = new acsl::AbsSpecBits($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->absspec_ = $$; }
;
AbsSpecCV : ListTabs { std::reverse($1->begin(),$1->end()) ;$$ = new acsl::AbsSpecCVTabs($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->absspeccv_ = $$; }
  | ListStarsCV { std::reverse($1->begin(),$1->end()) ;$$ = new acsl::AbsSpecCVStars($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->absspeccv_ = $$; }
  | ListStarsCV ListTabs { std::reverse($1->begin(),$1->end()) ; std::reverse($2->begin(),$2->end()) ;$$ = new acsl::AbsSpecCVStarsTabs($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->absspeccv_ = $$; }
  | ListStarsCV AbsSpecCV1 { std::reverse($1->begin(),$1->end()) ;$$ = new acsl::AbsSpecCVBitsStars($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->absspeccv_ = $$; }
  | ListStarsCV AbsSpecCV1 ListTabs { std::reverse($1->begin(),$1->end()) ; std::reverse($3->begin(),$3->end()) ;$$ = new acsl::AbsSpecCVBitsStarsTabs($1, $2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->absspeccv_ = $$; }
  | AbsSpecCV1 ListTabs { std::reverse($2->begin(),$2->end()) ;$$ = new acsl::AbsSpecCVBitsTabs($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->absspeccv_ = $$; }
  | AbsSpecCV1 { $$ = new acsl::AbsSpecCVBits($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->absspeccv_ = $$; }
;
AbsSpec1 : _LPAREN AbsSpec _RPAREN { $$ = $2; $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->absspec_ = $$; }
  | AbsSpec1 _LPAREN AbsParamTypeList _RPAREN { $$ = new acsl::AbsSpecBitsParams($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->absspec_ = $$; }
;
AbsSpecCV1 : _LPAREN AbsSpecCV _RPAREN { $$ = $2; $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->absspeccv_ = $$; }
  | AbsSpecCV1 _LPAREN AbsParamTypeList _RPAREN { $$ = new acsl::AbsSpecBitsCVParams($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->absspeccv_ = $$; }
;
Stars : _STAR { $$ = new acsl::Star(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->stars_ = $$; }
;
ListStars : Stars { $$ = new acsl::ListStars(); $$->push_back($1); result->liststars_ = $$; }
  | Stars ListStars { $2->push_back($1); $$ = $2; result->liststars_ = $$; }
;
StarsCV : _STAR { $$ = new acsl::StarCV(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->starscv_ = $$; }
  | _STAR CV { $$ = new acsl::StarCVWithCV($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->starscv_ = $$; }
;
ListStarsCV : StarsCV { $$ = new acsl::ListStarsCV(); $$->push_back($1); result->liststarscv_ = $$; }
  | StarsCV ListStarsCV { $2->push_back($1); $$ = $2; result->liststarscv_ = $$; }
;
Tabs : _LBRACK ArraySize _RBRACK { $$ = new acsl::Tab($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->tabs_ = $$; }
;
ListTabs : Tabs { $$ = new acsl::ListTabs(); $$->push_back($1); result->listtabs_ = $$; }
  | Tabs ListTabs { $2->push_back($1); $$ = $2; result->listtabs_ = $$; }
;
TypeSpecSimple : _KW_integer { $$ = new acsl::TypeSpecIntegerKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespecsimple_ = $$; }
  | _KW_real { $$ = new acsl::TypeSpecRealKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespecsimple_ = $$; }
  | _KW_boolean { $$ = new acsl::TypeSpecBooleanKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespecsimple_ = $$; }
  | _KW_void { $$ = new acsl::TypeSpecVoidKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespecsimple_ = $$; }
  | _SYMB_83 { $$ = new acsl::TypeSpecBoolKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespecsimple_ = $$; }
  | _KW_char { $$ = new acsl::TypeSpecCharKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespecsimple_ = $$; }
  | _KW_signed _KW_char { $$ = new acsl::TypeSpecSignedCharKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespecsimple_ = $$; }
  | _KW_unsigned _KW_char { $$ = new acsl::TypeSpecUnsignedCharKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespecsimple_ = $$; }
  | _KW_int { $$ = new acsl::TypeSpecIntKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespecsimple_ = $$; }
  | _KW_signed _KW_int { $$ = new acsl::TypeSpecSignedIntKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespecsimple_ = $$; }
  | _KW_unsigned _KW_int { $$ = new acsl::TypeSpecUnsignedIntKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespecsimple_ = $$; }
  | _KW_unsigned { $$ = new acsl::TypeSpecUnsignedKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespecsimple_ = $$; }
  | _KW_short { $$ = new acsl::TypeSpecShortKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespecsimple_ = $$; }
  | _KW_signed _KW_short { $$ = new acsl::TypeSpecSignedShortKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespecsimple_ = $$; }
  | _KW_unsigned _KW_short { $$ = new acsl::TypeSpecUnsignedShortKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespecsimple_ = $$; }
  | _KW_short _KW_int { $$ = new acsl::TypeSpecShortIntKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespecsimple_ = $$; }
  | _KW_signed _KW_short _KW_int { $$ = new acsl::TypeSpecSignedShortIntKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespecsimple_ = $$; }
  | _KW_unsigned _KW_short _KW_int { $$ = new acsl::TypeSpecUnsignedShortIntKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespecsimple_ = $$; }
  | _KW_long { $$ = new acsl::TypeSpecLongKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespecsimple_ = $$; }
  | _KW_signed _KW_long { $$ = new acsl::TypeSpecSignedLongKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespecsimple_ = $$; }
  | _KW_unsigned _KW_long { $$ = new acsl::TypeSpecUnsignedLongKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespecsimple_ = $$; }
  | _KW_signed _KW_long _KW_int { $$ = new acsl::TypeSpecSignedLongIntKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespecsimple_ = $$; }
  | _KW_long _KW_int { $$ = new acsl::TypeSpecLongIntKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespecsimple_ = $$; }
  | _KW_unsigned _KW_long _KW_int { $$ = new acsl::TypeSpecUnsignedLongIntKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespecsimple_ = $$; }
  | _KW_long _KW_long { $$ = new acsl::TypeSpecLongLongKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespecsimple_ = $$; }
  | _KW_signed _KW_long _KW_long { $$ = new acsl::TypeSpecSignedLongLongKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespecsimple_ = $$; }
  | _KW_unsigned _KW_long _KW_long { $$ = new acsl::TypeSpecUnsignedLongLongKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespecsimple_ = $$; }
  | _KW_long _KW_long _KW_int { $$ = new acsl::TypeSpecLongLongIntKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespecsimple_ = $$; }
  | _KW_signed _KW_long _KW_long _KW_int { $$ = new acsl::TypeSpecSignedLongLongIntKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespecsimple_ = $$; }
  | _KW_unsigned _KW_long _KW_long _KW_int { $$ = new acsl::TypeSpecUnsignedLongLongIntKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespecsimple_ = $$; }
  | _KW_float { $$ = new acsl::TypeSpecFloatKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespecsimple_ = $$; }
  | _KW_double { $$ = new acsl::TypeSpecDoubleKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespecsimple_ = $$; }
  | _KW_long _KW_double { $$ = new acsl::TypeSpecLongDoubleKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespecsimple_ = $$; }
  | _KW_struct IdentifierOrTypenameFull { $$ = new acsl::TypeSpecStruct($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespecsimple_ = $$; }
  | _KW_enum IdentifierOrTypenameFull { $$ = new acsl::TypeSpecEnum($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespecsimple_ = $$; }
  | _KW_union IdentifierOrTypenameFull { $$ = new acsl::TypeSpecUnion($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespecsimple_ = $$; }
;
TypeSpecOFTYPENAME : T_TYPENAME { $$ = new acsl::TYPENAME($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespecoftypename_ = $$; }
  | T_TYPENAME _LT ListLogicTypeGenOFTYPENAME _GT { std::reverse($3->begin(),$3->end()) ;$$ = new acsl::TypeSpecTYPENAME($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespecoftypename_ = $$; }
  | TypeSpecSimple { $$ = new acsl::TypeSpecSimpleFromTypenameTypeSpec($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespecoftypename_ = $$; }
;
TypeSpecOFIdentifierOrTypename : IdentifierOrTypename { $$ = new acsl::TypeSpecIdentifierOrTypename($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespecofidentifierortypename_ = $$; }
  | IdentifierOrTypename _LT ListLogicTypeGenOFIdentifierOrTypename _GT { std::reverse($3->begin(),$3->end()) ;$$ = new acsl::TypeSpecIdentifierOrTypenameAngles($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespecofidentifierortypename_ = $$; }
  | TypeSpecSimple { $$ = new acsl::TypeSpecSimpleFromIdTypenameTypeSpec($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespecofidentifierortypename_ = $$; }
;
FullIdentifier : Identifier { $$ = new acsl::SimpleIdentifierFull($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fullidentifier_ = $$; }
  | _KW_admit { $$ = new acsl::AdmitKeyWordFullIdent(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fullidentifier_ = $$; }
  | _KW_allocates { $$ = new acsl::AllocatesKeyWordFullIdent(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fullidentifier_ = $$; }
  | _KW_assert { $$ = new acsl::AssertKeyWordFullIdent(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fullidentifier_ = $$; }
  | _KW_Assigns { $$ = new acsl::AssignsKeyWordFullIdent(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fullidentifier_ = $$; }
  | _KW_Assumes { $$ = new acsl::AssumesKeyWordFullIdent(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fullidentifier_ = $$; }
  | _KW_at { $$ = new acsl::AtKeyWordFullIdent(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fullidentifier_ = $$; }
  | _KW_axiom { $$ = new acsl::AxiomKeyWordFullIdent(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fullidentifier_ = $$; }
  | _KW_axiomatic { $$ = new acsl::AxiomaticKeyWordFullIdent(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fullidentifier_ = $$; }
  | _KW_behavior { $$ = new acsl::BehaviorKeyWordFullIdent(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fullidentifier_ = $$; }
  | _KW_breaks { $$ = new acsl::BreaksKeyWordFullIdent(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fullidentifier_ = $$; }
  | _KW_check { $$ = new acsl::CheckKeyWordFullIdent(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fullidentifier_ = $$; }
  | _KW_complete { $$ = new acsl::CompleteKeyWordFullIdent(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fullidentifier_ = $$; }
  | _KW_continues { $$ = new acsl::ContinuesKeyWordFullIdent(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fullidentifier_ = $$; }
  | _KW_Contract { $$ = new acsl::ContractKeyWordFullIdent(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fullidentifier_ = $$; }
  | _KW_Decreases { $$ = new acsl::DecreasesKeyWordFullIdent(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fullidentifier_ = $$; }
  | _KW_disjoint { $$ = new acsl::DisjointKeyWordFullIdent(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fullidentifier_ = $$; }
  | _KW_ensures { $$ = new acsl::EnsuresKeyWordFullIdent(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fullidentifier_ = $$; }
  | _KW_exits { $$ = new acsl::ExitsKeyWordFullIdent(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fullidentifier_ = $$; }
  | _KW_frees { $$ = new acsl::FreesKeyWordFullIdent(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fullidentifier_ = $$; }
  | _KW_function { $$ = new acsl::FunctionKeyWordFullIdent(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fullidentifier_ = $$; }
  | _KW_global { $$ = new acsl::GlobalKeyWordFullIdent(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fullidentifier_ = $$; }
  | _KW_impact { $$ = new acsl::ImpactKeyWordFullIdent(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fullidentifier_ = $$; }
  | _KW_inductive { $$ = new acsl::InductiveKeyWordFullIdent(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fullidentifier_ = $$; }
  | _KW_include { $$ = new acsl::IncludeKeyWordFullIdent(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fullidentifier_ = $$; }
  | _KW_invariant { $$ = new acsl::InvariantKeyWordFullIdent(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fullidentifier_ = $$; }
  | _KW_lemma { $$ = new acsl::LemmaKeyWordFullIdent(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fullidentifier_ = $$; }
  | _KW_let { $$ = new acsl::LetKeyWordFullIdent(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fullidentifier_ = $$; }
  | _KW_logic { $$ = new acsl::LogicKeyWordFullIdent(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fullidentifier_ = $$; }
  | _KW_loop { $$ = new acsl::LoopKeyWordFullIdent(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fullidentifier_ = $$; }
  | _KW_model { $$ = new acsl::ModelKeyWordFullIdent(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fullidentifier_ = $$; }
  | _KW_module { $$ = new acsl::ModuleKeyWordFullIdent(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fullidentifier_ = $$; }
  | _KW_pragma { $$ = new acsl::PragmaKeyWordFullIdent(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fullidentifier_ = $$; }
  | _KW_predicate { $$ = new acsl::PredicateKeyWordFullIdent(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fullidentifier_ = $$; }
  | _KW_Requires { $$ = new acsl::RequiresKeyWordFullIdent(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fullidentifier_ = $$; }
  | _KW_returns { $$ = new acsl::ReturnsKeyWordFullIdent(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fullidentifier_ = $$; }
  | _KW_slice { $$ = new acsl::SliceKeyWordFullIdent(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fullidentifier_ = $$; }
  | _KW_Terminates { $$ = new acsl::TerminatesKeyWordFullIdent(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fullidentifier_ = $$; }
  | _KW_type { $$ = new acsl::TypeKeyWordFullIdent(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fullidentifier_ = $$; }
  | _KW_Variant { $$ = new acsl::VariantKeyWordFullIdent(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fullidentifier_ = $$; }
  | T_EXT_CODE_ANNOT { $$ = new acsl::IdentExtCodeAnnotFullIdent($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fullidentifier_ = $$; }
  | T_EXT_CONTRACT { $$ = new acsl::IdentExtContractFullIdent($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fullidentifier_ = $$; }
  | T_EXT_GLOBAL { $$ = new acsl::IdentExtGlobalFullIdent($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fullidentifier_ = $$; }
  | T_EXT_GLOBAL_BLOCK { $$ = new acsl::IdentExtGlobalBlockFullIdent($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fullidentifier_ = $$; }
;
ListFullIdentifier : FullIdentifier { $$ = new acsl::ListFullIdentifier(); $$->push_back($1); result->listfullidentifier_ = $$; }
  | FullIdentifier _COMMA ListFullIdentifier { $3->push_back($1); $$ = $3; result->listfullidentifier_ = $$; }
;
ExtSpec : ExtGlobalClausesOpt ExtModuleSpecsOpt ExtGlobalSpecsOpt { $$ = new acsl::ExrSpec($1, $2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->extspec_ = $$; }
;
ExtGlobalClausesOpt : /* empty */ { $$ = new acsl::EmptyExtGlobalClauses(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->extglobalclausesopt_ = $$; }
  | ListExtGlobalClause { std::reverse($1->begin(),$1->end()) ;$$ = new acsl::SomeExtGlobalClauses($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->extglobalclausesopt_ = $$; }
;
ExtGlobalClause : Decl { $$ = new acsl::DeclClause($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->extglobalclause_ = $$; }
  | _KW_let AnyIdentifier _EQ Lexpr _SEMI { $$ = new acsl::LetClause($2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->extglobalclause_ = $$; }
  | _KW_global _KW_let AnyIdentifier _EQ Lexpr _SEMI { $$ = new acsl::GlobalLetClause($3, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->extglobalclause_ = $$; }
  | _KW_include ListSTRING_LITERAL _SEMI { std::reverse($2->begin(),$2->end()) ;$$ = new acsl::IncludeClause($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->extglobalclause_ = $$; }
;
ListExtGlobalClause : ExtGlobalClause { $$ = new acsl::ListExtGlobalClause(); $$->push_back($1); result->listextglobalclause_ = $$; }
  | ExtGlobalClause ListExtGlobalClause { $2->push_back($1); $$ = $2; result->listextglobalclause_ = $$; }
;
ExtGlobalSpecsOpt : /* empty */ { $$ = new acsl::EmptyExtGlobalSpecs(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->extglobalspecsopt_ = $$; }
  | ListExtGlobalSpec { std::reverse($1->begin(),$1->end()) ;$$ = new acsl::SomeExtGlobalSpecs($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->extglobalspecsopt_ = $$; }
;
ExtGlobalSpec : _KW_module AnyIdentifier _COLON ListExtGlobalClause ListExtModuleSpec { std::reverse($4->begin(),$4->end()) ; std::reverse($5->begin(),$5->end()) ;$$ = new acsl::ExtGlobalSpecClauseModule($2, $4, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->extglobalspec_ = $$; }
  | _KW_module AnyIdentifier _COLON ListExtModuleSpec { std::reverse($4->begin(),$4->end()) ;$$ = new acsl::ExtGlobalSpecModule($2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->extglobalspec_ = $$; }
  | _KW_module AnyIdentifier _COLON ListExtGlobalClause { std::reverse($4->begin(),$4->end()) ;$$ = new acsl::ExtGlobalSpecClause($2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->extglobalspec_ = $$; }
  | _KW_module AnyIdentifier _COLON { $$ = new acsl::ExtGlobalSpecSimple($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->extglobalspec_ = $$; }
;
ListExtGlobalSpec : ExtGlobalSpec { $$ = new acsl::ListExtGlobalSpec(); $$->push_back($1); result->listextglobalspec_ = $$; }
  | ExtGlobalSpec ListExtGlobalSpec { $2->push_back($1); $$ = $2; result->listextglobalspec_ = $$; }
;
ExtModuleSpecsOpt : /* empty */ { $$ = new acsl::EmptyExtModuleSpecs(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->extmodulespecsopt_ = $$; }
  | ListExtModuleSpec { std::reverse($1->begin(),$1->end()) ;$$ = new acsl::ListExtModuleSpecs($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->extmodulespecsopt_ = $$; }
  | ListExtFunSpec { std::reverse($1->begin(),$1->end()) ;$$ = new acsl::FunSpecExtModuleSpecs($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->extmodulespecsopt_ = $$; }
  | ListExtFunSpec ListExtModuleSpec { std::reverse($1->begin(),$1->end()) ; std::reverse($2->begin(),$2->end()) ;$$ = new acsl::FunSpecWithListModules($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->extmodulespecsopt_ = $$; }
;
ExtModuleSpec : _KW_function AnyIdentifier _COLON ExtFunctionSpecsOpt { $$ = new acsl::AnExtModuleSpec($2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->extmodulespec_ = $$; }
;
ListExtModuleSpec : ExtModuleSpec { $$ = new acsl::ListExtModuleSpec(); $$->push_back($1); result->listextmodulespec_ = $$; }
  | ExtModuleSpec ListExtModuleSpec { $2->push_back($1); $$ = $2; result->listextmodulespec_ = $$; }
;
ExtFunctionSpecsOpt : /* empty */ { $$ = new acsl::NoExtFunctionSpecs(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->extfunctionspecsopt_ = $$; }
  | ExtFunctionSpecs { $$ = new acsl::SomeExtFunctionSpecs($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->extfunctionspecsopt_ = $$; }
;
ExtFunctionSpecs : _KW_at ListStmtMarkup _COLON { std::reverse($2->begin(),$2->end()) ;$$ = new acsl::AtMarkup($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->extfunctionspecs_ = $$; }
  | ListExtFunctionSpec { std::reverse($1->begin(),$1->end()) ;$$ = new acsl::ListFunctionSpecs($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->extfunctionspecs_ = $$; }
  | ListExtFunctionSpec _KW_at ListStmtMarkup _COLON { std::reverse($1->begin(),$1->end()) ; std::reverse($3->begin(),$3->end()) ;$$ = new acsl::ListFunctionSpecsAtMarkup($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->extfunctionspecs_ = $$; }
;
ExtFunctionSpec : ExtGlobalClause { $$ = new acsl::AnExtGlobalClause($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->extfunctionspec_ = $$; }
  | ExtFunSpec { $$ = new acsl::AnExtFunSpec($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->extfunctionspec_ = $$; }
;
ListExtFunctionSpec : ExtFunctionSpec { $$ = new acsl::ListExtFunctionSpec(); $$->push_back($1); result->listextfunctionspec_ = $$; }
  | ExtFunctionSpec ListExtFunctionSpec { $2->push_back($1); $$ = $2; result->listextfunctionspec_ = $$; }
;
ExtFunSpec : _KW_at ListStmtMarkup _COLON Annotation { std::reverse($2->begin(),$2->end()) ;$$ = new acsl::FunSpecAtAnnotation($2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->extfunspec_ = $$; }
  | _KW_at ListStmtMarkup _COLON _KW_Contract ExtIdentifierOpt _COLON Contract { std::reverse($2->begin(),$2->end()) ;$$ = new acsl::FunSpecAtContract($2, $5, $7); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->extfunspec_ = $$; }
  | _KW_Contract ExtIdentifierOpt _COLON Contract { $$ = new acsl::FunSpecContract($2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->extfunspec_ = $$; }
;
ListExtFunSpec : ExtFunSpec { $$ = new acsl::ListExtFunSpec(); $$->push_back($1); result->listextfunspec_ = $$; }
  | ExtFunSpec ListExtFunSpec { $2->push_back($1); $$ = $2; result->listextfunspec_ = $$; }
;
ExtIdentifierOpt : /* empty */ { $$ = new acsl::ExtIdentifierEmpty(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->extidentifieropt_ = $$; }
  | AnyIdentifier { $$ = new acsl::ExtIdentifierSome($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->extidentifieropt_ = $$; }
;
StmtMarkup : AnyIdentifier { $$ = new acsl::MarkupStmtIdentifier($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->stmtmarkup_ = $$; }
  | _INTEGER_ { $$ = new acsl::MarkupIntConstant($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->stmtmarkup_ = $$; }
;
ListStmtMarkup : StmtMarkup { $$ = new acsl::ListStmtMarkup(); $$->push_back($1); result->liststmtmarkup_ = $$; }
  | StmtMarkup ListStmtMarkup { $2->push_back($1); $$ = $2; result->liststmtmarkup_ = $$; }
;
Spec : Contract { $$ = new acsl::SpecConstract($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->spec_ = $$; }
;
Contract : Requires Terminates Decreases SimpleClauses Behaviors CompleteOrDisjoint { $$ = new acsl::SimpleContract($1, $2, $3, $4, $5, $6); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->contract_ = $$; }
  | Requires NETerminates _KW_Requires { $$ = new acsl::TerminatesRequiresContract($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->contract_ = $$; }
  | Requires Terminates NEDecreases _KW_Requires { $$ = new acsl::DecreasesRequiresContract($1, $2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->contract_ = $$; }
  | Requires Terminates NEDecreases _KW_Terminates { $$ = new acsl::DecreasesTerminatesContract($1, $2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->contract_ = $$; }
  | Requires Terminates Decreases NESimpleClauses _KW_Requires { $$ = new acsl::ClausesRequiresContract($1, $2, $3, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->contract_ = $$; }
  | Requires Terminates Decreases NESimpleClauses _KW_Terminates { $$ = new acsl::ClausesTerminatesContract($1, $2, $3, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->contract_ = $$; }
  | Requires Terminates Decreases NESimpleClauses _KW_Decreases { $$ = new acsl::ClausesDecreasesContract($1, $2, $3, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->contract_ = $$; }
  | Requires Terminates Decreases SimpleClauses NEBehaviors _KW_Terminates { $$ = new acsl::BehaviorsTerminatesContract($1, $2, $3, $4, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->contract_ = $$; }
  | Requires Terminates Decreases SimpleClauses NEBehaviors _KW_Decreases { $$ = new acsl::BehaviorsDecreasesContract($1, $2, $3, $4, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->contract_ = $$; }
  | Requires Terminates Decreases SimpleClauses Behaviors NECompleteOrDisjoint _KW_Requires { $$ = new acsl::ComplDisjRequiresContract($1, $2, $3, $4, $5, $6); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->contract_ = $$; }
  | Requires Terminates Decreases SimpleClauses Behaviors NECompleteOrDisjoint _KW_Terminates { $$ = new acsl::ComplDisjTerminatesContract($1, $2, $3, $4, $5, $6); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->contract_ = $$; }
  | Requires Terminates Decreases SimpleClauses Behaviors NECompleteOrDisjoint _KW_Decreases { $$ = new acsl::ComplDisjDecreasesContract($1, $2, $3, $4, $5, $6); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->contract_ = $$; }
  | Requires Terminates Decreases SimpleClauses Behaviors NECompleteOrDisjoint _KW_behavior { $$ = new acsl::ComplDisjBehaviorContract($1, $2, $3, $4, $5, $6); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->contract_ = $$; }
  | Requires Terminates Decreases SimpleClauses Behaviors NECompleteOrDisjoint _KW_Assigns { $$ = new acsl::ComplDisjAssignsContract($1, $2, $3, $4, $5, $6); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->contract_ = $$; }
  | Requires Terminates Decreases SimpleClauses Behaviors NECompleteOrDisjoint _KW_allocates { $$ = new acsl::ComplDisjAllocatesContract($1, $2, $3, $4, $5, $6); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->contract_ = $$; }
  | Requires Terminates Decreases SimpleClauses Behaviors NECompleteOrDisjoint _KW_frees { $$ = new acsl::ComplDisjFreesContract($1, $2, $3, $4, $5, $6); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->contract_ = $$; }
  | Requires Terminates Decreases SimpleClauses Behaviors NECompleteOrDisjoint PostCond { $$ = new acsl::ComplDisjPostCondContract($1, $2, $3, $4, $5, $6, $7); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->contract_ = $$; }
;
ClauseKW : _KW_admit _KW_requires { $$ = new acsl::AdmitRequiresClause(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->clausekw_ = $$; }
  | _KW_admit _KW_invariant { $$ = new acsl::AdmitInvariantClause(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->clausekw_ = $$; }
  | _KW_admit _KW_lemma { $$ = new acsl::AdmitLemmaClause(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->clausekw_ = $$; }
  | _KW_admit _KW_loop { $$ = new acsl::AdmitLoopClause(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->clausekw_ = $$; }
  | _KW_check _KW_requires { $$ = new acsl::CheckRequiresClause(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->clausekw_ = $$; }
  | _KW_check _KW_invariant { $$ = new acsl::CheckInvariantClause(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->clausekw_ = $$; }
  | _KW_check _KW_lemma { $$ = new acsl::CheckLemmaClause(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->clausekw_ = $$; }
  | _KW_check _KW_loop { $$ = new acsl::CheckLoopClause(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->clausekw_ = $$; }
  | _KW_Requires { $$ = new acsl::RequiresClause(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->clausekw_ = $$; }
  | _KW_Assumes { $$ = new acsl::AssumesClause(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->clausekw_ = $$; }
  | _KW_Assigns { $$ = new acsl::AssignsClause(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->clausekw_ = $$; }
  | PostCond { $$ = new acsl::PostCondClause($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->clausekw_ = $$; }
  | _KW_Decreases { $$ = new acsl::DecreasesClause(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->clausekw_ = $$; }
  | _KW_behavior { $$ = new acsl::BehaviorClause(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->clausekw_ = $$; }
  | _KW_allocates { $$ = new acsl::AllocatesClause(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->clausekw_ = $$; }
  | _KW_frees { $$ = new acsl::FreesClause(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->clausekw_ = $$; }
  | _KW_complete { $$ = new acsl::CompleteClause(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->clausekw_ = $$; }
  | _KW_disjoint { $$ = new acsl::DisjointClause(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->clausekw_ = $$; }
  | T_EXT_CONTRACT { $$ = new acsl::ClauseExtConstract($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->clausekw_ = $$; }
  | /* empty */ { $$ = new acsl::EmptyClauseKW(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->clausekw_ = $$; }
;
Requires : /* empty */ { $$ = new acsl::NoRequires(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->requires_ = $$; }
  | NERequires { $$ = new acsl::SomeRequires($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->requires_ = $$; }
;
NERequires : _KW_Requires Lexpr _SEMI Requires { $$ = new acsl::SimpleRequires($2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->nerequires_ = $$; }
  | _KW_check _KW_requires Lexpr _SEMI Requires { $$ = new acsl::CheckRequires($3, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->nerequires_ = $$; }
  | _KW_admit _KW_requires Lexpr _SEMI Requires { $$ = new acsl::AdimtRequires($3, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->nerequires_ = $$; }
  | _KW_Requires Lexpr ClauseKW { $$ = new acsl::ClauseSimpleRequires($2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->nerequires_ = $$; }
  | _KW_check _KW_requires Lexpr ClauseKW { $$ = new acsl::ClauseCheckRequires($3, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->nerequires_ = $$; }
  | _KW_admit _KW_requires Lexpr ClauseKW { $$ = new acsl::ClauseAdimtRequires($3, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->nerequires_ = $$; }
;
Terminates : /* empty */ { $$ = new acsl::NoTerminate(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->terminates_ = $$; }
  | NETerminates { $$ = new acsl::SomeTerminate($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->terminates_ = $$; }
;
NETerminates : _KW_Terminates Lexpr _SEMI { $$ = new acsl::SimpleTerminates($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->neterminates_ = $$; }
  | _KW_Terminates Lexpr ClauseKW { $$ = new acsl::ClauseTerminates($2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->neterminates_ = $$; }
;
Decreases : /* empty */ { $$ = new acsl::NoDecreases(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->decreases_ = $$; }
  | NEDecreases { $$ = new acsl::SomeDecreases($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->decreases_ = $$; }
;
NEDecreases : _KW_Decreases Variant _SEMI { $$ = new acsl::SimpleDecreases($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->nedecreases_ = $$; }
  | _KW_Decreases Variant ClauseKW { $$ = new acsl::ClauseDecreases($2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->nedecreases_ = $$; }
;
Variant : Lexpr _KW_for AnyIdentifier { $$ = new acsl::ForVariant($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->variant_ = $$; }
  | Lexpr { $$ = new acsl::LexprVariant($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->variant_ = $$; }
;
SimpleClauses : /* empty */ { $$ = new acsl::NoSimpleClauses(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->simpleclauses_ = $$; }
  | NESimpleClauses { $$ = new acsl::SomeSimpleClauses($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->simpleclauses_ = $$; }
;
Allocation : _KW_allocates Zones { $$ = new acsl::AllocatesZones($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->allocation_ = $$; }
  | _KW_frees Zones { $$ = new acsl::FreesZones($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->allocation_ = $$; }
;
NESimpleClauses : PostCond Lexpr _SEMI SimpleClauses { $$ = new acsl::PostCondSimpleClauses($1, $2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->nesimpleclauses_ = $$; }
  | Allocation _SEMI SimpleClauses { $$ = new acsl::AllocationSimpleClauses($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->nesimpleclauses_ = $$; }
  | _KW_Assigns Assigns _SEMI SimpleClauses { $$ = new acsl::AssignsSimpleClauses($2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->nesimpleclauses_ = $$; }
  | T_EXT_CONTRACT ExtensionContent _SEMI SimpleClauses { $$ = new acsl::ExtContractSimpleClauses($1, $2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->nesimpleclauses_ = $$; }
  | PostCond Lexpr ClauseKW { $$ = new acsl::ClausesPostCondSimpleClauses($1, $2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->nesimpleclauses_ = $$; }
  | Allocation ClauseKW { $$ = new acsl::ClausesAllocationSimpleClauses($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->nesimpleclauses_ = $$; }
  | _KW_Assigns Assigns ClauseKW { $$ = new acsl::ClausesAssignsSimpleClauses($2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->nesimpleclauses_ = $$; }
  | T_EXT_CONTRACT Zones ClauseKW { $$ = new acsl::ExtConClausestractSimpleClauses($1, $2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->nesimpleclauses_ = $$; }
;
ExtensionContent : /* empty */ { $$ = new acsl::NoExtensionContent(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->extensioncontent_ = $$; }
  | Zones { $$ = new acsl::SomeExtensionContent($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->extensioncontent_ = $$; }
;
Behaviors : /* empty */ { $$ = new acsl::NoBehaviors(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->behaviors_ = $$; }
  | NEBehaviors { $$ = new acsl::SomeBehaviors($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->behaviors_ = $$; }
;
NEBehaviors : _KW_behavior BehaviorName _COLON BehaviorBody Behaviors { $$ = new acsl::TheBehaviors($2, $4, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->nebehaviors_ = $$; }
;
BehaviorBody : Assumes Requires SimpleClauses { $$ = new acsl::SimpleClausesBehavior($1, $2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->behaviorbody_ = $$; }
  | Assumes NERequires _KW_Assumes { $$ = new acsl::RequiresAssumes($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->behaviorbody_ = $$; }
  | Assumes Requires NESimpleClauses _KW_Assumes { $$ = new acsl::SimpleClausesAssumes($1, $2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->behaviorbody_ = $$; }
  | Assumes Requires NESimpleClauses _KW_Requires { $$ = new acsl::RequiresRequires($1, $2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->behaviorbody_ = $$; }
;
Assumes : /* empty */ { $$ = new acsl::NoAssumes(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assumes_ = $$; }
  | _KW_Assumes Lexpr _SEMI Assumes { $$ = new acsl::SimpleAssumes($2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assumes_ = $$; }
  | _KW_Assumes Lexpr ClauseKW { $$ = new acsl::ClauseAssumes($2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assumes_ = $$; }
;
CompleteOrDisjoint : /* empty */ { $$ = new acsl::NoComplDisj(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->completeordisjoint_ = $$; }
  | NECompleteOrDisjoint { $$ = new acsl::SomeComplDisj($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->completeordisjoint_ = $$; }
;
NECompleteOrDisjoint : _KW_complete _KW_Behaviors BehaviorNameList _SEMI CompleteOrDisjoint { $$ = new acsl::CompleteBehavior($3, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->necompleteordisjoint_ = $$; }
  | _KW_disjoint _KW_Behaviors BehaviorNameList _SEMI CompleteOrDisjoint { $$ = new acsl::DisjointBehavior($3, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->necompleteordisjoint_ = $$; }
  | _KW_complete _KW_Behaviors ListBehaviorName ClauseKW { std::reverse($3->begin(),$3->end()) ;$$ = new acsl::CompleteBehaviorClause($3, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->necompleteordisjoint_ = $$; }
  | _KW_disjoint _KW_Behaviors ListBehaviorName ClauseKW { std::reverse($3->begin(),$3->end()) ;$$ = new acsl::DisjointBehaviorClause($3, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->necompleteordisjoint_ = $$; }
;
Assigns : Zones { $$ = new acsl::AssignZone($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assigns_ = $$; }
  | ListLexpr _SYMB_84 Zones { std::reverse($1->begin(),$1->end()) ;$$ = new acsl::AssignZoneFromZone($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assigns_ = $$; }
;
Zones : ListLexpr { std::reverse($1->begin(),$1->end()) ;$$ = new acsl::SomeZone($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->zones_ = $$; }
  | _SYMB_85 { $$ = new acsl::NoZone(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->zones_ = $$; }
;
Annot : Annotation { $$ = new acsl::AnAnnotation($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->annot_ = $$; }
  | IsACSLSpec ListWildcard { std::reverse($2->begin(),$2->end()) ;$$ = new acsl::ACSLSpec($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->annot_ = $$; }
  | ListDecl { std::reverse($1->begin(),$1->end()) ;$$ = new acsl::AnnotDecl($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->annot_ = $$; }
;
Annotation : LoopAnnotStack { $$ = new acsl::LoopAnnotation($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->annotation_ = $$; }
  | _KW_for ListBehaviorName _COLON Contract { std::reverse($2->begin(),$2->end()) ;$$ = new acsl::ForContractAnnotation($2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->annotation_ = $$; }
  | _KW_for ListBehaviorName _COLON CodeAnnotation { std::reverse($2->begin(),$2->end()) ;$$ = new acsl::ForCodeAnnotation($2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->annotation_ = $$; }
  | PragmaOrCodeAnnotation { $$ = new acsl::SimplePragmaOrCodeAnnotation($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->annotation_ = $$; }
  | PragmaOrCodeAnnotation BegPragmaOrCodeAnnotation { $$ = new acsl::PragmaOrCodeAnnotationBeg($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->annotation_ = $$; }
  | Identifier { $$ = new acsl::IdentifierAnnotation($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->annotation_ = $$; }
  | _SYMB_82 { $$ = new acsl::GhostAnnotation(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->annotation_ = $$; }
;
LoopAnnotStack : LoopInvariant LoopAnnotOpt { $$ = new acsl::LoopAnnotStackInvariant($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->loopannotstack_ = $$; }
  | LoopEffects LoopAnnotOpt { $$ = new acsl::LoopAnnotStackEffects($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->loopannotstack_ = $$; }
  | LoopAllocation LoopAnnotOpt { $$ = new acsl::LoopAnnotStackAllocation($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->loopannotstack_ = $$; }
  | _KW_for ListBehaviorName _COLON LoopAnnotStack { std::reverse($2->begin(),$2->end()) ;$$ = new acsl::LoopAnnotStackForBehavior($2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->loopannotstack_ = $$; }
  | LoopVariant LoopAnnotOpt { $$ = new acsl::LoopAnnotStackVariant($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->loopannotstack_ = $$; }
  | LoopPragma LoopAnnotOpt { $$ = new acsl::LoopAnnotStackPragma($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->loopannotstack_ = $$; }
  | LoopGrammarExtension LoopAnnotOpt { $$ = new acsl::LoopAnnotStackGrammarExten($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->loopannotstack_ = $$; }
;
LoopAnnotOpt : /* empty */ { $$ = new acsl::NoLoopAnnot(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->loopannotopt_ = $$; }
  | LoopAnnotStack { $$ = new acsl::SomeLoopAnnot($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->loopannotopt_ = $$; }
;
LoopEffects : _KW_loop _KW_Assigns Assigns _SEMI { $$ = new acsl::LoopAssigns($3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->loopeffects_ = $$; }
;
LoopAllocation : _KW_loop Allocation _SEMI { $$ = new acsl::SimpleLoopAllocation($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->loopallocation_ = $$; }
;
LoopInvariant : _KW_loop _KW_invariant Lexpr _SEMI { $$ = new acsl::SimpleLoopInvariant($3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->loopinvariant_ = $$; }
  | _KW_check _KW_loop _KW_invariant Lexpr _SEMI { $$ = new acsl::CheckLoopInvariant($4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->loopinvariant_ = $$; }
  | _KW_admit _KW_loop _KW_invariant Lexpr _SEMI { $$ = new acsl::AdmitLoopInvariant($4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->loopinvariant_ = $$; }
;
LoopVariant : _KW_loop _KW_Variant Variant _SEMI { $$ = new acsl::SimpleLoopVariant($3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->loopvariant_ = $$; }
;
LoopGrammarExtension : _KW_loop T_EXT_CODE_ANNOT ExtensionContent _SEMI { $$ = new acsl::SimpleLoopGrammarExten($2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->loopgrammarextension_ = $$; }
;
LoopPragma : _KW_loop _KW_pragma AnyIdentifier ListLexpr _SEMI { std::reverse($4->begin(),$4->end()) ;$$ = new acsl::PragmaLoop($3, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->looppragma_ = $$; }
;
BegPragmaOrCodeAnnotation : _KW_impact { $$ = new acsl::ImpactKeyWordBegPragma(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->begpragmaorcodeannotation_ = $$; }
  | _KW_slice { $$ = new acsl::SliceKeyWordBegPragma(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->begpragmaorcodeannotation_ = $$; }
  | _KW_for { $$ = new acsl::ForKeyWordBegPragma(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->begpragmaorcodeannotation_ = $$; }
  | _KW_assert { $$ = new acsl::AssertKeyWordBegPragma(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->begpragmaorcodeannotation_ = $$; }
  | _KW_check { $$ = new acsl::CheckKeyWordBegPragma(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->begpragmaorcodeannotation_ = $$; }
  | _KW_admit { $$ = new acsl::AdmitKeyWordBegPragma(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->begpragmaorcodeannotation_ = $$; }
  | _KW_invariant { $$ = new acsl::InvariantKeyWordBegPragma(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->begpragmaorcodeannotation_ = $$; }
  | _KW_check _KW_invariant { $$ = new acsl::CheckInvariantKeyWordBegPragma(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->begpragmaorcodeannotation_ = $$; }
  | _KW_admit _KW_invariant { $$ = new acsl::AdmitInvariantKeyWordBegPragma(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->begpragmaorcodeannotation_ = $$; }
  | _KW_check _KW_loop { $$ = new acsl::CheckLoopKeyWordBegPragma(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->begpragmaorcodeannotation_ = $$; }
  | _KW_admit _KW_loop { $$ = new acsl::AdmitLoopKeyWordBegPragma(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->begpragmaorcodeannotation_ = $$; }
  | T_EXT_CODE_ANNOT { $$ = new acsl::BegExtCodeAnnotBegPragma($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->begpragmaorcodeannotation_ = $$; }
;
PragmaOrCodeAnnotation : SlicePragma { $$ = new acsl::PragmaCodeAnnotSlice($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->pragmaorcodeannotation_ = $$; }
  | ImpactPragma { $$ = new acsl::PragmaCodeAnnotImpact($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->pragmaorcodeannotation_ = $$; }
  | CodeAnnotation { $$ = new acsl::CodeAnnot($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->pragmaorcodeannotation_ = $$; }
;
CodeAnnotation : _KW_assert Lexpr _SEMI { $$ = new acsl::AssertCodeAnnot($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->codeannotation_ = $$; }
  | _KW_check Lexpr _SEMI { $$ = new acsl::CheckCodeAnnot($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->codeannotation_ = $$; }
  | _KW_admit Lexpr _SEMI { $$ = new acsl::AdmitCodeAnnot($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->codeannotation_ = $$; }
  | _KW_invariant Lexpr _SEMI { $$ = new acsl::InvariantCodeAnnot($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->codeannotation_ = $$; }
  | _KW_check _KW_invariant Lexpr _SEMI { $$ = new acsl::CheckInvariantCodeAnnot($3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->codeannotation_ = $$; }
  | _KW_admit _KW_invariant Lexpr _SEMI { $$ = new acsl::AdmitInvariantCodeAnnot($3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->codeannotation_ = $$; }
  | T_EXT_CODE_ANNOT ExtensionContent _SEMI { $$ = new acsl::ExtCodeAnnotCodeAnnot($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->codeannotation_ = $$; }
;
SlicePragma : _KW_slice _KW_pragma AnyIdentifier Lexpr _SEMI { $$ = new acsl::PragmaSliceLexpr($3, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->slicepragma_ = $$; }
  | _KW_slice _KW_pragma AnyIdentifier _SEMI { $$ = new acsl::PragmaSlice($3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->slicepragma_ = $$; }
;
ImpactPragma : _KW_impact _KW_pragma AnyIdentifier Lexpr _SEMI { $$ = new acsl::ImpactPragmaLexpr($3, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->impactpragma_ = $$; }
  | _KW_impact _KW_pragma AnyIdentifier _SEMI { $$ = new acsl::AnImpactPragma($3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->impactpragma_ = $$; }
;
Decl : _KW_global _KW_invariant AnyIdentifier _COLON Lexpr _SEMI { $$ = new acsl::DeclGlobalInvariant($3, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->decl_ = $$; }
  | _KW_volatile ListLexpr ListVolatileOpt _SEMI { std::reverse($2->begin(),$2->end()) ;$$ = new acsl::DeclVolatile($2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->decl_ = $$; }
  | TypeAnnot { $$ = new acsl::DeclTypeAnnot($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->decl_ = $$; }
  | ModelAnnot { $$ = new acsl::DeclModelAnnot($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->decl_ = $$; }
  | LogicDef { $$ = new acsl::DeclLogicDef($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->decl_ = $$; }
  | ExtDecl { $$ = new acsl::DeclExt($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->decl_ = $$; }
  | DeprecatedLogicDecl { $$ = new acsl::DeclDeprecatedLogic($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->decl_ = $$; }
;
ListDecl : Decl { $$ = new acsl::ListDecl(); $$->push_back($1); result->listdecl_ = $$; }
  | Decl ListDecl { $2->push_back($1); $$ = $2; result->listdecl_ = $$; }
;
ExtDecl : T_EXT_GLOBAL ExtensionContent _SEMI { $$ = new acsl::ExtGlobalDecl($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->extdecl_ = $$; }
  | T_EXT_GLOBAL_BLOCK AnyIdentifier _LBRACE ListExtDecl _RBRACE { $$ = new acsl::ExtGlobalBlockDecl($1, $2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->extdecl_ = $$; }
;
ListExtDecl : /* empty */ { $$ = new acsl::ListExtDecl(); result->listextdecl_ = $$; }
  | ListExtDecl ExtDecl { $1->push_back($2); $$ = $1; result->listextdecl_ = $$; }
;
VolatileOpt : _KW_reads AnyIdentifier { $$ = new acsl::ReadVolotile($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->volatileopt_ = $$; }
  | _KW_writes AnyIdentifier { $$ = new acsl::WriteVolotile($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->volatileopt_ = $$; }
;
ListVolatileOpt : /* empty */ { $$ = new acsl::ListVolatileOpt(); result->listvolatileopt_ = $$; }
  | ListVolatileOpt VolatileOpt { $1->push_back($2); $$ = $1; result->listvolatileopt_ = $$; }
;
TypeAnnot : _KW_type _KW_invariant AnyIdentifier _LPAREN Parameter _RPAREN _EQ Lexpr _SEMI { $$ = new acsl::TypeInvariant($3, $5, $8); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typeannot_ = $$; }
;
OptSemicolon : /* empty */ { $$ = new acsl::NoSemicolon(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->optsemicolon_ = $$; }
  | _SEMI { $$ = new acsl::Semicolon(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->optsemicolon_ = $$; }
;
ModelAnnot : _KW_model TypeSpecOFTYPENAME _LBRACE Parameter OptSemicolon _RBRACE _SEMI { $$ = new acsl::ModelAnnotation($2, $4, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->modelannot_ = $$; }
;
PolyIdType : FullIdentifier { $$ = new acsl::SimplePolyIdType($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->polyidtype_ = $$; }
  | FullIdentifier _LT ListFullIdentifier _GT { std::reverse($3->begin(),$3->end()) ;$$ = new acsl::PolyIdTypeAngles($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->polyidtype_ = $$; }
;
PolyId : PolyIdType { $$ = new acsl::PolyTypeId($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->polyid_ = $$; }
  | FullIdentifier _LBRACE ListLabelName _RBRACE { std::reverse($3->begin(),$3->end()) ;$$ = new acsl::PolyIdTypeSquares($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->polyid_ = $$; }
  | FullIdentifier _LBRACE ListLabelName _RBRACE _LT ListFullIdentifier _GT { std::reverse($3->begin(),$3->end()) ; std::reverse($6->begin(),$6->end()) ;$$ = new acsl::PolyIdTypeSquaresAngles($1, $3, $6); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->polyid_ = $$; }
;
OptParameters : /* empty */ { $$ = new acsl::NoParameters(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->optparameters_ = $$; }
  | Parameters { $$ = new acsl::SomeParameters($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->optparameters_ = $$; }
;
Parameters : _LPAREN ListParameter _RPAREN { std::reverse($2->begin(),$2->end()) ;$$ = new acsl::AParameters($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->parameters_ = $$; }
;
LogicDef : _KW_logic LogicRtType PolyId OptParameters _EQ Lexpr _SEMI { $$ = new acsl::SimpleLogicDef($2, $3, $4, $6); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->logicdef_ = $$; }
  | _KW_predicate PolyId OptParameters _EQ Lexpr _SEMI { $$ = new acsl::PredicateLogicDef($2, $3, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->logicdef_ = $$; }
  | _KW_inductive PolyId Parameters _LBRACE ListIndcase _RBRACE { $$ = new acsl::InductiveLogicDef($2, $3, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->logicdef_ = $$; }
  | _KW_lemma PolyId _COLON Lexpr _SEMI { $$ = new acsl::LemmaLogicDef($2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->logicdef_ = $$; }
  | _KW_check _KW_lemma PolyId _COLON Lexpr _SEMI { $$ = new acsl::CheckLemmaLogicDef($3, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->logicdef_ = $$; }
  | _KW_admit _KW_lemma PolyId _COLON Lexpr _SEMI { $$ = new acsl::AdmitLemmaLogicDef($3, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->logicdef_ = $$; }
  | _KW_axiomatic AnyIdentifier _LBRACE ListLogicDecl _RBRACE { $$ = new acsl::AxiomaticLogicDef($2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->logicdef_ = $$; }
  | _KW_type PolyIdType _EQ Typedef _SEMI { $$ = new acsl::TypeLogicDef($2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->logicdef_ = $$; }
;
DeprecatedLogicDecl : _KW_logic LogicRtType PolyId OptParameters _SEMI { $$ = new acsl::SimpleDeprecatedLogicDecl($2, $3, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->deprecatedlogicdecl_ = $$; }
  | _KW_predicate PolyId OptParameters _SEMI { $$ = new acsl::PredicateDeprecatedLogicDecl($2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->deprecatedlogicdecl_ = $$; }
  | _KW_type PolyIdType _SEMI { $$ = new acsl::TypeDeprecatedLogicDecl($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->deprecatedlogicdecl_ = $$; }
  | _KW_axiom PolyId _COLON Lexpr _SEMI { $$ = new acsl::AxiomDeprecatedLogicDecl($2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->deprecatedlogicdecl_ = $$; }
;
LogicDecl : LogicDef { $$ = new acsl::LocidDeclDef($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->logicdecl_ = $$; }
  | _KW_logic LogicRtType PolyId OptParameters ReadsClause _SEMI { $$ = new acsl::SimpleLogicDecl($2, $3, $4, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->logicdecl_ = $$; }
  | _KW_predicate PolyId OptParameters ReadsClause _SEMI { $$ = new acsl::PredicateLogicDecl($2, $3, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->logicdecl_ = $$; }
  | _KW_type PolyIdType _SEMI { $$ = new acsl::TypeLogicDecl($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->logicdecl_ = $$; }
  | _KW_axiom PolyId _COLON Lexpr _SEMI { $$ = new acsl::AxiomLogicDecl($2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->logicdecl_ = $$; }
;
ListLogicDecl : /* empty */ { $$ = new acsl::ListLogicDecl(); result->listlogicdecl_ = $$; }
  | ListLogicDecl LogicDecl { $1->push_back($2); $$ = $1; result->listlogicdecl_ = $$; }
;
ReadsClause : /* empty */ { $$ = new acsl::NoReadsClause(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->readsclause_ = $$; }
  | _KW_reads Zones { $$ = new acsl::SomeReadsClause($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->readsclause_ = $$; }
;
Typedef : ListDataconsWithSeparator { std::reverse($1->begin(),$1->end()) ;$$ = new acsl::ListOfDatacons($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typedef_ = $$; }
  | LogicTypeGenOFTYPENAME { $$ = new acsl::TypedefLogicTypeGen($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typedef_ = $$; }
;
DataconsWithSeparator : Datacons { $$ = new acsl::SimpleDataCons($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->dataconswithseparator_ = $$; }
  | _BAR Datacons { $$ = new acsl::DataConsWithPipe($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->dataconswithseparator_ = $$; }
;
ListDataconsWithSeparator : DataconsWithSeparator { $$ = new acsl::ListDataconsWithSeparator(); $$->push_back($1); result->listdataconswithseparator_ = $$; }
  | DataconsWithSeparator ListDataconsWithSeparator { $2->push_back($1); $$ = $2; result->listdataconswithseparator_ = $$; }
;
Datacons : FullIdentifier { $$ = new acsl::DataConsFullIdentifier($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->datacons_ = $$; }
  | FullIdentifier _LPAREN ListLogicTypeGenOFTYPENAME _RPAREN { std::reverse($3->begin(),$3->end()) ;$$ = new acsl::DataConsFullIdentifierFun($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->datacons_ = $$; }
;
Indcase : _KW_case PolyId _COLON Lexpr _SEMI { $$ = new acsl::IndCase($2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->indcase_ = $$; }
;
ListIndcase : /* empty */ { $$ = new acsl::ListIndcase(); result->listindcase_ = $$; }
  | ListIndcase Indcase { $1->push_back($2); $$ = $1; result->listindcase_ = $$; }
;
OptLabel1 : OptLabelList { $$ = new acsl::OptLabelOne($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->optlabel_ = $$; }
;
OptLabel2 : OptLabelList { $$ = new acsl::OptLabelTwo($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->optlabel_ = $$; }
;
OptLabelList : /* empty */ { $$ = new acsl::NoLableList(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->optlabellist_ = $$; }
  | _LBRACE ListLabelName _RBRACE { std::reverse($2->begin(),$2->end()) ;$$ = new acsl::LableList($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->optlabellist_ = $$; }
;
LabelName : AnyIdentifier { $$ = new acsl::LableName($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->labelname_ = $$; }
;
ListLabelName : LabelName { $$ = new acsl::ListLabelName(); $$->push_back($1); result->listlabelname_ = $$; }
  | LabelName _COMMA ListLabelName { $3->push_back($1); $$ = $3; result->listlabelname_ = $$; }
;
BehaviorNameList : /* empty */ { $$ = new acsl::EmptyBehaviorNameList(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->behaviornamelist_ = $$; }
  | ListBehaviorName { std::reverse($1->begin(),$1->end()) ;$$ = new acsl::AnBehaviorNameList($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->behaviornamelist_ = $$; }
;
BehaviorName : AnyIdentifier { $$ = new acsl::BehaviorNameAnyIdent($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->behaviorname_ = $$; }
;
ListBehaviorName : BehaviorName { $$ = new acsl::ListBehaviorName(); $$->push_back($1); result->listbehaviorname_ = $$; }
  | BehaviorName _COMMA ListBehaviorName { $3->push_back($1); $$ = $3; result->listbehaviorname_ = $$; }
;
AnyIdentifier : Identifier { $$ = new acsl::SimpleIdentifierAny($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->anyidentifier_ = $$; }
  | IsACSLTypename { $$ = new acsl::ACSLTypenameIdentifier($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->anyidentifier_ = $$; }
  | T_TYPENAME { $$ = new acsl::TypenameIdentifier($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->anyidentifier_ = $$; }
  | Keyword { $$ = new acsl::KeywordIdentifier($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->anyidentifier_ = $$; }
;
IdentifierOrTypename : T_TYPENAME { $$ = new acsl::Typename($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->identifierortypename_ = $$; }
  | FullIdentifier { $$ = new acsl::AnFullIdentifier($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->identifierortypename_ = $$; }
;
IdentifierOrTypenameFull : IsACSLTypename { $$ = new acsl::ACSLTypename($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->identifierortypenamefull_ = $$; }
  | IdentifierOrTypename { $$ = new acsl::AnIdentifierOrTypename($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->identifierortypenamefull_ = $$; }
;
ListIdentifierOrTypenameFull : IdentifierOrTypenameFull { $$ = new acsl::ListIdentifierOrTypenameFull(); $$->push_back($1); result->listidentifierortypenamefull_ = $$; }
  | IdentifierOrTypenameFull _COMMA ListIdentifierOrTypenameFull { $3->push_back($1); $$ = $3; result->listidentifierortypenamefull_ = $$; }
;
Identifier : _IDENT_ { $$ = new acsl::IdentifierIdent($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->identifier_ = $$; }
  | _KW_Behaviors { $$ = new acsl::BehaviorsKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->identifier_ = $$; }
  | _KW_label { $$ = new acsl::LabelKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->identifier_ = $$; }
  | _KW_reads { $$ = new acsl::ReadsKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->identifier_ = $$; }
  | _KW_writes { $$ = new acsl::WritesKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->identifier_ = $$; }
;
BoundedVar : FullIdentifier { $$ = new acsl::BoendedVarFullIdentifier($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->boundedvar_ = $$; }
  | IsACSLTypename { $$ = new acsl::BoendedVarACSLTypename($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->boundedvar_ = $$; }
  | T_TYPENAME { $$ = new acsl::BoendedVarTypename($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->boundedvar_ = $$; }
;
CKeyword : _KW_char { $$ = new acsl::CharKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->ckeyword_ = $$; }
  | _KW_boolean { $$ = new acsl::BooleanKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->ckeyword_ = $$; }
  | _SYMB_83 { $$ = new acsl::BoolKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->ckeyword_ = $$; }
  | _KW_const { $$ = new acsl::ConstKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->ckeyword_ = $$; }
  | _KW_double { $$ = new acsl::DoubleKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->ckeyword_ = $$; }
  | _KW_enum { $$ = new acsl::EnumKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->ckeyword_ = $$; }
  | _KW_else { $$ = new acsl::ElseKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->ckeyword_ = $$; }
  | _KW_float { $$ = new acsl::FloatKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->ckeyword_ = $$; }
  | _KW_if { $$ = new acsl::IfKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->ckeyword_ = $$; }
  | _KW_int { $$ = new acsl::IntKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->ckeyword_ = $$; }
  | _KW_long { $$ = new acsl::LongKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->ckeyword_ = $$; }
  | _KW_short { $$ = new acsl::ShortKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->ckeyword_ = $$; }
  | _KW_signed { $$ = new acsl::SignedKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->ckeyword_ = $$; }
  | _KW_sizeof { $$ = new acsl::SizeofKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->ckeyword_ = $$; }
  | _SYMB_49 { $$ = new acsl::StaticKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->ckeyword_ = $$; }
  | _KW_struct { $$ = new acsl::StructKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->ckeyword_ = $$; }
  | _KW_union { $$ = new acsl::UnionKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->ckeyword_ = $$; }
  | _KW_unsigned { $$ = new acsl::UnsignedKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->ckeyword_ = $$; }
  | _KW_void { $$ = new acsl::VoidKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->ckeyword_ = $$; }
;
ACSLCKeyword : _KW_case { $$ = new acsl::CaseKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->acslckeyword_ = $$; }
  | _KW_for { $$ = new acsl::ForKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->acslckeyword_ = $$; }
  | _KW_volatile { $$ = new acsl::VolatileKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->acslckeyword_ = $$; }
;
PostCond : _KW_ensures { $$ = new acsl::EnsuresKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->postcond_ = $$; }
  | _KW_exits { $$ = new acsl::ExitsKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->postcond_ = $$; }
  | _KW_breaks { $$ = new acsl::BreaksKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->postcond_ = $$; }
  | _KW_continues { $$ = new acsl::ContinuesKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->postcond_ = $$; }
  | _KW_returns { $$ = new acsl::ReturnsKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->postcond_ = $$; }
  | _KW_check _KW_ensures { $$ = new acsl::CheckEnsuresKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->postcond_ = $$; }
  | _KW_check _KW_exits { $$ = new acsl::CheckExitsKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->postcond_ = $$; }
  | _KW_check _KW_breaks { $$ = new acsl::CheckBreaksKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->postcond_ = $$; }
  | _KW_check _KW_continues { $$ = new acsl::CheckContinuesKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->postcond_ = $$; }
  | _KW_check _KW_returns { $$ = new acsl::CheckReturnsKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->postcond_ = $$; }
  | _KW_admit _KW_ensures { $$ = new acsl::AdmitEnsuresKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->postcond_ = $$; }
  | _KW_admit _KW_exits { $$ = new acsl::AdmitExitsKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->postcond_ = $$; }
  | _KW_admit _KW_breaks { $$ = new acsl::AdmitBreaksKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->postcond_ = $$; }
  | _KW_admit _KW_continues { $$ = new acsl::AdmitContinuesKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->postcond_ = $$; }
  | _KW_admit _KW_returns { $$ = new acsl::AdmitReturnsKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->postcond_ = $$; }
;
IsACSLSpec : PostCond { $$ = new acsl::PostCondKeyWord($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isacslspec_ = $$; }
  | T_EXT_CONTRACT { $$ = new acsl::ExtContractKeyWord($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isacslspec_ = $$; }
  | _KW_Assigns { $$ = new acsl::AssignsKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isacslspec_ = $$; }
  | _KW_allocates { $$ = new acsl::AllocatesKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isacslspec_ = $$; }
  | _KW_frees { $$ = new acsl::FreesKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isacslspec_ = $$; }
  | _KW_behavior { $$ = new acsl::BehaviorKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isacslspec_ = $$; }
  | _KW_Requires { $$ = new acsl::RequiresKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isacslspec_ = $$; }
  | _KW_check _KW_requires { $$ = new acsl::CheckRequiresKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isacslspec_ = $$; }
  | _KW_admit _KW_requires { $$ = new acsl::AdmitRequiresKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isacslspec_ = $$; }
  | _KW_Terminates { $$ = new acsl::TerminatesKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isacslspec_ = $$; }
  | _KW_complete { $$ = new acsl::CompleteKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isacslspec_ = $$; }
  | _KW_Decreases { $$ = new acsl::DecreasesKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isacslspec_ = $$; }
  | _KW_disjoint { $$ = new acsl::DisjointKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isacslspec_ = $$; }
;
IsACSLDeclOrCodeAnnot : T_EXT_CODE_ANNOT { $$ = new acsl::ExtCodeAnnotKeyWord($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isacsldeclorcodeannot_ = $$; }
  | T_EXT_GLOBAL { $$ = new acsl::ExtGlobalKeyWord($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isacsldeclorcodeannot_ = $$; }
  | T_EXT_GLOBAL_BLOCK { $$ = new acsl::ExtGlobalBlockKeyWord($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isacsldeclorcodeannot_ = $$; }
  | _KW_Assumes { $$ = new acsl::AssumesKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isacsldeclorcodeannot_ = $$; }
  | _KW_assert { $$ = new acsl::AssertKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isacsldeclorcodeannot_ = $$; }
  | _KW_check { $$ = new acsl::CheckKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isacsldeclorcodeannot_ = $$; }
  | _KW_admit { $$ = new acsl::AdmitKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isacsldeclorcodeannot_ = $$; }
  | _KW_global { $$ = new acsl::GlobalKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isacsldeclorcodeannot_ = $$; }
  | _KW_impact { $$ = new acsl::ImpactKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isacsldeclorcodeannot_ = $$; }
  | _KW_inductive { $$ = new acsl::InductiveKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isacsldeclorcodeannot_ = $$; }
  | _KW_invariant { $$ = new acsl::InvariantKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isacsldeclorcodeannot_ = $$; }
  | _KW_admit _KW_invariant { $$ = new acsl::AdmitInvariantKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isacsldeclorcodeannot_ = $$; }
  | _KW_check _KW_invariant { $$ = new acsl::CheckInvariantKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isacsldeclorcodeannot_ = $$; }
  | _KW_lemma { $$ = new acsl::LemmaKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isacsldeclorcodeannot_ = $$; }
  | _KW_admit _KW_lemma { $$ = new acsl::AdmitLemmaKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isacsldeclorcodeannot_ = $$; }
  | _KW_check _KW_lemma { $$ = new acsl::CheckLemmaKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isacsldeclorcodeannot_ = $$; }
  | _KW_loop { $$ = new acsl::LoopKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isacsldeclorcodeannot_ = $$; }
  | _KW_admit _KW_loop { $$ = new acsl::AdmitLoopKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isacsldeclorcodeannot_ = $$; }
  | _KW_check _KW_loop { $$ = new acsl::CheckLoopKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isacsldeclorcodeannot_ = $$; }
  | _KW_pragma { $$ = new acsl::PragmaKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isacsldeclorcodeannot_ = $$; }
  | _KW_predicate { $$ = new acsl::PredicateKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isacsldeclorcodeannot_ = $$; }
  | _KW_slice { $$ = new acsl::SliceKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isacsldeclorcodeannot_ = $$; }
  | _KW_type { $$ = new acsl::TypeKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isacsldeclorcodeannot_ = $$; }
  | _KW_model { $$ = new acsl::ModelKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isacsldeclorcodeannot_ = $$; }
  | _KW_axiom { $$ = new acsl::AxiomKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isacsldeclorcodeannot_ = $$; }
  | _KW_Variant { $$ = new acsl::VariantKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isacsldeclorcodeannot_ = $$; }
  | _KW_axiomatic { $$ = new acsl::AxiomaticKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isacsldeclorcodeannot_ = $$; }
;
IsACSLTypename : _KW_integer { $$ = new acsl::Integer(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isacsltypename_ = $$; }
  | _KW_real { $$ = new acsl::Real(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isacsltypename_ = $$; }
;
IsExtSpec : _KW_Contract { $$ = new acsl::ContractKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isextspec_ = $$; }
  | _KW_function { $$ = new acsl::FunctionKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isextspec_ = $$; }
  | _KW_module { $$ = new acsl::ModuleKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isextspec_ = $$; }
  | _KW_include { $$ = new acsl::IncludeKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isextspec_ = $$; }
  | _KW_at { $$ = new acsl::AtKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isextspec_ = $$; }
  | _KW_let { $$ = new acsl::LetKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->isextspec_ = $$; }
;
Keyword : _KW_logic { $$ = new acsl::LogicKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->keyword_ = $$; }
  | CKeyword { $$ = new acsl::CKeyWord($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->keyword_ = $$; }
  | ACSLCKeyword { $$ = new acsl::ACSLCKeyWord($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->keyword_ = $$; }
  | IsExtSpec { $$ = new acsl::ExtSpecKeyWord($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->keyword_ = $$; }
  | IsACSLSpec { $$ = new acsl::ACSLSpecKeyWord($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->keyword_ = $$; }
  | IsACSLDeclOrCodeAnnot { $$ = new acsl::ACSLDeclCodeAnnotKeyWord($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->keyword_ = $$; }
;
BSKeyword : _SYMB_43 { $$ = new acsl::SlashAllocableKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->bskeyword_ = $$; }
  | _SYMB_45 { $$ = new acsl::SlashAllocationKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->bskeyword_ = $$; }
  | _SYMB_46 { $$ = new acsl::SlashAutomaticKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->bskeyword_ = $$; }
  | _SYMB_66 { $$ = new acsl::SlashAtKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->bskeyword_ = $$; }
  | _SYMB_40 { $$ = new acsl::SlashBaseAddrKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->bskeyword_ = $$; }
  | _SYMB_41 { $$ = new acsl::SlashBlockLengthKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->bskeyword_ = $$; }
  | _SYMB_82 { $$ = new acsl::SlashGhostKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->bskeyword_ = $$; }
  | _SYMB_47 { $$ = new acsl::SlashDynamicKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->bskeyword_ = $$; }
  | _SYMB_76 { $$ = new acsl::SlashEmptyKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->bskeyword_ = $$; }
  | _SYMB_28 { $$ = new acsl::SlashFalseKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->bskeyword_ = $$; }
  | _SYMB_18 { $$ = new acsl::SlashForallKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->bskeyword_ = $$; }
  | _SYMB_44 { $$ = new acsl::SlashFreeableKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->bskeyword_ = $$; }
  | _SYMB_39 { $$ = new acsl::SlashFreshKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->bskeyword_ = $$; }
  | _SYMB_84 { $$ = new acsl::SlashFromKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->bskeyword_ = $$; }
  | _SYMB_78 { $$ = new acsl::SlashInterKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->bskeyword_ = $$; }
  | _SYMB_20 { $$ = new acsl::SlashLambdaKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->bskeyword_ = $$; }
  | _SYMB_15 { $$ = new acsl::SlashLetKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->bskeyword_ = $$; }
  | _SYMB_85 { $$ = new acsl::SlashNothingKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->bskeyword_ = $$; }
  | _SYMB_51 { $$ = new acsl::SlashNullKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->bskeyword_ = $$; }
  | _SYMB_65 { $$ = new acsl::SlashOldKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->bskeyword_ = $$; }
  | _SYMB_42 { $$ = new acsl::SlashOffsetKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->bskeyword_ = $$; }
  | _SYMB_48 { $$ = new acsl::SlashRegisterKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->bskeyword_ = $$; }
  | _SYMB_67 { $$ = new acsl::SlashResultKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->bskeyword_ = $$; }
  | _SYMB_68 { $$ = new acsl::SlashSeparatedKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->bskeyword_ = $$; }
  | _SYMB_27 { $$ = new acsl::SlashTrueKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->bskeyword_ = $$; }
  | _SYMB_75 { $$ = new acsl::SlashTypeKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->bskeyword_ = $$; }
  | _SYMB_74 { $$ = new acsl::SlashTypeofKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->bskeyword_ = $$; }
  | _SYMB_77 { $$ = new acsl::SlashUnionKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->bskeyword_ = $$; }
  | _SYMB_50 { $$ = new acsl::SlashUnallocatedKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->bskeyword_ = $$; }
  | _SYMB_29 { $$ = new acsl::SlashObjectPointerKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->bskeyword_ = $$; }
  | _SYMB_32 { $$ = new acsl::SlashValidKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->bskeyword_ = $$; }
  | _SYMB_35 { $$ = new acsl::SlashValidIndexKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->bskeyword_ = $$; }
  | _SYMB_36 { $$ = new acsl::SlashValidRangeKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->bskeyword_ = $$; }
  | _SYMB_33 { $$ = new acsl::SlashValidReadKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->bskeyword_ = $$; }
  | _SYMB_34 { $$ = new acsl::SlashValidFunctionKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->bskeyword_ = $$; }
  | _SYMB_37 { $$ = new acsl::SlashInitializedKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->bskeyword_ = $$; }
  | _SYMB_38 { $$ = new acsl::SlashDanglingKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->bskeyword_ = $$; }
  | _SYMB_79 { $$ = new acsl::SlashWithKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->bskeyword_ = $$; }
;
Wildcard : AnyIdentifier { $$ = new acsl::WildCardAnyIdent($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | BSKeyword { $$ = new acsl::WildCardBSKeyWord($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _AMP { $$ = new acsl::Amp(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _DAMP { $$ = new acsl::And(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _RARROW { $$ = new acsl::Arrow(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _SYMB_10 { $$ = new acsl::BIff(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _SYMB_9 { $$ = new acsl::BImplicate(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _COLON { $$ = new acsl::Colon(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _DCOLON { $$ = new acsl::ColonColon(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _COMMA { $$ = new acsl::Comma(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _INTEGER_ { $$ = new acsl::IntConstant($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _DOUBLE_ { $$ = new acsl::FloatConstant($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _STRING_ { $$ = new acsl::StringConstant($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | T_WSTRING_CONSTANT { $$ = new acsl::WstringConstant($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _DOLLAR { $$ = new acsl::Dollar(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _DOT { $$ = new acsl::Dot(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _DDOT { $$ = new acsl::DotDot(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _ELLIPSIS { $$ = new acsl::DotDotDot(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _DEQ { $$ = new acsl::EQ(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _EQ { $$ = new acsl::Equal(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _SYMB_19 { $$ = new acsl::ExistsKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _GTEQ { $$ = new acsl::GreaterEq(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _SYMB_82 { $$ = new acsl::GhostKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _GT { $$ = new acsl::Greater(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _DGT { $$ = new acsl::GreaterGreater(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _CARET { $$ = new acsl::Hat(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _DCARET { $$ = new acsl::HatHat(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _SYMB_2 { $$ = new acsl::Iff(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _SYMB_1 { $$ = new acsl::Implicate(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _LBRACE { $$ = new acsl::LeftBrace(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _LDARROW { $$ = new acsl::LessEq(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _LPAREN { $$ = new acsl::LeftPar(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _LBRACK { $$ = new acsl::LeftSquare(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _SYMB_62 { $$ = new acsl::LeftSquarePipe(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _LT { $$ = new acsl::Less(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _DLT { $$ = new acsl::LessLess(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _MINUS { $$ = new acsl::Minus(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _BANGEQ { $$ = new acsl::NotEq(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _BANG { $$ = new acsl::Not(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _DBAR { $$ = new acsl::PipePipe(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _PERCENT { $$ = new acsl::Mod(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _SYMB_71 { $$ = new acsl::PiKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _BAR { $$ = new acsl::Pipe(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _PLUS { $$ = new acsl::Plus(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _QUESTION { $$ = new acsl::Question(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _RBRACE { $$ = new acsl::RightBrace(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _RPAREN { $$ = new acsl::RightPar(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _RBRACK { $$ = new acsl::RightSquare(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _SYMB_63 { $$ = new acsl::RightSquarePipe(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _SEMI { $$ = new acsl::SemiColon(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _SLASH { $$ = new acsl::Divide(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _STAR { $$ = new acsl::Mult(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _SYMB_57 { $$ = new acsl::MultHat(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | T_STRING_LITERAL { $$ = new acsl::StringLiteral($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _TILDE { $$ = new acsl::TildeKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
  | _SYMB_11 { $$ = new acsl::InKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wildcard_ = $$; }
;
ListWildcard : Wildcard { $$ = new acsl::ListWildcard(); $$->push_back($1); result->listwildcard_ = $$; }
  | Wildcard ListWildcard { $2->push_back($1); $$ = $2; result->listwildcard_ = $$; }
;

%%

namespace acsl
{
/* Entrypoint: parse LexprEOF* from file. */
LexprEOF* pLexprEOF(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.lexpreof_;
  }
}

/* Entrypoint: parse LexprEOF* from string. */
LexprEOF* psLexprEOF(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.lexpreof_;
  }
}

/* Entrypoint: parse LexprList* from file. */
LexprList* pLexprList(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.lexprlist_;
  }
}

/* Entrypoint: parse LexprList* from string. */
LexprList* psLexprList(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.lexprlist_;
  }
}

/* Entrypoint: parse ListLexpr* from file. */
ListLexpr* pListLexpr(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listlexpr_->begin(), result.listlexpr_->end());
    return result.listlexpr_;
  }
}

/* Entrypoint: parse ListLexpr* from string. */
ListLexpr* psListLexpr(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listlexpr_->begin(), result.listlexpr_->end());
    return result.listlexpr_;
  }
}

/* Entrypoint: parse LexprOption* from file. */
LexprOption* pLexprOption(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.lexproption_;
  }
}

/* Entrypoint: parse LexprOption* from string. */
LexprOption* psLexprOption(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.lexproption_;
  }
}

/* Entrypoint: parse Lexpr* from file. */
Lexpr* pLexpr(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.lexpr_;
  }
}

/* Entrypoint: parse Lexpr* from string. */
Lexpr* psLexpr(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.lexpr_;
  }
}

/* Entrypoint: parse Lexpr* from file. */
Lexpr* pLexpr1(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.lexpr_;
  }
}

/* Entrypoint: parse Lexpr* from string. */
Lexpr* psLexpr1(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.lexpr_;
  }
}

/* Entrypoint: parse Lexpr* from file. */
Lexpr* pLexpr2(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.lexpr_;
  }
}

/* Entrypoint: parse Lexpr* from string. */
Lexpr* psLexpr2(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.lexpr_;
  }
}

/* Entrypoint: parse LexprBinder* from file. */
LexprBinder* pLexprBinder(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.lexprbinder_;
  }
}

/* Entrypoint: parse LexprBinder* from string. */
LexprBinder* psLexprBinder(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.lexprbinder_;
  }
}

/* Entrypoint: parse LexprRelInner* from file. */
LexprRelInner* pLexprRelInner(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.lexprrelinner_;
  }
}

/* Entrypoint: parse LexprRelInner* from string. */
LexprRelInner* psLexprRelInner(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.lexprrelinner_;
  }
}

/* Entrypoint: parse ListLexprRelInner* from file. */
ListLexprRelInner* pListLexprRelInner(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.listlexprrelinner_;
  }
}

/* Entrypoint: parse ListLexprRelInner* from string. */
ListLexprRelInner* psListLexprRelInner(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.listlexprrelinner_;
  }
}

/* Entrypoint: parse Relation* from file. */
Relation* pRelation(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.relation_;
  }
}

/* Entrypoint: parse Relation* from string. */
Relation* psRelation(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.relation_;
  }
}

/* Entrypoint: parse Lexpr* from file. */
Lexpr* pLexpr3(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.lexpr_;
  }
}

/* Entrypoint: parse Lexpr* from string. */
Lexpr* psLexpr3(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.lexpr_;
  }
}

/* Entrypoint: parse ListSTRING_LITERAL* from file. */
ListSTRING_LITERAL* pListSTRING_LITERAL(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.liststring_literal_->begin(), result.liststring_literal_->end());
    return result.liststring_literal_;
  }
}

/* Entrypoint: parse ListSTRING_LITERAL* from string. */
ListSTRING_LITERAL* psListSTRING_LITERAL(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.liststring_literal_->begin(), result.liststring_literal_->end());
    return result.liststring_literal_;
  }
}

/* Entrypoint: parse Range* from file. */
Range* pRange(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.range_;
  }
}

/* Entrypoint: parse Range* from string. */
Range* psRange(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.range_;
  }
}

/* Entrypoint: parse FieldInitElt* from file. */
FieldInitElt* pFieldInitElt(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.fieldinitelt_;
  }
}

/* Entrypoint: parse FieldInitElt* from string. */
FieldInitElt* psFieldInitElt(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.fieldinitelt_;
  }
}

/* Entrypoint: parse ListFieldInitElt* from file. */
ListFieldInitElt* pListFieldInitElt(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listfieldinitelt_->begin(), result.listfieldinitelt_->end());
    return result.listfieldinitelt_;
  }
}

/* Entrypoint: parse ListFieldInitElt* from string. */
ListFieldInitElt* psListFieldInitElt(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listfieldinitelt_->begin(), result.listfieldinitelt_->end());
    return result.listfieldinitelt_;
  }
}

/* Entrypoint: parse ArrayInitElt* from file. */
ArrayInitElt* pArrayInitElt(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.arrayinitelt_;
  }
}

/* Entrypoint: parse ArrayInitElt* from string. */
ArrayInitElt* psArrayInitElt(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.arrayinitelt_;
  }
}

/* Entrypoint: parse ListArrayInitElt* from file. */
ListArrayInitElt* pListArrayInitElt(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listarrayinitelt_->begin(), result.listarrayinitelt_->end());
    return result.listarrayinitelt_;
  }
}

/* Entrypoint: parse ListArrayInitElt* from string. */
ListArrayInitElt* psListArrayInitElt(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listarrayinitelt_->begin(), result.listarrayinitelt_->end());
    return result.listarrayinitelt_;
  }
}

/* Entrypoint: parse UpdateElt* from file. */
UpdateElt* pUpdateElt(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.updateelt_;
  }
}

/* Entrypoint: parse UpdateElt* from string. */
UpdateElt* psUpdateElt(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.updateelt_;
  }
}

/* Entrypoint: parse ListUpdateElt* from file. */
ListUpdateElt* pListUpdateElt(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listupdateelt_->begin(), result.listupdateelt_->end());
    return result.listupdateelt_;
  }
}

/* Entrypoint: parse ListUpdateElt* from string. */
ListUpdateElt* psListUpdateElt(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listupdateelt_->begin(), result.listupdateelt_->end());
    return result.listupdateelt_;
  }
}

/* Entrypoint: parse PathElt* from file. */
PathElt* pPathElt(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.pathelt_;
  }
}

/* Entrypoint: parse PathElt* from string. */
PathElt* psPathElt(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.pathelt_;
  }
}

/* Entrypoint: parse ListPathElt* from file. */
ListPathElt* pListPathElt(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listpathelt_->begin(), result.listpathelt_->end());
    return result.listpathelt_;
  }
}

/* Entrypoint: parse ListPathElt* from string. */
ListPathElt* psListPathElt(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listpathelt_->begin(), result.listpathelt_->end());
    return result.listpathelt_;
  }
}

/* Entrypoint: parse Binders* from file. */
Binders* pBinders(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.binders_;
  }
}

/* Entrypoint: parse Binders* from string. */
Binders* psBinders(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.binders_;
  }
}

/* Entrypoint: parse BindersReentrance* from file. */
BindersReentrance* pBindersReentrance(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.bindersreentrance_;
  }
}

/* Entrypoint: parse BindersReentrance* from string. */
BindersReentrance* psBindersReentrance(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.bindersreentrance_;
  }
}

/* Entrypoint: parse ListBindersReentrance* from file. */
ListBindersReentrance* pListBindersReentrance(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listbindersreentrance_->begin(), result.listbindersreentrance_->end());
    return result.listbindersreentrance_;
  }
}

/* Entrypoint: parse ListBindersReentrance* from string. */
ListBindersReentrance* psListBindersReentrance(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listbindersreentrance_->begin(), result.listbindersreentrance_->end());
    return result.listbindersreentrance_;
  }
}

/* Entrypoint: parse VarSpec* from file. */
VarSpec* pVarSpec(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.varspec_;
  }
}

/* Entrypoint: parse VarSpec* from string. */
VarSpec* psVarSpec(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.varspec_;
  }
}

/* Entrypoint: parse ArraySize* from file. */
ArraySize* pArraySize(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.arraysize_;
  }
}

/* Entrypoint: parse ArraySize* from string. */
ArraySize* psArraySize(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.arraysize_;
  }
}

/* Entrypoint: parse VarSpec* from file. */
VarSpec* pVarSpec1(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.varspec_;
  }
}

/* Entrypoint: parse VarSpec* from string. */
VarSpec* psVarSpec1(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.varspec_;
  }
}

/* Entrypoint: parse AbsParamTypeList* from file. */
AbsParamTypeList* pAbsParamTypeList(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.absparamtypelist_;
  }
}

/* Entrypoint: parse AbsParamTypeList* from string. */
AbsParamTypeList* psAbsParamTypeList(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.absparamtypelist_;
  }
}

/* Entrypoint: parse AbsParam* from file. */
AbsParam* pAbsParam(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.absparam_;
  }
}

/* Entrypoint: parse AbsParam* from string. */
AbsParam* psAbsParam(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.absparam_;
  }
}

/* Entrypoint: parse ListAbsParam* from file. */
ListAbsParam* pListAbsParam(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listabsparam_->begin(), result.listabsparam_->end());
    return result.listabsparam_;
  }
}

/* Entrypoint: parse ListAbsParam* from string. */
ListAbsParam* psListAbsParam(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listabsparam_->begin(), result.listabsparam_->end());
    return result.listabsparam_;
  }
}

/* Entrypoint: parse Parameter* from file. */
Parameter* pParameter(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.parameter_;
  }
}

/* Entrypoint: parse Parameter* from string. */
Parameter* psParameter(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.parameter_;
  }
}

/* Entrypoint: parse ListParameter* from file. */
ListParameter* pListParameter(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listparameter_->begin(), result.listparameter_->end());
    return result.listparameter_;
  }
}

/* Entrypoint: parse ListParameter* from string. */
ListParameter* psListParameter(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listparameter_->begin(), result.listparameter_->end());
    return result.listparameter_;
  }
}

/* Entrypoint: parse LogicTypeGenOFTYPENAME* from file. */
LogicTypeGenOFTYPENAME* pLogicTypeGenOFTYPENAME(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.logictypegenoftypename_;
  }
}

/* Entrypoint: parse LogicTypeGenOFTYPENAME* from string. */
LogicTypeGenOFTYPENAME* psLogicTypeGenOFTYPENAME(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.logictypegenoftypename_;
  }
}

/* Entrypoint: parse ListLogicTypeGenOFTYPENAME* from file. */
ListLogicTypeGenOFTYPENAME* pListLogicTypeGenOFTYPENAME(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listlogictypegenoftypename_->begin(), result.listlogictypegenoftypename_->end());
    return result.listlogictypegenoftypename_;
  }
}

/* Entrypoint: parse ListLogicTypeGenOFTYPENAME* from string. */
ListLogicTypeGenOFTYPENAME* psListLogicTypeGenOFTYPENAME(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listlogictypegenoftypename_->begin(), result.listlogictypegenoftypename_->end());
    return result.listlogictypegenoftypename_;
  }
}

/* Entrypoint: parse LogicTypeGenOFIdentifierOrTypename* from file. */
LogicTypeGenOFIdentifierOrTypename* pLogicTypeGenOFIdentifierOrTypename(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.logictypegenofidentifierortypename_;
  }
}

/* Entrypoint: parse LogicTypeGenOFIdentifierOrTypename* from string. */
LogicTypeGenOFIdentifierOrTypename* psLogicTypeGenOFIdentifierOrTypename(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.logictypegenofidentifierortypename_;
  }
}

/* Entrypoint: parse ListLogicTypeGenOFIdentifierOrTypename* from file. */
ListLogicTypeGenOFIdentifierOrTypename* pListLogicTypeGenOFIdentifierOrTypename(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listlogictypegenofidentifierortypename_->begin(), result.listlogictypegenofidentifierortypename_->end());
    return result.listlogictypegenofidentifierortypename_;
  }
}

/* Entrypoint: parse ListLogicTypeGenOFIdentifierOrTypename* from string. */
ListLogicTypeGenOFIdentifierOrTypename* psListLogicTypeGenOFIdentifierOrTypename(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listlogictypegenofidentifierortypename_->begin(), result.listlogictypegenofidentifierortypename_->end());
    return result.listlogictypegenofidentifierortypename_;
  }
}

/* Entrypoint: parse CV* from file. */
CV* pCV(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.cv_;
  }
}

/* Entrypoint: parse CV* from string. */
CV* psCV(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.cv_;
  }
}

/* Entrypoint: parse ListCV* from file. */
ListCV* pListCV(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.listcv_;
  }
}

/* Entrypoint: parse ListCV* from string. */
ListCV* psListCV(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.listcv_;
  }
}

/* Entrypoint: parse TypeSpecCVOFTYPENAME* from file. */
TypeSpecCVOFTYPENAME* pTypeSpecCVOFTYPENAME(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.typespeccvoftypename_;
  }
}

/* Entrypoint: parse TypeSpecCVOFTYPENAME* from string. */
TypeSpecCVOFTYPENAME* psTypeSpecCVOFTYPENAME(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.typespeccvoftypename_;
  }
}

/* Entrypoint: parse CastLogicType* from file. */
CastLogicType* pCastLogicType(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.castlogictype_;
  }
}

/* Entrypoint: parse CastLogicType* from string. */
CastLogicType* psCastLogicType(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.castlogictype_;
  }
}

/* Entrypoint: parse LogicRtType* from file. */
LogicRtType* pLogicRtType(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.logicrttype_;
  }
}

/* Entrypoint: parse LogicRtType* from string. */
LogicRtType* psLogicRtType(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.logicrttype_;
  }
}

/* Entrypoint: parse AbsSpecOption* from file. */
AbsSpecOption* pAbsSpecOption(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.absspecoption_;
  }
}

/* Entrypoint: parse AbsSpecOption* from string. */
AbsSpecOption* psAbsSpecOption(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.absspecoption_;
  }
}

/* Entrypoint: parse AbsSpecCVOption* from file. */
AbsSpecCVOption* pAbsSpecCVOption(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.absspeccvoption_;
  }
}

/* Entrypoint: parse AbsSpecCVOption* from string. */
AbsSpecCVOption* psAbsSpecCVOption(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.absspeccvoption_;
  }
}

/* Entrypoint: parse AbsSpec* from file. */
AbsSpec* pAbsSpec(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.absspec_;
  }
}

/* Entrypoint: parse AbsSpec* from string. */
AbsSpec* psAbsSpec(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.absspec_;
  }
}

/* Entrypoint: parse AbsSpecCV* from file. */
AbsSpecCV* pAbsSpecCV(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.absspeccv_;
  }
}

/* Entrypoint: parse AbsSpecCV* from string. */
AbsSpecCV* psAbsSpecCV(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.absspeccv_;
  }
}

/* Entrypoint: parse AbsSpec* from file. */
AbsSpec* pAbsSpec1(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.absspec_;
  }
}

/* Entrypoint: parse AbsSpec* from string. */
AbsSpec* psAbsSpec1(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.absspec_;
  }
}

/* Entrypoint: parse AbsSpecCV* from file. */
AbsSpecCV* pAbsSpecCV1(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.absspeccv_;
  }
}

/* Entrypoint: parse AbsSpecCV* from string. */
AbsSpecCV* psAbsSpecCV1(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.absspeccv_;
  }
}

/* Entrypoint: parse Stars* from file. */
Stars* pStars(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.stars_;
  }
}

/* Entrypoint: parse Stars* from string. */
Stars* psStars(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.stars_;
  }
}

/* Entrypoint: parse ListStars* from file. */
ListStars* pListStars(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.liststars_->begin(), result.liststars_->end());
    return result.liststars_;
  }
}

/* Entrypoint: parse ListStars* from string. */
ListStars* psListStars(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.liststars_->begin(), result.liststars_->end());
    return result.liststars_;
  }
}

/* Entrypoint: parse StarsCV* from file. */
StarsCV* pStarsCV(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.starscv_;
  }
}

/* Entrypoint: parse StarsCV* from string. */
StarsCV* psStarsCV(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.starscv_;
  }
}

/* Entrypoint: parse ListStarsCV* from file. */
ListStarsCV* pListStarsCV(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.liststarscv_->begin(), result.liststarscv_->end());
    return result.liststarscv_;
  }
}

/* Entrypoint: parse ListStarsCV* from string. */
ListStarsCV* psListStarsCV(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.liststarscv_->begin(), result.liststarscv_->end());
    return result.liststarscv_;
  }
}

/* Entrypoint: parse Tabs* from file. */
Tabs* pTabs(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.tabs_;
  }
}

/* Entrypoint: parse Tabs* from string. */
Tabs* psTabs(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.tabs_;
  }
}

/* Entrypoint: parse ListTabs* from file. */
ListTabs* pListTabs(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listtabs_->begin(), result.listtabs_->end());
    return result.listtabs_;
  }
}

/* Entrypoint: parse ListTabs* from string. */
ListTabs* psListTabs(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listtabs_->begin(), result.listtabs_->end());
    return result.listtabs_;
  }
}

/* Entrypoint: parse TypeSpecSimple* from file. */
TypeSpecSimple* pTypeSpecSimple(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.typespecsimple_;
  }
}

/* Entrypoint: parse TypeSpecSimple* from string. */
TypeSpecSimple* psTypeSpecSimple(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.typespecsimple_;
  }
}

/* Entrypoint: parse TypeSpecOFTYPENAME* from file. */
TypeSpecOFTYPENAME* pTypeSpecOFTYPENAME(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.typespecoftypename_;
  }
}

/* Entrypoint: parse TypeSpecOFTYPENAME* from string. */
TypeSpecOFTYPENAME* psTypeSpecOFTYPENAME(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.typespecoftypename_;
  }
}

/* Entrypoint: parse TypeSpecOFIdentifierOrTypename* from file. */
TypeSpecOFIdentifierOrTypename* pTypeSpecOFIdentifierOrTypename(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.typespecofidentifierortypename_;
  }
}

/* Entrypoint: parse TypeSpecOFIdentifierOrTypename* from string. */
TypeSpecOFIdentifierOrTypename* psTypeSpecOFIdentifierOrTypename(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.typespecofidentifierortypename_;
  }
}

/* Entrypoint: parse FullIdentifier* from file. */
FullIdentifier* pFullIdentifier(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.fullidentifier_;
  }
}

/* Entrypoint: parse FullIdentifier* from string. */
FullIdentifier* psFullIdentifier(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.fullidentifier_;
  }
}

/* Entrypoint: parse ListFullIdentifier* from file. */
ListFullIdentifier* pListFullIdentifier(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listfullidentifier_->begin(), result.listfullidentifier_->end());
    return result.listfullidentifier_;
  }
}

/* Entrypoint: parse ListFullIdentifier* from string. */
ListFullIdentifier* psListFullIdentifier(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listfullidentifier_->begin(), result.listfullidentifier_->end());
    return result.listfullidentifier_;
  }
}

/* Entrypoint: parse ExtSpec* from file. */
ExtSpec* pExtSpec(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.extspec_;
  }
}

/* Entrypoint: parse ExtSpec* from string. */
ExtSpec* psExtSpec(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.extspec_;
  }
}

/* Entrypoint: parse ExtGlobalClausesOpt* from file. */
ExtGlobalClausesOpt* pExtGlobalClausesOpt(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.extglobalclausesopt_;
  }
}

/* Entrypoint: parse ExtGlobalClausesOpt* from string. */
ExtGlobalClausesOpt* psExtGlobalClausesOpt(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.extglobalclausesopt_;
  }
}

/* Entrypoint: parse ExtGlobalClause* from file. */
ExtGlobalClause* pExtGlobalClause(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.extglobalclause_;
  }
}

/* Entrypoint: parse ExtGlobalClause* from string. */
ExtGlobalClause* psExtGlobalClause(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.extglobalclause_;
  }
}

/* Entrypoint: parse ListExtGlobalClause* from file. */
ListExtGlobalClause* pListExtGlobalClause(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listextglobalclause_->begin(), result.listextglobalclause_->end());
    return result.listextglobalclause_;
  }
}

/* Entrypoint: parse ListExtGlobalClause* from string. */
ListExtGlobalClause* psListExtGlobalClause(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listextglobalclause_->begin(), result.listextglobalclause_->end());
    return result.listextglobalclause_;
  }
}

/* Entrypoint: parse ExtGlobalSpecsOpt* from file. */
ExtGlobalSpecsOpt* pExtGlobalSpecsOpt(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.extglobalspecsopt_;
  }
}

/* Entrypoint: parse ExtGlobalSpecsOpt* from string. */
ExtGlobalSpecsOpt* psExtGlobalSpecsOpt(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.extglobalspecsopt_;
  }
}

/* Entrypoint: parse ExtGlobalSpec* from file. */
ExtGlobalSpec* pExtGlobalSpec(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.extglobalspec_;
  }
}

/* Entrypoint: parse ExtGlobalSpec* from string. */
ExtGlobalSpec* psExtGlobalSpec(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.extglobalspec_;
  }
}

/* Entrypoint: parse ListExtGlobalSpec* from file. */
ListExtGlobalSpec* pListExtGlobalSpec(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listextglobalspec_->begin(), result.listextglobalspec_->end());
    return result.listextglobalspec_;
  }
}

/* Entrypoint: parse ListExtGlobalSpec* from string. */
ListExtGlobalSpec* psListExtGlobalSpec(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listextglobalspec_->begin(), result.listextglobalspec_->end());
    return result.listextglobalspec_;
  }
}

/* Entrypoint: parse ExtModuleSpecsOpt* from file. */
ExtModuleSpecsOpt* pExtModuleSpecsOpt(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.extmodulespecsopt_;
  }
}

/* Entrypoint: parse ExtModuleSpecsOpt* from string. */
ExtModuleSpecsOpt* psExtModuleSpecsOpt(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.extmodulespecsopt_;
  }
}

/* Entrypoint: parse ExtModuleSpec* from file. */
ExtModuleSpec* pExtModuleSpec(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.extmodulespec_;
  }
}

/* Entrypoint: parse ExtModuleSpec* from string. */
ExtModuleSpec* psExtModuleSpec(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.extmodulespec_;
  }
}

/* Entrypoint: parse ListExtModuleSpec* from file. */
ListExtModuleSpec* pListExtModuleSpec(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listextmodulespec_->begin(), result.listextmodulespec_->end());
    return result.listextmodulespec_;
  }
}

/* Entrypoint: parse ListExtModuleSpec* from string. */
ListExtModuleSpec* psListExtModuleSpec(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listextmodulespec_->begin(), result.listextmodulespec_->end());
    return result.listextmodulespec_;
  }
}

/* Entrypoint: parse ExtFunctionSpecsOpt* from file. */
ExtFunctionSpecsOpt* pExtFunctionSpecsOpt(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.extfunctionspecsopt_;
  }
}

/* Entrypoint: parse ExtFunctionSpecsOpt* from string. */
ExtFunctionSpecsOpt* psExtFunctionSpecsOpt(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.extfunctionspecsopt_;
  }
}

/* Entrypoint: parse ExtFunctionSpecs* from file. */
ExtFunctionSpecs* pExtFunctionSpecs(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.extfunctionspecs_;
  }
}

/* Entrypoint: parse ExtFunctionSpecs* from string. */
ExtFunctionSpecs* psExtFunctionSpecs(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.extfunctionspecs_;
  }
}

/* Entrypoint: parse ExtFunctionSpec* from file. */
ExtFunctionSpec* pExtFunctionSpec(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.extfunctionspec_;
  }
}

/* Entrypoint: parse ExtFunctionSpec* from string. */
ExtFunctionSpec* psExtFunctionSpec(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.extfunctionspec_;
  }
}

/* Entrypoint: parse ListExtFunctionSpec* from file. */
ListExtFunctionSpec* pListExtFunctionSpec(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listextfunctionspec_->begin(), result.listextfunctionspec_->end());
    return result.listextfunctionspec_;
  }
}

/* Entrypoint: parse ListExtFunctionSpec* from string. */
ListExtFunctionSpec* psListExtFunctionSpec(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listextfunctionspec_->begin(), result.listextfunctionspec_->end());
    return result.listextfunctionspec_;
  }
}

/* Entrypoint: parse ExtFunSpec* from file. */
ExtFunSpec* pExtFunSpec(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.extfunspec_;
  }
}

/* Entrypoint: parse ExtFunSpec* from string. */
ExtFunSpec* psExtFunSpec(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.extfunspec_;
  }
}

/* Entrypoint: parse ListExtFunSpec* from file. */
ListExtFunSpec* pListExtFunSpec(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listextfunspec_->begin(), result.listextfunspec_->end());
    return result.listextfunspec_;
  }
}

/* Entrypoint: parse ListExtFunSpec* from string. */
ListExtFunSpec* psListExtFunSpec(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listextfunspec_->begin(), result.listextfunspec_->end());
    return result.listextfunspec_;
  }
}

/* Entrypoint: parse ExtIdentifierOpt* from file. */
ExtIdentifierOpt* pExtIdentifierOpt(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.extidentifieropt_;
  }
}

/* Entrypoint: parse ExtIdentifierOpt* from string. */
ExtIdentifierOpt* psExtIdentifierOpt(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.extidentifieropt_;
  }
}

/* Entrypoint: parse StmtMarkup* from file. */
StmtMarkup* pStmtMarkup(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.stmtmarkup_;
  }
}

/* Entrypoint: parse StmtMarkup* from string. */
StmtMarkup* psStmtMarkup(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.stmtmarkup_;
  }
}

/* Entrypoint: parse ListStmtMarkup* from file. */
ListStmtMarkup* pListStmtMarkup(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.liststmtmarkup_->begin(), result.liststmtmarkup_->end());
    return result.liststmtmarkup_;
  }
}

/* Entrypoint: parse ListStmtMarkup* from string. */
ListStmtMarkup* psListStmtMarkup(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.liststmtmarkup_->begin(), result.liststmtmarkup_->end());
    return result.liststmtmarkup_;
  }
}

/* Entrypoint: parse Spec* from file. */
Spec* pSpec(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.spec_;
  }
}

/* Entrypoint: parse Spec* from string. */
Spec* psSpec(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.spec_;
  }
}

/* Entrypoint: parse Contract* from file. */
Contract* pContract(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.contract_;
  }
}

/* Entrypoint: parse Contract* from string. */
Contract* psContract(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.contract_;
  }
}

/* Entrypoint: parse ClauseKW* from file. */
ClauseKW* pClauseKW(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.clausekw_;
  }
}

/* Entrypoint: parse ClauseKW* from string. */
ClauseKW* psClauseKW(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.clausekw_;
  }
}

/* Entrypoint: parse Requires* from file. */
Requires* pRequires(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.requires_;
  }
}

/* Entrypoint: parse Requires* from string. */
Requires* psRequires(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.requires_;
  }
}

/* Entrypoint: parse NERequires* from file. */
NERequires* pNERequires(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.nerequires_;
  }
}

/* Entrypoint: parse NERequires* from string. */
NERequires* psNERequires(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.nerequires_;
  }
}

/* Entrypoint: parse Terminates* from file. */
Terminates* pTerminates(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.terminates_;
  }
}

/* Entrypoint: parse Terminates* from string. */
Terminates* psTerminates(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.terminates_;
  }
}

/* Entrypoint: parse NETerminates* from file. */
NETerminates* pNETerminates(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.neterminates_;
  }
}

/* Entrypoint: parse NETerminates* from string. */
NETerminates* psNETerminates(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.neterminates_;
  }
}

/* Entrypoint: parse Decreases* from file. */
Decreases* pDecreases(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.decreases_;
  }
}

/* Entrypoint: parse Decreases* from string. */
Decreases* psDecreases(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.decreases_;
  }
}

/* Entrypoint: parse NEDecreases* from file. */
NEDecreases* pNEDecreases(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.nedecreases_;
  }
}

/* Entrypoint: parse NEDecreases* from string. */
NEDecreases* psNEDecreases(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.nedecreases_;
  }
}

/* Entrypoint: parse Variant* from file. */
Variant* pVariant(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.variant_;
  }
}

/* Entrypoint: parse Variant* from string. */
Variant* psVariant(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.variant_;
  }
}

/* Entrypoint: parse SimpleClauses* from file. */
SimpleClauses* pSimpleClauses(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.simpleclauses_;
  }
}

/* Entrypoint: parse SimpleClauses* from string. */
SimpleClauses* psSimpleClauses(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.simpleclauses_;
  }
}

/* Entrypoint: parse Allocation* from file. */
Allocation* pAllocation(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.allocation_;
  }
}

/* Entrypoint: parse Allocation* from string. */
Allocation* psAllocation(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.allocation_;
  }
}

/* Entrypoint: parse NESimpleClauses* from file. */
NESimpleClauses* pNESimpleClauses(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.nesimpleclauses_;
  }
}

/* Entrypoint: parse NESimpleClauses* from string. */
NESimpleClauses* psNESimpleClauses(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.nesimpleclauses_;
  }
}

/* Entrypoint: parse ExtensionContent* from file. */
ExtensionContent* pExtensionContent(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.extensioncontent_;
  }
}

/* Entrypoint: parse ExtensionContent* from string. */
ExtensionContent* psExtensionContent(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.extensioncontent_;
  }
}

/* Entrypoint: parse Behaviors* from file. */
Behaviors* pBehaviors(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.behaviors_;
  }
}

/* Entrypoint: parse Behaviors* from string. */
Behaviors* psBehaviors(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.behaviors_;
  }
}

/* Entrypoint: parse NEBehaviors* from file. */
NEBehaviors* pNEBehaviors(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.nebehaviors_;
  }
}

/* Entrypoint: parse NEBehaviors* from string. */
NEBehaviors* psNEBehaviors(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.nebehaviors_;
  }
}

/* Entrypoint: parse BehaviorBody* from file. */
BehaviorBody* pBehaviorBody(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.behaviorbody_;
  }
}

/* Entrypoint: parse BehaviorBody* from string. */
BehaviorBody* psBehaviorBody(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.behaviorbody_;
  }
}

/* Entrypoint: parse Assumes* from file. */
Assumes* pAssumes(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.assumes_;
  }
}

/* Entrypoint: parse Assumes* from string. */
Assumes* psAssumes(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.assumes_;
  }
}

/* Entrypoint: parse CompleteOrDisjoint* from file. */
CompleteOrDisjoint* pCompleteOrDisjoint(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.completeordisjoint_;
  }
}

/* Entrypoint: parse CompleteOrDisjoint* from string. */
CompleteOrDisjoint* psCompleteOrDisjoint(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.completeordisjoint_;
  }
}

/* Entrypoint: parse NECompleteOrDisjoint* from file. */
NECompleteOrDisjoint* pNECompleteOrDisjoint(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.necompleteordisjoint_;
  }
}

/* Entrypoint: parse NECompleteOrDisjoint* from string. */
NECompleteOrDisjoint* psNECompleteOrDisjoint(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.necompleteordisjoint_;
  }
}

/* Entrypoint: parse Assigns* from file. */
Assigns* pAssigns(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.assigns_;
  }
}

/* Entrypoint: parse Assigns* from string. */
Assigns* psAssigns(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.assigns_;
  }
}

/* Entrypoint: parse Zones* from file. */
Zones* pZones(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.zones_;
  }
}

/* Entrypoint: parse Zones* from string. */
Zones* psZones(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.zones_;
  }
}

/* Entrypoint: parse Annot* from file. */
Annot* pAnnot(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.annot_;
  }
}

/* Entrypoint: parse Annot* from string. */
Annot* psAnnot(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.annot_;
  }
}

/* Entrypoint: parse Annotation* from file. */
Annotation* pAnnotation(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.annotation_;
  }
}

/* Entrypoint: parse Annotation* from string. */
Annotation* psAnnotation(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.annotation_;
  }
}

/* Entrypoint: parse LoopAnnotStack* from file. */
LoopAnnotStack* pLoopAnnotStack(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.loopannotstack_;
  }
}

/* Entrypoint: parse LoopAnnotStack* from string. */
LoopAnnotStack* psLoopAnnotStack(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.loopannotstack_;
  }
}

/* Entrypoint: parse LoopAnnotOpt* from file. */
LoopAnnotOpt* pLoopAnnotOpt(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.loopannotopt_;
  }
}

/* Entrypoint: parse LoopAnnotOpt* from string. */
LoopAnnotOpt* psLoopAnnotOpt(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.loopannotopt_;
  }
}

/* Entrypoint: parse LoopEffects* from file. */
LoopEffects* pLoopEffects(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.loopeffects_;
  }
}

/* Entrypoint: parse LoopEffects* from string. */
LoopEffects* psLoopEffects(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.loopeffects_;
  }
}

/* Entrypoint: parse LoopAllocation* from file. */
LoopAllocation* pLoopAllocation(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.loopallocation_;
  }
}

/* Entrypoint: parse LoopAllocation* from string. */
LoopAllocation* psLoopAllocation(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.loopallocation_;
  }
}

/* Entrypoint: parse LoopInvariant* from file. */
LoopInvariant* pLoopInvariant(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.loopinvariant_;
  }
}

/* Entrypoint: parse LoopInvariant* from string. */
LoopInvariant* psLoopInvariant(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.loopinvariant_;
  }
}

/* Entrypoint: parse LoopVariant* from file. */
LoopVariant* pLoopVariant(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.loopvariant_;
  }
}

/* Entrypoint: parse LoopVariant* from string. */
LoopVariant* psLoopVariant(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.loopvariant_;
  }
}

/* Entrypoint: parse LoopGrammarExtension* from file. */
LoopGrammarExtension* pLoopGrammarExtension(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.loopgrammarextension_;
  }
}

/* Entrypoint: parse LoopGrammarExtension* from string. */
LoopGrammarExtension* psLoopGrammarExtension(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.loopgrammarextension_;
  }
}

/* Entrypoint: parse LoopPragma* from file. */
LoopPragma* pLoopPragma(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.looppragma_;
  }
}

/* Entrypoint: parse LoopPragma* from string. */
LoopPragma* psLoopPragma(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.looppragma_;
  }
}

/* Entrypoint: parse BegPragmaOrCodeAnnotation* from file. */
BegPragmaOrCodeAnnotation* pBegPragmaOrCodeAnnotation(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.begpragmaorcodeannotation_;
  }
}

/* Entrypoint: parse BegPragmaOrCodeAnnotation* from string. */
BegPragmaOrCodeAnnotation* psBegPragmaOrCodeAnnotation(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.begpragmaorcodeannotation_;
  }
}

/* Entrypoint: parse PragmaOrCodeAnnotation* from file. */
PragmaOrCodeAnnotation* pPragmaOrCodeAnnotation(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.pragmaorcodeannotation_;
  }
}

/* Entrypoint: parse PragmaOrCodeAnnotation* from string. */
PragmaOrCodeAnnotation* psPragmaOrCodeAnnotation(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.pragmaorcodeannotation_;
  }
}

/* Entrypoint: parse CodeAnnotation* from file. */
CodeAnnotation* pCodeAnnotation(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.codeannotation_;
  }
}

/* Entrypoint: parse CodeAnnotation* from string. */
CodeAnnotation* psCodeAnnotation(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.codeannotation_;
  }
}

/* Entrypoint: parse SlicePragma* from file. */
SlicePragma* pSlicePragma(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.slicepragma_;
  }
}

/* Entrypoint: parse SlicePragma* from string. */
SlicePragma* psSlicePragma(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.slicepragma_;
  }
}

/* Entrypoint: parse ImpactPragma* from file. */
ImpactPragma* pImpactPragma(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.impactpragma_;
  }
}

/* Entrypoint: parse ImpactPragma* from string. */
ImpactPragma* psImpactPragma(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.impactpragma_;
  }
}

/* Entrypoint: parse Decl* from file. */
Decl* pDecl(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.decl_;
  }
}

/* Entrypoint: parse Decl* from string. */
Decl* psDecl(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.decl_;
  }
}

/* Entrypoint: parse ListDecl* from file. */
ListDecl* pListDecl(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listdecl_->begin(), result.listdecl_->end());
    return result.listdecl_;
  }
}

/* Entrypoint: parse ListDecl* from string. */
ListDecl* psListDecl(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listdecl_->begin(), result.listdecl_->end());
    return result.listdecl_;
  }
}

/* Entrypoint: parse ExtDecl* from file. */
ExtDecl* pExtDecl(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.extdecl_;
  }
}

/* Entrypoint: parse ExtDecl* from string. */
ExtDecl* psExtDecl(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.extdecl_;
  }
}

/* Entrypoint: parse ListExtDecl* from file. */
ListExtDecl* pListExtDecl(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.listextdecl_;
  }
}

/* Entrypoint: parse ListExtDecl* from string. */
ListExtDecl* psListExtDecl(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.listextdecl_;
  }
}

/* Entrypoint: parse VolatileOpt* from file. */
VolatileOpt* pVolatileOpt(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.volatileopt_;
  }
}

/* Entrypoint: parse VolatileOpt* from string. */
VolatileOpt* psVolatileOpt(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.volatileopt_;
  }
}

/* Entrypoint: parse ListVolatileOpt* from file. */
ListVolatileOpt* pListVolatileOpt(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.listvolatileopt_;
  }
}

/* Entrypoint: parse ListVolatileOpt* from string. */
ListVolatileOpt* psListVolatileOpt(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.listvolatileopt_;
  }
}

/* Entrypoint: parse TypeAnnot* from file. */
TypeAnnot* pTypeAnnot(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.typeannot_;
  }
}

/* Entrypoint: parse TypeAnnot* from string. */
TypeAnnot* psTypeAnnot(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.typeannot_;
  }
}

/* Entrypoint: parse OptSemicolon* from file. */
OptSemicolon* pOptSemicolon(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.optsemicolon_;
  }
}

/* Entrypoint: parse OptSemicolon* from string. */
OptSemicolon* psOptSemicolon(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.optsemicolon_;
  }
}

/* Entrypoint: parse ModelAnnot* from file. */
ModelAnnot* pModelAnnot(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.modelannot_;
  }
}

/* Entrypoint: parse ModelAnnot* from string. */
ModelAnnot* psModelAnnot(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.modelannot_;
  }
}

/* Entrypoint: parse PolyIdType* from file. */
PolyIdType* pPolyIdType(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.polyidtype_;
  }
}

/* Entrypoint: parse PolyIdType* from string. */
PolyIdType* psPolyIdType(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.polyidtype_;
  }
}

/* Entrypoint: parse PolyId* from file. */
PolyId* pPolyId(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.polyid_;
  }
}

/* Entrypoint: parse PolyId* from string. */
PolyId* psPolyId(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.polyid_;
  }
}

/* Entrypoint: parse OptParameters* from file. */
OptParameters* pOptParameters(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.optparameters_;
  }
}

/* Entrypoint: parse OptParameters* from string. */
OptParameters* psOptParameters(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.optparameters_;
  }
}

/* Entrypoint: parse Parameters* from file. */
Parameters* pParameters(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.parameters_;
  }
}

/* Entrypoint: parse Parameters* from string. */
Parameters* psParameters(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.parameters_;
  }
}

/* Entrypoint: parse LogicDef* from file. */
LogicDef* pLogicDef(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.logicdef_;
  }
}

/* Entrypoint: parse LogicDef* from string. */
LogicDef* psLogicDef(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.logicdef_;
  }
}

/* Entrypoint: parse DeprecatedLogicDecl* from file. */
DeprecatedLogicDecl* pDeprecatedLogicDecl(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.deprecatedlogicdecl_;
  }
}

/* Entrypoint: parse DeprecatedLogicDecl* from string. */
DeprecatedLogicDecl* psDeprecatedLogicDecl(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.deprecatedlogicdecl_;
  }
}

/* Entrypoint: parse LogicDecl* from file. */
LogicDecl* pLogicDecl(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.logicdecl_;
  }
}

/* Entrypoint: parse LogicDecl* from string. */
LogicDecl* psLogicDecl(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.logicdecl_;
  }
}

/* Entrypoint: parse ListLogicDecl* from file. */
ListLogicDecl* pListLogicDecl(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.listlogicdecl_;
  }
}

/* Entrypoint: parse ListLogicDecl* from string. */
ListLogicDecl* psListLogicDecl(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.listlogicdecl_;
  }
}

/* Entrypoint: parse ReadsClause* from file. */
ReadsClause* pReadsClause(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.readsclause_;
  }
}

/* Entrypoint: parse ReadsClause* from string. */
ReadsClause* psReadsClause(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.readsclause_;
  }
}

/* Entrypoint: parse Typedef* from file. */
Typedef* pTypedef(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.typedef_;
  }
}

/* Entrypoint: parse Typedef* from string. */
Typedef* psTypedef(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.typedef_;
  }
}

/* Entrypoint: parse DataconsWithSeparator* from file. */
DataconsWithSeparator* pDataconsWithSeparator(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.dataconswithseparator_;
  }
}

/* Entrypoint: parse DataconsWithSeparator* from string. */
DataconsWithSeparator* psDataconsWithSeparator(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.dataconswithseparator_;
  }
}

/* Entrypoint: parse ListDataconsWithSeparator* from file. */
ListDataconsWithSeparator* pListDataconsWithSeparator(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listdataconswithseparator_->begin(), result.listdataconswithseparator_->end());
    return result.listdataconswithseparator_;
  }
}

/* Entrypoint: parse ListDataconsWithSeparator* from string. */
ListDataconsWithSeparator* psListDataconsWithSeparator(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listdataconswithseparator_->begin(), result.listdataconswithseparator_->end());
    return result.listdataconswithseparator_;
  }
}

/* Entrypoint: parse Datacons* from file. */
Datacons* pDatacons(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.datacons_;
  }
}

/* Entrypoint: parse Datacons* from string. */
Datacons* psDatacons(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.datacons_;
  }
}

/* Entrypoint: parse Indcase* from file. */
Indcase* pIndcase(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.indcase_;
  }
}

/* Entrypoint: parse Indcase* from string. */
Indcase* psIndcase(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.indcase_;
  }
}

/* Entrypoint: parse ListIndcase* from file. */
ListIndcase* pListIndcase(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.listindcase_;
  }
}

/* Entrypoint: parse ListIndcase* from string. */
ListIndcase* psListIndcase(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.listindcase_;
  }
}

/* Entrypoint: parse OptLabel* from file. */
OptLabel* pOptLabel1(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.optlabel_;
  }
}

/* Entrypoint: parse OptLabel* from string. */
OptLabel* psOptLabel1(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.optlabel_;
  }
}

/* Entrypoint: parse OptLabel* from file. */
OptLabel* pOptLabel2(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.optlabel_;
  }
}

/* Entrypoint: parse OptLabel* from string. */
OptLabel* psOptLabel2(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.optlabel_;
  }
}

/* Entrypoint: parse OptLabelList* from file. */
OptLabelList* pOptLabelList(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.optlabellist_;
  }
}

/* Entrypoint: parse OptLabelList* from string. */
OptLabelList* psOptLabelList(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.optlabellist_;
  }
}

/* Entrypoint: parse LabelName* from file. */
LabelName* pLabelName(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.labelname_;
  }
}

/* Entrypoint: parse LabelName* from string. */
LabelName* psLabelName(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.labelname_;
  }
}

/* Entrypoint: parse ListLabelName* from file. */
ListLabelName* pListLabelName(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listlabelname_->begin(), result.listlabelname_->end());
    return result.listlabelname_;
  }
}

/* Entrypoint: parse ListLabelName* from string. */
ListLabelName* psListLabelName(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listlabelname_->begin(), result.listlabelname_->end());
    return result.listlabelname_;
  }
}

/* Entrypoint: parse BehaviorNameList* from file. */
BehaviorNameList* pBehaviorNameList(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.behaviornamelist_;
  }
}

/* Entrypoint: parse BehaviorNameList* from string. */
BehaviorNameList* psBehaviorNameList(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.behaviornamelist_;
  }
}

/* Entrypoint: parse BehaviorName* from file. */
BehaviorName* pBehaviorName(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.behaviorname_;
  }
}

/* Entrypoint: parse BehaviorName* from string. */
BehaviorName* psBehaviorName(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.behaviorname_;
  }
}

/* Entrypoint: parse ListBehaviorName* from file. */
ListBehaviorName* pListBehaviorName(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listbehaviorname_->begin(), result.listbehaviorname_->end());
    return result.listbehaviorname_;
  }
}

/* Entrypoint: parse ListBehaviorName* from string. */
ListBehaviorName* psListBehaviorName(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listbehaviorname_->begin(), result.listbehaviorname_->end());
    return result.listbehaviorname_;
  }
}

/* Entrypoint: parse AnyIdentifier* from file. */
AnyIdentifier* pAnyIdentifier(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.anyidentifier_;
  }
}

/* Entrypoint: parse AnyIdentifier* from string. */
AnyIdentifier* psAnyIdentifier(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.anyidentifier_;
  }
}

/* Entrypoint: parse IdentifierOrTypename* from file. */
IdentifierOrTypename* pIdentifierOrTypename(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.identifierortypename_;
  }
}

/* Entrypoint: parse IdentifierOrTypename* from string. */
IdentifierOrTypename* psIdentifierOrTypename(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.identifierortypename_;
  }
}

/* Entrypoint: parse IdentifierOrTypenameFull* from file. */
IdentifierOrTypenameFull* pIdentifierOrTypenameFull(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.identifierortypenamefull_;
  }
}

/* Entrypoint: parse IdentifierOrTypenameFull* from string. */
IdentifierOrTypenameFull* psIdentifierOrTypenameFull(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.identifierortypenamefull_;
  }
}

/* Entrypoint: parse ListIdentifierOrTypenameFull* from file. */
ListIdentifierOrTypenameFull* pListIdentifierOrTypenameFull(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listidentifierortypenamefull_->begin(), result.listidentifierortypenamefull_->end());
    return result.listidentifierortypenamefull_;
  }
}

/* Entrypoint: parse ListIdentifierOrTypenameFull* from string. */
ListIdentifierOrTypenameFull* psListIdentifierOrTypenameFull(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listidentifierortypenamefull_->begin(), result.listidentifierortypenamefull_->end());
    return result.listidentifierortypenamefull_;
  }
}

/* Entrypoint: parse Identifier* from file. */
Identifier* pIdentifier(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.identifier_;
  }
}

/* Entrypoint: parse Identifier* from string. */
Identifier* psIdentifier(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.identifier_;
  }
}

/* Entrypoint: parse BoundedVar* from file. */
BoundedVar* pBoundedVar(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.boundedvar_;
  }
}

/* Entrypoint: parse BoundedVar* from string. */
BoundedVar* psBoundedVar(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.boundedvar_;
  }
}

/* Entrypoint: parse CKeyword* from file. */
CKeyword* pCKeyword(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.ckeyword_;
  }
}

/* Entrypoint: parse CKeyword* from string. */
CKeyword* psCKeyword(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.ckeyword_;
  }
}

/* Entrypoint: parse ACSLCKeyword* from file. */
ACSLCKeyword* pACSLCKeyword(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.acslckeyword_;
  }
}

/* Entrypoint: parse ACSLCKeyword* from string. */
ACSLCKeyword* psACSLCKeyword(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.acslckeyword_;
  }
}

/* Entrypoint: parse PostCond* from file. */
PostCond* pPostCond(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.postcond_;
  }
}

/* Entrypoint: parse PostCond* from string. */
PostCond* psPostCond(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.postcond_;
  }
}

/* Entrypoint: parse IsACSLSpec* from file. */
IsACSLSpec* pIsACSLSpec(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.isacslspec_;
  }
}

/* Entrypoint: parse IsACSLSpec* from string. */
IsACSLSpec* psIsACSLSpec(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.isacslspec_;
  }
}

/* Entrypoint: parse IsACSLDeclOrCodeAnnot* from file. */
IsACSLDeclOrCodeAnnot* pIsACSLDeclOrCodeAnnot(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.isacsldeclorcodeannot_;
  }
}

/* Entrypoint: parse IsACSLDeclOrCodeAnnot* from string. */
IsACSLDeclOrCodeAnnot* psIsACSLDeclOrCodeAnnot(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.isacsldeclorcodeannot_;
  }
}

/* Entrypoint: parse IsACSLTypename* from file. */
IsACSLTypename* pIsACSLTypename(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.isacsltypename_;
  }
}

/* Entrypoint: parse IsACSLTypename* from string. */
IsACSLTypename* psIsACSLTypename(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.isacsltypename_;
  }
}

/* Entrypoint: parse IsExtSpec* from file. */
IsExtSpec* pIsExtSpec(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.isextspec_;
  }
}

/* Entrypoint: parse IsExtSpec* from string. */
IsExtSpec* psIsExtSpec(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.isextspec_;
  }
}

/* Entrypoint: parse Keyword* from file. */
Keyword* pKeyword(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.keyword_;
  }
}

/* Entrypoint: parse Keyword* from string. */
Keyword* psKeyword(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.keyword_;
  }
}

/* Entrypoint: parse BSKeyword* from file. */
BSKeyword* pBSKeyword(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.bskeyword_;
  }
}

/* Entrypoint: parse BSKeyword* from string. */
BSKeyword* psBSKeyword(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.bskeyword_;
  }
}

/* Entrypoint: parse Wildcard* from file. */
Wildcard* pWildcard(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.wildcard_;
  }
}

/* Entrypoint: parse Wildcard* from string. */
Wildcard* psWildcard(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.wildcard_;
  }
}

/* Entrypoint: parse ListWildcard* from file. */
ListWildcard* pListWildcard(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listwildcard_->begin(), result.listwildcard_->end());
    return result.listwildcard_;
  }
}

/* Entrypoint: parse ListWildcard* from string. */
ListWildcard* psListWildcard(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listwildcard_->begin(), result.listwildcard_->end());
    return result.listwildcard_;
  }
}


}
