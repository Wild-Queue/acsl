/* File generated by the BNF Converter (bnfc 2.9.4.1). */

#ifndef ACSL_PARSER_HEADER_FILE
#define ACSL_PARSER_HEADER_FILE

#include<vector>
#include<string>
#include<cstdio>
#include "Absyn.H"

namespace acsl
{
LexprEOF* pLexprEOF(FILE *inp);
LexprEOF* pLexprEOF(const char *str);
LexprList* pLexprList(FILE *inp);
LexprList* pLexprList(const char *str);
ListLexpr* pListLexpr(FILE *inp);
ListLexpr* pListLexpr(const char *str);
LexprOption* pLexprOption(FILE *inp);
LexprOption* pLexprOption(const char *str);
Lexpr* pLexpr(FILE *inp);
Lexpr* pLexpr(const char *str);
Lexpr* pLexpr1(FILE *inp);
Lexpr* pLexpr1(const char *str);
Lexpr* pLexpr2(FILE *inp);
Lexpr* pLexpr2(const char *str);
LexprBinder* pLexprBinder(FILE *inp);
LexprBinder* pLexprBinder(const char *str);
LexprRelInner* pLexprRelInner(FILE *inp);
LexprRelInner* pLexprRelInner(const char *str);
ListLexprRelInner* pListLexprRelInner(FILE *inp);
ListLexprRelInner* pListLexprRelInner(const char *str);
Relation* pRelation(FILE *inp);
Relation* pRelation(const char *str);
Lexpr* pLexpr3(FILE *inp);
Lexpr* pLexpr3(const char *str);
ListSTRING_LITERAL* pListSTRING_LITERAL(FILE *inp);
ListSTRING_LITERAL* pListSTRING_LITERAL(const char *str);
Range* pRange(FILE *inp);
Range* pRange(const char *str);
FieldInitElt* pFieldInitElt(FILE *inp);
FieldInitElt* pFieldInitElt(const char *str);
ListFieldInitElt* pListFieldInitElt(FILE *inp);
ListFieldInitElt* pListFieldInitElt(const char *str);
ArrayInitElt* pArrayInitElt(FILE *inp);
ArrayInitElt* pArrayInitElt(const char *str);
ListArrayInitElt* pListArrayInitElt(FILE *inp);
ListArrayInitElt* pListArrayInitElt(const char *str);
UpdateElt* pUpdateElt(FILE *inp);
UpdateElt* pUpdateElt(const char *str);
ListUpdateElt* pListUpdateElt(FILE *inp);
ListUpdateElt* pListUpdateElt(const char *str);
PathElt* pPathElt(FILE *inp);
PathElt* pPathElt(const char *str);
ListPathElt* pListPathElt(FILE *inp);
ListPathElt* pListPathElt(const char *str);
Binders* pBinders(FILE *inp);
Binders* pBinders(const char *str);
BindersReentrance* pBindersReentrance(FILE *inp);
BindersReentrance* pBindersReentrance(const char *str);
ListBindersReentrance* pListBindersReentrance(FILE *inp);
ListBindersReentrance* pListBindersReentrance(const char *str);
VarSpec* pVarSpec(FILE *inp);
VarSpec* pVarSpec(const char *str);
ArraySize* pArraySize(FILE *inp);
ArraySize* pArraySize(const char *str);
VarSpec* pVarSpec1(FILE *inp);
VarSpec* pVarSpec1(const char *str);
AbsParamTypeList* pAbsParamTypeList(FILE *inp);
AbsParamTypeList* pAbsParamTypeList(const char *str);
AbsParam* pAbsParam(FILE *inp);
AbsParam* pAbsParam(const char *str);
ListAbsParam* pListAbsParam(FILE *inp);
ListAbsParam* pListAbsParam(const char *str);
Parameter* pParameter(FILE *inp);
Parameter* pParameter(const char *str);
ListParameter* pListParameter(FILE *inp);
ListParameter* pListParameter(const char *str);
LogicTypeGenOFTYPENAME* pLogicTypeGenOFTYPENAME(FILE *inp);
LogicTypeGenOFTYPENAME* pLogicTypeGenOFTYPENAME(const char *str);
ListLogicTypeGenOFTYPENAME* pListLogicTypeGenOFTYPENAME(FILE *inp);
ListLogicTypeGenOFTYPENAME* pListLogicTypeGenOFTYPENAME(const char *str);
LogicTypeGenOFIdentifierOrTypename* pLogicTypeGenOFIdentifierOrTypename(FILE *inp);
LogicTypeGenOFIdentifierOrTypename* pLogicTypeGenOFIdentifierOrTypename(const char *str);
ListLogicTypeGenOFIdentifierOrTypename* pListLogicTypeGenOFIdentifierOrTypename(FILE *inp);
ListLogicTypeGenOFIdentifierOrTypename* pListLogicTypeGenOFIdentifierOrTypename(const char *str);
CV* pCV(FILE *inp);
CV* pCV(const char *str);
ListCV* pListCV(FILE *inp);
ListCV* pListCV(const char *str);
TypeSpecCVOFTYPENAME* pTypeSpecCVOFTYPENAME(FILE *inp);
TypeSpecCVOFTYPENAME* pTypeSpecCVOFTYPENAME(const char *str);
CastLogicType* pCastLogicType(FILE *inp);
CastLogicType* pCastLogicType(const char *str);
LogicRtType* pLogicRtType(FILE *inp);
LogicRtType* pLogicRtType(const char *str);
AbsSpecOption* pAbsSpecOption(FILE *inp);
AbsSpecOption* pAbsSpecOption(const char *str);
AbsSpecCVOption* pAbsSpecCVOption(FILE *inp);
AbsSpecCVOption* pAbsSpecCVOption(const char *str);
AbsSpec* pAbsSpec(FILE *inp);
AbsSpec* pAbsSpec(const char *str);
AbsSpecCV* pAbsSpecCV(FILE *inp);
AbsSpecCV* pAbsSpecCV(const char *str);
AbsSpec* pAbsSpec1(FILE *inp);
AbsSpec* pAbsSpec1(const char *str);
AbsSpecCV* pAbsSpecCV1(FILE *inp);
AbsSpecCV* pAbsSpecCV1(const char *str);
Stars* pStars(FILE *inp);
Stars* pStars(const char *str);
ListStars* pListStars(FILE *inp);
ListStars* pListStars(const char *str);
StarsCV* pStarsCV(FILE *inp);
StarsCV* pStarsCV(const char *str);
ListStarsCV* pListStarsCV(FILE *inp);
ListStarsCV* pListStarsCV(const char *str);
Tabs* pTabs(FILE *inp);
Tabs* pTabs(const char *str);
ListTabs* pListTabs(FILE *inp);
ListTabs* pListTabs(const char *str);
TypeSpecSimple* pTypeSpecSimple(FILE *inp);
TypeSpecSimple* pTypeSpecSimple(const char *str);
TypeSpecOFTYPENAME* pTypeSpecOFTYPENAME(FILE *inp);
TypeSpecOFTYPENAME* pTypeSpecOFTYPENAME(const char *str);
TypeSpecOFIdentifierOrTypename* pTypeSpecOFIdentifierOrTypename(FILE *inp);
TypeSpecOFIdentifierOrTypename* pTypeSpecOFIdentifierOrTypename(const char *str);
FullIdentifier* pFullIdentifier(FILE *inp);
FullIdentifier* pFullIdentifier(const char *str);
ListFullIdentifier* pListFullIdentifier(FILE *inp);
ListFullIdentifier* pListFullIdentifier(const char *str);
ExtSpec* pExtSpec(FILE *inp);
ExtSpec* pExtSpec(const char *str);
ExtGlobalClausesOpt* pExtGlobalClausesOpt(FILE *inp);
ExtGlobalClausesOpt* pExtGlobalClausesOpt(const char *str);
ExtGlobalClause* pExtGlobalClause(FILE *inp);
ExtGlobalClause* pExtGlobalClause(const char *str);
ListExtGlobalClause* pListExtGlobalClause(FILE *inp);
ListExtGlobalClause* pListExtGlobalClause(const char *str);
ExtGlobalSpecsOpt* pExtGlobalSpecsOpt(FILE *inp);
ExtGlobalSpecsOpt* pExtGlobalSpecsOpt(const char *str);
ExtGlobalSpec* pExtGlobalSpec(FILE *inp);
ExtGlobalSpec* pExtGlobalSpec(const char *str);
ListExtGlobalSpec* pListExtGlobalSpec(FILE *inp);
ListExtGlobalSpec* pListExtGlobalSpec(const char *str);
ExtModuleSpecsOpt* pExtModuleSpecsOpt(FILE *inp);
ExtModuleSpecsOpt* pExtModuleSpecsOpt(const char *str);
ExtModuleSpec* pExtModuleSpec(FILE *inp);
ExtModuleSpec* pExtModuleSpec(const char *str);
ListExtModuleSpec* pListExtModuleSpec(FILE *inp);
ListExtModuleSpec* pListExtModuleSpec(const char *str);
ExtFunctionSpecsOpt* pExtFunctionSpecsOpt(FILE *inp);
ExtFunctionSpecsOpt* pExtFunctionSpecsOpt(const char *str);
ExtFunctionSpecs* pExtFunctionSpecs(FILE *inp);
ExtFunctionSpecs* pExtFunctionSpecs(const char *str);
ExtFunctionSpec* pExtFunctionSpec(FILE *inp);
ExtFunctionSpec* pExtFunctionSpec(const char *str);
ListExtFunctionSpec* pListExtFunctionSpec(FILE *inp);
ListExtFunctionSpec* pListExtFunctionSpec(const char *str);
ExtFunSpec* pExtFunSpec(FILE *inp);
ExtFunSpec* pExtFunSpec(const char *str);
ListExtFunSpec* pListExtFunSpec(FILE *inp);
ListExtFunSpec* pListExtFunSpec(const char *str);
ExtIdentifierOpt* pExtIdentifierOpt(FILE *inp);
ExtIdentifierOpt* pExtIdentifierOpt(const char *str);
StmtMarkup* pStmtMarkup(FILE *inp);
StmtMarkup* pStmtMarkup(const char *str);
ListStmtMarkup* pListStmtMarkup(FILE *inp);
ListStmtMarkup* pListStmtMarkup(const char *str);
Spec* pSpec(FILE *inp);
Spec* pSpec(const char *str);
Contract* pContract(FILE *inp);
Contract* pContract(const char *str);
ClauseKW* pClauseKW(FILE *inp);
ClauseKW* pClauseKW(const char *str);
Requires* pRequires(FILE *inp);
Requires* pRequires(const char *str);
NERequires* pNERequires(FILE *inp);
NERequires* pNERequires(const char *str);
Terminates* pTerminates(FILE *inp);
Terminates* pTerminates(const char *str);
NETerminates* pNETerminates(FILE *inp);
NETerminates* pNETerminates(const char *str);
Decreases* pDecreases(FILE *inp);
Decreases* pDecreases(const char *str);
NEDecreases* pNEDecreases(FILE *inp);
NEDecreases* pNEDecreases(const char *str);
Variant* pVariant(FILE *inp);
Variant* pVariant(const char *str);
SimpleClauses* pSimpleClauses(FILE *inp);
SimpleClauses* pSimpleClauses(const char *str);
Allocation* pAllocation(FILE *inp);
Allocation* pAllocation(const char *str);
NESimpleClauses* pNESimpleClauses(FILE *inp);
NESimpleClauses* pNESimpleClauses(const char *str);
ExtensionContent* pExtensionContent(FILE *inp);
ExtensionContent* pExtensionContent(const char *str);
Behaviors* pBehaviors(FILE *inp);
Behaviors* pBehaviors(const char *str);
NEBehaviors* pNEBehaviors(FILE *inp);
NEBehaviors* pNEBehaviors(const char *str);
BehaviorBody* pBehaviorBody(FILE *inp);
BehaviorBody* pBehaviorBody(const char *str);
Assumes* pAssumes(FILE *inp);
Assumes* pAssumes(const char *str);
CompleteOrDisjoint* pCompleteOrDisjoint(FILE *inp);
CompleteOrDisjoint* pCompleteOrDisjoint(const char *str);
NECompleteOrDisjoint* pNECompleteOrDisjoint(FILE *inp);
NECompleteOrDisjoint* pNECompleteOrDisjoint(const char *str);
Assigns* pAssigns(FILE *inp);
Assigns* pAssigns(const char *str);
Zones* pZones(FILE *inp);
Zones* pZones(const char *str);
Annot* pAnnot(FILE *inp);
Annot* pAnnot(const char *str);
Annotation* pAnnotation(FILE *inp);
Annotation* pAnnotation(const char *str);
LoopAnnotStack* pLoopAnnotStack(FILE *inp);
LoopAnnotStack* pLoopAnnotStack(const char *str);
LoopAnnotOpt* pLoopAnnotOpt(FILE *inp);
LoopAnnotOpt* pLoopAnnotOpt(const char *str);
LoopEffects* pLoopEffects(FILE *inp);
LoopEffects* pLoopEffects(const char *str);
LoopAllocation* pLoopAllocation(FILE *inp);
LoopAllocation* pLoopAllocation(const char *str);
LoopInvariant* pLoopInvariant(FILE *inp);
LoopInvariant* pLoopInvariant(const char *str);
LoopVariant* pLoopVariant(FILE *inp);
LoopVariant* pLoopVariant(const char *str);
LoopGrammarExtension* pLoopGrammarExtension(FILE *inp);
LoopGrammarExtension* pLoopGrammarExtension(const char *str);
LoopPragma* pLoopPragma(FILE *inp);
LoopPragma* pLoopPragma(const char *str);
BegPragmaOrCodeAnnotation* pBegPragmaOrCodeAnnotation(FILE *inp);
BegPragmaOrCodeAnnotation* pBegPragmaOrCodeAnnotation(const char *str);
PragmaOrCodeAnnotation* pPragmaOrCodeAnnotation(FILE *inp);
PragmaOrCodeAnnotation* pPragmaOrCodeAnnotation(const char *str);
CodeAnnotation* pCodeAnnotation(FILE *inp);
CodeAnnotation* pCodeAnnotation(const char *str);
SlicePragma* pSlicePragma(FILE *inp);
SlicePragma* pSlicePragma(const char *str);
ImpactPragma* pImpactPragma(FILE *inp);
ImpactPragma* pImpactPragma(const char *str);
Decl* pDecl(FILE *inp);
Decl* pDecl(const char *str);
ListDecl* pListDecl(FILE *inp);
ListDecl* pListDecl(const char *str);
ExtDecl* pExtDecl(FILE *inp);
ExtDecl* pExtDecl(const char *str);
ListExtDecl* pListExtDecl(FILE *inp);
ListExtDecl* pListExtDecl(const char *str);
VolatileOpt* pVolatileOpt(FILE *inp);
VolatileOpt* pVolatileOpt(const char *str);
ListVolatileOpt* pListVolatileOpt(FILE *inp);
ListVolatileOpt* pListVolatileOpt(const char *str);
TypeAnnot* pTypeAnnot(FILE *inp);
TypeAnnot* pTypeAnnot(const char *str);
OptSemicolon* pOptSemicolon(FILE *inp);
OptSemicolon* pOptSemicolon(const char *str);
ModelAnnot* pModelAnnot(FILE *inp);
ModelAnnot* pModelAnnot(const char *str);
PolyIdType* pPolyIdType(FILE *inp);
PolyIdType* pPolyIdType(const char *str);
PolyId* pPolyId(FILE *inp);
PolyId* pPolyId(const char *str);
OptParameters* pOptParameters(FILE *inp);
OptParameters* pOptParameters(const char *str);
Parameters* pParameters(FILE *inp);
Parameters* pParameters(const char *str);
LogicDef* pLogicDef(FILE *inp);
LogicDef* pLogicDef(const char *str);
DeprecatedLogicDecl* pDeprecatedLogicDecl(FILE *inp);
DeprecatedLogicDecl* pDeprecatedLogicDecl(const char *str);
LogicDecl* pLogicDecl(FILE *inp);
LogicDecl* pLogicDecl(const char *str);
ListLogicDecl* pListLogicDecl(FILE *inp);
ListLogicDecl* pListLogicDecl(const char *str);
ReadsClause* pReadsClause(FILE *inp);
ReadsClause* pReadsClause(const char *str);
Typedef* pTypedef(FILE *inp);
Typedef* pTypedef(const char *str);
DataconsWithSeparator* pDataconsWithSeparator(FILE *inp);
DataconsWithSeparator* pDataconsWithSeparator(const char *str);
ListDataconsWithSeparator* pListDataconsWithSeparator(FILE *inp);
ListDataconsWithSeparator* pListDataconsWithSeparator(const char *str);
Datacons* pDatacons(FILE *inp);
Datacons* pDatacons(const char *str);
Indcase* pIndcase(FILE *inp);
Indcase* pIndcase(const char *str);
ListIndcase* pListIndcase(FILE *inp);
ListIndcase* pListIndcase(const char *str);
OptLabel* pOptLabel1(FILE *inp);
OptLabel* pOptLabel1(const char *str);
OptLabel* pOptLabel2(FILE *inp);
OptLabel* pOptLabel2(const char *str);
OptLabelList* pOptLabelList(FILE *inp);
OptLabelList* pOptLabelList(const char *str);
LabelName* pLabelName(FILE *inp);
LabelName* pLabelName(const char *str);
ListLabelName* pListLabelName(FILE *inp);
ListLabelName* pListLabelName(const char *str);
BehaviorNameList* pBehaviorNameList(FILE *inp);
BehaviorNameList* pBehaviorNameList(const char *str);
BehaviorName* pBehaviorName(FILE *inp);
BehaviorName* pBehaviorName(const char *str);
ListBehaviorName* pListBehaviorName(FILE *inp);
ListBehaviorName* pListBehaviorName(const char *str);
AnyIdentifier* pAnyIdentifier(FILE *inp);
AnyIdentifier* pAnyIdentifier(const char *str);
IdentifierOrTypename* pIdentifierOrTypename(FILE *inp);
IdentifierOrTypename* pIdentifierOrTypename(const char *str);
IdentifierOrTypenameFull* pIdentifierOrTypenameFull(FILE *inp);
IdentifierOrTypenameFull* pIdentifierOrTypenameFull(const char *str);
ListIdentifierOrTypenameFull* pListIdentifierOrTypenameFull(FILE *inp);
ListIdentifierOrTypenameFull* pListIdentifierOrTypenameFull(const char *str);
Identifier* pIdentifier(FILE *inp);
Identifier* pIdentifier(const char *str);
BoundedVar* pBoundedVar(FILE *inp);
BoundedVar* pBoundedVar(const char *str);
CKeyword* pCKeyword(FILE *inp);
CKeyword* pCKeyword(const char *str);
ACSLCKeyword* pACSLCKeyword(FILE *inp);
ACSLCKeyword* pACSLCKeyword(const char *str);
PostCond* pPostCond(FILE *inp);
PostCond* pPostCond(const char *str);
IsACSLSpec* pIsACSLSpec(FILE *inp);
IsACSLSpec* pIsACSLSpec(const char *str);
IsACSLDeclOrCodeAnnot* pIsACSLDeclOrCodeAnnot(FILE *inp);
IsACSLDeclOrCodeAnnot* pIsACSLDeclOrCodeAnnot(const char *str);
IsACSLTypename* pIsACSLTypename(FILE *inp);
IsACSLTypename* pIsACSLTypename(const char *str);
IsExtSpec* pIsExtSpec(FILE *inp);
IsExtSpec* pIsExtSpec(const char *str);
Keyword* pKeyword(FILE *inp);
Keyword* pKeyword(const char *str);
BSKeyword* pBSKeyword(FILE *inp);
BSKeyword* pBSKeyword(const char *str);
Wildcard* pWildcard(FILE *inp);
Wildcard* pWildcard(const char *str);
ListWildcard* pListWildcard(FILE *inp);
ListWildcard* pListWildcard(const char *str);
}

#endif
