/* File generated by the BNF Converter (bnfc 2.9.4.1). */

#ifndef ACSL_PRINTER_HEADER
#define ACSL_PRINTER_HEADER

#include "Absyn.H"
#include <stdio.h>
#include <stddef.h>
#include <string.h>
#include <stdlib.h>

namespace acsl
{
/* Certain applications may improve performance by changing the buffer size */
#define ACSL_BUFFER_INITIAL 2000
/* You may wish to change _L_PAREN or _R_PAREN */
#define ACSL__L_PAREN '('
#define ACSL__R_PAREN ')'

class PrintAbsyn : public Visitor
{
 protected:
  int _n_, _i_;
  /* The following are simple heuristics for rendering terminals */
  /* You may wish to change them */
  void render(Char c);
  void render(String s);
  void render(const char *s);
  void indent(void);
  void backup(void);
  void onEmptyLine(void);
  void removeTrailingSpaces(void);
  void removeTrailingWhitespace(void);
 public:
  PrintAbsyn(void);
  ~PrintAbsyn(void);
  char *print(Visitable *v);

  void visitProgram(Program *p); /* abstract class */
  void visitAProgram(AProgram *p);
  void visitGlobals(Globals *p); /* abstract class */
  void visitNoGlobals(NoGlobals *p);
  void visitSimpleGlobals(SimpleGlobals *p);
  void visitAGhostGlobals(AGhostGlobals *p);
  void visitSemiColonGlobals(SemiColonGlobals *p);
  void visitGhostGlobals(GhostGlobals *p); /* abstract class */
  void visitGhostGlobalsDeclataion(GhostGlobalsDeclataion *p);
  void visitGhostGlobalsFunctionDef(GhostGlobalsFunctionDef *p);
  void visitGhostGlobalsRGhost(GhostGlobalsRGhost *p);
  void visitGlobal(Global *p); /* abstract class */
  void visitGlobalDecl(GlobalDecl *p);
  void visitGlobalsDeclataion(GlobalsDeclataion *p);
  void visitGlobalsFunctionDef(GlobalsFunctionDef *p);
  void visitExternGlobalDeclataion(ExternGlobalDeclataion *p);
  void visitExternGlobalPar(ExternGlobalPar *p);
  void visitAsmGlobal(AsmGlobal *p);
  void visitPragmaGlobal(PragmaGlobal *p);
  void visitGlobalOldStyle(GlobalOldStyle *p);
  void visitGlobalEmptyOldStyle(GlobalEmptyOldStyle *p);
  void visitIdOrTypenameAsId(IdOrTypenameAsId *p); /* abstract class */
  void visitIdentifier(Identifier *p);
  void visitNamedType(NamedType *p);
  void visitIdOrTypename(IdOrTypename *p); /* abstract class */
  void visitIdTypename(IdTypename *p);
  void visitMaybeComma(MaybeComma *p); /* abstract class */
  void visitNoComa(NoComa *p);
  void visitComa(Coma *p);
  void visitAssignExpr(AssignExpr *p); /* abstract class */
  void visitIdentifierPrimaryExpression(IdentifierPrimaryExpression *p);
  void visitConstantPrimaryExpressin(ConstantPrimaryExpressin *p);
  void visitCommaExpressionPrimaryExpressin(CommaExpressionPrimaryExpressin *p);
  void visitBlockPrimaryExpressin(BlockPrimaryExpressin *p);
  void visitGenericAssociationPrimaryExpressin(GenericAssociationPrimaryExpressin *p);
  void visitGenericPrimaryExpressin(GenericPrimaryExpressin *p);
  void visitBracketsPostfixExpression(BracketsPostfixExpression *p);
  void visitArgumentsPostfixExpression(ArgumentsPostfixExpression *p);
  void visitBuiltinVaArgPostfixExpression(BuiltinVaArgPostfixExpression *p);
  void visitBuiltinTypesCompatPostfixExpression(BuiltinTypesCompatPostfixExpression *p);
  void visitBuiltinOffsetOfPostfixExpression(BuiltinOffsetOfPostfixExpression *p);
  void visitDotPostfixExpression(DotPostfixExpression *p);
  void visitArrowPostfixExpression(ArrowPostfixExpression *p);
  void visitPlusPlusPostfixExpression(PlusPlusPostfixExpression *p);
  void visitMinusMinusPostfixExpression(MinusMinusPostfixExpression *p);
  void visitConstructorPostfixExpression(ConstructorPostfixExpression *p);
  void visitUnaryExprPlusPlus(UnaryExprPlusPlus *p);
  void visitUnaryExprMinusMinus(UnaryExprMinusMinus *p);
  void visitUnaryExprSizeOf(UnaryExprSizeOf *p);
  void visitUnaryExprSizeOfTypeName(UnaryExprSizeOfTypeName *p);
  void visitUnaryExprAlignOfUnaryExpr(UnaryExprAlignOfUnaryExpr *p);
  void visitUnaryExprAlignOfTypeName(UnaryExprAlignOfTypeName *p);
  void visitUnaryExprPlus(UnaryExprPlus *p);
  void visitUnaryExprMinus(UnaryExprMinus *p);
  void visitUnaryExprMult(UnaryExprMult *p);
  void visitUnaryExprAmp(UnaryExprAmp *p);
  void visitUnaryExprNot(UnaryExprNot *p);
  void visitUnaryExprTilde(UnaryExprTilde *p);
  void visitUnaryExprAddress(UnaryExprAddress *p);
  void visitCastExpr(CastExpr *p);
  void visitMulsExpr(MulsExpr *p);
  void visitDivExpr(DivExpr *p);
  void visitModExpr(ModExpr *p);
  void visitPlusExpr(PlusExpr *p);
  void visitMinusExpr(MinusExpr *p);
  void visitLeftShiftExpr(LeftShiftExpr *p);
  void visitRightShiftExpr(RightShiftExpr *p);
  void visitLessExpr(LessExpr *p);
  void visitGreaterExpr(GreaterExpr *p);
  void visitLessEqualExpr(LessEqualExpr *p);
  void visitGreaterEqualExpr(GreaterEqualExpr *p);
  void visitEqExpr(EqExpr *p);
  void visitNotEqExpr(NotEqExpr *p);
  void visitBitAndExpr(BitAndExpr *p);
  void visitBitXorExpr(BitXorExpr *p);
  void visitBitOrExpr(BitOrExpr *p);
  void visitAndExpr(AndExpr *p);
  void visitOrExpr(OrExpr *p);
  void visitTernaryCondExpr(TernaryCondExpr *p);
  void visitEqAssignExpr(EqAssignExpr *p);
  void visitPlusEqAssignExpr(PlusEqAssignExpr *p);
  void visitMinusEqAssignExpr(MinusEqAssignExpr *p);
  void visitMultEqAssignExpr(MultEqAssignExpr *p);
  void visitDivEqAssignExpr(DivEqAssignExpr *p);
  void visitModEqAssignExpr(ModEqAssignExpr *p);
  void visitAndEqAssignExpr(AndEqAssignExpr *p);
  void visitOrEqAssignExpr(OrEqAssignExpr *p);
  void visitXorEqAssignExpr(XorEqAssignExpr *p);
  void visitLeftShiftEqAssignExpr(LeftShiftEqAssignExpr *p);
  void visitRightShiftEqAssignExpr(RightShiftEqAssignExpr *p);
  void visitOffsetofMemberDesignator(OffsetofMemberDesignator *p); /* abstract class */
  void visitIdTypenameOffsetMembetDesignator(IdTypenameOffsetMembetDesignator *p);
  void visitDotOffsetMembetDesignator(DotOffsetMembetDesignator *p);
  void visitBracketsOffsetMembetDesignator(BracketsOffsetMembetDesignator *p);
  void visitExpression(Expression *p); /* abstract class */
  void visitAssignmentExpr(AssignmentExpr *p);
  void visitConstant(Constant *p); /* abstract class */
  void visitConstantInt(ConstantInt *p);
  void visitConstantFloat(ConstantFloat *p);
  void visitConstantChar(ConstantChar *p);
  void visitConstantWChar(ConstantWChar *p);
  void visitConstantString(ConstantString *p);
  void visitConstantWString(ConstantWString *p);
  void visitStringConstant(StringConstant *p); /* abstract class */
  void visitStringConst(StringConst *p);
  void visitWStringList(WStringList *p); /* abstract class */
  void visitLastConstantWString(LastConstantWString *p);
  void visitOneStringWithList(OneStringWithList *p);
  void visitWStringWithList(WStringWithList *p);
  void visitLatersConstantWString(LatersConstantWString *p);
  void visitOneString(OneString *p); /* abstract class */
  void visitSimpleConstantString(SimpleConstantString *p);
  void visitFunctionConstantString(FunctionConstantString *p);
  void visitPrettyFunctionConstantString(PrettyFunctionConstantString *p);
  void visitListOneString(ListOneString *p);
  void iterListOneString(ListOneString::const_iterator i, ListOneString::const_iterator j);
  void visitInitExpression(InitExpression *p); /* abstract class */
  void visitSimpleExpression(SimpleExpression *p);
  void visitBracesExpression(BracesExpression *p);
  void visitInitializerListOpt(InitializerListOpt *p); /* abstract class */
  void visitEmptyInitializerList(EmptyInitializerList *p);
  void visitInitializerList(InitializerList *p);
  void visitInitializerListComma(InitializerListComma *p);
  void visitInitializerSingle(InitializerSingle *p); /* abstract class */
  void visitInitializerDesignator(InitializerDesignator *p);
  void visitInitializerGCCDesignator(InitializerGCCDesignator *p);
  void visitEmptyInitializer(EmptyInitializer *p);
  void visitListInitializerSingle(ListInitializerSingle *p);
  void iterListInitializerSingle(ListInitializerSingle::const_iterator i, ListInitializerSingle::const_iterator j);
  void visitEqOpt(EqOpt *p); /* abstract class */
  void visitEquationSign(EquationSign *p);
  void visitNoEquationSign(NoEquationSign *p);
  void visitInitDesignators(InitDesignators *p); /* abstract class */
  void visitDotInitDesignator(DotInitDesignator *p);
  void visitBracketsInitDesignator(BracketsInitDesignator *p);
  void visitBracketsSliceInitDesignator(BracketsSliceInitDesignator *p);
  void visitInitDesignatorsOpt(InitDesignatorsOpt *p); /* abstract class */
  void visitNoInitDesignator(NoInitDesignator *p);
  void visitSomeInitDesignator(SomeInitDesignator *p);
  void visitGhostArgumentsOpt(GhostArgumentsOpt *p); /* abstract class */
  void visitNoGhostArguments(NoGhostArguments *p);
  void visitSomeGhostArguments(SomeGhostArguments *p);
  void visitArguments(Arguments *p); /* abstract class */
  void visitNoArguments(NoArguments *p);
  void visitSomeArguments(SomeArguments *p);
  void visitOptExpression(OptExpression *p); /* abstract class */
  void visitNoExpression(NoExpression *p);
  void visitSomeExpression(SomeExpression *p);
  void visitListExpression(ListExpression *p);
  void iterListExpression(ListExpression::const_iterator i, ListExpression::const_iterator j);
  void visitCommaExpressionOpt(CommaExpressionOpt *p); /* abstract class */
  void visitNoCommaExpression(NoCommaExpression *p);
  void visitSomeCommaExpression(SomeCommaExpression *p);
  void visitBlock(Block *p); /* abstract class */
  void visitABlock(ABlock *p);
  void visitBlockAttrs(BlockAttrs *p); /* abstract class */
  void visitNoBlockAttrs(NoBlockAttrs *p);
  void visitSomeBlockAttrs(SomeBlockAttrs *p);
  void visitBlockElement(BlockElement *p); /* abstract class */
  void visitDeclarationElement(DeclarationElement *p);
  void visitStatementElement(StatementElement *p);
  void visitPragmaElement(PragmaElement *p);
  void visitListBlockElement(ListBlockElement *p);
  void iterListBlockElement(ListBlockElement::const_iterator i, ListBlockElement::const_iterator j);
  void visitAnnot(Annot *p); /* abstract class */
  void visitCodeAnnot(CodeAnnot *p);
  void visitGhostAnnot(GhostAnnot *p);
  void visitListAnnot(ListAnnot *p);
  void iterListAnnot(ListAnnot::const_iterator i, ListAnnot::const_iterator j);
  void visitLocalLabel(LocalLabel *p); /* abstract class */
  void visitLocalLable(LocalLable *p);
  void visitListLocalLabel(ListLocalLabel *p);
  void iterListLocalLabel(ListLocalLabel::const_iterator i, ListLocalLabel::const_iterator j);
  void visitLocalLabelName(LocalLabelName *p); /* abstract class */
  void visitALocalLabelName(ALocalLabelName *p);
  void visitListLocalLabelName(ListLocalLabelName *p);
  void iterListLocalLabelName(ListLocalLabelName::const_iterator i, ListLocalLabelName::const_iterator j);
  void visitAnnotatedStmt(AnnotatedStmt *p); /* abstract class */
  void visitAnnotatedStatement(AnnotatedStatement *p);
  void visitElsePart(ElsePart *p); /* abstract class */
  void visitNoElsePart(NoElsePart *p);
  void visitSimpleElsePart(SimpleElsePart *p);
  void visitSimpleGhostElsePart(SimpleGhostElsePart *p);
  void visitGhostElsePart(GhostElsePart *p);
  void visitStatement(Statement *p); /* abstract class */
  void visitSemicolonStatement(SemicolonStatement *p);
  void visitSpecStatement(SpecStatement *p);
  void visitExprsStatement(ExprsStatement *p);
  void visitBlockStatement(BlockStatement *p);
  void visitIfStatement(IfStatement *p);
  void visitSwitchStatement(SwitchStatement *p);
  void visitWhileStatement(WhileStatement *p);
  void visitDoWhileStatement(DoWhileStatement *p);
  void visitForStatement(ForStatement *p);
  void visitColonStatement(ColonStatement *p);
  void visitCaseStatement(CaseStatement *p);
  void visitCaseSliceStatement(CaseSliceStatement *p);
  void visitDefaultStatement(DefaultStatement *p);
  void visitEmptyReturnStatement(EmptyReturnStatement *p);
  void visitReturnStatement(ReturnStatement *p);
  void visitBreakStatement(BreakStatement *p);
  void visitContinueStatement(ContinueStatement *p);
  void visitGotoStatement(GotoStatement *p);
  void visitStarGotoStatement(StarGotoStatement *p);
  void visitAsmGotoAsmattrStatement(AsmGotoAsmattrStatement *p);
  void visitAsmAsmattrStatement(AsmAsmattrStatement *p);
  void visitAsmStatement(AsmStatement *p);
  void visitTryExceptStatement(TryExceptStatement *p);
  void visitTryFinallyStatement(TryFinallyStatement *p);
  void visitOptLoopAnnotations(OptLoopAnnotations *p); /* abstract class */
  void visitNoLoopAnnotations(NoLoopAnnotations *p);
  void visitSomeLoopAnnotations(SomeLoopAnnotations *p);
  void visitForClause(ForClause *p); /* abstract class */
  void visitForClauseExpression(ForClauseExpression *p);
  void visitForClauseDeclaration(ForClauseDeclaration *p);
  void visitGhostParameterOpt(GhostParameterOpt *p); /* abstract class */
  void visitNoGhostParameter(NoGhostParameter *p);
  void visitSomeGhostParameter(SomeGhostParameter *p);
  void visitDeclaration(Declaration *p); /* abstract class */
  void visitDeclSpecInitDecl(DeclSpecInitDecl *p);
  void visitDeclSpec(DeclSpec *p);
  void visitSpecDeclSpecInitDecl(SpecDeclSpecInitDecl *p);
  void visitSpecDeclSpec(SpecDeclSpec *p);
  void visitStaticAssertDecl(StaticAssertDecl *p);
  void visitStaticAssertDeclStringConst(StaticAssertDeclStringConst *p);
  void visitGenericAssociation(GenericAssociation *p); /* abstract class */
  void visitColonGenericAssociation(ColonGenericAssociation *p);
  void visitDefaultGenericAssociation(DefaultGenericAssociation *p);
  void visitListGenericAssociation(ListGenericAssociation *p);
  void iterListGenericAssociation(ListGenericAssociation::const_iterator i, ListGenericAssociation::const_iterator j);
  void visitDeclAndInitDeclAttrList(DeclAndInitDeclAttrList *p); /* abstract class */
  void visitInitDeclaration(InitDeclaration *p);
  void visitInitDeclarationWithAttr(InitDeclarationWithAttr *p);
  void visitInitDeclaratorAttr(InitDeclaratorAttr *p); /* abstract class */
  void visitInitDeclaratorAttribute(InitDeclaratorAttribute *p);
  void visitListInitDeclaratorAttr(ListInitDeclaratorAttr *p);
  void iterListInitDeclaratorAttr(ListInitDeclaratorAttr::const_iterator i, ListInitDeclaratorAttr::const_iterator j);
  void visitInitDeclarator(InitDeclarator *p); /* abstract class */
  void visitSimpleInitDeclarator(SimpleInitDeclarator *p);
  void visitInitDeclaratorExpression(InitDeclaratorExpression *p);
  void visitDeclSpecWOType(DeclSpecWOType *p); /* abstract class */
  void visitTypedefKeyWord(TypedefKeyWord *p);
  void visitExternKeyWord(ExternKeyWord *p);
  void visitStaticKeyWord(StaticKeyWord *p);
  void visitAutoKeyWord(AutoKeyWord *p);
  void visitRegisterKeyWord(RegisterKeyWord *p);
  void visitInlineKeyWord(InlineKeyWord *p);
  void visitNoReturnKeyWord(NoReturnKeyWord *p);
  void visitDeclSpecCVSpec(DeclSpecCVSpec *p);
  void visitDeclSpecAtribNOCV(DeclSpecAtribNOCV *p);
  void visitDeclSpecList(DeclSpecList *p); /* abstract class */
  void visitDeclSpecWoType(DeclSpecWoType *p);
  void visitDeclSpecWoTypeNext(DeclSpecWoTypeNext *p);
  void visitDeclSpecTypeSpec(DeclSpecTypeSpec *p);
  void visitDeclSpecTypeSpecNext(DeclSpecTypeSpecNext *p);
  void visitDeclSpecListNoNamed(DeclSpecListNoNamed *p); /* abstract class */
  void visitDeclSpecNoNamedWOType(DeclSpecNoNamedWOType *p);
  void visitDeclSpecNoNamedWOTypeNext(DeclSpecNoNamedWOTypeNext *p);
  void visitDeclSpecNoNamedTypeSpec(DeclSpecNoNamedTypeSpec *p);
  void visitDeclSpecNoNamedTypeSpecNext(DeclSpecNoNamedTypeSpecNext *p);
  void visitTypeSpec(TypeSpec *p); /* abstract class */
  void visitVoidKeyWord(VoidKeyWord *p);
  void visitCharKeyWord(CharKeyWord *p);
  void visitBoolKeyWord(BoolKeyWord *p);
  void visitShortKeyWord(ShortKeyWord *p);
  void visitIntKeyWord(IntKeyWord *p);
  void visitLongKeyWord(LongKeyWord *p);
  void visitInt64KeyWord(Int64KeyWord *p);
  void visitFloatKeyWord(FloatKeyWord *p);
  void visitDoubleKeyWord(DoubleKeyWord *p);
  void visitSignedKeyWord(SignedKeyWord *p);
  void visitUnsignedKeyWord(UnsignedKeyWord *p);
  void visitStructId(StructId *p);
  void visitStructJustAttr(StructJustAttr *p);
  void visitStructIdBraces(StructIdBraces *p);
  void visitStructBraces(StructBraces *p);
  void visitStructJustAttrIdBraces(StructJustAttrIdBraces *p);
  void visitStructJustAttrBraces(StructJustAttrBraces *p);
  void visitUnionId(UnionId *p);
  void visitUnionIdBraces(UnionIdBraces *p);
  void visitUnionBraces(UnionBraces *p);
  void visitUnionJustAttrIdBraces(UnionJustAttrIdBraces *p);
  void visitUnionJustAttrBraces(UnionJustAttrBraces *p);
  void visitEnumId(EnumId *p);
  void visitEnumIdBraces(EnumIdBraces *p);
  void visitEnumBraces(EnumBraces *p);
  void visitEnumJustAttrIdBraces(EnumJustAttrIdBraces *p);
  void visitEnumJustAttrBraces(EnumJustAttrBraces *p);
  void visitNamedTypeTypeSpec(NamedTypeTypeSpec *p);
  void visitTypeOfExpression(TypeOfExpression *p);
  void visitTypeOfTypeName(TypeOfTypeName *p);
  void visitStructDeclList(StructDeclList *p); /* abstract class */
  void visitEmptyStructDecl(EmptyStructDecl *p);
  void visitDeclSpecStructDecl(DeclSpecStructDecl *p);
  void visitSemicolonStructDecl(SemicolonStructDecl *p);
  void visitSpecFieldDeclStructDecl(SpecFieldDeclStructDecl *p);
  void visitPragmaStructDecl(PragmaStructDecl *p);
  void visitStaticAssertStructDecl(StaticAssertStructDecl *p);
  void visitStaticAssertStructDeclNext(StaticAssertStructDeclNext *p);
  void visitStaticAssertDeclaration(StaticAssertDeclaration *p); /* abstract class */
  void visitStaticAssert(StaticAssert *p);
  void visitStaticAssertStringConst(StaticAssertStringConst *p);
  void visitFieldDecl(FieldDecl *p); /* abstract class */
  void visitFieldDeclDeclarator(FieldDeclDeclarator *p);
  void visitFieldDeclDeclaratorColon(FieldDeclDeclaratorColon *p);
  void visitFieldDeclColonExpression(FieldDeclColonExpression *p);
  void visitListFieldDecl(ListFieldDecl *p);
  void iterListFieldDecl(ListFieldDecl::const_iterator i, ListFieldDecl::const_iterator j);
  void visitEnumerator(Enumerator *p); /* abstract class */
  void visitIdentEnumerator(IdentEnumerator *p);
  void visitIdentAssignExpr(IdentAssignExpr *p);
  void visitListEnumerator(ListEnumerator *p);
  void iterListEnumerator(ListEnumerator::const_iterator i, ListEnumerator::const_iterator j);
  void visitDeclarator(Declarator *p); /* abstract class */
  void visitADeclarator(ADeclarator *p);
  void visitListDeclarator(ListDeclarator *p);
  void iterListDeclarator(ListDeclarator::const_iterator i, ListDeclarator::const_iterator j);
  void visitAttributesOrStatic(AttributesOrStatic *p); /* abstract class */
  void visitAttributesCommaExpression(AttributesCommaExpression *p);
  void visitAttributesStaticExpression(AttributesStaticExpression *p);
  void visitStaticAttributesExpression(StaticAttributesExpression *p);
  void visitDirectDecl(DirectDecl *p); /* abstract class */
  void visitDirectDeclIdTypename(DirectDeclIdTypename *p);
  void visitDirectDeclAttrDecl(DirectDeclAttrDecl *p);
  void visitDirectDeclAttrStatic(DirectDeclAttrStatic *p);
  void visitDirectDeclGhostParam(DirectDeclGhostParam *p);
  void visitDirectDeclGhostRestParParam(DirectDeclGhostRestParParam *p);
  void visitRestParList(RestParList *p); /* abstract class */
  void visitSimpleParameterDecl(SimpleParameterDecl *p);
  void visitDotDotDotParameterDecl(DotDotDotParameterDecl *p);
  void visitParameterDecl(ParameterDecl *p); /* abstract class */
  void visitParameterDeclSpecDeclarator(ParameterDeclSpecDeclarator *p);
  void visitParameterDeclSpecAbstract(ParameterDeclSpecAbstract *p);
  void visitParameterDeclSpec(ParameterDeclSpec *p);
  void visitParameterDeclPar(ParameterDeclPar *p);
  void visitListParameterDecl(ListParameterDecl *p);
  void iterListParameterDecl(ListParameterDecl::const_iterator i, ListParameterDecl::const_iterator j);
  void visitDirectOldProtoDecl(DirectOldProtoDecl *p); /* abstract class */
  void visitOldDirectProtoDecl(OldDirectProtoDecl *p);
  void visitListIdent(ListIdent *p);
  void iterListIdent(ListIdent::const_iterator i, ListIdent::const_iterator j);
  void visitOldPardefList(OldPardefList *p); /* abstract class */
  void visitEmptyOldPardefList(EmptyOldPardefList *p);
  void visitDotDotDotOldPardefList(DotDotDotOldPardefList *p);
  void visitSimpleOldPardefList(SimpleOldPardefList *p);
  void visitOldPardef(OldPardef *p); /* abstract class */
  void visitOldParDef(OldParDef *p);
  void visitListOldPardef(ListOldPardef *p);
  void iterListOldPardef(ListOldPardef::const_iterator i, ListOldPardef::const_iterator j);
  void visitPointerOpt(PointerOpt *p); /* abstract class */
  void visitNoPointer(NoPointer *p);
  void visitSomePointer(SomePointer *p);
  void visitTypeName(TypeName *p); /* abstract class */
  void visitTypeNameAbstractDecl(TypeNameAbstractDecl *p);
  void visitTypeNameDeclSpecList(TypeNameDeclSpecList *p);
  void visitAbstractDecl(AbstractDecl *p); /* abstract class */
  void visitAbstractDeclAttr(AbstractDeclAttr *p);
  void visitAbstractDeclPointer(AbstractDeclPointer *p);
  void visitAbsDirectDecl(AbsDirectDecl *p); /* abstract class */
  void visitAbsDirectDeclPar(AbsDirectDeclPar *p);
  void visitAbsDirectDeclBreckets(AbsDirectDeclBreckets *p);
  void visitAbsDirectDeclRestPar(AbsDirectDeclRestPar *p);
  void visitAbsDirectDeclNoRestPar(AbsDirectDeclNoRestPar *p);
  void visitAbsDirectDeclOpt(AbsDirectDeclOpt *p); /* abstract class */
  void visitSomeAbsDirectDecl(SomeAbsDirectDecl *p);
  void visitNoAbsDirectDecl(NoAbsDirectDecl *p);
  void visitFunctionDef(FunctionDef *p); /* abstract class */
  void visitFunctionDefSpec(FunctionDefSpec *p);
  void visitSimpleFunctionDef(SimpleFunctionDef *p);
  void visitFunctionDefStart(FunctionDefStart *p); /* abstract class */
  void visitFunctionDefStartDeclarator(FunctionDefStartDeclarator *p);
  void visitFunctionDefStartOldProtoDecl(FunctionDefStartOldProtoDecl *p);
  void visitFunctionDefStartReatParGhostParameter(FunctionDefStartReatParGhostParameter *p);
  void visitFunctionDefStartOldPardef(FunctionDefStartOldPardef *p);
  void visitFunctionDefStartGhostParameter(FunctionDefStartGhostParameter *p);
  void visitCVSpec(CVSpec *p); /* abstract class */
  void visitConstKeyWord(ConstKeyWord *p);
  void visitVolatileKeyWord(VolatileKeyWord *p);
  void visitRestrictKeyWord(RestrictKeyWord *p);
  void visitGhostKeyWord(GhostKeyWord *p);
  void visitAttribute_annotKeyWord(Attribute_annotKeyWord *p);
  void visitAttributesWithAsm(AttributesWithAsm *p); /* abstract class */
  void visitEmptyAttrWithASM(EmptyAttrWithASM *p);
  void visitListAttrWithASM(ListAttrWithASM *p);
  void visitListASMAttrWithASM(ListASMAttrWithASM *p);
  void visitASMAttrWithASM(ASMAttrWithASM *p);
  void visitAttributeNocv(AttributeNocv *p); /* abstract class */
  void visitAttributeAttrNocv(AttributeAttrNocv *p);
  void visitDeclspecAttrNocv(DeclspecAttrNocv *p);
  void visitMsattrAttrNocv(MsattrAttrNocv *p);
  void visitThreadAttrNocv(ThreadAttrNocv *p);
  void visitThreadLocalAttrNocv(ThreadLocalAttrNocv *p);
  void visitListAttributeNocv(ListAttributeNocv *p);
  void iterListAttributeNocv(ListAttributeNocv::const_iterator i, ListAttributeNocv::const_iterator j);
  void visitAttribute(Attribute *p); /* abstract class */
  void visitAttributeNoCV(AttributeNoCV *p);
  void visitAttributeConst(AttributeConst *p);
  void visitAttributeRestrict(AttributeRestrict *p);
  void visitAttributeVolatile(AttributeVolatile *p);
  void visitAttributeGhost(AttributeGhost *p);
  void visitAttributeAttributeAnnot(AttributeAttributeAnnot *p);
  void visitListAttribute(ListAttribute *p);
  void iterListAttribute(ListAttribute::const_iterator i, ListAttribute::const_iterator j);
  void visitJustAttribute(JustAttribute *p); /* abstract class */
  void visitAttributeJustAttribute(AttributeJustAttribute *p);
  void visitDeclspecJustAttribute(DeclspecJustAttribute *p);
  void visitListJustAttribute(ListJustAttribute *p);
  void iterListJustAttribute(ListJustAttribute::const_iterator i, ListJustAttribute::const_iterator j);
  void visitPragma(Pragma *p); /* abstract class */
  void visitSimplePragma(SimplePragma *p);
  void visitAttrPragma(AttrPragma *p);
  void visitAttrPragmaSeparated(AttrPragmaSeparated *p);
  void visitPragmaKeyrod(PragmaKeyrod *p);
  void visitVarAttr(VarAttr *p); /* abstract class */
  void visitIdentifierVarAttr(IdentifierVarAttr *p);
  void visitNamedTypeVarAttr(NamedTypeVarAttr *p);
  void visitDefaultVarAttr(DefaultVarAttr *p);
  void visitConstVarAttr(ConstVarAttr *p);
  void visitVolatileVarAttr(VolatileVarAttr *p);
  void visitContIntVarAttr(ContIntVarAttr *p);
  void visitBasicAttribute(BasicAttribute *p); /* abstract class */
  void visitBasicAttrConsInt(BasicAttrConsInt *p);
  void visitBasicAttrConsFloat(BasicAttrConsFloat *p);
  void visitBasicAttrVar(BasicAttrVar *p);
  void visitListBasicAttribute(ListBasicAttribute *p);
  void iterListBasicAttribute(ListBasicAttribute::const_iterator i, ListBasicAttribute::const_iterator j);
  void visitParameterAttrListNE(ParameterAttrListNE *p); /* abstract class */
  void visitParameterBasicAttr(ParameterBasicAttr *p);
  void visitParameterBasicAttrStringConst(ParameterBasicAttrStringConst *p);
  void visitParameterBasicAttrStringConstNext(ParameterBasicAttrStringConstNext *p);
  void visitParamAttrListNE(ParamAttrListNE *p); /* abstract class */
  void visitParamAttrList(ParamAttrList *p);
  void visitParamStringConstant(ParamStringConstant *p);
  void visitAttr(Attr *p); /* abstract class */
  void visitBasicAttr(BasicAttr *p);
  void visitAttrStringConstant(AttrStringConstant *p);
  void visitFuncationCall(FuncationCall *p);
  void visitProcedureCall(ProcedureCall *p);
  void visitBasicPostfix(BasicPostfix *p);
  void visitArrowAttr(ArrowAttr *p);
  void visitDotAttr(DotAttr *p);
  void visitArrayAttr(ArrayAttr *p);
  void visitSizeOfAttrUnary(SizeOfAttrUnary *p);
  void visitSizeOfAttrTypeName(SizeOfAttrTypeName *p);
  void visitAlignOfAttrUnary(AlignOfAttrUnary *p);
  void visitAlignOfAttrTypeName(AlignOfAttrTypeName *p);
  void visitPlusUnaryAttr(PlusUnaryAttr *p);
  void visitMinusUnaryAttr(MinusUnaryAttr *p);
  void visitMultUnaryAttr(MultUnaryAttr *p);
  void visitAmpUnaryAttr(AmpUnaryAttr *p);
  void visitNotUnaryAttr(NotUnaryAttr *p);
  void visitTildeUnaryAttr(TildeUnaryAttr *p);
  void visitMultOp(MultOp *p);
  void visitDivOp(DivOp *p);
  void visitModOp(ModOp *p);
  void visitAddOp(AddOp *p);
  void visitSubOp(SubOp *p);
  void visitLeftShiftOp(LeftShiftOp *p);
  void visitRightShiftOp(RightShiftOp *p);
  void visitLess(Less *p);
  void visitGreater(Greater *p);
  void visitLessEqual(LessEqual *p);
  void visitGreaterEqual(GreaterEqual *p);
  void visitEqualEqual(EqualEqual *p);
  void visitNotEqual(NotEqual *p);
  void visitBitAnd(BitAnd *p);
  void visitXor(Xor *p);
  void visitBitOr(BitOr *p);
  void visitAnd(And *p);
  void visitOr(Or *p);
  void visitTernaryCond(TernaryCond *p);
  void visitAnAttr(AnAttr *p);
  void visitListAttr(ListAttr *p);
  void iterListAttr(ListAttr::const_iterator i, ListAttr::const_iterator j);
  void visitAttrTest(AttrTest *p); /* abstract class */
  void visitAvoidShiftReduce(AvoidShiftReduce *p);
  void visitAttrList(AttrList *p); /* abstract class */
  void visitEmptyAtrList(EmptyAtrList *p);
  void visitAtrList(AtrList *p);
  void visitAsmattr(Asmattr *p); /* abstract class */
  void visitVolatileKeyWrod(VolatileKeyWrod *p);
  void visitConstKeyWrod(ConstKeyWrod *p);
  void visitListAsmattr(ListAsmattr *p);
  void iterListAsmattr(ListAsmattr::const_iterator i, ListAsmattr::const_iterator j);
  void visitAsmoutputs(Asmoutputs *p); /* abstract class */
  void visitNoAsmoutputs(NoAsmoutputs *p);
  void visitSomeAsmoutputs(SomeAsmoutputs *p);
  void visitAsmoperands(Asmoperands *p); /* abstract class */
  void visitNoAsmoperands(NoAsmoperands *p);
  void visitSomeAsmoperands(SomeAsmoperands *p);
  void visitAsmoperand(Asmoperand *p); /* abstract class */
  void visitAsmOperand(AsmOperand *p);
  void visitListAsmoperand(ListAsmoperand *p);
  void iterListAsmoperand(ListAsmoperand::const_iterator i, ListAsmoperand::const_iterator j);
  void visitAsminputs(Asminputs *p); /* abstract class */
  void visitNoAsminputs(NoAsminputs *p);
  void visitSomeAsminputs(SomeAsminputs *p);
  void visitAsmopname(Asmopname *p); /* abstract class */
  void visitNoAsmopname(NoAsmopname *p);
  void visitSomeAsmopname(SomeAsmopname *p);
  void visitAsmclobber(Asmclobber *p); /* abstract class */
  void visitNoAsmclobber(NoAsmclobber *p);
  void visitColonAsmclobber(ColonAsmclobber *p);
  void visitColonStringAsmclobber(ColonStringAsmclobber *p);
  void visitListStringConstant(ListStringConstant *p);
  void iterListStringConstant(ListStringConstant::const_iterator i, ListStringConstant::const_iterator j);
  void visitAsmlabels(Asmlabels *p); /* abstract class */
  void visitNoAsmlabels(NoAsmlabels *p);
  void visitSomeAsmlabels(SomeAsmlabels *p);

  void visitInteger(Integer i);
  void visitDouble(Double d);
  void visitChar(Char c);
  void visitString(String s);
  void visitIdent(String s);
  void visitDECL(String s);
  void visitNAMEDTYPE(String s);
  void visitCST_WCHAR(String s);
  void visitCST_WSTRING(String s);
  void visitCODE_ANNOT(String s);
  void visitSPEC(String s);
  void visitLOOP_ANNOT(String s);
  void visitATTRIBUTE_ANNOT(String s);
  void visitLBRACE(String s);
  void visitRBRACE(String s);
  void visitLBRACKET(String s);
  void visitRBRACKET(String s);
  void visitRGHOST(String s);
  void visitASM(String s);
  void visitALIGNOF(String s);
  void visitATTRIBUTE(String s);
  void visitBLOCKATTRIBUTE(String s);
  void visitCONST(String s);
  void visitFUNCTION__(String s);
  void visitINT(String s);
  void visitMSATTR(String s);
  void visitRESTRICT(String s);
  void visitSIGNED(String s);
  void visitVOLATILE(String s);
  void visitINLINE(String s);
  void visitTYPEOF(String s);
 protected:
  char *buf_;
  size_t cur_, buf_size;

  void inline bufAppend(const char *s)
  {
    size_t end = cur_ + strlen(s);
    if (end >= buf_size) {
      do buf_size *= 2; /* Double the buffer size */
      while (end >= buf_size);
      resizeBuffer();
    }
    strcpy(&buf_[cur_], s);
    cur_ = end;
  }

  void inline bufAppend(const char c)
  {
    if (cur_ + 1 >= buf_size)
    {
      buf_size *= 2; /* Double the buffer size */
      resizeBuffer();
    }
    buf_[cur_] = c;
    buf_[++cur_] = 0;
  }

  void inline bufAppend(String str)
  {
    const char *s = str.c_str();
    bufAppend(s);
  }
  void inline bufReset(void)
  {
    if (buf_) delete[] buf_;
    buf_size = ACSL_BUFFER_INITIAL;
    buf_ = new char[buf_size];
    memset(buf_, 0, buf_size);
    cur_ = 0;
  }

  void inline resizeBuffer(void)
  {
    char *temp = new char[buf_size];
    if (buf_)
    {
      strcpy(temp, buf_);
      delete[] buf_;
    }
    buf_ = temp;
  }
};



class ShowAbsyn : public Visitor
{
 public:
  ShowAbsyn(void);
  ~ShowAbsyn(void);
  char *show(Visitable *v);

  void visitProgram(Program *p); /* abstract class */
  void visitAProgram(AProgram *p);
  void visitGlobals(Globals *p); /* abstract class */
  void visitNoGlobals(NoGlobals *p);
  void visitSimpleGlobals(SimpleGlobals *p);
  void visitAGhostGlobals(AGhostGlobals *p);
  void visitSemiColonGlobals(SemiColonGlobals *p);
  void visitGhostGlobals(GhostGlobals *p); /* abstract class */
  void visitGhostGlobalsDeclataion(GhostGlobalsDeclataion *p);
  void visitGhostGlobalsFunctionDef(GhostGlobalsFunctionDef *p);
  void visitGhostGlobalsRGhost(GhostGlobalsRGhost *p);
  void visitGlobal(Global *p); /* abstract class */
  void visitGlobalDecl(GlobalDecl *p);
  void visitGlobalsDeclataion(GlobalsDeclataion *p);
  void visitGlobalsFunctionDef(GlobalsFunctionDef *p);
  void visitExternGlobalDeclataion(ExternGlobalDeclataion *p);
  void visitExternGlobalPar(ExternGlobalPar *p);
  void visitAsmGlobal(AsmGlobal *p);
  void visitPragmaGlobal(PragmaGlobal *p);
  void visitGlobalOldStyle(GlobalOldStyle *p);
  void visitGlobalEmptyOldStyle(GlobalEmptyOldStyle *p);
  void visitIdOrTypenameAsId(IdOrTypenameAsId *p); /* abstract class */
  void visitIdentifier(Identifier *p);
  void visitNamedType(NamedType *p);
  void visitIdOrTypename(IdOrTypename *p); /* abstract class */
  void visitIdTypename(IdTypename *p);
  void visitMaybeComma(MaybeComma *p); /* abstract class */
  void visitNoComa(NoComa *p);
  void visitComa(Coma *p);
  void visitAssignExpr(AssignExpr *p); /* abstract class */
  void visitIdentifierPrimaryExpression(IdentifierPrimaryExpression *p);
  void visitConstantPrimaryExpressin(ConstantPrimaryExpressin *p);
  void visitCommaExpressionPrimaryExpressin(CommaExpressionPrimaryExpressin *p);
  void visitBlockPrimaryExpressin(BlockPrimaryExpressin *p);
  void visitGenericAssociationPrimaryExpressin(GenericAssociationPrimaryExpressin *p);
  void visitGenericPrimaryExpressin(GenericPrimaryExpressin *p);
  void visitBracketsPostfixExpression(BracketsPostfixExpression *p);
  void visitArgumentsPostfixExpression(ArgumentsPostfixExpression *p);
  void visitBuiltinVaArgPostfixExpression(BuiltinVaArgPostfixExpression *p);
  void visitBuiltinTypesCompatPostfixExpression(BuiltinTypesCompatPostfixExpression *p);
  void visitBuiltinOffsetOfPostfixExpression(BuiltinOffsetOfPostfixExpression *p);
  void visitDotPostfixExpression(DotPostfixExpression *p);
  void visitArrowPostfixExpression(ArrowPostfixExpression *p);
  void visitPlusPlusPostfixExpression(PlusPlusPostfixExpression *p);
  void visitMinusMinusPostfixExpression(MinusMinusPostfixExpression *p);
  void visitConstructorPostfixExpression(ConstructorPostfixExpression *p);
  void visitUnaryExprPlusPlus(UnaryExprPlusPlus *p);
  void visitUnaryExprMinusMinus(UnaryExprMinusMinus *p);
  void visitUnaryExprSizeOf(UnaryExprSizeOf *p);
  void visitUnaryExprSizeOfTypeName(UnaryExprSizeOfTypeName *p);
  void visitUnaryExprAlignOfUnaryExpr(UnaryExprAlignOfUnaryExpr *p);
  void visitUnaryExprAlignOfTypeName(UnaryExprAlignOfTypeName *p);
  void visitUnaryExprPlus(UnaryExprPlus *p);
  void visitUnaryExprMinus(UnaryExprMinus *p);
  void visitUnaryExprMult(UnaryExprMult *p);
  void visitUnaryExprAmp(UnaryExprAmp *p);
  void visitUnaryExprNot(UnaryExprNot *p);
  void visitUnaryExprTilde(UnaryExprTilde *p);
  void visitUnaryExprAddress(UnaryExprAddress *p);
  void visitCastExpr(CastExpr *p);
  void visitMulsExpr(MulsExpr *p);
  void visitDivExpr(DivExpr *p);
  void visitModExpr(ModExpr *p);
  void visitPlusExpr(PlusExpr *p);
  void visitMinusExpr(MinusExpr *p);
  void visitLeftShiftExpr(LeftShiftExpr *p);
  void visitRightShiftExpr(RightShiftExpr *p);
  void visitLessExpr(LessExpr *p);
  void visitGreaterExpr(GreaterExpr *p);
  void visitLessEqualExpr(LessEqualExpr *p);
  void visitGreaterEqualExpr(GreaterEqualExpr *p);
  void visitEqExpr(EqExpr *p);
  void visitNotEqExpr(NotEqExpr *p);
  void visitBitAndExpr(BitAndExpr *p);
  void visitBitXorExpr(BitXorExpr *p);
  void visitBitOrExpr(BitOrExpr *p);
  void visitAndExpr(AndExpr *p);
  void visitOrExpr(OrExpr *p);
  void visitTernaryCondExpr(TernaryCondExpr *p);
  void visitEqAssignExpr(EqAssignExpr *p);
  void visitPlusEqAssignExpr(PlusEqAssignExpr *p);
  void visitMinusEqAssignExpr(MinusEqAssignExpr *p);
  void visitMultEqAssignExpr(MultEqAssignExpr *p);
  void visitDivEqAssignExpr(DivEqAssignExpr *p);
  void visitModEqAssignExpr(ModEqAssignExpr *p);
  void visitAndEqAssignExpr(AndEqAssignExpr *p);
  void visitOrEqAssignExpr(OrEqAssignExpr *p);
  void visitXorEqAssignExpr(XorEqAssignExpr *p);
  void visitLeftShiftEqAssignExpr(LeftShiftEqAssignExpr *p);
  void visitRightShiftEqAssignExpr(RightShiftEqAssignExpr *p);
  void visitOffsetofMemberDesignator(OffsetofMemberDesignator *p); /* abstract class */
  void visitIdTypenameOffsetMembetDesignator(IdTypenameOffsetMembetDesignator *p);
  void visitDotOffsetMembetDesignator(DotOffsetMembetDesignator *p);
  void visitBracketsOffsetMembetDesignator(BracketsOffsetMembetDesignator *p);
  void visitExpression(Expression *p); /* abstract class */
  void visitAssignmentExpr(AssignmentExpr *p);
  void visitConstant(Constant *p); /* abstract class */
  void visitConstantInt(ConstantInt *p);
  void visitConstantFloat(ConstantFloat *p);
  void visitConstantChar(ConstantChar *p);
  void visitConstantWChar(ConstantWChar *p);
  void visitConstantString(ConstantString *p);
  void visitConstantWString(ConstantWString *p);
  void visitStringConstant(StringConstant *p); /* abstract class */
  void visitStringConst(StringConst *p);
  void visitWStringList(WStringList *p); /* abstract class */
  void visitLastConstantWString(LastConstantWString *p);
  void visitOneStringWithList(OneStringWithList *p);
  void visitWStringWithList(WStringWithList *p);
  void visitLatersConstantWString(LatersConstantWString *p);
  void visitOneString(OneString *p); /* abstract class */
  void visitSimpleConstantString(SimpleConstantString *p);
  void visitFunctionConstantString(FunctionConstantString *p);
  void visitPrettyFunctionConstantString(PrettyFunctionConstantString *p);
  void visitListOneString(ListOneString *p);
  void iterListOneString(ListOneString::const_iterator i, ListOneString::const_iterator j);
  void visitInitExpression(InitExpression *p); /* abstract class */
  void visitSimpleExpression(SimpleExpression *p);
  void visitBracesExpression(BracesExpression *p);
  void visitInitializerListOpt(InitializerListOpt *p); /* abstract class */
  void visitEmptyInitializerList(EmptyInitializerList *p);
  void visitInitializerList(InitializerList *p);
  void visitInitializerListComma(InitializerListComma *p);
  void visitInitializerSingle(InitializerSingle *p); /* abstract class */
  void visitInitializerDesignator(InitializerDesignator *p);
  void visitInitializerGCCDesignator(InitializerGCCDesignator *p);
  void visitEmptyInitializer(EmptyInitializer *p);
  void visitListInitializerSingle(ListInitializerSingle *p);
  void iterListInitializerSingle(ListInitializerSingle::const_iterator i, ListInitializerSingle::const_iterator j);
  void visitEqOpt(EqOpt *p); /* abstract class */
  void visitEquationSign(EquationSign *p);
  void visitNoEquationSign(NoEquationSign *p);
  void visitInitDesignators(InitDesignators *p); /* abstract class */
  void visitDotInitDesignator(DotInitDesignator *p);
  void visitBracketsInitDesignator(BracketsInitDesignator *p);
  void visitBracketsSliceInitDesignator(BracketsSliceInitDesignator *p);
  void visitInitDesignatorsOpt(InitDesignatorsOpt *p); /* abstract class */
  void visitNoInitDesignator(NoInitDesignator *p);
  void visitSomeInitDesignator(SomeInitDesignator *p);
  void visitGhostArgumentsOpt(GhostArgumentsOpt *p); /* abstract class */
  void visitNoGhostArguments(NoGhostArguments *p);
  void visitSomeGhostArguments(SomeGhostArguments *p);
  void visitArguments(Arguments *p); /* abstract class */
  void visitNoArguments(NoArguments *p);
  void visitSomeArguments(SomeArguments *p);
  void visitOptExpression(OptExpression *p); /* abstract class */
  void visitNoExpression(NoExpression *p);
  void visitSomeExpression(SomeExpression *p);
  void visitListExpression(ListExpression *p);
  void iterListExpression(ListExpression::const_iterator i, ListExpression::const_iterator j);
  void visitCommaExpressionOpt(CommaExpressionOpt *p); /* abstract class */
  void visitNoCommaExpression(NoCommaExpression *p);
  void visitSomeCommaExpression(SomeCommaExpression *p);
  void visitBlock(Block *p); /* abstract class */
  void visitABlock(ABlock *p);
  void visitBlockAttrs(BlockAttrs *p); /* abstract class */
  void visitNoBlockAttrs(NoBlockAttrs *p);
  void visitSomeBlockAttrs(SomeBlockAttrs *p);
  void visitBlockElement(BlockElement *p); /* abstract class */
  void visitDeclarationElement(DeclarationElement *p);
  void visitStatementElement(StatementElement *p);
  void visitPragmaElement(PragmaElement *p);
  void visitListBlockElement(ListBlockElement *p);
  void iterListBlockElement(ListBlockElement::const_iterator i, ListBlockElement::const_iterator j);
  void visitAnnot(Annot *p); /* abstract class */
  void visitCodeAnnot(CodeAnnot *p);
  void visitGhostAnnot(GhostAnnot *p);
  void visitListAnnot(ListAnnot *p);
  void iterListAnnot(ListAnnot::const_iterator i, ListAnnot::const_iterator j);
  void visitLocalLabel(LocalLabel *p); /* abstract class */
  void visitLocalLable(LocalLable *p);
  void visitListLocalLabel(ListLocalLabel *p);
  void iterListLocalLabel(ListLocalLabel::const_iterator i, ListLocalLabel::const_iterator j);
  void visitLocalLabelName(LocalLabelName *p); /* abstract class */
  void visitALocalLabelName(ALocalLabelName *p);
  void visitListLocalLabelName(ListLocalLabelName *p);
  void iterListLocalLabelName(ListLocalLabelName::const_iterator i, ListLocalLabelName::const_iterator j);
  void visitAnnotatedStmt(AnnotatedStmt *p); /* abstract class */
  void visitAnnotatedStatement(AnnotatedStatement *p);
  void visitElsePart(ElsePart *p); /* abstract class */
  void visitNoElsePart(NoElsePart *p);
  void visitSimpleElsePart(SimpleElsePart *p);
  void visitSimpleGhostElsePart(SimpleGhostElsePart *p);
  void visitGhostElsePart(GhostElsePart *p);
  void visitStatement(Statement *p); /* abstract class */
  void visitSemicolonStatement(SemicolonStatement *p);
  void visitSpecStatement(SpecStatement *p);
  void visitExprsStatement(ExprsStatement *p);
  void visitBlockStatement(BlockStatement *p);
  void visitIfStatement(IfStatement *p);
  void visitSwitchStatement(SwitchStatement *p);
  void visitWhileStatement(WhileStatement *p);
  void visitDoWhileStatement(DoWhileStatement *p);
  void visitForStatement(ForStatement *p);
  void visitColonStatement(ColonStatement *p);
  void visitCaseStatement(CaseStatement *p);
  void visitCaseSliceStatement(CaseSliceStatement *p);
  void visitDefaultStatement(DefaultStatement *p);
  void visitEmptyReturnStatement(EmptyReturnStatement *p);
  void visitReturnStatement(ReturnStatement *p);
  void visitBreakStatement(BreakStatement *p);
  void visitContinueStatement(ContinueStatement *p);
  void visitGotoStatement(GotoStatement *p);
  void visitStarGotoStatement(StarGotoStatement *p);
  void visitAsmGotoAsmattrStatement(AsmGotoAsmattrStatement *p);
  void visitAsmAsmattrStatement(AsmAsmattrStatement *p);
  void visitAsmStatement(AsmStatement *p);
  void visitTryExceptStatement(TryExceptStatement *p);
  void visitTryFinallyStatement(TryFinallyStatement *p);
  void visitOptLoopAnnotations(OptLoopAnnotations *p); /* abstract class */
  void visitNoLoopAnnotations(NoLoopAnnotations *p);
  void visitSomeLoopAnnotations(SomeLoopAnnotations *p);
  void visitForClause(ForClause *p); /* abstract class */
  void visitForClauseExpression(ForClauseExpression *p);
  void visitForClauseDeclaration(ForClauseDeclaration *p);
  void visitGhostParameterOpt(GhostParameterOpt *p); /* abstract class */
  void visitNoGhostParameter(NoGhostParameter *p);
  void visitSomeGhostParameter(SomeGhostParameter *p);
  void visitDeclaration(Declaration *p); /* abstract class */
  void visitDeclSpecInitDecl(DeclSpecInitDecl *p);
  void visitDeclSpec(DeclSpec *p);
  void visitSpecDeclSpecInitDecl(SpecDeclSpecInitDecl *p);
  void visitSpecDeclSpec(SpecDeclSpec *p);
  void visitStaticAssertDecl(StaticAssertDecl *p);
  void visitStaticAssertDeclStringConst(StaticAssertDeclStringConst *p);
  void visitGenericAssociation(GenericAssociation *p); /* abstract class */
  void visitColonGenericAssociation(ColonGenericAssociation *p);
  void visitDefaultGenericAssociation(DefaultGenericAssociation *p);
  void visitListGenericAssociation(ListGenericAssociation *p);
  void iterListGenericAssociation(ListGenericAssociation::const_iterator i, ListGenericAssociation::const_iterator j);
  void visitDeclAndInitDeclAttrList(DeclAndInitDeclAttrList *p); /* abstract class */
  void visitInitDeclaration(InitDeclaration *p);
  void visitInitDeclarationWithAttr(InitDeclarationWithAttr *p);
  void visitInitDeclaratorAttr(InitDeclaratorAttr *p); /* abstract class */
  void visitInitDeclaratorAttribute(InitDeclaratorAttribute *p);
  void visitListInitDeclaratorAttr(ListInitDeclaratorAttr *p);
  void iterListInitDeclaratorAttr(ListInitDeclaratorAttr::const_iterator i, ListInitDeclaratorAttr::const_iterator j);
  void visitInitDeclarator(InitDeclarator *p); /* abstract class */
  void visitSimpleInitDeclarator(SimpleInitDeclarator *p);
  void visitInitDeclaratorExpression(InitDeclaratorExpression *p);
  void visitDeclSpecWOType(DeclSpecWOType *p); /* abstract class */
  void visitTypedefKeyWord(TypedefKeyWord *p);
  void visitExternKeyWord(ExternKeyWord *p);
  void visitStaticKeyWord(StaticKeyWord *p);
  void visitAutoKeyWord(AutoKeyWord *p);
  void visitRegisterKeyWord(RegisterKeyWord *p);
  void visitInlineKeyWord(InlineKeyWord *p);
  void visitNoReturnKeyWord(NoReturnKeyWord *p);
  void visitDeclSpecCVSpec(DeclSpecCVSpec *p);
  void visitDeclSpecAtribNOCV(DeclSpecAtribNOCV *p);
  void visitDeclSpecList(DeclSpecList *p); /* abstract class */
  void visitDeclSpecWoType(DeclSpecWoType *p);
  void visitDeclSpecWoTypeNext(DeclSpecWoTypeNext *p);
  void visitDeclSpecTypeSpec(DeclSpecTypeSpec *p);
  void visitDeclSpecTypeSpecNext(DeclSpecTypeSpecNext *p);
  void visitDeclSpecListNoNamed(DeclSpecListNoNamed *p); /* abstract class */
  void visitDeclSpecNoNamedWOType(DeclSpecNoNamedWOType *p);
  void visitDeclSpecNoNamedWOTypeNext(DeclSpecNoNamedWOTypeNext *p);
  void visitDeclSpecNoNamedTypeSpec(DeclSpecNoNamedTypeSpec *p);
  void visitDeclSpecNoNamedTypeSpecNext(DeclSpecNoNamedTypeSpecNext *p);
  void visitTypeSpec(TypeSpec *p); /* abstract class */
  void visitVoidKeyWord(VoidKeyWord *p);
  void visitCharKeyWord(CharKeyWord *p);
  void visitBoolKeyWord(BoolKeyWord *p);
  void visitShortKeyWord(ShortKeyWord *p);
  void visitIntKeyWord(IntKeyWord *p);
  void visitLongKeyWord(LongKeyWord *p);
  void visitInt64KeyWord(Int64KeyWord *p);
  void visitFloatKeyWord(FloatKeyWord *p);
  void visitDoubleKeyWord(DoubleKeyWord *p);
  void visitSignedKeyWord(SignedKeyWord *p);
  void visitUnsignedKeyWord(UnsignedKeyWord *p);
  void visitStructId(StructId *p);
  void visitStructJustAttr(StructJustAttr *p);
  void visitStructIdBraces(StructIdBraces *p);
  void visitStructBraces(StructBraces *p);
  void visitStructJustAttrIdBraces(StructJustAttrIdBraces *p);
  void visitStructJustAttrBraces(StructJustAttrBraces *p);
  void visitUnionId(UnionId *p);
  void visitUnionIdBraces(UnionIdBraces *p);
  void visitUnionBraces(UnionBraces *p);
  void visitUnionJustAttrIdBraces(UnionJustAttrIdBraces *p);
  void visitUnionJustAttrBraces(UnionJustAttrBraces *p);
  void visitEnumId(EnumId *p);
  void visitEnumIdBraces(EnumIdBraces *p);
  void visitEnumBraces(EnumBraces *p);
  void visitEnumJustAttrIdBraces(EnumJustAttrIdBraces *p);
  void visitEnumJustAttrBraces(EnumJustAttrBraces *p);
  void visitNamedTypeTypeSpec(NamedTypeTypeSpec *p);
  void visitTypeOfExpression(TypeOfExpression *p);
  void visitTypeOfTypeName(TypeOfTypeName *p);
  void visitStructDeclList(StructDeclList *p); /* abstract class */
  void visitEmptyStructDecl(EmptyStructDecl *p);
  void visitDeclSpecStructDecl(DeclSpecStructDecl *p);
  void visitSemicolonStructDecl(SemicolonStructDecl *p);
  void visitSpecFieldDeclStructDecl(SpecFieldDeclStructDecl *p);
  void visitPragmaStructDecl(PragmaStructDecl *p);
  void visitStaticAssertStructDecl(StaticAssertStructDecl *p);
  void visitStaticAssertStructDeclNext(StaticAssertStructDeclNext *p);
  void visitStaticAssertDeclaration(StaticAssertDeclaration *p); /* abstract class */
  void visitStaticAssert(StaticAssert *p);
  void visitStaticAssertStringConst(StaticAssertStringConst *p);
  void visitFieldDecl(FieldDecl *p); /* abstract class */
  void visitFieldDeclDeclarator(FieldDeclDeclarator *p);
  void visitFieldDeclDeclaratorColon(FieldDeclDeclaratorColon *p);
  void visitFieldDeclColonExpression(FieldDeclColonExpression *p);
  void visitListFieldDecl(ListFieldDecl *p);
  void iterListFieldDecl(ListFieldDecl::const_iterator i, ListFieldDecl::const_iterator j);
  void visitEnumerator(Enumerator *p); /* abstract class */
  void visitIdentEnumerator(IdentEnumerator *p);
  void visitIdentAssignExpr(IdentAssignExpr *p);
  void visitListEnumerator(ListEnumerator *p);
  void iterListEnumerator(ListEnumerator::const_iterator i, ListEnumerator::const_iterator j);
  void visitDeclarator(Declarator *p); /* abstract class */
  void visitADeclarator(ADeclarator *p);
  void visitListDeclarator(ListDeclarator *p);
  void iterListDeclarator(ListDeclarator::const_iterator i, ListDeclarator::const_iterator j);
  void visitAttributesOrStatic(AttributesOrStatic *p); /* abstract class */
  void visitAttributesCommaExpression(AttributesCommaExpression *p);
  void visitAttributesStaticExpression(AttributesStaticExpression *p);
  void visitStaticAttributesExpression(StaticAttributesExpression *p);
  void visitDirectDecl(DirectDecl *p); /* abstract class */
  void visitDirectDeclIdTypename(DirectDeclIdTypename *p);
  void visitDirectDeclAttrDecl(DirectDeclAttrDecl *p);
  void visitDirectDeclAttrStatic(DirectDeclAttrStatic *p);
  void visitDirectDeclGhostParam(DirectDeclGhostParam *p);
  void visitDirectDeclGhostRestParParam(DirectDeclGhostRestParParam *p);
  void visitRestParList(RestParList *p); /* abstract class */
  void visitSimpleParameterDecl(SimpleParameterDecl *p);
  void visitDotDotDotParameterDecl(DotDotDotParameterDecl *p);
  void visitParameterDecl(ParameterDecl *p); /* abstract class */
  void visitParameterDeclSpecDeclarator(ParameterDeclSpecDeclarator *p);
  void visitParameterDeclSpecAbstract(ParameterDeclSpecAbstract *p);
  void visitParameterDeclSpec(ParameterDeclSpec *p);
  void visitParameterDeclPar(ParameterDeclPar *p);
  void visitListParameterDecl(ListParameterDecl *p);
  void iterListParameterDecl(ListParameterDecl::const_iterator i, ListParameterDecl::const_iterator j);
  void visitDirectOldProtoDecl(DirectOldProtoDecl *p); /* abstract class */
  void visitOldDirectProtoDecl(OldDirectProtoDecl *p);
  void visitListIdent(ListIdent *p);
  void iterListIdent(ListIdent::const_iterator i, ListIdent::const_iterator j);
  void visitOldPardefList(OldPardefList *p); /* abstract class */
  void visitEmptyOldPardefList(EmptyOldPardefList *p);
  void visitDotDotDotOldPardefList(DotDotDotOldPardefList *p);
  void visitSimpleOldPardefList(SimpleOldPardefList *p);
  void visitOldPardef(OldPardef *p); /* abstract class */
  void visitOldParDef(OldParDef *p);
  void visitListOldPardef(ListOldPardef *p);
  void iterListOldPardef(ListOldPardef::const_iterator i, ListOldPardef::const_iterator j);
  void visitPointerOpt(PointerOpt *p); /* abstract class */
  void visitNoPointer(NoPointer *p);
  void visitSomePointer(SomePointer *p);
  void visitTypeName(TypeName *p); /* abstract class */
  void visitTypeNameAbstractDecl(TypeNameAbstractDecl *p);
  void visitTypeNameDeclSpecList(TypeNameDeclSpecList *p);
  void visitAbstractDecl(AbstractDecl *p); /* abstract class */
  void visitAbstractDeclAttr(AbstractDeclAttr *p);
  void visitAbstractDeclPointer(AbstractDeclPointer *p);
  void visitAbsDirectDecl(AbsDirectDecl *p); /* abstract class */
  void visitAbsDirectDeclPar(AbsDirectDeclPar *p);
  void visitAbsDirectDeclBreckets(AbsDirectDeclBreckets *p);
  void visitAbsDirectDeclRestPar(AbsDirectDeclRestPar *p);
  void visitAbsDirectDeclNoRestPar(AbsDirectDeclNoRestPar *p);
  void visitAbsDirectDeclOpt(AbsDirectDeclOpt *p); /* abstract class */
  void visitSomeAbsDirectDecl(SomeAbsDirectDecl *p);
  void visitNoAbsDirectDecl(NoAbsDirectDecl *p);
  void visitFunctionDef(FunctionDef *p); /* abstract class */
  void visitFunctionDefSpec(FunctionDefSpec *p);
  void visitSimpleFunctionDef(SimpleFunctionDef *p);
  void visitFunctionDefStart(FunctionDefStart *p); /* abstract class */
  void visitFunctionDefStartDeclarator(FunctionDefStartDeclarator *p);
  void visitFunctionDefStartOldProtoDecl(FunctionDefStartOldProtoDecl *p);
  void visitFunctionDefStartReatParGhostParameter(FunctionDefStartReatParGhostParameter *p);
  void visitFunctionDefStartOldPardef(FunctionDefStartOldPardef *p);
  void visitFunctionDefStartGhostParameter(FunctionDefStartGhostParameter *p);
  void visitCVSpec(CVSpec *p); /* abstract class */
  void visitConstKeyWord(ConstKeyWord *p);
  void visitVolatileKeyWord(VolatileKeyWord *p);
  void visitRestrictKeyWord(RestrictKeyWord *p);
  void visitGhostKeyWord(GhostKeyWord *p);
  void visitAttribute_annotKeyWord(Attribute_annotKeyWord *p);
  void visitAttributesWithAsm(AttributesWithAsm *p); /* abstract class */
  void visitEmptyAttrWithASM(EmptyAttrWithASM *p);
  void visitListAttrWithASM(ListAttrWithASM *p);
  void visitListASMAttrWithASM(ListASMAttrWithASM *p);
  void visitASMAttrWithASM(ASMAttrWithASM *p);
  void visitAttributeNocv(AttributeNocv *p); /* abstract class */
  void visitAttributeAttrNocv(AttributeAttrNocv *p);
  void visitDeclspecAttrNocv(DeclspecAttrNocv *p);
  void visitMsattrAttrNocv(MsattrAttrNocv *p);
  void visitThreadAttrNocv(ThreadAttrNocv *p);
  void visitThreadLocalAttrNocv(ThreadLocalAttrNocv *p);
  void visitListAttributeNocv(ListAttributeNocv *p);
  void iterListAttributeNocv(ListAttributeNocv::const_iterator i, ListAttributeNocv::const_iterator j);
  void visitAttribute(Attribute *p); /* abstract class */
  void visitAttributeNoCV(AttributeNoCV *p);
  void visitAttributeConst(AttributeConst *p);
  void visitAttributeRestrict(AttributeRestrict *p);
  void visitAttributeVolatile(AttributeVolatile *p);
  void visitAttributeGhost(AttributeGhost *p);
  void visitAttributeAttributeAnnot(AttributeAttributeAnnot *p);
  void visitListAttribute(ListAttribute *p);
  void iterListAttribute(ListAttribute::const_iterator i, ListAttribute::const_iterator j);
  void visitJustAttribute(JustAttribute *p); /* abstract class */
  void visitAttributeJustAttribute(AttributeJustAttribute *p);
  void visitDeclspecJustAttribute(DeclspecJustAttribute *p);
  void visitListJustAttribute(ListJustAttribute *p);
  void iterListJustAttribute(ListJustAttribute::const_iterator i, ListJustAttribute::const_iterator j);
  void visitPragma(Pragma *p); /* abstract class */
  void visitSimplePragma(SimplePragma *p);
  void visitAttrPragma(AttrPragma *p);
  void visitAttrPragmaSeparated(AttrPragmaSeparated *p);
  void visitPragmaKeyrod(PragmaKeyrod *p);
  void visitVarAttr(VarAttr *p); /* abstract class */
  void visitIdentifierVarAttr(IdentifierVarAttr *p);
  void visitNamedTypeVarAttr(NamedTypeVarAttr *p);
  void visitDefaultVarAttr(DefaultVarAttr *p);
  void visitConstVarAttr(ConstVarAttr *p);
  void visitVolatileVarAttr(VolatileVarAttr *p);
  void visitContIntVarAttr(ContIntVarAttr *p);
  void visitBasicAttribute(BasicAttribute *p); /* abstract class */
  void visitBasicAttrConsInt(BasicAttrConsInt *p);
  void visitBasicAttrConsFloat(BasicAttrConsFloat *p);
  void visitBasicAttrVar(BasicAttrVar *p);
  void visitListBasicAttribute(ListBasicAttribute *p);
  void iterListBasicAttribute(ListBasicAttribute::const_iterator i, ListBasicAttribute::const_iterator j);
  void visitParameterAttrListNE(ParameterAttrListNE *p); /* abstract class */
  void visitParameterBasicAttr(ParameterBasicAttr *p);
  void visitParameterBasicAttrStringConst(ParameterBasicAttrStringConst *p);
  void visitParameterBasicAttrStringConstNext(ParameterBasicAttrStringConstNext *p);
  void visitParamAttrListNE(ParamAttrListNE *p); /* abstract class */
  void visitParamAttrList(ParamAttrList *p);
  void visitParamStringConstant(ParamStringConstant *p);
  void visitAttr(Attr *p); /* abstract class */
  void visitBasicAttr(BasicAttr *p);
  void visitAttrStringConstant(AttrStringConstant *p);
  void visitFuncationCall(FuncationCall *p);
  void visitProcedureCall(ProcedureCall *p);
  void visitBasicPostfix(BasicPostfix *p);
  void visitArrowAttr(ArrowAttr *p);
  void visitDotAttr(DotAttr *p);
  void visitArrayAttr(ArrayAttr *p);
  void visitSizeOfAttrUnary(SizeOfAttrUnary *p);
  void visitSizeOfAttrTypeName(SizeOfAttrTypeName *p);
  void visitAlignOfAttrUnary(AlignOfAttrUnary *p);
  void visitAlignOfAttrTypeName(AlignOfAttrTypeName *p);
  void visitPlusUnaryAttr(PlusUnaryAttr *p);
  void visitMinusUnaryAttr(MinusUnaryAttr *p);
  void visitMultUnaryAttr(MultUnaryAttr *p);
  void visitAmpUnaryAttr(AmpUnaryAttr *p);
  void visitNotUnaryAttr(NotUnaryAttr *p);
  void visitTildeUnaryAttr(TildeUnaryAttr *p);
  void visitMultOp(MultOp *p);
  void visitDivOp(DivOp *p);
  void visitModOp(ModOp *p);
  void visitAddOp(AddOp *p);
  void visitSubOp(SubOp *p);
  void visitLeftShiftOp(LeftShiftOp *p);
  void visitRightShiftOp(RightShiftOp *p);
  void visitLess(Less *p);
  void visitGreater(Greater *p);
  void visitLessEqual(LessEqual *p);
  void visitGreaterEqual(GreaterEqual *p);
  void visitEqualEqual(EqualEqual *p);
  void visitNotEqual(NotEqual *p);
  void visitBitAnd(BitAnd *p);
  void visitXor(Xor *p);
  void visitBitOr(BitOr *p);
  void visitAnd(And *p);
  void visitOr(Or *p);
  void visitTernaryCond(TernaryCond *p);
  void visitAnAttr(AnAttr *p);
  void visitListAttr(ListAttr *p);
  void iterListAttr(ListAttr::const_iterator i, ListAttr::const_iterator j);
  void visitAttrTest(AttrTest *p); /* abstract class */
  void visitAvoidShiftReduce(AvoidShiftReduce *p);
  void visitAttrList(AttrList *p); /* abstract class */
  void visitEmptyAtrList(EmptyAtrList *p);
  void visitAtrList(AtrList *p);
  void visitAsmattr(Asmattr *p); /* abstract class */
  void visitVolatileKeyWrod(VolatileKeyWrod *p);
  void visitConstKeyWrod(ConstKeyWrod *p);
  void visitListAsmattr(ListAsmattr *p);
  void iterListAsmattr(ListAsmattr::const_iterator i, ListAsmattr::const_iterator j);
  void visitAsmoutputs(Asmoutputs *p); /* abstract class */
  void visitNoAsmoutputs(NoAsmoutputs *p);
  void visitSomeAsmoutputs(SomeAsmoutputs *p);
  void visitAsmoperands(Asmoperands *p); /* abstract class */
  void visitNoAsmoperands(NoAsmoperands *p);
  void visitSomeAsmoperands(SomeAsmoperands *p);
  void visitAsmoperand(Asmoperand *p); /* abstract class */
  void visitAsmOperand(AsmOperand *p);
  void visitListAsmoperand(ListAsmoperand *p);
  void iterListAsmoperand(ListAsmoperand::const_iterator i, ListAsmoperand::const_iterator j);
  void visitAsminputs(Asminputs *p); /* abstract class */
  void visitNoAsminputs(NoAsminputs *p);
  void visitSomeAsminputs(SomeAsminputs *p);
  void visitAsmopname(Asmopname *p); /* abstract class */
  void visitNoAsmopname(NoAsmopname *p);
  void visitSomeAsmopname(SomeAsmopname *p);
  void visitAsmclobber(Asmclobber *p); /* abstract class */
  void visitNoAsmclobber(NoAsmclobber *p);
  void visitColonAsmclobber(ColonAsmclobber *p);
  void visitColonStringAsmclobber(ColonStringAsmclobber *p);
  void visitListStringConstant(ListStringConstant *p);
  void iterListStringConstant(ListStringConstant::const_iterator i, ListStringConstant::const_iterator j);
  void visitAsmlabels(Asmlabels *p); /* abstract class */
  void visitNoAsmlabels(NoAsmlabels *p);
  void visitSomeAsmlabels(SomeAsmlabels *p);

  void visitInteger(Integer i);
  void visitDouble(Double d);
  void visitChar(Char c);
  void visitString(String s);
  void visitIdent(String s);
  void visitDECL(String s);
  void visitNAMEDTYPE(String s);
  void visitCST_WCHAR(String s);
  void visitCST_WSTRING(String s);
  void visitCODE_ANNOT(String s);
  void visitSPEC(String s);
  void visitLOOP_ANNOT(String s);
  void visitATTRIBUTE_ANNOT(String s);
  void visitLBRACE(String s);
  void visitRBRACE(String s);
  void visitLBRACKET(String s);
  void visitRBRACKET(String s);
  void visitRGHOST(String s);
  void visitASM(String s);
  void visitALIGNOF(String s);
  void visitATTRIBUTE(String s);
  void visitBLOCKATTRIBUTE(String s);
  void visitCONST(String s);
  void visitFUNCTION__(String s);
  void visitINT(String s);
  void visitMSATTR(String s);
  void visitRESTRICT(String s);
  void visitSIGNED(String s);
  void visitVOLATILE(String s);
  void visitINLINE(String s);
  void visitTYPEOF(String s);
 protected:
  char *buf_;
  size_t cur_, buf_size;

  void inline bufAppend(const char *s)
  {
    size_t end = cur_ + strlen(s);
    if (end >= buf_size) {
      do buf_size *= 2; /* Double the buffer size */
      while (end >= buf_size);
      resizeBuffer();
    }
    strcpy(&buf_[cur_], s);
    cur_ = end;
  }

  void inline bufAppend(const char c)
  {
    if (cur_ + 1 >= buf_size)
    {
      buf_size *= 2; /* Double the buffer size */
      resizeBuffer();
    }
    buf_[cur_] = c;
    buf_[++cur_] = 0;
  }

  void inline bufAppend(String str)
  {
    const char *s = str.c_str();
    bufAppend(s);
  }
  void inline bufReset(void)
  {
    if (buf_) delete[] buf_;
    buf_size = ACSL_BUFFER_INITIAL;
    buf_ = new char[buf_size];
    memset(buf_, 0, buf_size);
    cur_ = 0;
  }

  void inline resizeBuffer(void)
  {
    char *temp = new char[buf_size];
    if (buf_)
    {
      strcpy(temp, buf_);
      delete[] buf_;
    }
    buf_ = temp;
  }
};


}

#endif

