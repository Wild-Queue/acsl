/* File generated by the BNF Converter (bnfc 2.9.4.1). */

#ifndef ACSL_ABSYN_HEADER
#define ACSL_ABSYN_HEADER

#include<string>
#include<vector>

//C++ Abstract Syntax Interface.
namespace acsl
{
/********************   TypeDef Section    ********************/

typedef int Integer;
typedef char Char;
typedef double Double;
typedef std::string String;
typedef std::string Ident;


typedef std::string DECL;
typedef std::string NAMEDTYPE;
typedef std::string CST_WCHAR;
typedef std::string CST_WSTRING;
typedef std::string CODE_ANNOT;
typedef std::string SPEC;
typedef std::string LOOP_ANNOT;
typedef std::string ATTRIBUTE_ANNOT;
typedef std::string LBRACE;
typedef std::string RBRACE;
typedef std::string LBRACKET;
typedef std::string RBRACKET;
typedef std::string RGHOST;
typedef std::string ASM;
typedef std::string ALIGNOF;
typedef std::string ATTRIBUTE;
typedef std::string BLOCKATTRIBUTE;
typedef std::string CONST;
typedef std::string FUNCTION__;
typedef std::string INT;
typedef std::string MSATTR;
typedef std::string RESTRICT;
typedef std::string SIGNED;
typedef std::string VOLATILE;
typedef std::string INLINE;
typedef std::string TYPEOF;


/********************   Forward Declarations    ********************/

class Program;
class Globals;
class GhostGlobals;
class Global;
class IdOrTypenameAsId;
class IdOrTypename;
class MaybeComma;
class AssignExpr;
class OffsetofMemberDesignator;
class Expression;
class Constant;
class StringConstant;
class WStringList;
class OneString;
class InitExpression;
class InitializerListOpt;
class InitializerSingle;
class EqOpt;
class InitDesignators;
class InitDesignatorsOpt;
class GhostArgumentsOpt;
class Arguments;
class OptExpression;
class CommaExpressionOpt;
class Block;
class BlockAttrs;
class BlockElement;
class Annot;
class LocalLabel;
class LocalLabelName;
class AnnotatedStmt;
class ElsePart;
class Statement;
class OptLoopAnnotations;
class ForClause;
class GhostParameterOpt;
class Declaration;
class GenericAssociation;
class DeclAndInitDeclAttrList;
class InitDeclaratorAttr;
class InitDeclarator;
class DeclSpecWOType;
class DeclSpecList;
class DeclSpecListNoNamed;
class TypeSpec;
class StructDeclList;
class StaticAssertDeclaration;
class FieldDecl;
class Enumerator;
class Declarator;
class AttributesOrStatic;
class DirectDecl;
class RestParList;
class ParameterDecl;
class DirectOldProtoDecl;
class OldPardefList;
class OldPardef;
class PointerOpt;
class TypeName;
class AbstractDecl;
class AbsDirectDecl;
class AbsDirectDeclOpt;
class FunctionDef;
class FunctionDefStart;
class CVSpec;
class AttributesWithAsm;
class AttributeNocv;
class Attribute;
class JustAttribute;
class Pragma;
class VarAttr;
class BasicAttribute;
class ParameterAttrListNE;
class ParamAttrListNE;
class Attr;
class AttrTest;
class AttrList;
class Asmattr;
class Asmoutputs;
class Asmoperands;
class Asmoperand;
class Asminputs;
class Asmopname;
class Asmclobber;
class Asmlabels;
class AProgram;
class NoGlobals;
class SimpleGlobals;
class AGhostGlobals;
class SemiColonGlobals;
class GhostGlobalsDeclataion;
class GhostGlobalsFunctionDef;
class GhostGlobalsRGhost;
class GlobalDecl;
class GlobalsDeclataion;
class GlobalsFunctionDef;
class ExternGlobalDeclataion;
class ExternGlobalPar;
class AsmGlobal;
class PragmaGlobal;
class GlobalOldStyle;
class GlobalEmptyOldStyle;
class Identifier;
class NamedType;
class IdTypename;
class NoComa;
class Coma;
class IdentifierPrimaryExpression;
class ConstantPrimaryExpressin;
class CommaExpressionPrimaryExpressin;
class BlockPrimaryExpressin;
class GenericAssociationPrimaryExpressin;
class GenericPrimaryExpressin;
class BracketsPostfixExpression;
class ArgumentsPostfixExpression;
class BuiltinVaArgPostfixExpression;
class BuiltinTypesCompatPostfixExpression;
class BuiltinOffsetOfPostfixExpression;
class DotPostfixExpression;
class ArrowPostfixExpression;
class PlusPlusPostfixExpression;
class MinusMinusPostfixExpression;
class ConstructorPostfixExpression;
class IdTypenameOffsetMembetDesignator;
class DotOffsetMembetDesignator;
class BracketsOffsetMembetDesignator;
class UnaryExprPlusPlus;
class UnaryExprMinusMinus;
class UnaryExprSizeOf;
class UnaryExprSizeOfTypeName;
class UnaryExprAlignOfUnaryExpr;
class UnaryExprAlignOfTypeName;
class UnaryExprPlus;
class UnaryExprMinus;
class UnaryExprMult;
class UnaryExprAmp;
class UnaryExprNot;
class UnaryExprTilde;
class UnaryExprAddress;
class CastExpr;
class MulsExpr;
class DivExpr;
class ModExpr;
class PlusExpr;
class MinusExpr;
class LeftShiftExpr;
class RightShiftExpr;
class LessExpr;
class GreaterExpr;
class LessEqualExpr;
class GreaterEqualExpr;
class EqExpr;
class NotEqExpr;
class BitAndExpr;
class BitXorExpr;
class BitOrExpr;
class AndExpr;
class OrExpr;
class TernaryCondExpr;
class EqAssignExpr;
class PlusEqAssignExpr;
class MinusEqAssignExpr;
class MultEqAssignExpr;
class DivEqAssignExpr;
class ModEqAssignExpr;
class AndEqAssignExpr;
class OrEqAssignExpr;
class XorEqAssignExpr;
class LeftShiftEqAssignExpr;
class RightShiftEqAssignExpr;
class AssignmentExpr;
class ConstantInt;
class ConstantFloat;
class ConstantChar;
class ConstantWChar;
class ConstantString;
class ConstantWString;
class StringConst;
class LastConstantWString;
class OneStringWithList;
class WStringWithList;
class LatersConstantWString;
class SimpleConstantString;
class FunctionConstantString;
class PrettyFunctionConstantString;
class SimpleExpression;
class BracesExpression;
class EmptyInitializerList;
class InitializerList;
class InitializerListComma;
class InitializerDesignator;
class InitializerGCCDesignator;
class EmptyInitializer;
class EquationSign;
class NoEquationSign;
class DotInitDesignator;
class BracketsInitDesignator;
class BracketsSliceInitDesignator;
class NoInitDesignator;
class SomeInitDesignator;
class NoGhostArguments;
class SomeGhostArguments;
class NoArguments;
class SomeArguments;
class NoExpression;
class SomeExpression;
class NoCommaExpression;
class SomeCommaExpression;
class ABlock;
class NoBlockAttrs;
class SomeBlockAttrs;
class DeclarationElement;
class StatementElement;
class PragmaElement;
class CodeAnnot;
class GhostAnnot;
class LocalLable;
class ALocalLabelName;
class AnnotatedStatement;
class NoElsePart;
class SimpleElsePart;
class SimpleGhostElsePart;
class GhostElsePart;
class SemicolonStatement;
class SpecStatement;
class ExprsStatement;
class BlockStatement;
class IfStatement;
class SwitchStatement;
class WhileStatement;
class DoWhileStatement;
class ForStatement;
class ColonStatement;
class CaseStatement;
class CaseSliceStatement;
class DefaultStatement;
class EmptyReturnStatement;
class ReturnStatement;
class BreakStatement;
class ContinueStatement;
class GotoStatement;
class StarGotoStatement;
class AsmGotoAsmattrStatement;
class AsmAsmattrStatement;
class AsmStatement;
class TryExceptStatement;
class TryFinallyStatement;
class NoLoopAnnotations;
class SomeLoopAnnotations;
class ForClauseExpression;
class ForClauseDeclaration;
class NoGhostParameter;
class SomeGhostParameter;
class DeclSpecInitDecl;
class DeclSpec;
class SpecDeclSpecInitDecl;
class SpecDeclSpec;
class StaticAssertDecl;
class StaticAssertDeclStringConst;
class ColonGenericAssociation;
class DefaultGenericAssociation;
class InitDeclaration;
class InitDeclarationWithAttr;
class InitDeclaratorAttribute;
class SimpleInitDeclarator;
class InitDeclaratorExpression;
class TypedefKeyWord;
class ExternKeyWord;
class StaticKeyWord;
class AutoKeyWord;
class RegisterKeyWord;
class InlineKeyWord;
class NoReturnKeyWord;
class DeclSpecCVSpec;
class DeclSpecAtribNOCV;
class DeclSpecWoType;
class DeclSpecWoTypeNext;
class DeclSpecTypeSpec;
class DeclSpecTypeSpecNext;
class DeclSpecNoNamedWOType;
class DeclSpecNoNamedWOTypeNext;
class DeclSpecNoNamedTypeSpec;
class DeclSpecNoNamedTypeSpecNext;
class VoidKeyWord;
class CharKeyWord;
class BoolKeyWord;
class ShortKeyWord;
class IntKeyWord;
class LongKeyWord;
class Int64KeyWord;
class FloatKeyWord;
class DoubleKeyWord;
class SignedKeyWord;
class UnsignedKeyWord;
class StructId;
class StructJustAttr;
class StructIdBraces;
class StructBraces;
class StructJustAttrIdBraces;
class StructJustAttrBraces;
class UnionId;
class UnionIdBraces;
class UnionBraces;
class UnionJustAttrIdBraces;
class UnionJustAttrBraces;
class EnumId;
class EnumIdBraces;
class EnumBraces;
class EnumJustAttrIdBraces;
class EnumJustAttrBraces;
class NamedTypeTypeSpec;
class TypeOfExpression;
class TypeOfTypeName;
class EmptyStructDecl;
class DeclSpecStructDecl;
class SemicolonStructDecl;
class SpecFieldDeclStructDecl;
class PragmaStructDecl;
class StaticAssertStructDecl;
class StaticAssertStructDeclNext;
class StaticAssert;
class StaticAssertStringConst;
class FieldDeclDeclarator;
class FieldDeclDeclaratorColon;
class FieldDeclColonExpression;
class IdentEnumerator;
class IdentAssignExpr;
class ADeclarator;
class AttributesCommaExpression;
class AttributesStaticExpression;
class StaticAttributesExpression;
class DirectDeclIdTypename;
class DirectDeclAttrDecl;
class DirectDeclAttrStatic;
class DirectDeclGhostParam;
class DirectDeclGhostRestParParam;
class SimpleParameterDecl;
class DotDotDotParameterDecl;
class ParameterDeclSpecDeclarator;
class ParameterDeclSpecAbstract;
class ParameterDeclSpec;
class ParameterDeclPar;
class OldDirectProtoDecl;
class EmptyOldPardefList;
class DotDotDotOldPardefList;
class SimpleOldPardefList;
class OldParDef;
class NoPointer;
class SomePointer;
class TypeNameAbstractDecl;
class TypeNameDeclSpecList;
class AbstractDeclAttr;
class AbstractDeclPointer;
class AbsDirectDeclPar;
class AbsDirectDeclBreckets;
class AbsDirectDeclRestPar;
class AbsDirectDeclNoRestPar;
class SomeAbsDirectDecl;
class NoAbsDirectDecl;
class FunctionDefSpec;
class SimpleFunctionDef;
class FunctionDefStartDeclarator;
class FunctionDefStartOldProtoDecl;
class FunctionDefStartReatParGhostParameter;
class FunctionDefStartOldPardef;
class FunctionDefStartGhostParameter;
class ConstKeyWord;
class VolatileKeyWord;
class RestrictKeyWord;
class GhostKeyWord;
class Attribute_annotKeyWord;
class EmptyAttrWithASM;
class ListAttrWithASM;
class ListASMAttrWithASM;
class ASMAttrWithASM;
class AttributeAttrNocv;
class DeclspecAttrNocv;
class MsattrAttrNocv;
class ThreadAttrNocv;
class ThreadLocalAttrNocv;
class AttributeNoCV;
class AttributeConst;
class AttributeRestrict;
class AttributeVolatile;
class AttributeGhost;
class AttributeAttributeAnnot;
class AttributeJustAttribute;
class DeclspecJustAttribute;
class SimplePragma;
class AttrPragma;
class AttrPragmaSeparated;
class PragmaKeyrod;
class IdentifierVarAttr;
class NamedTypeVarAttr;
class DefaultVarAttr;
class ConstVarAttr;
class VolatileVarAttr;
class ContIntVarAttr;
class BasicAttrConsInt;
class BasicAttrConsFloat;
class BasicAttrVar;
class ParameterBasicAttr;
class ParameterBasicAttrStringConst;
class ParameterBasicAttrStringConstNext;
class ParamAttrList;
class ParamStringConstant;
class BasicAttr;
class AttrStringConstant;
class FuncationCall;
class ProcedureCall;
class BasicPostfix;
class ArrowAttr;
class DotAttr;
class ArrayAttr;
class SizeOfAttrUnary;
class SizeOfAttrTypeName;
class AlignOfAttrUnary;
class AlignOfAttrTypeName;
class PlusUnaryAttr;
class MinusUnaryAttr;
class MultUnaryAttr;
class AmpUnaryAttr;
class NotUnaryAttr;
class TildeUnaryAttr;
class MultOp;
class DivOp;
class ModOp;
class AddOp;
class SubOp;
class LeftShiftOp;
class RightShiftOp;
class Less;
class Greater;
class LessEqual;
class GreaterEqual;
class EqualEqual;
class NotEqual;
class BitAnd;
class Xor;
class BitOr;
class And;
class Or;
class TernaryCond;
class AnAttr;
class AvoidShiftReduce;
class EmptyAtrList;
class AtrList;
class VolatileKeyWrod;
class ConstKeyWrod;
class NoAsmoutputs;
class SomeAsmoutputs;
class NoAsmoperands;
class SomeAsmoperands;
class AsmOperand;
class NoAsminputs;
class SomeAsminputs;
class NoAsmopname;
class SomeAsmopname;
class NoAsmclobber;
class ColonAsmclobber;
class ColonStringAsmclobber;
class NoAsmlabels;
class SomeAsmlabels;
class ListOneString;
class ListInitializerSingle;
class ListExpression;
class ListBlockElement;
class ListAnnot;
class ListLocalLabel;
class ListLocalLabelName;
class ListGenericAssociation;
class ListInitDeclaratorAttr;
class ListFieldDecl;
class ListEnumerator;
class ListDeclarator;
class ListParameterDecl;
class ListIdent;
class ListOldPardef;
class ListAttributeNocv;
class ListAttribute;
class ListJustAttribute;
class ListBasicAttribute;
class ListAttr;
class ListAsmattr;
class ListAsmoperand;
class ListStringConstant;


/********************   Visitor Interfaces    ********************/
class Visitor
{
public:
  virtual ~Visitor() {}
  virtual void visitProgram(Program *p) = 0;
  virtual void visitGlobals(Globals *p) = 0;
  virtual void visitGhostGlobals(GhostGlobals *p) = 0;
  virtual void visitGlobal(Global *p) = 0;
  virtual void visitIdOrTypenameAsId(IdOrTypenameAsId *p) = 0;
  virtual void visitIdOrTypename(IdOrTypename *p) = 0;
  virtual void visitMaybeComma(MaybeComma *p) = 0;
  virtual void visitAssignExpr(AssignExpr *p) = 0;
  virtual void visitOffsetofMemberDesignator(OffsetofMemberDesignator *p) = 0;
  virtual void visitExpression(Expression *p) = 0;
  virtual void visitConstant(Constant *p) = 0;
  virtual void visitStringConstant(StringConstant *p) = 0;
  virtual void visitWStringList(WStringList *p) = 0;
  virtual void visitOneString(OneString *p) = 0;
  virtual void visitInitExpression(InitExpression *p) = 0;
  virtual void visitInitializerListOpt(InitializerListOpt *p) = 0;
  virtual void visitInitializerSingle(InitializerSingle *p) = 0;
  virtual void visitEqOpt(EqOpt *p) = 0;
  virtual void visitInitDesignators(InitDesignators *p) = 0;
  virtual void visitInitDesignatorsOpt(InitDesignatorsOpt *p) = 0;
  virtual void visitGhostArgumentsOpt(GhostArgumentsOpt *p) = 0;
  virtual void visitArguments(Arguments *p) = 0;
  virtual void visitOptExpression(OptExpression *p) = 0;
  virtual void visitCommaExpressionOpt(CommaExpressionOpt *p) = 0;
  virtual void visitBlock(Block *p) = 0;
  virtual void visitBlockAttrs(BlockAttrs *p) = 0;
  virtual void visitBlockElement(BlockElement *p) = 0;
  virtual void visitAnnot(Annot *p) = 0;
  virtual void visitLocalLabel(LocalLabel *p) = 0;
  virtual void visitLocalLabelName(LocalLabelName *p) = 0;
  virtual void visitAnnotatedStmt(AnnotatedStmt *p) = 0;
  virtual void visitElsePart(ElsePart *p) = 0;
  virtual void visitStatement(Statement *p) = 0;
  virtual void visitOptLoopAnnotations(OptLoopAnnotations *p) = 0;
  virtual void visitForClause(ForClause *p) = 0;
  virtual void visitGhostParameterOpt(GhostParameterOpt *p) = 0;
  virtual void visitDeclaration(Declaration *p) = 0;
  virtual void visitGenericAssociation(GenericAssociation *p) = 0;
  virtual void visitDeclAndInitDeclAttrList(DeclAndInitDeclAttrList *p) = 0;
  virtual void visitInitDeclaratorAttr(InitDeclaratorAttr *p) = 0;
  virtual void visitInitDeclarator(InitDeclarator *p) = 0;
  virtual void visitDeclSpecWOType(DeclSpecWOType *p) = 0;
  virtual void visitDeclSpecList(DeclSpecList *p) = 0;
  virtual void visitDeclSpecListNoNamed(DeclSpecListNoNamed *p) = 0;
  virtual void visitTypeSpec(TypeSpec *p) = 0;
  virtual void visitStructDeclList(StructDeclList *p) = 0;
  virtual void visitStaticAssertDeclaration(StaticAssertDeclaration *p) = 0;
  virtual void visitFieldDecl(FieldDecl *p) = 0;
  virtual void visitEnumerator(Enumerator *p) = 0;
  virtual void visitDeclarator(Declarator *p) = 0;
  virtual void visitAttributesOrStatic(AttributesOrStatic *p) = 0;
  virtual void visitDirectDecl(DirectDecl *p) = 0;
  virtual void visitRestParList(RestParList *p) = 0;
  virtual void visitParameterDecl(ParameterDecl *p) = 0;
  virtual void visitDirectOldProtoDecl(DirectOldProtoDecl *p) = 0;
  virtual void visitOldPardefList(OldPardefList *p) = 0;
  virtual void visitOldPardef(OldPardef *p) = 0;
  virtual void visitPointerOpt(PointerOpt *p) = 0;
  virtual void visitTypeName(TypeName *p) = 0;
  virtual void visitAbstractDecl(AbstractDecl *p) = 0;
  virtual void visitAbsDirectDecl(AbsDirectDecl *p) = 0;
  virtual void visitAbsDirectDeclOpt(AbsDirectDeclOpt *p) = 0;
  virtual void visitFunctionDef(FunctionDef *p) = 0;
  virtual void visitFunctionDefStart(FunctionDefStart *p) = 0;
  virtual void visitCVSpec(CVSpec *p) = 0;
  virtual void visitAttributesWithAsm(AttributesWithAsm *p) = 0;
  virtual void visitAttributeNocv(AttributeNocv *p) = 0;
  virtual void visitAttribute(Attribute *p) = 0;
  virtual void visitJustAttribute(JustAttribute *p) = 0;
  virtual void visitPragma(Pragma *p) = 0;
  virtual void visitVarAttr(VarAttr *p) = 0;
  virtual void visitBasicAttribute(BasicAttribute *p) = 0;
  virtual void visitParameterAttrListNE(ParameterAttrListNE *p) = 0;
  virtual void visitParamAttrListNE(ParamAttrListNE *p) = 0;
  virtual void visitAttr(Attr *p) = 0;
  virtual void visitAttrTest(AttrTest *p) = 0;
  virtual void visitAttrList(AttrList *p) = 0;
  virtual void visitAsmattr(Asmattr *p) = 0;
  virtual void visitAsmoutputs(Asmoutputs *p) = 0;
  virtual void visitAsmoperands(Asmoperands *p) = 0;
  virtual void visitAsmoperand(Asmoperand *p) = 0;
  virtual void visitAsminputs(Asminputs *p) = 0;
  virtual void visitAsmopname(Asmopname *p) = 0;
  virtual void visitAsmclobber(Asmclobber *p) = 0;
  virtual void visitAsmlabels(Asmlabels *p) = 0;
  virtual void visitAProgram(AProgram *p) = 0;
  virtual void visitNoGlobals(NoGlobals *p) = 0;
  virtual void visitSimpleGlobals(SimpleGlobals *p) = 0;
  virtual void visitAGhostGlobals(AGhostGlobals *p) = 0;
  virtual void visitSemiColonGlobals(SemiColonGlobals *p) = 0;
  virtual void visitGhostGlobalsDeclataion(GhostGlobalsDeclataion *p) = 0;
  virtual void visitGhostGlobalsFunctionDef(GhostGlobalsFunctionDef *p) = 0;
  virtual void visitGhostGlobalsRGhost(GhostGlobalsRGhost *p) = 0;
  virtual void visitGlobalDecl(GlobalDecl *p) = 0;
  virtual void visitGlobalsDeclataion(GlobalsDeclataion *p) = 0;
  virtual void visitGlobalsFunctionDef(GlobalsFunctionDef *p) = 0;
  virtual void visitExternGlobalDeclataion(ExternGlobalDeclataion *p) = 0;
  virtual void visitExternGlobalPar(ExternGlobalPar *p) = 0;
  virtual void visitAsmGlobal(AsmGlobal *p) = 0;
  virtual void visitPragmaGlobal(PragmaGlobal *p) = 0;
  virtual void visitGlobalOldStyle(GlobalOldStyle *p) = 0;
  virtual void visitGlobalEmptyOldStyle(GlobalEmptyOldStyle *p) = 0;
  virtual void visitIdentifier(Identifier *p) = 0;
  virtual void visitNamedType(NamedType *p) = 0;
  virtual void visitIdTypename(IdTypename *p) = 0;
  virtual void visitNoComa(NoComa *p) = 0;
  virtual void visitComa(Coma *p) = 0;
  virtual void visitIdentifierPrimaryExpression(IdentifierPrimaryExpression *p) = 0;
  virtual void visitConstantPrimaryExpressin(ConstantPrimaryExpressin *p) = 0;
  virtual void visitCommaExpressionPrimaryExpressin(CommaExpressionPrimaryExpressin *p) = 0;
  virtual void visitBlockPrimaryExpressin(BlockPrimaryExpressin *p) = 0;
  virtual void visitGenericAssociationPrimaryExpressin(GenericAssociationPrimaryExpressin *p) = 0;
  virtual void visitGenericPrimaryExpressin(GenericPrimaryExpressin *p) = 0;
  virtual void visitBracketsPostfixExpression(BracketsPostfixExpression *p) = 0;
  virtual void visitArgumentsPostfixExpression(ArgumentsPostfixExpression *p) = 0;
  virtual void visitBuiltinVaArgPostfixExpression(BuiltinVaArgPostfixExpression *p) = 0;
  virtual void visitBuiltinTypesCompatPostfixExpression(BuiltinTypesCompatPostfixExpression *p) = 0;
  virtual void visitBuiltinOffsetOfPostfixExpression(BuiltinOffsetOfPostfixExpression *p) = 0;
  virtual void visitDotPostfixExpression(DotPostfixExpression *p) = 0;
  virtual void visitArrowPostfixExpression(ArrowPostfixExpression *p) = 0;
  virtual void visitPlusPlusPostfixExpression(PlusPlusPostfixExpression *p) = 0;
  virtual void visitMinusMinusPostfixExpression(MinusMinusPostfixExpression *p) = 0;
  virtual void visitConstructorPostfixExpression(ConstructorPostfixExpression *p) = 0;
  virtual void visitIdTypenameOffsetMembetDesignator(IdTypenameOffsetMembetDesignator *p) = 0;
  virtual void visitDotOffsetMembetDesignator(DotOffsetMembetDesignator *p) = 0;
  virtual void visitBracketsOffsetMembetDesignator(BracketsOffsetMembetDesignator *p) = 0;
  virtual void visitUnaryExprPlusPlus(UnaryExprPlusPlus *p) = 0;
  virtual void visitUnaryExprMinusMinus(UnaryExprMinusMinus *p) = 0;
  virtual void visitUnaryExprSizeOf(UnaryExprSizeOf *p) = 0;
  virtual void visitUnaryExprSizeOfTypeName(UnaryExprSizeOfTypeName *p) = 0;
  virtual void visitUnaryExprAlignOfUnaryExpr(UnaryExprAlignOfUnaryExpr *p) = 0;
  virtual void visitUnaryExprAlignOfTypeName(UnaryExprAlignOfTypeName *p) = 0;
  virtual void visitUnaryExprPlus(UnaryExprPlus *p) = 0;
  virtual void visitUnaryExprMinus(UnaryExprMinus *p) = 0;
  virtual void visitUnaryExprMult(UnaryExprMult *p) = 0;
  virtual void visitUnaryExprAmp(UnaryExprAmp *p) = 0;
  virtual void visitUnaryExprNot(UnaryExprNot *p) = 0;
  virtual void visitUnaryExprTilde(UnaryExprTilde *p) = 0;
  virtual void visitUnaryExprAddress(UnaryExprAddress *p) = 0;
  virtual void visitCastExpr(CastExpr *p) = 0;
  virtual void visitMulsExpr(MulsExpr *p) = 0;
  virtual void visitDivExpr(DivExpr *p) = 0;
  virtual void visitModExpr(ModExpr *p) = 0;
  virtual void visitPlusExpr(PlusExpr *p) = 0;
  virtual void visitMinusExpr(MinusExpr *p) = 0;
  virtual void visitLeftShiftExpr(LeftShiftExpr *p) = 0;
  virtual void visitRightShiftExpr(RightShiftExpr *p) = 0;
  virtual void visitLessExpr(LessExpr *p) = 0;
  virtual void visitGreaterExpr(GreaterExpr *p) = 0;
  virtual void visitLessEqualExpr(LessEqualExpr *p) = 0;
  virtual void visitGreaterEqualExpr(GreaterEqualExpr *p) = 0;
  virtual void visitEqExpr(EqExpr *p) = 0;
  virtual void visitNotEqExpr(NotEqExpr *p) = 0;
  virtual void visitBitAndExpr(BitAndExpr *p) = 0;
  virtual void visitBitXorExpr(BitXorExpr *p) = 0;
  virtual void visitBitOrExpr(BitOrExpr *p) = 0;
  virtual void visitAndExpr(AndExpr *p) = 0;
  virtual void visitOrExpr(OrExpr *p) = 0;
  virtual void visitTernaryCondExpr(TernaryCondExpr *p) = 0;
  virtual void visitEqAssignExpr(EqAssignExpr *p) = 0;
  virtual void visitPlusEqAssignExpr(PlusEqAssignExpr *p) = 0;
  virtual void visitMinusEqAssignExpr(MinusEqAssignExpr *p) = 0;
  virtual void visitMultEqAssignExpr(MultEqAssignExpr *p) = 0;
  virtual void visitDivEqAssignExpr(DivEqAssignExpr *p) = 0;
  virtual void visitModEqAssignExpr(ModEqAssignExpr *p) = 0;
  virtual void visitAndEqAssignExpr(AndEqAssignExpr *p) = 0;
  virtual void visitOrEqAssignExpr(OrEqAssignExpr *p) = 0;
  virtual void visitXorEqAssignExpr(XorEqAssignExpr *p) = 0;
  virtual void visitLeftShiftEqAssignExpr(LeftShiftEqAssignExpr *p) = 0;
  virtual void visitRightShiftEqAssignExpr(RightShiftEqAssignExpr *p) = 0;
  virtual void visitAssignmentExpr(AssignmentExpr *p) = 0;
  virtual void visitConstantInt(ConstantInt *p) = 0;
  virtual void visitConstantFloat(ConstantFloat *p) = 0;
  virtual void visitConstantChar(ConstantChar *p) = 0;
  virtual void visitConstantWChar(ConstantWChar *p) = 0;
  virtual void visitConstantString(ConstantString *p) = 0;
  virtual void visitConstantWString(ConstantWString *p) = 0;
  virtual void visitStringConst(StringConst *p) = 0;
  virtual void visitLastConstantWString(LastConstantWString *p) = 0;
  virtual void visitOneStringWithList(OneStringWithList *p) = 0;
  virtual void visitWStringWithList(WStringWithList *p) = 0;
  virtual void visitLatersConstantWString(LatersConstantWString *p) = 0;
  virtual void visitSimpleConstantString(SimpleConstantString *p) = 0;
  virtual void visitFunctionConstantString(FunctionConstantString *p) = 0;
  virtual void visitPrettyFunctionConstantString(PrettyFunctionConstantString *p) = 0;
  virtual void visitSimpleExpression(SimpleExpression *p) = 0;
  virtual void visitBracesExpression(BracesExpression *p) = 0;
  virtual void visitEmptyInitializerList(EmptyInitializerList *p) = 0;
  virtual void visitInitializerList(InitializerList *p) = 0;
  virtual void visitInitializerListComma(InitializerListComma *p) = 0;
  virtual void visitInitializerDesignator(InitializerDesignator *p) = 0;
  virtual void visitInitializerGCCDesignator(InitializerGCCDesignator *p) = 0;
  virtual void visitEmptyInitializer(EmptyInitializer *p) = 0;
  virtual void visitEquationSign(EquationSign *p) = 0;
  virtual void visitNoEquationSign(NoEquationSign *p) = 0;
  virtual void visitDotInitDesignator(DotInitDesignator *p) = 0;
  virtual void visitBracketsInitDesignator(BracketsInitDesignator *p) = 0;
  virtual void visitBracketsSliceInitDesignator(BracketsSliceInitDesignator *p) = 0;
  virtual void visitNoInitDesignator(NoInitDesignator *p) = 0;
  virtual void visitSomeInitDesignator(SomeInitDesignator *p) = 0;
  virtual void visitNoGhostArguments(NoGhostArguments *p) = 0;
  virtual void visitSomeGhostArguments(SomeGhostArguments *p) = 0;
  virtual void visitNoArguments(NoArguments *p) = 0;
  virtual void visitSomeArguments(SomeArguments *p) = 0;
  virtual void visitNoExpression(NoExpression *p) = 0;
  virtual void visitSomeExpression(SomeExpression *p) = 0;
  virtual void visitNoCommaExpression(NoCommaExpression *p) = 0;
  virtual void visitSomeCommaExpression(SomeCommaExpression *p) = 0;
  virtual void visitABlock(ABlock *p) = 0;
  virtual void visitNoBlockAttrs(NoBlockAttrs *p) = 0;
  virtual void visitSomeBlockAttrs(SomeBlockAttrs *p) = 0;
  virtual void visitDeclarationElement(DeclarationElement *p) = 0;
  virtual void visitStatementElement(StatementElement *p) = 0;
  virtual void visitPragmaElement(PragmaElement *p) = 0;
  virtual void visitCodeAnnot(CodeAnnot *p) = 0;
  virtual void visitGhostAnnot(GhostAnnot *p) = 0;
  virtual void visitLocalLable(LocalLable *p) = 0;
  virtual void visitALocalLabelName(ALocalLabelName *p) = 0;
  virtual void visitAnnotatedStatement(AnnotatedStatement *p) = 0;
  virtual void visitNoElsePart(NoElsePart *p) = 0;
  virtual void visitSimpleElsePart(SimpleElsePart *p) = 0;
  virtual void visitSimpleGhostElsePart(SimpleGhostElsePart *p) = 0;
  virtual void visitGhostElsePart(GhostElsePart *p) = 0;
  virtual void visitSemicolonStatement(SemicolonStatement *p) = 0;
  virtual void visitSpecStatement(SpecStatement *p) = 0;
  virtual void visitExprsStatement(ExprsStatement *p) = 0;
  virtual void visitBlockStatement(BlockStatement *p) = 0;
  virtual void visitIfStatement(IfStatement *p) = 0;
  virtual void visitSwitchStatement(SwitchStatement *p) = 0;
  virtual void visitWhileStatement(WhileStatement *p) = 0;
  virtual void visitDoWhileStatement(DoWhileStatement *p) = 0;
  virtual void visitForStatement(ForStatement *p) = 0;
  virtual void visitColonStatement(ColonStatement *p) = 0;
  virtual void visitCaseStatement(CaseStatement *p) = 0;
  virtual void visitCaseSliceStatement(CaseSliceStatement *p) = 0;
  virtual void visitDefaultStatement(DefaultStatement *p) = 0;
  virtual void visitEmptyReturnStatement(EmptyReturnStatement *p) = 0;
  virtual void visitReturnStatement(ReturnStatement *p) = 0;
  virtual void visitBreakStatement(BreakStatement *p) = 0;
  virtual void visitContinueStatement(ContinueStatement *p) = 0;
  virtual void visitGotoStatement(GotoStatement *p) = 0;
  virtual void visitStarGotoStatement(StarGotoStatement *p) = 0;
  virtual void visitAsmGotoAsmattrStatement(AsmGotoAsmattrStatement *p) = 0;
  virtual void visitAsmAsmattrStatement(AsmAsmattrStatement *p) = 0;
  virtual void visitAsmStatement(AsmStatement *p) = 0;
  virtual void visitTryExceptStatement(TryExceptStatement *p) = 0;
  virtual void visitTryFinallyStatement(TryFinallyStatement *p) = 0;
  virtual void visitNoLoopAnnotations(NoLoopAnnotations *p) = 0;
  virtual void visitSomeLoopAnnotations(SomeLoopAnnotations *p) = 0;
  virtual void visitForClauseExpression(ForClauseExpression *p) = 0;
  virtual void visitForClauseDeclaration(ForClauseDeclaration *p) = 0;
  virtual void visitNoGhostParameter(NoGhostParameter *p) = 0;
  virtual void visitSomeGhostParameter(SomeGhostParameter *p) = 0;
  virtual void visitDeclSpecInitDecl(DeclSpecInitDecl *p) = 0;
  virtual void visitDeclSpec(DeclSpec *p) = 0;
  virtual void visitSpecDeclSpecInitDecl(SpecDeclSpecInitDecl *p) = 0;
  virtual void visitSpecDeclSpec(SpecDeclSpec *p) = 0;
  virtual void visitStaticAssertDecl(StaticAssertDecl *p) = 0;
  virtual void visitStaticAssertDeclStringConst(StaticAssertDeclStringConst *p) = 0;
  virtual void visitColonGenericAssociation(ColonGenericAssociation *p) = 0;
  virtual void visitDefaultGenericAssociation(DefaultGenericAssociation *p) = 0;
  virtual void visitInitDeclaration(InitDeclaration *p) = 0;
  virtual void visitInitDeclarationWithAttr(InitDeclarationWithAttr *p) = 0;
  virtual void visitInitDeclaratorAttribute(InitDeclaratorAttribute *p) = 0;
  virtual void visitSimpleInitDeclarator(SimpleInitDeclarator *p) = 0;
  virtual void visitInitDeclaratorExpression(InitDeclaratorExpression *p) = 0;
  virtual void visitTypedefKeyWord(TypedefKeyWord *p) = 0;
  virtual void visitExternKeyWord(ExternKeyWord *p) = 0;
  virtual void visitStaticKeyWord(StaticKeyWord *p) = 0;
  virtual void visitAutoKeyWord(AutoKeyWord *p) = 0;
  virtual void visitRegisterKeyWord(RegisterKeyWord *p) = 0;
  virtual void visitInlineKeyWord(InlineKeyWord *p) = 0;
  virtual void visitNoReturnKeyWord(NoReturnKeyWord *p) = 0;
  virtual void visitDeclSpecCVSpec(DeclSpecCVSpec *p) = 0;
  virtual void visitDeclSpecAtribNOCV(DeclSpecAtribNOCV *p) = 0;
  virtual void visitDeclSpecWoType(DeclSpecWoType *p) = 0;
  virtual void visitDeclSpecWoTypeNext(DeclSpecWoTypeNext *p) = 0;
  virtual void visitDeclSpecTypeSpec(DeclSpecTypeSpec *p) = 0;
  virtual void visitDeclSpecTypeSpecNext(DeclSpecTypeSpecNext *p) = 0;
  virtual void visitDeclSpecNoNamedWOType(DeclSpecNoNamedWOType *p) = 0;
  virtual void visitDeclSpecNoNamedWOTypeNext(DeclSpecNoNamedWOTypeNext *p) = 0;
  virtual void visitDeclSpecNoNamedTypeSpec(DeclSpecNoNamedTypeSpec *p) = 0;
  virtual void visitDeclSpecNoNamedTypeSpecNext(DeclSpecNoNamedTypeSpecNext *p) = 0;
  virtual void visitVoidKeyWord(VoidKeyWord *p) = 0;
  virtual void visitCharKeyWord(CharKeyWord *p) = 0;
  virtual void visitBoolKeyWord(BoolKeyWord *p) = 0;
  virtual void visitShortKeyWord(ShortKeyWord *p) = 0;
  virtual void visitIntKeyWord(IntKeyWord *p) = 0;
  virtual void visitLongKeyWord(LongKeyWord *p) = 0;
  virtual void visitInt64KeyWord(Int64KeyWord *p) = 0;
  virtual void visitFloatKeyWord(FloatKeyWord *p) = 0;
  virtual void visitDoubleKeyWord(DoubleKeyWord *p) = 0;
  virtual void visitSignedKeyWord(SignedKeyWord *p) = 0;
  virtual void visitUnsignedKeyWord(UnsignedKeyWord *p) = 0;
  virtual void visitStructId(StructId *p) = 0;
  virtual void visitStructJustAttr(StructJustAttr *p) = 0;
  virtual void visitStructIdBraces(StructIdBraces *p) = 0;
  virtual void visitStructBraces(StructBraces *p) = 0;
  virtual void visitStructJustAttrIdBraces(StructJustAttrIdBraces *p) = 0;
  virtual void visitStructJustAttrBraces(StructJustAttrBraces *p) = 0;
  virtual void visitUnionId(UnionId *p) = 0;
  virtual void visitUnionIdBraces(UnionIdBraces *p) = 0;
  virtual void visitUnionBraces(UnionBraces *p) = 0;
  virtual void visitUnionJustAttrIdBraces(UnionJustAttrIdBraces *p) = 0;
  virtual void visitUnionJustAttrBraces(UnionJustAttrBraces *p) = 0;
  virtual void visitEnumId(EnumId *p) = 0;
  virtual void visitEnumIdBraces(EnumIdBraces *p) = 0;
  virtual void visitEnumBraces(EnumBraces *p) = 0;
  virtual void visitEnumJustAttrIdBraces(EnumJustAttrIdBraces *p) = 0;
  virtual void visitEnumJustAttrBraces(EnumJustAttrBraces *p) = 0;
  virtual void visitNamedTypeTypeSpec(NamedTypeTypeSpec *p) = 0;
  virtual void visitTypeOfExpression(TypeOfExpression *p) = 0;
  virtual void visitTypeOfTypeName(TypeOfTypeName *p) = 0;
  virtual void visitEmptyStructDecl(EmptyStructDecl *p) = 0;
  virtual void visitDeclSpecStructDecl(DeclSpecStructDecl *p) = 0;
  virtual void visitSemicolonStructDecl(SemicolonStructDecl *p) = 0;
  virtual void visitSpecFieldDeclStructDecl(SpecFieldDeclStructDecl *p) = 0;
  virtual void visitPragmaStructDecl(PragmaStructDecl *p) = 0;
  virtual void visitStaticAssertStructDecl(StaticAssertStructDecl *p) = 0;
  virtual void visitStaticAssertStructDeclNext(StaticAssertStructDeclNext *p) = 0;
  virtual void visitStaticAssert(StaticAssert *p) = 0;
  virtual void visitStaticAssertStringConst(StaticAssertStringConst *p) = 0;
  virtual void visitFieldDeclDeclarator(FieldDeclDeclarator *p) = 0;
  virtual void visitFieldDeclDeclaratorColon(FieldDeclDeclaratorColon *p) = 0;
  virtual void visitFieldDeclColonExpression(FieldDeclColonExpression *p) = 0;
  virtual void visitIdentEnumerator(IdentEnumerator *p) = 0;
  virtual void visitIdentAssignExpr(IdentAssignExpr *p) = 0;
  virtual void visitADeclarator(ADeclarator *p) = 0;
  virtual void visitAttributesCommaExpression(AttributesCommaExpression *p) = 0;
  virtual void visitAttributesStaticExpression(AttributesStaticExpression *p) = 0;
  virtual void visitStaticAttributesExpression(StaticAttributesExpression *p) = 0;
  virtual void visitDirectDeclIdTypename(DirectDeclIdTypename *p) = 0;
  virtual void visitDirectDeclAttrDecl(DirectDeclAttrDecl *p) = 0;
  virtual void visitDirectDeclAttrStatic(DirectDeclAttrStatic *p) = 0;
  virtual void visitDirectDeclGhostParam(DirectDeclGhostParam *p) = 0;
  virtual void visitDirectDeclGhostRestParParam(DirectDeclGhostRestParParam *p) = 0;
  virtual void visitSimpleParameterDecl(SimpleParameterDecl *p) = 0;
  virtual void visitDotDotDotParameterDecl(DotDotDotParameterDecl *p) = 0;
  virtual void visitParameterDeclSpecDeclarator(ParameterDeclSpecDeclarator *p) = 0;
  virtual void visitParameterDeclSpecAbstract(ParameterDeclSpecAbstract *p) = 0;
  virtual void visitParameterDeclSpec(ParameterDeclSpec *p) = 0;
  virtual void visitParameterDeclPar(ParameterDeclPar *p) = 0;
  virtual void visitOldDirectProtoDecl(OldDirectProtoDecl *p) = 0;
  virtual void visitEmptyOldPardefList(EmptyOldPardefList *p) = 0;
  virtual void visitDotDotDotOldPardefList(DotDotDotOldPardefList *p) = 0;
  virtual void visitSimpleOldPardefList(SimpleOldPardefList *p) = 0;
  virtual void visitOldParDef(OldParDef *p) = 0;
  virtual void visitNoPointer(NoPointer *p) = 0;
  virtual void visitSomePointer(SomePointer *p) = 0;
  virtual void visitTypeNameAbstractDecl(TypeNameAbstractDecl *p) = 0;
  virtual void visitTypeNameDeclSpecList(TypeNameDeclSpecList *p) = 0;
  virtual void visitAbstractDeclAttr(AbstractDeclAttr *p) = 0;
  virtual void visitAbstractDeclPointer(AbstractDeclPointer *p) = 0;
  virtual void visitAbsDirectDeclPar(AbsDirectDeclPar *p) = 0;
  virtual void visitAbsDirectDeclBreckets(AbsDirectDeclBreckets *p) = 0;
  virtual void visitAbsDirectDeclRestPar(AbsDirectDeclRestPar *p) = 0;
  virtual void visitAbsDirectDeclNoRestPar(AbsDirectDeclNoRestPar *p) = 0;
  virtual void visitSomeAbsDirectDecl(SomeAbsDirectDecl *p) = 0;
  virtual void visitNoAbsDirectDecl(NoAbsDirectDecl *p) = 0;
  virtual void visitFunctionDefSpec(FunctionDefSpec *p) = 0;
  virtual void visitSimpleFunctionDef(SimpleFunctionDef *p) = 0;
  virtual void visitFunctionDefStartDeclarator(FunctionDefStartDeclarator *p) = 0;
  virtual void visitFunctionDefStartOldProtoDecl(FunctionDefStartOldProtoDecl *p) = 0;
  virtual void visitFunctionDefStartReatParGhostParameter(FunctionDefStartReatParGhostParameter *p) = 0;
  virtual void visitFunctionDefStartOldPardef(FunctionDefStartOldPardef *p) = 0;
  virtual void visitFunctionDefStartGhostParameter(FunctionDefStartGhostParameter *p) = 0;
  virtual void visitConstKeyWord(ConstKeyWord *p) = 0;
  virtual void visitVolatileKeyWord(VolatileKeyWord *p) = 0;
  virtual void visitRestrictKeyWord(RestrictKeyWord *p) = 0;
  virtual void visitGhostKeyWord(GhostKeyWord *p) = 0;
  virtual void visitAttribute_annotKeyWord(Attribute_annotKeyWord *p) = 0;
  virtual void visitEmptyAttrWithASM(EmptyAttrWithASM *p) = 0;
  virtual void visitListAttrWithASM(ListAttrWithASM *p) = 0;
  virtual void visitListASMAttrWithASM(ListASMAttrWithASM *p) = 0;
  virtual void visitASMAttrWithASM(ASMAttrWithASM *p) = 0;
  virtual void visitAttributeAttrNocv(AttributeAttrNocv *p) = 0;
  virtual void visitDeclspecAttrNocv(DeclspecAttrNocv *p) = 0;
  virtual void visitMsattrAttrNocv(MsattrAttrNocv *p) = 0;
  virtual void visitThreadAttrNocv(ThreadAttrNocv *p) = 0;
  virtual void visitThreadLocalAttrNocv(ThreadLocalAttrNocv *p) = 0;
  virtual void visitAttributeNoCV(AttributeNoCV *p) = 0;
  virtual void visitAttributeConst(AttributeConst *p) = 0;
  virtual void visitAttributeRestrict(AttributeRestrict *p) = 0;
  virtual void visitAttributeVolatile(AttributeVolatile *p) = 0;
  virtual void visitAttributeGhost(AttributeGhost *p) = 0;
  virtual void visitAttributeAttributeAnnot(AttributeAttributeAnnot *p) = 0;
  virtual void visitAttributeJustAttribute(AttributeJustAttribute *p) = 0;
  virtual void visitDeclspecJustAttribute(DeclspecJustAttribute *p) = 0;
  virtual void visitSimplePragma(SimplePragma *p) = 0;
  virtual void visitAttrPragma(AttrPragma *p) = 0;
  virtual void visitAttrPragmaSeparated(AttrPragmaSeparated *p) = 0;
  virtual void visitPragmaKeyrod(PragmaKeyrod *p) = 0;
  virtual void visitIdentifierVarAttr(IdentifierVarAttr *p) = 0;
  virtual void visitNamedTypeVarAttr(NamedTypeVarAttr *p) = 0;
  virtual void visitDefaultVarAttr(DefaultVarAttr *p) = 0;
  virtual void visitConstVarAttr(ConstVarAttr *p) = 0;
  virtual void visitVolatileVarAttr(VolatileVarAttr *p) = 0;
  virtual void visitContIntVarAttr(ContIntVarAttr *p) = 0;
  virtual void visitBasicAttrConsInt(BasicAttrConsInt *p) = 0;
  virtual void visitBasicAttrConsFloat(BasicAttrConsFloat *p) = 0;
  virtual void visitBasicAttrVar(BasicAttrVar *p) = 0;
  virtual void visitParameterBasicAttr(ParameterBasicAttr *p) = 0;
  virtual void visitParameterBasicAttrStringConst(ParameterBasicAttrStringConst *p) = 0;
  virtual void visitParameterBasicAttrStringConstNext(ParameterBasicAttrStringConstNext *p) = 0;
  virtual void visitParamAttrList(ParamAttrList *p) = 0;
  virtual void visitParamStringConstant(ParamStringConstant *p) = 0;
  virtual void visitBasicAttr(BasicAttr *p) = 0;
  virtual void visitAttrStringConstant(AttrStringConstant *p) = 0;
  virtual void visitFuncationCall(FuncationCall *p) = 0;
  virtual void visitProcedureCall(ProcedureCall *p) = 0;
  virtual void visitBasicPostfix(BasicPostfix *p) = 0;
  virtual void visitArrowAttr(ArrowAttr *p) = 0;
  virtual void visitDotAttr(DotAttr *p) = 0;
  virtual void visitArrayAttr(ArrayAttr *p) = 0;
  virtual void visitSizeOfAttrUnary(SizeOfAttrUnary *p) = 0;
  virtual void visitSizeOfAttrTypeName(SizeOfAttrTypeName *p) = 0;
  virtual void visitAlignOfAttrUnary(AlignOfAttrUnary *p) = 0;
  virtual void visitAlignOfAttrTypeName(AlignOfAttrTypeName *p) = 0;
  virtual void visitPlusUnaryAttr(PlusUnaryAttr *p) = 0;
  virtual void visitMinusUnaryAttr(MinusUnaryAttr *p) = 0;
  virtual void visitMultUnaryAttr(MultUnaryAttr *p) = 0;
  virtual void visitAmpUnaryAttr(AmpUnaryAttr *p) = 0;
  virtual void visitNotUnaryAttr(NotUnaryAttr *p) = 0;
  virtual void visitTildeUnaryAttr(TildeUnaryAttr *p) = 0;
  virtual void visitMultOp(MultOp *p) = 0;
  virtual void visitDivOp(DivOp *p) = 0;
  virtual void visitModOp(ModOp *p) = 0;
  virtual void visitAddOp(AddOp *p) = 0;
  virtual void visitSubOp(SubOp *p) = 0;
  virtual void visitLeftShiftOp(LeftShiftOp *p) = 0;
  virtual void visitRightShiftOp(RightShiftOp *p) = 0;
  virtual void visitLess(Less *p) = 0;
  virtual void visitGreater(Greater *p) = 0;
  virtual void visitLessEqual(LessEqual *p) = 0;
  virtual void visitGreaterEqual(GreaterEqual *p) = 0;
  virtual void visitEqualEqual(EqualEqual *p) = 0;
  virtual void visitNotEqual(NotEqual *p) = 0;
  virtual void visitBitAnd(BitAnd *p) = 0;
  virtual void visitXor(Xor *p) = 0;
  virtual void visitBitOr(BitOr *p) = 0;
  virtual void visitAnd(And *p) = 0;
  virtual void visitOr(Or *p) = 0;
  virtual void visitTernaryCond(TernaryCond *p) = 0;
  virtual void visitAnAttr(AnAttr *p) = 0;
  virtual void visitAvoidShiftReduce(AvoidShiftReduce *p) = 0;
  virtual void visitEmptyAtrList(EmptyAtrList *p) = 0;
  virtual void visitAtrList(AtrList *p) = 0;
  virtual void visitVolatileKeyWrod(VolatileKeyWrod *p) = 0;
  virtual void visitConstKeyWrod(ConstKeyWrod *p) = 0;
  virtual void visitNoAsmoutputs(NoAsmoutputs *p) = 0;
  virtual void visitSomeAsmoutputs(SomeAsmoutputs *p) = 0;
  virtual void visitNoAsmoperands(NoAsmoperands *p) = 0;
  virtual void visitSomeAsmoperands(SomeAsmoperands *p) = 0;
  virtual void visitAsmOperand(AsmOperand *p) = 0;
  virtual void visitNoAsminputs(NoAsminputs *p) = 0;
  virtual void visitSomeAsminputs(SomeAsminputs *p) = 0;
  virtual void visitNoAsmopname(NoAsmopname *p) = 0;
  virtual void visitSomeAsmopname(SomeAsmopname *p) = 0;
  virtual void visitNoAsmclobber(NoAsmclobber *p) = 0;
  virtual void visitColonAsmclobber(ColonAsmclobber *p) = 0;
  virtual void visitColonStringAsmclobber(ColonStringAsmclobber *p) = 0;
  virtual void visitNoAsmlabels(NoAsmlabels *p) = 0;
  virtual void visitSomeAsmlabels(SomeAsmlabels *p) = 0;
  virtual void visitListOneString(ListOneString *p) = 0;
  virtual void visitListInitializerSingle(ListInitializerSingle *p) = 0;
  virtual void visitListExpression(ListExpression *p) = 0;
  virtual void visitListBlockElement(ListBlockElement *p) = 0;
  virtual void visitListAnnot(ListAnnot *p) = 0;
  virtual void visitListLocalLabel(ListLocalLabel *p) = 0;
  virtual void visitListLocalLabelName(ListLocalLabelName *p) = 0;
  virtual void visitListGenericAssociation(ListGenericAssociation *p) = 0;
  virtual void visitListInitDeclaratorAttr(ListInitDeclaratorAttr *p) = 0;
  virtual void visitListFieldDecl(ListFieldDecl *p) = 0;
  virtual void visitListEnumerator(ListEnumerator *p) = 0;
  virtual void visitListDeclarator(ListDeclarator *p) = 0;
  virtual void visitListParameterDecl(ListParameterDecl *p) = 0;
  virtual void visitListIdent(ListIdent *p) = 0;
  virtual void visitListOldPardef(ListOldPardef *p) = 0;
  virtual void visitListAttributeNocv(ListAttributeNocv *p) = 0;
  virtual void visitListAttribute(ListAttribute *p) = 0;
  virtual void visitListJustAttribute(ListJustAttribute *p) = 0;
  virtual void visitListBasicAttribute(ListBasicAttribute *p) = 0;
  virtual void visitListAttr(ListAttr *p) = 0;
  virtual void visitListAsmattr(ListAsmattr *p) = 0;
  virtual void visitListAsmoperand(ListAsmoperand *p) = 0;
  virtual void visitListStringConstant(ListStringConstant *p) = 0;


  virtual void visitInteger(Integer x) = 0;
  virtual void visitChar(Char x) = 0;
  virtual void visitDouble(Double x) = 0;
  virtual void visitString(String x) = 0;
  virtual void visitIdent(Ident x) = 0;
  virtual void visitDECL(DECL x) = 0;
  virtual void visitNAMEDTYPE(NAMEDTYPE x) = 0;
  virtual void visitCST_WCHAR(CST_WCHAR x) = 0;
  virtual void visitCST_WSTRING(CST_WSTRING x) = 0;
  virtual void visitCODE_ANNOT(CODE_ANNOT x) = 0;
  virtual void visitSPEC(SPEC x) = 0;
  virtual void visitLOOP_ANNOT(LOOP_ANNOT x) = 0;
  virtual void visitATTRIBUTE_ANNOT(ATTRIBUTE_ANNOT x) = 0;
  virtual void visitLBRACE(LBRACE x) = 0;
  virtual void visitRBRACE(RBRACE x) = 0;
  virtual void visitLBRACKET(LBRACKET x) = 0;
  virtual void visitRBRACKET(RBRACKET x) = 0;
  virtual void visitRGHOST(RGHOST x) = 0;
  virtual void visitASM(ASM x) = 0;
  virtual void visitALIGNOF(ALIGNOF x) = 0;
  virtual void visitATTRIBUTE(ATTRIBUTE x) = 0;
  virtual void visitBLOCKATTRIBUTE(BLOCKATTRIBUTE x) = 0;
  virtual void visitCONST(CONST x) = 0;
  virtual void visitFUNCTION__(FUNCTION__ x) = 0;
  virtual void visitINT(INT x) = 0;
  virtual void visitMSATTR(MSATTR x) = 0;
  virtual void visitRESTRICT(RESTRICT x) = 0;
  virtual void visitSIGNED(SIGNED x) = 0;
  virtual void visitVOLATILE(VOLATILE x) = 0;
  virtual void visitINLINE(INLINE x) = 0;
  virtual void visitTYPEOF(TYPEOF x) = 0;

};


class Visitable
{
 public:
  virtual ~Visitable() {}
  virtual void accept(Visitor *v) = 0;
};


/********************   Abstract Syntax Classes    ********************/

class Program : public Visitable
{
public:
  virtual Program *clone() const = 0;
  int line_number, char_number;
};

class Globals : public Visitable
{
public:
  virtual Globals *clone() const = 0;
  int line_number, char_number;
};

class GhostGlobals : public Visitable
{
public:
  virtual GhostGlobals *clone() const = 0;
  int line_number, char_number;
};

class Global : public Visitable
{
public:
  virtual Global *clone() const = 0;
  int line_number, char_number;
};

class IdOrTypenameAsId : public Visitable
{
public:
  virtual IdOrTypenameAsId *clone() const = 0;
  int line_number, char_number;
};

class IdOrTypename : public Visitable
{
public:
  virtual IdOrTypename *clone() const = 0;
  int line_number, char_number;
};

class MaybeComma : public Visitable
{
public:
  virtual MaybeComma *clone() const = 0;
  int line_number, char_number;
};

class AssignExpr : public Visitable
{
public:
  virtual AssignExpr *clone() const = 0;
  int line_number, char_number;
};

class OffsetofMemberDesignator : public Visitable
{
public:
  virtual OffsetofMemberDesignator *clone() const = 0;
  int line_number, char_number;
};

class Expression : public Visitable
{
public:
  virtual Expression *clone() const = 0;
  int line_number, char_number;
};

class Constant : public Visitable
{
public:
  virtual Constant *clone() const = 0;
  int line_number, char_number;
};

class StringConstant : public Visitable
{
public:
  virtual StringConstant *clone() const = 0;
  int line_number, char_number;
};

class WStringList : public Visitable
{
public:
  virtual WStringList *clone() const = 0;
  int line_number, char_number;
};

class OneString : public Visitable
{
public:
  virtual OneString *clone() const = 0;
  int line_number, char_number;
};

class InitExpression : public Visitable
{
public:
  virtual InitExpression *clone() const = 0;
  int line_number, char_number;
};

class InitializerListOpt : public Visitable
{
public:
  virtual InitializerListOpt *clone() const = 0;
  int line_number, char_number;
};

class InitializerSingle : public Visitable
{
public:
  virtual InitializerSingle *clone() const = 0;
  int line_number, char_number;
};

class EqOpt : public Visitable
{
public:
  virtual EqOpt *clone() const = 0;
  int line_number, char_number;
};

class InitDesignators : public Visitable
{
public:
  virtual InitDesignators *clone() const = 0;
  int line_number, char_number;
};

class InitDesignatorsOpt : public Visitable
{
public:
  virtual InitDesignatorsOpt *clone() const = 0;
  int line_number, char_number;
};

class GhostArgumentsOpt : public Visitable
{
public:
  virtual GhostArgumentsOpt *clone() const = 0;
  int line_number, char_number;
};

class Arguments : public Visitable
{
public:
  virtual Arguments *clone() const = 0;
  int line_number, char_number;
};

class OptExpression : public Visitable
{
public:
  virtual OptExpression *clone() const = 0;
  int line_number, char_number;
};

class CommaExpressionOpt : public Visitable
{
public:
  virtual CommaExpressionOpt *clone() const = 0;
  int line_number, char_number;
};

class Block : public Visitable
{
public:
  virtual Block *clone() const = 0;
  int line_number, char_number;
};

class BlockAttrs : public Visitable
{
public:
  virtual BlockAttrs *clone() const = 0;
  int line_number, char_number;
};

class BlockElement : public Visitable
{
public:
  virtual BlockElement *clone() const = 0;
  int line_number, char_number;
};

class Annot : public Visitable
{
public:
  virtual Annot *clone() const = 0;
  int line_number, char_number;
};

class LocalLabel : public Visitable
{
public:
  virtual LocalLabel *clone() const = 0;
  int line_number, char_number;
};

class LocalLabelName : public Visitable
{
public:
  virtual LocalLabelName *clone() const = 0;
  int line_number, char_number;
};

class AnnotatedStmt : public Visitable
{
public:
  virtual AnnotatedStmt *clone() const = 0;
  int line_number, char_number;
};

class ElsePart : public Visitable
{
public:
  virtual ElsePart *clone() const = 0;
  int line_number, char_number;
};

class Statement : public Visitable
{
public:
  virtual Statement *clone() const = 0;
  int line_number, char_number;
};

class OptLoopAnnotations : public Visitable
{
public:
  virtual OptLoopAnnotations *clone() const = 0;
  int line_number, char_number;
};

class ForClause : public Visitable
{
public:
  virtual ForClause *clone() const = 0;
  int line_number, char_number;
};

class GhostParameterOpt : public Visitable
{
public:
  virtual GhostParameterOpt *clone() const = 0;
  int line_number, char_number;
};

class Declaration : public Visitable
{
public:
  virtual Declaration *clone() const = 0;
  int line_number, char_number;
};

class GenericAssociation : public Visitable
{
public:
  virtual GenericAssociation *clone() const = 0;
  int line_number, char_number;
};

class DeclAndInitDeclAttrList : public Visitable
{
public:
  virtual DeclAndInitDeclAttrList *clone() const = 0;
  int line_number, char_number;
};

class InitDeclaratorAttr : public Visitable
{
public:
  virtual InitDeclaratorAttr *clone() const = 0;
  int line_number, char_number;
};

class InitDeclarator : public Visitable
{
public:
  virtual InitDeclarator *clone() const = 0;
  int line_number, char_number;
};

class DeclSpecWOType : public Visitable
{
public:
  virtual DeclSpecWOType *clone() const = 0;
  int line_number, char_number;
};

class DeclSpecList : public Visitable
{
public:
  virtual DeclSpecList *clone() const = 0;
  int line_number, char_number;
};

class DeclSpecListNoNamed : public Visitable
{
public:
  virtual DeclSpecListNoNamed *clone() const = 0;
  int line_number, char_number;
};

class TypeSpec : public Visitable
{
public:
  virtual TypeSpec *clone() const = 0;
  int line_number, char_number;
};

class StructDeclList : public Visitable
{
public:
  virtual StructDeclList *clone() const = 0;
  int line_number, char_number;
};

class StaticAssertDeclaration : public Visitable
{
public:
  virtual StaticAssertDeclaration *clone() const = 0;
  int line_number, char_number;
};

class FieldDecl : public Visitable
{
public:
  virtual FieldDecl *clone() const = 0;
  int line_number, char_number;
};

class Enumerator : public Visitable
{
public:
  virtual Enumerator *clone() const = 0;
  int line_number, char_number;
};

class Declarator : public Visitable
{
public:
  virtual Declarator *clone() const = 0;
  int line_number, char_number;
};

class AttributesOrStatic : public Visitable
{
public:
  virtual AttributesOrStatic *clone() const = 0;
  int line_number, char_number;
};

class DirectDecl : public Visitable
{
public:
  virtual DirectDecl *clone() const = 0;
  int line_number, char_number;
};

class RestParList : public Visitable
{
public:
  virtual RestParList *clone() const = 0;
  int line_number, char_number;
};

class ParameterDecl : public Visitable
{
public:
  virtual ParameterDecl *clone() const = 0;
  int line_number, char_number;
};

class DirectOldProtoDecl : public Visitable
{
public:
  virtual DirectOldProtoDecl *clone() const = 0;
  int line_number, char_number;
};

class OldPardefList : public Visitable
{
public:
  virtual OldPardefList *clone() const = 0;
  int line_number, char_number;
};

class OldPardef : public Visitable
{
public:
  virtual OldPardef *clone() const = 0;
  int line_number, char_number;
};

class PointerOpt : public Visitable
{
public:
  virtual PointerOpt *clone() const = 0;
  int line_number, char_number;
};

class TypeName : public Visitable
{
public:
  virtual TypeName *clone() const = 0;
  int line_number, char_number;
};

class AbstractDecl : public Visitable
{
public:
  virtual AbstractDecl *clone() const = 0;
  int line_number, char_number;
};

class AbsDirectDecl : public Visitable
{
public:
  virtual AbsDirectDecl *clone() const = 0;
  int line_number, char_number;
};

class AbsDirectDeclOpt : public Visitable
{
public:
  virtual AbsDirectDeclOpt *clone() const = 0;
  int line_number, char_number;
};

class FunctionDef : public Visitable
{
public:
  virtual FunctionDef *clone() const = 0;
  int line_number, char_number;
};

class FunctionDefStart : public Visitable
{
public:
  virtual FunctionDefStart *clone() const = 0;
  int line_number, char_number;
};

class CVSpec : public Visitable
{
public:
  virtual CVSpec *clone() const = 0;
  int line_number, char_number;
};

class AttributesWithAsm : public Visitable
{
public:
  virtual AttributesWithAsm *clone() const = 0;
  int line_number, char_number;
};

class AttributeNocv : public Visitable
{
public:
  virtual AttributeNocv *clone() const = 0;
  int line_number, char_number;
};

class Attribute : public Visitable
{
public:
  virtual Attribute *clone() const = 0;
  int line_number, char_number;
};

class JustAttribute : public Visitable
{
public:
  virtual JustAttribute *clone() const = 0;
  int line_number, char_number;
};

class Pragma : public Visitable
{
public:
  virtual Pragma *clone() const = 0;
  int line_number, char_number;
};

class VarAttr : public Visitable
{
public:
  virtual VarAttr *clone() const = 0;
  int line_number, char_number;
};

class BasicAttribute : public Visitable
{
public:
  virtual BasicAttribute *clone() const = 0;
  int line_number, char_number;
};

class ParameterAttrListNE : public Visitable
{
public:
  virtual ParameterAttrListNE *clone() const = 0;
  int line_number, char_number;
};

class ParamAttrListNE : public Visitable
{
public:
  virtual ParamAttrListNE *clone() const = 0;
  int line_number, char_number;
};

class Attr : public Visitable
{
public:
  virtual Attr *clone() const = 0;
  int line_number, char_number;
};

class AttrTest : public Visitable
{
public:
  virtual AttrTest *clone() const = 0;
  int line_number, char_number;
};

class AttrList : public Visitable
{
public:
  virtual AttrList *clone() const = 0;
  int line_number, char_number;
};

class Asmattr : public Visitable
{
public:
  virtual Asmattr *clone() const = 0;
  int line_number, char_number;
};

class Asmoutputs : public Visitable
{
public:
  virtual Asmoutputs *clone() const = 0;
  int line_number, char_number;
};

class Asmoperands : public Visitable
{
public:
  virtual Asmoperands *clone() const = 0;
  int line_number, char_number;
};

class Asmoperand : public Visitable
{
public:
  virtual Asmoperand *clone() const = 0;
  int line_number, char_number;
};

class Asminputs : public Visitable
{
public:
  virtual Asminputs *clone() const = 0;
  int line_number, char_number;
};

class Asmopname : public Visitable
{
public:
  virtual Asmopname *clone() const = 0;
  int line_number, char_number;
};

class Asmclobber : public Visitable
{
public:
  virtual Asmclobber *clone() const = 0;
  int line_number, char_number;
};

class Asmlabels : public Visitable
{
public:
  virtual Asmlabels *clone() const = 0;
  int line_number, char_number;
};



class AProgram : public Program
{
public:
  Globals *globals_;

  AProgram(const AProgram &);
  AProgram &operator=(const AProgram &);
  AProgram(Globals *p1);
  ~AProgram();
  virtual void accept(Visitor *v);
  virtual AProgram *clone() const;
  void swap(AProgram &);
};

class NoGlobals : public Globals
{
public:

  NoGlobals(const NoGlobals &);
  NoGlobals &operator=(const NoGlobals &);
  NoGlobals();
  ~NoGlobals();
  virtual void accept(Visitor *v);
  virtual NoGlobals *clone() const;
  void swap(NoGlobals &);
};

class SimpleGlobals : public Globals
{
public:
  Global *global_;
  Globals *globals_;

  SimpleGlobals(const SimpleGlobals &);
  SimpleGlobals &operator=(const SimpleGlobals &);
  SimpleGlobals(Global *p1, Globals *p2);
  ~SimpleGlobals();
  virtual void accept(Visitor *v);
  virtual SimpleGlobals *clone() const;
  void swap(SimpleGlobals &);
};

class AGhostGlobals : public Globals
{
public:
  GhostGlobals *ghostglobals_;
  Globals *globals_;

  AGhostGlobals(const AGhostGlobals &);
  AGhostGlobals &operator=(const AGhostGlobals &);
  AGhostGlobals(GhostGlobals *p1, Globals *p2);
  ~AGhostGlobals();
  virtual void accept(Visitor *v);
  virtual AGhostGlobals *clone() const;
  void swap(AGhostGlobals &);
};

class SemiColonGlobals : public Globals
{
public:
  Globals *globals_;

  SemiColonGlobals(const SemiColonGlobals &);
  SemiColonGlobals &operator=(const SemiColonGlobals &);
  SemiColonGlobals(Globals *p1);
  ~SemiColonGlobals();
  virtual void accept(Visitor *v);
  virtual SemiColonGlobals *clone() const;
  void swap(SemiColonGlobals &);
};

class GhostGlobalsDeclataion : public GhostGlobals
{
public:
  Declaration *declaration_;
  GhostGlobals *ghostglobals_;

  GhostGlobalsDeclataion(const GhostGlobalsDeclataion &);
  GhostGlobalsDeclataion &operator=(const GhostGlobalsDeclataion &);
  GhostGlobalsDeclataion(Declaration *p1, GhostGlobals *p2);
  ~GhostGlobalsDeclataion();
  virtual void accept(Visitor *v);
  virtual GhostGlobalsDeclataion *clone() const;
  void swap(GhostGlobalsDeclataion &);
};

class GhostGlobalsFunctionDef : public GhostGlobals
{
public:
  FunctionDef *functiondef_;
  GhostGlobals *ghostglobals_;

  GhostGlobalsFunctionDef(const GhostGlobalsFunctionDef &);
  GhostGlobalsFunctionDef &operator=(const GhostGlobalsFunctionDef &);
  GhostGlobalsFunctionDef(FunctionDef *p1, GhostGlobals *p2);
  ~GhostGlobalsFunctionDef();
  virtual void accept(Visitor *v);
  virtual GhostGlobalsFunctionDef *clone() const;
  void swap(GhostGlobalsFunctionDef &);
};

class GhostGlobalsRGhost : public GhostGlobals
{
public:
  RGHOST rghost_;

  GhostGlobalsRGhost(const GhostGlobalsRGhost &);
  GhostGlobalsRGhost &operator=(const GhostGlobalsRGhost &);
  GhostGlobalsRGhost(RGHOST p1);
  ~GhostGlobalsRGhost();
  virtual void accept(Visitor *v);
  virtual GhostGlobalsRGhost *clone() const;
  void swap(GhostGlobalsRGhost &);
};

class GlobalDecl : public Global
{
public:
  DECL decl_;

  GlobalDecl(const GlobalDecl &);
  GlobalDecl &operator=(const GlobalDecl &);
  GlobalDecl(DECL p1);
  ~GlobalDecl();
  virtual void accept(Visitor *v);
  virtual GlobalDecl *clone() const;
  void swap(GlobalDecl &);
};

class GlobalsDeclataion : public Global
{
public:
  Declaration *declaration_;

  GlobalsDeclataion(const GlobalsDeclataion &);
  GlobalsDeclataion &operator=(const GlobalsDeclataion &);
  GlobalsDeclataion(Declaration *p1);
  ~GlobalsDeclataion();
  virtual void accept(Visitor *v);
  virtual GlobalsDeclataion *clone() const;
  void swap(GlobalsDeclataion &);
};

class GlobalsFunctionDef : public Global
{
public:
  FunctionDef *functiondef_;

  GlobalsFunctionDef(const GlobalsFunctionDef &);
  GlobalsFunctionDef &operator=(const GlobalsFunctionDef &);
  GlobalsFunctionDef(FunctionDef *p1);
  ~GlobalsFunctionDef();
  virtual void accept(Visitor *v);
  virtual GlobalsFunctionDef *clone() const;
  void swap(GlobalsFunctionDef &);
};

class ExternGlobalDeclataion : public Global
{
public:
  StringConstant *stringconstant_;
  Declaration *declaration_;

  ExternGlobalDeclataion(const ExternGlobalDeclataion &);
  ExternGlobalDeclataion &operator=(const ExternGlobalDeclataion &);
  ExternGlobalDeclataion(StringConstant *p1, Declaration *p2);
  ~ExternGlobalDeclataion();
  virtual void accept(Visitor *v);
  virtual ExternGlobalDeclataion *clone() const;
  void swap(ExternGlobalDeclataion &);
};

class ExternGlobalPar : public Global
{
public:
  StringConstant *stringconstant_;
  LBRACE lbrace_;
  Globals *globals_;
  RBRACE rbrace_;

  ExternGlobalPar(const ExternGlobalPar &);
  ExternGlobalPar &operator=(const ExternGlobalPar &);
  ExternGlobalPar(StringConstant *p1, LBRACE p2, Globals *p3, RBRACE p4);
  ~ExternGlobalPar();
  virtual void accept(Visitor *v);
  virtual ExternGlobalPar *clone() const;
  void swap(ExternGlobalPar &);
};

class AsmGlobal : public Global
{
public:
  ASM asm_;
  StringConstant *stringconstant_;

  AsmGlobal(const AsmGlobal &);
  AsmGlobal &operator=(const AsmGlobal &);
  AsmGlobal(ASM p1, StringConstant *p2);
  ~AsmGlobal();
  virtual void accept(Visitor *v);
  virtual AsmGlobal *clone() const;
  void swap(AsmGlobal &);
};

class PragmaGlobal : public Global
{
public:
  Pragma *pragma_;

  PragmaGlobal(const PragmaGlobal &);
  PragmaGlobal &operator=(const PragmaGlobal &);
  PragmaGlobal(Pragma *p1);
  ~PragmaGlobal();
  virtual void accept(Visitor *v);
  virtual PragmaGlobal *clone() const;
  void swap(PragmaGlobal &);
};

class GlobalOldStyle : public Global
{
public:
  Ident ident_;
  ListIdent *listident_;
  OldPardefList *oldpardeflist_;

  GlobalOldStyle(const GlobalOldStyle &);
  GlobalOldStyle &operator=(const GlobalOldStyle &);
  GlobalOldStyle(Ident p1, ListIdent *p2, OldPardefList *p3);
  ~GlobalOldStyle();
  virtual void accept(Visitor *v);
  virtual GlobalOldStyle *clone() const;
  void swap(GlobalOldStyle &);
};

class GlobalEmptyOldStyle : public Global
{
public:
  Ident ident_;

  GlobalEmptyOldStyle(const GlobalEmptyOldStyle &);
  GlobalEmptyOldStyle &operator=(const GlobalEmptyOldStyle &);
  GlobalEmptyOldStyle(Ident p1);
  ~GlobalEmptyOldStyle();
  virtual void accept(Visitor *v);
  virtual GlobalEmptyOldStyle *clone() const;
  void swap(GlobalEmptyOldStyle &);
};

class Identifier : public IdOrTypenameAsId
{
public:
  Ident ident_;

  Identifier(const Identifier &);
  Identifier &operator=(const Identifier &);
  Identifier(Ident p1);
  ~Identifier();
  virtual void accept(Visitor *v);
  virtual Identifier *clone() const;
  void swap(Identifier &);
};

class NamedType : public IdOrTypenameAsId
{
public:
  NAMEDTYPE namedtype_;

  NamedType(const NamedType &);
  NamedType &operator=(const NamedType &);
  NamedType(NAMEDTYPE p1);
  ~NamedType();
  virtual void accept(Visitor *v);
  virtual NamedType *clone() const;
  void swap(NamedType &);
};

class IdTypename : public IdOrTypename
{
public:
  IdOrTypenameAsId *idortypenameasid_;

  IdTypename(const IdTypename &);
  IdTypename &operator=(const IdTypename &);
  IdTypename(IdOrTypenameAsId *p1);
  ~IdTypename();
  virtual void accept(Visitor *v);
  virtual IdTypename *clone() const;
  void swap(IdTypename &);
};

class NoComa : public MaybeComma
{
public:

  NoComa(const NoComa &);
  NoComa &operator=(const NoComa &);
  NoComa();
  ~NoComa();
  virtual void accept(Visitor *v);
  virtual NoComa *clone() const;
  void swap(NoComa &);
};

class Coma : public MaybeComma
{
public:

  Coma(const Coma &);
  Coma &operator=(const Coma &);
  Coma();
  ~Coma();
  virtual void accept(Visitor *v);
  virtual Coma *clone() const;
  void swap(Coma &);
};

class IdentifierPrimaryExpression : public AssignExpr
{
public:
  Ident ident_;

  IdentifierPrimaryExpression(const IdentifierPrimaryExpression &);
  IdentifierPrimaryExpression &operator=(const IdentifierPrimaryExpression &);
  IdentifierPrimaryExpression(Ident p1);
  ~IdentifierPrimaryExpression();
  virtual void accept(Visitor *v);
  virtual IdentifierPrimaryExpression *clone() const;
  void swap(IdentifierPrimaryExpression &);
};

class ConstantPrimaryExpressin : public AssignExpr
{
public:
  Constant *constant_;

  ConstantPrimaryExpressin(const ConstantPrimaryExpressin &);
  ConstantPrimaryExpressin &operator=(const ConstantPrimaryExpressin &);
  ConstantPrimaryExpressin(Constant *p1);
  ~ConstantPrimaryExpressin();
  virtual void accept(Visitor *v);
  virtual ConstantPrimaryExpressin *clone() const;
  void swap(ConstantPrimaryExpressin &);
};

class CommaExpressionPrimaryExpressin : public AssignExpr
{
public:
  ListExpression *listexpression_;

  CommaExpressionPrimaryExpressin(const CommaExpressionPrimaryExpressin &);
  CommaExpressionPrimaryExpressin &operator=(const CommaExpressionPrimaryExpressin &);
  CommaExpressionPrimaryExpressin(ListExpression *p1);
  ~CommaExpressionPrimaryExpressin();
  virtual void accept(Visitor *v);
  virtual CommaExpressionPrimaryExpressin *clone() const;
  void swap(CommaExpressionPrimaryExpressin &);
};

class BlockPrimaryExpressin : public AssignExpr
{
public:
  Block *block_;

  BlockPrimaryExpressin(const BlockPrimaryExpressin &);
  BlockPrimaryExpressin &operator=(const BlockPrimaryExpressin &);
  BlockPrimaryExpressin(Block *p1);
  ~BlockPrimaryExpressin();
  virtual void accept(Visitor *v);
  virtual BlockPrimaryExpressin *clone() const;
  void swap(BlockPrimaryExpressin &);
};

class GenericAssociationPrimaryExpressin : public AssignExpr
{
public:
  AssignExpr *assignexpr_;
  ListGenericAssociation *listgenericassociation_;

  GenericAssociationPrimaryExpressin(const GenericAssociationPrimaryExpressin &);
  GenericAssociationPrimaryExpressin &operator=(const GenericAssociationPrimaryExpressin &);
  GenericAssociationPrimaryExpressin(AssignExpr *p1, ListGenericAssociation *p2);
  ~GenericAssociationPrimaryExpressin();
  virtual void accept(Visitor *v);
  virtual GenericAssociationPrimaryExpressin *clone() const;
  void swap(GenericAssociationPrimaryExpressin &);
};

class GenericPrimaryExpressin : public AssignExpr
{
public:
  AssignExpr *assignexpr_;

  GenericPrimaryExpressin(const GenericPrimaryExpressin &);
  GenericPrimaryExpressin &operator=(const GenericPrimaryExpressin &);
  GenericPrimaryExpressin(AssignExpr *p1);
  ~GenericPrimaryExpressin();
  virtual void accept(Visitor *v);
  virtual GenericPrimaryExpressin *clone() const;
  void swap(GenericPrimaryExpressin &);
};

class BracketsPostfixExpression : public AssignExpr
{
public:
  AssignExpr *assignexpr_;
  LBRACKET lbracket_;
  ListExpression *listexpression_;
  RBRACKET rbracket_;

  BracketsPostfixExpression(const BracketsPostfixExpression &);
  BracketsPostfixExpression &operator=(const BracketsPostfixExpression &);
  BracketsPostfixExpression(AssignExpr *p1, LBRACKET p2, ListExpression *p3, RBRACKET p4);
  ~BracketsPostfixExpression();
  virtual void accept(Visitor *v);
  virtual BracketsPostfixExpression *clone() const;
  void swap(BracketsPostfixExpression &);
};

class ArgumentsPostfixExpression : public AssignExpr
{
public:
  AssignExpr *assignexpr_;
  Arguments *arguments_;
  GhostArgumentsOpt *ghostargumentsopt_;

  ArgumentsPostfixExpression(const ArgumentsPostfixExpression &);
  ArgumentsPostfixExpression &operator=(const ArgumentsPostfixExpression &);
  ArgumentsPostfixExpression(AssignExpr *p1, Arguments *p2, GhostArgumentsOpt *p3);
  ~ArgumentsPostfixExpression();
  virtual void accept(Visitor *v);
  virtual ArgumentsPostfixExpression *clone() const;
  void swap(ArgumentsPostfixExpression &);
};

class BuiltinVaArgPostfixExpression : public AssignExpr
{
public:
  Expression *expression_;
  TypeName *typename_;

  BuiltinVaArgPostfixExpression(const BuiltinVaArgPostfixExpression &);
  BuiltinVaArgPostfixExpression &operator=(const BuiltinVaArgPostfixExpression &);
  BuiltinVaArgPostfixExpression(Expression *p1, TypeName *p2);
  ~BuiltinVaArgPostfixExpression();
  virtual void accept(Visitor *v);
  virtual BuiltinVaArgPostfixExpression *clone() const;
  void swap(BuiltinVaArgPostfixExpression &);
};

class BuiltinTypesCompatPostfixExpression : public AssignExpr
{
public:
  TypeName *typename_1;
  TypeName *typename_2;

  BuiltinTypesCompatPostfixExpression(const BuiltinTypesCompatPostfixExpression &);
  BuiltinTypesCompatPostfixExpression &operator=(const BuiltinTypesCompatPostfixExpression &);
  BuiltinTypesCompatPostfixExpression(TypeName *p1, TypeName *p2);
  ~BuiltinTypesCompatPostfixExpression();
  virtual void accept(Visitor *v);
  virtual BuiltinTypesCompatPostfixExpression *clone() const;
  void swap(BuiltinTypesCompatPostfixExpression &);
};

class BuiltinOffsetOfPostfixExpression : public AssignExpr
{
public:
  TypeName *typename_;
  OffsetofMemberDesignator *offsetofmemberdesignator_;

  BuiltinOffsetOfPostfixExpression(const BuiltinOffsetOfPostfixExpression &);
  BuiltinOffsetOfPostfixExpression &operator=(const BuiltinOffsetOfPostfixExpression &);
  BuiltinOffsetOfPostfixExpression(TypeName *p1, OffsetofMemberDesignator *p2);
  ~BuiltinOffsetOfPostfixExpression();
  virtual void accept(Visitor *v);
  virtual BuiltinOffsetOfPostfixExpression *clone() const;
  void swap(BuiltinOffsetOfPostfixExpression &);
};

class DotPostfixExpression : public AssignExpr
{
public:
  AssignExpr *assignexpr_;
  IdOrTypename *idortypename_;

  DotPostfixExpression(const DotPostfixExpression &);
  DotPostfixExpression &operator=(const DotPostfixExpression &);
  DotPostfixExpression(AssignExpr *p1, IdOrTypename *p2);
  ~DotPostfixExpression();
  virtual void accept(Visitor *v);
  virtual DotPostfixExpression *clone() const;
  void swap(DotPostfixExpression &);
};

class ArrowPostfixExpression : public AssignExpr
{
public:
  AssignExpr *assignexpr_;
  IdOrTypename *idortypename_;

  ArrowPostfixExpression(const ArrowPostfixExpression &);
  ArrowPostfixExpression &operator=(const ArrowPostfixExpression &);
  ArrowPostfixExpression(AssignExpr *p1, IdOrTypename *p2);
  ~ArrowPostfixExpression();
  virtual void accept(Visitor *v);
  virtual ArrowPostfixExpression *clone() const;
  void swap(ArrowPostfixExpression &);
};

class PlusPlusPostfixExpression : public AssignExpr
{
public:
  AssignExpr *assignexpr_;

  PlusPlusPostfixExpression(const PlusPlusPostfixExpression &);
  PlusPlusPostfixExpression &operator=(const PlusPlusPostfixExpression &);
  PlusPlusPostfixExpression(AssignExpr *p1);
  ~PlusPlusPostfixExpression();
  virtual void accept(Visitor *v);
  virtual PlusPlusPostfixExpression *clone() const;
  void swap(PlusPlusPostfixExpression &);
};

class MinusMinusPostfixExpression : public AssignExpr
{
public:
  AssignExpr *assignexpr_;

  MinusMinusPostfixExpression(const MinusMinusPostfixExpression &);
  MinusMinusPostfixExpression &operator=(const MinusMinusPostfixExpression &);
  MinusMinusPostfixExpression(AssignExpr *p1);
  ~MinusMinusPostfixExpression();
  virtual void accept(Visitor *v);
  virtual MinusMinusPostfixExpression *clone() const;
  void swap(MinusMinusPostfixExpression &);
};

class ConstructorPostfixExpression : public AssignExpr
{
public:
  TypeName *typename_;
  LBRACE lbrace_;
  InitializerListOpt *initializerlistopt_;
  RBRACE rbrace_;

  ConstructorPostfixExpression(const ConstructorPostfixExpression &);
  ConstructorPostfixExpression &operator=(const ConstructorPostfixExpression &);
  ConstructorPostfixExpression(TypeName *p1, LBRACE p2, InitializerListOpt *p3, RBRACE p4);
  ~ConstructorPostfixExpression();
  virtual void accept(Visitor *v);
  virtual ConstructorPostfixExpression *clone() const;
  void swap(ConstructorPostfixExpression &);
};

class UnaryExprPlusPlus : public AssignExpr
{
public:
  AssignExpr *assignexpr_;

  UnaryExprPlusPlus(const UnaryExprPlusPlus &);
  UnaryExprPlusPlus &operator=(const UnaryExprPlusPlus &);
  UnaryExprPlusPlus(AssignExpr *p1);
  ~UnaryExprPlusPlus();
  virtual void accept(Visitor *v);
  virtual UnaryExprPlusPlus *clone() const;
  void swap(UnaryExprPlusPlus &);
};

class UnaryExprMinusMinus : public AssignExpr
{
public:
  AssignExpr *assignexpr_;

  UnaryExprMinusMinus(const UnaryExprMinusMinus &);
  UnaryExprMinusMinus &operator=(const UnaryExprMinusMinus &);
  UnaryExprMinusMinus(AssignExpr *p1);
  ~UnaryExprMinusMinus();
  virtual void accept(Visitor *v);
  virtual UnaryExprMinusMinus *clone() const;
  void swap(UnaryExprMinusMinus &);
};

class UnaryExprSizeOf : public AssignExpr
{
public:
  AssignExpr *assignexpr_;

  UnaryExprSizeOf(const UnaryExprSizeOf &);
  UnaryExprSizeOf &operator=(const UnaryExprSizeOf &);
  UnaryExprSizeOf(AssignExpr *p1);
  ~UnaryExprSizeOf();
  virtual void accept(Visitor *v);
  virtual UnaryExprSizeOf *clone() const;
  void swap(UnaryExprSizeOf &);
};

class UnaryExprSizeOfTypeName : public AssignExpr
{
public:
  TypeName *typename_;

  UnaryExprSizeOfTypeName(const UnaryExprSizeOfTypeName &);
  UnaryExprSizeOfTypeName &operator=(const UnaryExprSizeOfTypeName &);
  UnaryExprSizeOfTypeName(TypeName *p1);
  ~UnaryExprSizeOfTypeName();
  virtual void accept(Visitor *v);
  virtual UnaryExprSizeOfTypeName *clone() const;
  void swap(UnaryExprSizeOfTypeName &);
};

class UnaryExprAlignOfUnaryExpr : public AssignExpr
{
public:
  ALIGNOF alignof_;
  AssignExpr *assignexpr_;

  UnaryExprAlignOfUnaryExpr(const UnaryExprAlignOfUnaryExpr &);
  UnaryExprAlignOfUnaryExpr &operator=(const UnaryExprAlignOfUnaryExpr &);
  UnaryExprAlignOfUnaryExpr(ALIGNOF p1, AssignExpr *p2);
  ~UnaryExprAlignOfUnaryExpr();
  virtual void accept(Visitor *v);
  virtual UnaryExprAlignOfUnaryExpr *clone() const;
  void swap(UnaryExprAlignOfUnaryExpr &);
};

class UnaryExprAlignOfTypeName : public AssignExpr
{
public:
  ALIGNOF alignof_;
  TypeName *typename_;

  UnaryExprAlignOfTypeName(const UnaryExprAlignOfTypeName &);
  UnaryExprAlignOfTypeName &operator=(const UnaryExprAlignOfTypeName &);
  UnaryExprAlignOfTypeName(ALIGNOF p1, TypeName *p2);
  ~UnaryExprAlignOfTypeName();
  virtual void accept(Visitor *v);
  virtual UnaryExprAlignOfTypeName *clone() const;
  void swap(UnaryExprAlignOfTypeName &);
};

class UnaryExprPlus : public AssignExpr
{
public:
  AssignExpr *assignexpr_;

  UnaryExprPlus(const UnaryExprPlus &);
  UnaryExprPlus &operator=(const UnaryExprPlus &);
  UnaryExprPlus(AssignExpr *p1);
  ~UnaryExprPlus();
  virtual void accept(Visitor *v);
  virtual UnaryExprPlus *clone() const;
  void swap(UnaryExprPlus &);
};

class UnaryExprMinus : public AssignExpr
{
public:
  AssignExpr *assignexpr_;

  UnaryExprMinus(const UnaryExprMinus &);
  UnaryExprMinus &operator=(const UnaryExprMinus &);
  UnaryExprMinus(AssignExpr *p1);
  ~UnaryExprMinus();
  virtual void accept(Visitor *v);
  virtual UnaryExprMinus *clone() const;
  void swap(UnaryExprMinus &);
};

class UnaryExprMult : public AssignExpr
{
public:
  AssignExpr *assignexpr_;

  UnaryExprMult(const UnaryExprMult &);
  UnaryExprMult &operator=(const UnaryExprMult &);
  UnaryExprMult(AssignExpr *p1);
  ~UnaryExprMult();
  virtual void accept(Visitor *v);
  virtual UnaryExprMult *clone() const;
  void swap(UnaryExprMult &);
};

class UnaryExprAmp : public AssignExpr
{
public:
  AssignExpr *assignexpr_;

  UnaryExprAmp(const UnaryExprAmp &);
  UnaryExprAmp &operator=(const UnaryExprAmp &);
  UnaryExprAmp(AssignExpr *p1);
  ~UnaryExprAmp();
  virtual void accept(Visitor *v);
  virtual UnaryExprAmp *clone() const;
  void swap(UnaryExprAmp &);
};

class UnaryExprNot : public AssignExpr
{
public:
  AssignExpr *assignexpr_;

  UnaryExprNot(const UnaryExprNot &);
  UnaryExprNot &operator=(const UnaryExprNot &);
  UnaryExprNot(AssignExpr *p1);
  ~UnaryExprNot();
  virtual void accept(Visitor *v);
  virtual UnaryExprNot *clone() const;
  void swap(UnaryExprNot &);
};

class UnaryExprTilde : public AssignExpr
{
public:
  AssignExpr *assignexpr_;

  UnaryExprTilde(const UnaryExprTilde &);
  UnaryExprTilde &operator=(const UnaryExprTilde &);
  UnaryExprTilde(AssignExpr *p1);
  ~UnaryExprTilde();
  virtual void accept(Visitor *v);
  virtual UnaryExprTilde *clone() const;
  void swap(UnaryExprTilde &);
};

class UnaryExprAddress : public AssignExpr
{
public:
  IdOrTypenameAsId *idortypenameasid_;

  UnaryExprAddress(const UnaryExprAddress &);
  UnaryExprAddress &operator=(const UnaryExprAddress &);
  UnaryExprAddress(IdOrTypenameAsId *p1);
  ~UnaryExprAddress();
  virtual void accept(Visitor *v);
  virtual UnaryExprAddress *clone() const;
  void swap(UnaryExprAddress &);
};

class CastExpr : public AssignExpr
{
public:
  TypeName *typename_;
  AssignExpr *assignexpr_;

  CastExpr(const CastExpr &);
  CastExpr &operator=(const CastExpr &);
  CastExpr(TypeName *p1, AssignExpr *p2);
  ~CastExpr();
  virtual void accept(Visitor *v);
  virtual CastExpr *clone() const;
  void swap(CastExpr &);
};

class MulsExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  MulsExpr(const MulsExpr &);
  MulsExpr &operator=(const MulsExpr &);
  MulsExpr(AssignExpr *p1, AssignExpr *p2);
  ~MulsExpr();
  virtual void accept(Visitor *v);
  virtual MulsExpr *clone() const;
  void swap(MulsExpr &);
};

class DivExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  DivExpr(const DivExpr &);
  DivExpr &operator=(const DivExpr &);
  DivExpr(AssignExpr *p1, AssignExpr *p2);
  ~DivExpr();
  virtual void accept(Visitor *v);
  virtual DivExpr *clone() const;
  void swap(DivExpr &);
};

class ModExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  ModExpr(const ModExpr &);
  ModExpr &operator=(const ModExpr &);
  ModExpr(AssignExpr *p1, AssignExpr *p2);
  ~ModExpr();
  virtual void accept(Visitor *v);
  virtual ModExpr *clone() const;
  void swap(ModExpr &);
};

class PlusExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  PlusExpr(const PlusExpr &);
  PlusExpr &operator=(const PlusExpr &);
  PlusExpr(AssignExpr *p1, AssignExpr *p2);
  ~PlusExpr();
  virtual void accept(Visitor *v);
  virtual PlusExpr *clone() const;
  void swap(PlusExpr &);
};

class MinusExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  MinusExpr(const MinusExpr &);
  MinusExpr &operator=(const MinusExpr &);
  MinusExpr(AssignExpr *p1, AssignExpr *p2);
  ~MinusExpr();
  virtual void accept(Visitor *v);
  virtual MinusExpr *clone() const;
  void swap(MinusExpr &);
};

class LeftShiftExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  LeftShiftExpr(const LeftShiftExpr &);
  LeftShiftExpr &operator=(const LeftShiftExpr &);
  LeftShiftExpr(AssignExpr *p1, AssignExpr *p2);
  ~LeftShiftExpr();
  virtual void accept(Visitor *v);
  virtual LeftShiftExpr *clone() const;
  void swap(LeftShiftExpr &);
};

class RightShiftExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  RightShiftExpr(const RightShiftExpr &);
  RightShiftExpr &operator=(const RightShiftExpr &);
  RightShiftExpr(AssignExpr *p1, AssignExpr *p2);
  ~RightShiftExpr();
  virtual void accept(Visitor *v);
  virtual RightShiftExpr *clone() const;
  void swap(RightShiftExpr &);
};

class LessExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  LessExpr(const LessExpr &);
  LessExpr &operator=(const LessExpr &);
  LessExpr(AssignExpr *p1, AssignExpr *p2);
  ~LessExpr();
  virtual void accept(Visitor *v);
  virtual LessExpr *clone() const;
  void swap(LessExpr &);
};

class GreaterExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  GreaterExpr(const GreaterExpr &);
  GreaterExpr &operator=(const GreaterExpr &);
  GreaterExpr(AssignExpr *p1, AssignExpr *p2);
  ~GreaterExpr();
  virtual void accept(Visitor *v);
  virtual GreaterExpr *clone() const;
  void swap(GreaterExpr &);
};

class LessEqualExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  LessEqualExpr(const LessEqualExpr &);
  LessEqualExpr &operator=(const LessEqualExpr &);
  LessEqualExpr(AssignExpr *p1, AssignExpr *p2);
  ~LessEqualExpr();
  virtual void accept(Visitor *v);
  virtual LessEqualExpr *clone() const;
  void swap(LessEqualExpr &);
};

class GreaterEqualExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  GreaterEqualExpr(const GreaterEqualExpr &);
  GreaterEqualExpr &operator=(const GreaterEqualExpr &);
  GreaterEqualExpr(AssignExpr *p1, AssignExpr *p2);
  ~GreaterEqualExpr();
  virtual void accept(Visitor *v);
  virtual GreaterEqualExpr *clone() const;
  void swap(GreaterEqualExpr &);
};

class EqExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  EqExpr(const EqExpr &);
  EqExpr &operator=(const EqExpr &);
  EqExpr(AssignExpr *p1, AssignExpr *p2);
  ~EqExpr();
  virtual void accept(Visitor *v);
  virtual EqExpr *clone() const;
  void swap(EqExpr &);
};

class NotEqExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  NotEqExpr(const NotEqExpr &);
  NotEqExpr &operator=(const NotEqExpr &);
  NotEqExpr(AssignExpr *p1, AssignExpr *p2);
  ~NotEqExpr();
  virtual void accept(Visitor *v);
  virtual NotEqExpr *clone() const;
  void swap(NotEqExpr &);
};

class BitAndExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  BitAndExpr(const BitAndExpr &);
  BitAndExpr &operator=(const BitAndExpr &);
  BitAndExpr(AssignExpr *p1, AssignExpr *p2);
  ~BitAndExpr();
  virtual void accept(Visitor *v);
  virtual BitAndExpr *clone() const;
  void swap(BitAndExpr &);
};

class BitXorExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  BitXorExpr(const BitXorExpr &);
  BitXorExpr &operator=(const BitXorExpr &);
  BitXorExpr(AssignExpr *p1, AssignExpr *p2);
  ~BitXorExpr();
  virtual void accept(Visitor *v);
  virtual BitXorExpr *clone() const;
  void swap(BitXorExpr &);
};

class BitOrExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  BitOrExpr(const BitOrExpr &);
  BitOrExpr &operator=(const BitOrExpr &);
  BitOrExpr(AssignExpr *p1, AssignExpr *p2);
  ~BitOrExpr();
  virtual void accept(Visitor *v);
  virtual BitOrExpr *clone() const;
  void swap(BitOrExpr &);
};

class AndExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  AndExpr(const AndExpr &);
  AndExpr &operator=(const AndExpr &);
  AndExpr(AssignExpr *p1, AssignExpr *p2);
  ~AndExpr();
  virtual void accept(Visitor *v);
  virtual AndExpr *clone() const;
  void swap(AndExpr &);
};

class OrExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  OrExpr(const OrExpr &);
  OrExpr &operator=(const OrExpr &);
  OrExpr(AssignExpr *p1, AssignExpr *p2);
  ~OrExpr();
  virtual void accept(Visitor *v);
  virtual OrExpr *clone() const;
  void swap(OrExpr &);
};

class TernaryCondExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  OptExpression *optexpression_;
  AssignExpr *assignexpr_2;

  TernaryCondExpr(const TernaryCondExpr &);
  TernaryCondExpr &operator=(const TernaryCondExpr &);
  TernaryCondExpr(AssignExpr *p1, OptExpression *p2, AssignExpr *p3);
  ~TernaryCondExpr();
  virtual void accept(Visitor *v);
  virtual TernaryCondExpr *clone() const;
  void swap(TernaryCondExpr &);
};

class EqAssignExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  EqAssignExpr(const EqAssignExpr &);
  EqAssignExpr &operator=(const EqAssignExpr &);
  EqAssignExpr(AssignExpr *p1, AssignExpr *p2);
  ~EqAssignExpr();
  virtual void accept(Visitor *v);
  virtual EqAssignExpr *clone() const;
  void swap(EqAssignExpr &);
};

class PlusEqAssignExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  PlusEqAssignExpr(const PlusEqAssignExpr &);
  PlusEqAssignExpr &operator=(const PlusEqAssignExpr &);
  PlusEqAssignExpr(AssignExpr *p1, AssignExpr *p2);
  ~PlusEqAssignExpr();
  virtual void accept(Visitor *v);
  virtual PlusEqAssignExpr *clone() const;
  void swap(PlusEqAssignExpr &);
};

class MinusEqAssignExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  MinusEqAssignExpr(const MinusEqAssignExpr &);
  MinusEqAssignExpr &operator=(const MinusEqAssignExpr &);
  MinusEqAssignExpr(AssignExpr *p1, AssignExpr *p2);
  ~MinusEqAssignExpr();
  virtual void accept(Visitor *v);
  virtual MinusEqAssignExpr *clone() const;
  void swap(MinusEqAssignExpr &);
};

class MultEqAssignExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  MultEqAssignExpr(const MultEqAssignExpr &);
  MultEqAssignExpr &operator=(const MultEqAssignExpr &);
  MultEqAssignExpr(AssignExpr *p1, AssignExpr *p2);
  ~MultEqAssignExpr();
  virtual void accept(Visitor *v);
  virtual MultEqAssignExpr *clone() const;
  void swap(MultEqAssignExpr &);
};

class DivEqAssignExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  DivEqAssignExpr(const DivEqAssignExpr &);
  DivEqAssignExpr &operator=(const DivEqAssignExpr &);
  DivEqAssignExpr(AssignExpr *p1, AssignExpr *p2);
  ~DivEqAssignExpr();
  virtual void accept(Visitor *v);
  virtual DivEqAssignExpr *clone() const;
  void swap(DivEqAssignExpr &);
};

class ModEqAssignExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  ModEqAssignExpr(const ModEqAssignExpr &);
  ModEqAssignExpr &operator=(const ModEqAssignExpr &);
  ModEqAssignExpr(AssignExpr *p1, AssignExpr *p2);
  ~ModEqAssignExpr();
  virtual void accept(Visitor *v);
  virtual ModEqAssignExpr *clone() const;
  void swap(ModEqAssignExpr &);
};

class AndEqAssignExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  AndEqAssignExpr(const AndEqAssignExpr &);
  AndEqAssignExpr &operator=(const AndEqAssignExpr &);
  AndEqAssignExpr(AssignExpr *p1, AssignExpr *p2);
  ~AndEqAssignExpr();
  virtual void accept(Visitor *v);
  virtual AndEqAssignExpr *clone() const;
  void swap(AndEqAssignExpr &);
};

class OrEqAssignExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  OrEqAssignExpr(const OrEqAssignExpr &);
  OrEqAssignExpr &operator=(const OrEqAssignExpr &);
  OrEqAssignExpr(AssignExpr *p1, AssignExpr *p2);
  ~OrEqAssignExpr();
  virtual void accept(Visitor *v);
  virtual OrEqAssignExpr *clone() const;
  void swap(OrEqAssignExpr &);
};

class XorEqAssignExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  XorEqAssignExpr(const XorEqAssignExpr &);
  XorEqAssignExpr &operator=(const XorEqAssignExpr &);
  XorEqAssignExpr(AssignExpr *p1, AssignExpr *p2);
  ~XorEqAssignExpr();
  virtual void accept(Visitor *v);
  virtual XorEqAssignExpr *clone() const;
  void swap(XorEqAssignExpr &);
};

class LeftShiftEqAssignExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  LeftShiftEqAssignExpr(const LeftShiftEqAssignExpr &);
  LeftShiftEqAssignExpr &operator=(const LeftShiftEqAssignExpr &);
  LeftShiftEqAssignExpr(AssignExpr *p1, AssignExpr *p2);
  ~LeftShiftEqAssignExpr();
  virtual void accept(Visitor *v);
  virtual LeftShiftEqAssignExpr *clone() const;
  void swap(LeftShiftEqAssignExpr &);
};

class RightShiftEqAssignExpr : public AssignExpr
{
public:
  AssignExpr *assignexpr_1;
  AssignExpr *assignexpr_2;

  RightShiftEqAssignExpr(const RightShiftEqAssignExpr &);
  RightShiftEqAssignExpr &operator=(const RightShiftEqAssignExpr &);
  RightShiftEqAssignExpr(AssignExpr *p1, AssignExpr *p2);
  ~RightShiftEqAssignExpr();
  virtual void accept(Visitor *v);
  virtual RightShiftEqAssignExpr *clone() const;
  void swap(RightShiftEqAssignExpr &);
};

class IdTypenameOffsetMembetDesignator : public OffsetofMemberDesignator
{
public:
  IdOrTypename *idortypename_;

  IdTypenameOffsetMembetDesignator(const IdTypenameOffsetMembetDesignator &);
  IdTypenameOffsetMembetDesignator &operator=(const IdTypenameOffsetMembetDesignator &);
  IdTypenameOffsetMembetDesignator(IdOrTypename *p1);
  ~IdTypenameOffsetMembetDesignator();
  virtual void accept(Visitor *v);
  virtual IdTypenameOffsetMembetDesignator *clone() const;
  void swap(IdTypenameOffsetMembetDesignator &);
};

class DotOffsetMembetDesignator : public OffsetofMemberDesignator
{
public:
  OffsetofMemberDesignator *offsetofmemberdesignator_;
  Ident ident_;

  DotOffsetMembetDesignator(const DotOffsetMembetDesignator &);
  DotOffsetMembetDesignator &operator=(const DotOffsetMembetDesignator &);
  DotOffsetMembetDesignator(OffsetofMemberDesignator *p1, Ident p2);
  ~DotOffsetMembetDesignator();
  virtual void accept(Visitor *v);
  virtual DotOffsetMembetDesignator *clone() const;
  void swap(DotOffsetMembetDesignator &);
};

class BracketsOffsetMembetDesignator : public OffsetofMemberDesignator
{
public:
  OffsetofMemberDesignator *offsetofmemberdesignator_;
  LBRACKET lbracket_;
  ListExpression *listexpression_;
  RBRACKET rbracket_;

  BracketsOffsetMembetDesignator(const BracketsOffsetMembetDesignator &);
  BracketsOffsetMembetDesignator &operator=(const BracketsOffsetMembetDesignator &);
  BracketsOffsetMembetDesignator(OffsetofMemberDesignator *p1, LBRACKET p2, ListExpression *p3, RBRACKET p4);
  ~BracketsOffsetMembetDesignator();
  virtual void accept(Visitor *v);
  virtual BracketsOffsetMembetDesignator *clone() const;
  void swap(BracketsOffsetMembetDesignator &);
};

class AssignmentExpr : public Expression
{
public:
  AssignExpr *assignexpr_;

  AssignmentExpr(const AssignmentExpr &);
  AssignmentExpr &operator=(const AssignmentExpr &);
  AssignmentExpr(AssignExpr *p1);
  ~AssignmentExpr();
  virtual void accept(Visitor *v);
  virtual AssignmentExpr *clone() const;
  void swap(AssignmentExpr &);
};

class ConstantInt : public Constant
{
public:
  Integer integer_;

  ConstantInt(const ConstantInt &);
  ConstantInt &operator=(const ConstantInt &);
  ConstantInt(Integer p1);
  ~ConstantInt();
  virtual void accept(Visitor *v);
  virtual ConstantInt *clone() const;
  void swap(ConstantInt &);
};

class ConstantFloat : public Constant
{
public:
  Double double_;

  ConstantFloat(const ConstantFloat &);
  ConstantFloat &operator=(const ConstantFloat &);
  ConstantFloat(Double p1);
  ~ConstantFloat();
  virtual void accept(Visitor *v);
  virtual ConstantFloat *clone() const;
  void swap(ConstantFloat &);
};

class ConstantChar : public Constant
{
public:
  Char char_;

  ConstantChar(const ConstantChar &);
  ConstantChar &operator=(const ConstantChar &);
  ConstantChar(Char p1);
  ~ConstantChar();
  virtual void accept(Visitor *v);
  virtual ConstantChar *clone() const;
  void swap(ConstantChar &);
};

class ConstantWChar : public Constant
{
public:
  CST_WCHAR cst_wchar_;

  ConstantWChar(const ConstantWChar &);
  ConstantWChar &operator=(const ConstantWChar &);
  ConstantWChar(CST_WCHAR p1);
  ~ConstantWChar();
  virtual void accept(Visitor *v);
  virtual ConstantWChar *clone() const;
  void swap(ConstantWChar &);
};

class ConstantString : public Constant
{
public:
  StringConstant *stringconstant_;

  ConstantString(const ConstantString &);
  ConstantString &operator=(const ConstantString &);
  ConstantString(StringConstant *p1);
  ~ConstantString();
  virtual void accept(Visitor *v);
  virtual ConstantString *clone() const;
  void swap(ConstantString &);
};

class ConstantWString : public Constant
{
public:
  WStringList *wstringlist_;

  ConstantWString(const ConstantWString &);
  ConstantWString &operator=(const ConstantWString &);
  ConstantWString(WStringList *p1);
  ~ConstantWString();
  virtual void accept(Visitor *v);
  virtual ConstantWString *clone() const;
  void swap(ConstantWString &);
};

class StringConst : public StringConstant
{
public:
  ListOneString *listonestring_;

  StringConst(const StringConst &);
  StringConst &operator=(const StringConst &);
  StringConst(ListOneString *p1);
  ~StringConst();
  virtual void accept(Visitor *v);
  virtual StringConst *clone() const;
  void swap(StringConst &);
};

class LastConstantWString : public WStringList
{
public:
  CST_WSTRING cst_wstring_;

  LastConstantWString(const LastConstantWString &);
  LastConstantWString &operator=(const LastConstantWString &);
  LastConstantWString(CST_WSTRING p1);
  ~LastConstantWString();
  virtual void accept(Visitor *v);
  virtual LastConstantWString *clone() const;
  void swap(LastConstantWString &);
};

class OneStringWithList : public WStringList
{
public:
  OneString *onestring_;
  WStringList *wstringlist_;

  OneStringWithList(const OneStringWithList &);
  OneStringWithList &operator=(const OneStringWithList &);
  OneStringWithList(OneString *p1, WStringList *p2);
  ~OneStringWithList();
  virtual void accept(Visitor *v);
  virtual OneStringWithList *clone() const;
  void swap(OneStringWithList &);
};

class WStringWithList : public WStringList
{
public:
  CST_WSTRING cst_wstring_;
  WStringList *wstringlist_;

  WStringWithList(const WStringWithList &);
  WStringWithList &operator=(const WStringWithList &);
  WStringWithList(CST_WSTRING p1, WStringList *p2);
  ~WStringWithList();
  virtual void accept(Visitor *v);
  virtual WStringWithList *clone() const;
  void swap(WStringWithList &);
};

class LatersConstantWString : public WStringList
{
public:
  CST_WSTRING cst_wstring_;
  ListOneString *listonestring_;

  LatersConstantWString(const LatersConstantWString &);
  LatersConstantWString &operator=(const LatersConstantWString &);
  LatersConstantWString(CST_WSTRING p1, ListOneString *p2);
  ~LatersConstantWString();
  virtual void accept(Visitor *v);
  virtual LatersConstantWString *clone() const;
  void swap(LatersConstantWString &);
};

class SimpleConstantString : public OneString
{
public:
  String string_;

  SimpleConstantString(const SimpleConstantString &);
  SimpleConstantString &operator=(const SimpleConstantString &);
  SimpleConstantString(String p1);
  ~SimpleConstantString();
  virtual void accept(Visitor *v);
  virtual SimpleConstantString *clone() const;
  void swap(SimpleConstantString &);
};

class FunctionConstantString : public OneString
{
public:
  FUNCTION__ function___;

  FunctionConstantString(const FunctionConstantString &);
  FunctionConstantString &operator=(const FunctionConstantString &);
  FunctionConstantString(FUNCTION__ p1);
  ~FunctionConstantString();
  virtual void accept(Visitor *v);
  virtual FunctionConstantString *clone() const;
  void swap(FunctionConstantString &);
};

class PrettyFunctionConstantString : public OneString
{
public:

  PrettyFunctionConstantString(const PrettyFunctionConstantString &);
  PrettyFunctionConstantString &operator=(const PrettyFunctionConstantString &);
  PrettyFunctionConstantString();
  ~PrettyFunctionConstantString();
  virtual void accept(Visitor *v);
  virtual PrettyFunctionConstantString *clone() const;
  void swap(PrettyFunctionConstantString &);
};

class SimpleExpression : public InitExpression
{
public:
  Expression *expression_;

  SimpleExpression(const SimpleExpression &);
  SimpleExpression &operator=(const SimpleExpression &);
  SimpleExpression(Expression *p1);
  ~SimpleExpression();
  virtual void accept(Visitor *v);
  virtual SimpleExpression *clone() const;
  void swap(SimpleExpression &);
};

class BracesExpression : public InitExpression
{
public:
  LBRACE lbrace_;
  InitializerListOpt *initializerlistopt_;
  RBRACE rbrace_;

  BracesExpression(const BracesExpression &);
  BracesExpression &operator=(const BracesExpression &);
  BracesExpression(LBRACE p1, InitializerListOpt *p2, RBRACE p3);
  ~BracesExpression();
  virtual void accept(Visitor *v);
  virtual BracesExpression *clone() const;
  void swap(BracesExpression &);
};

class EmptyInitializerList : public InitializerListOpt
{
public:

  EmptyInitializerList(const EmptyInitializerList &);
  EmptyInitializerList &operator=(const EmptyInitializerList &);
  EmptyInitializerList();
  ~EmptyInitializerList();
  virtual void accept(Visitor *v);
  virtual EmptyInitializerList *clone() const;
  void swap(EmptyInitializerList &);
};

class InitializerList : public InitializerListOpt
{
public:
  ListInitializerSingle *listinitializersingle_;

  InitializerList(const InitializerList &);
  InitializerList &operator=(const InitializerList &);
  InitializerList(ListInitializerSingle *p1);
  ~InitializerList();
  virtual void accept(Visitor *v);
  virtual InitializerList *clone() const;
  void swap(InitializerList &);
};

class InitializerListComma : public InitializerListOpt
{
public:
  ListInitializerSingle *listinitializersingle_;

  InitializerListComma(const InitializerListComma &);
  InitializerListComma &operator=(const InitializerListComma &);
  InitializerListComma(ListInitializerSingle *p1);
  ~InitializerListComma();
  virtual void accept(Visitor *v);
  virtual InitializerListComma *clone() const;
  void swap(InitializerListComma &);
};

class InitializerDesignator : public InitializerSingle
{
public:
  InitDesignators *initdesignators_;
  EqOpt *eqopt_;
  InitExpression *initexpression_;

  InitializerDesignator(const InitializerDesignator &);
  InitializerDesignator &operator=(const InitializerDesignator &);
  InitializerDesignator(InitDesignators *p1, EqOpt *p2, InitExpression *p3);
  ~InitializerDesignator();
  virtual void accept(Visitor *v);
  virtual InitializerDesignator *clone() const;
  void swap(InitializerDesignator &);
};

class InitializerGCCDesignator : public InitializerSingle
{
public:
  IdOrTypename *idortypename_;
  InitExpression *initexpression_;

  InitializerGCCDesignator(const InitializerGCCDesignator &);
  InitializerGCCDesignator &operator=(const InitializerGCCDesignator &);
  InitializerGCCDesignator(IdOrTypename *p1, InitExpression *p2);
  ~InitializerGCCDesignator();
  virtual void accept(Visitor *v);
  virtual InitializerGCCDesignator *clone() const;
  void swap(InitializerGCCDesignator &);
};

class EmptyInitializer : public InitializerSingle
{
public:
  InitExpression *initexpression_;

  EmptyInitializer(const EmptyInitializer &);
  EmptyInitializer &operator=(const EmptyInitializer &);
  EmptyInitializer(InitExpression *p1);
  ~EmptyInitializer();
  virtual void accept(Visitor *v);
  virtual EmptyInitializer *clone() const;
  void swap(EmptyInitializer &);
};

class EquationSign : public EqOpt
{
public:

  EquationSign(const EquationSign &);
  EquationSign &operator=(const EquationSign &);
  EquationSign();
  ~EquationSign();
  virtual void accept(Visitor *v);
  virtual EquationSign *clone() const;
  void swap(EquationSign &);
};

class NoEquationSign : public EqOpt
{
public:

  NoEquationSign(const NoEquationSign &);
  NoEquationSign &operator=(const NoEquationSign &);
  NoEquationSign();
  ~NoEquationSign();
  virtual void accept(Visitor *v);
  virtual NoEquationSign *clone() const;
  void swap(NoEquationSign &);
};

class DotInitDesignator : public InitDesignators
{
public:
  IdOrTypename *idortypename_;
  InitDesignatorsOpt *initdesignatorsopt_;

  DotInitDesignator(const DotInitDesignator &);
  DotInitDesignator &operator=(const DotInitDesignator &);
  DotInitDesignator(IdOrTypename *p1, InitDesignatorsOpt *p2);
  ~DotInitDesignator();
  virtual void accept(Visitor *v);
  virtual DotInitDesignator *clone() const;
  void swap(DotInitDesignator &);
};

class BracketsInitDesignator : public InitDesignators
{
public:
  LBRACKET lbracket_;
  Expression *expression_;
  RBRACKET rbracket_;
  InitDesignatorsOpt *initdesignatorsopt_;

  BracketsInitDesignator(const BracketsInitDesignator &);
  BracketsInitDesignator &operator=(const BracketsInitDesignator &);
  BracketsInitDesignator(LBRACKET p1, Expression *p2, RBRACKET p3, InitDesignatorsOpt *p4);
  ~BracketsInitDesignator();
  virtual void accept(Visitor *v);
  virtual BracketsInitDesignator *clone() const;
  void swap(BracketsInitDesignator &);
};

class BracketsSliceInitDesignator : public InitDesignators
{
public:
  LBRACKET lbracket_;
  Expression *expression_1;
  Expression *expression_2;
  RBRACKET rbracket_;

  BracketsSliceInitDesignator(const BracketsSliceInitDesignator &);
  BracketsSliceInitDesignator &operator=(const BracketsSliceInitDesignator &);
  BracketsSliceInitDesignator(LBRACKET p1, Expression *p2, Expression *p3, RBRACKET p4);
  ~BracketsSliceInitDesignator();
  virtual void accept(Visitor *v);
  virtual BracketsSliceInitDesignator *clone() const;
  void swap(BracketsSliceInitDesignator &);
};

class NoInitDesignator : public InitDesignatorsOpt
{
public:

  NoInitDesignator(const NoInitDesignator &);
  NoInitDesignator &operator=(const NoInitDesignator &);
  NoInitDesignator();
  ~NoInitDesignator();
  virtual void accept(Visitor *v);
  virtual NoInitDesignator *clone() const;
  void swap(NoInitDesignator &);
};

class SomeInitDesignator : public InitDesignatorsOpt
{
public:
  InitDesignators *initdesignators_;

  SomeInitDesignator(const SomeInitDesignator &);
  SomeInitDesignator &operator=(const SomeInitDesignator &);
  SomeInitDesignator(InitDesignators *p1);
  ~SomeInitDesignator();
  virtual void accept(Visitor *v);
  virtual SomeInitDesignator *clone() const;
  void swap(SomeInitDesignator &);
};

class NoGhostArguments : public GhostArgumentsOpt
{
public:

  NoGhostArguments(const NoGhostArguments &);
  NoGhostArguments &operator=(const NoGhostArguments &);
  NoGhostArguments();
  ~NoGhostArguments();
  virtual void accept(Visitor *v);
  virtual NoGhostArguments *clone() const;
  void swap(NoGhostArguments &);
};

class SomeGhostArguments : public GhostArgumentsOpt
{
public:
  Arguments *arguments_;
  RGHOST rghost_;

  SomeGhostArguments(const SomeGhostArguments &);
  SomeGhostArguments &operator=(const SomeGhostArguments &);
  SomeGhostArguments(Arguments *p1, RGHOST p2);
  ~SomeGhostArguments();
  virtual void accept(Visitor *v);
  virtual SomeGhostArguments *clone() const;
  void swap(SomeGhostArguments &);
};

class NoArguments : public Arguments
{
public:

  NoArguments(const NoArguments &);
  NoArguments &operator=(const NoArguments &);
  NoArguments();
  ~NoArguments();
  virtual void accept(Visitor *v);
  virtual NoArguments *clone() const;
  void swap(NoArguments &);
};

class SomeArguments : public Arguments
{
public:
  ListExpression *listexpression_;

  SomeArguments(const SomeArguments &);
  SomeArguments &operator=(const SomeArguments &);
  SomeArguments(ListExpression *p1);
  ~SomeArguments();
  virtual void accept(Visitor *v);
  virtual SomeArguments *clone() const;
  void swap(SomeArguments &);
};

class NoExpression : public OptExpression
{
public:

  NoExpression(const NoExpression &);
  NoExpression &operator=(const NoExpression &);
  NoExpression();
  ~NoExpression();
  virtual void accept(Visitor *v);
  virtual NoExpression *clone() const;
  void swap(NoExpression &);
};

class SomeExpression : public OptExpression
{
public:
  ListExpression *listexpression_;

  SomeExpression(const SomeExpression &);
  SomeExpression &operator=(const SomeExpression &);
  SomeExpression(ListExpression *p1);
  ~SomeExpression();
  virtual void accept(Visitor *v);
  virtual SomeExpression *clone() const;
  void swap(SomeExpression &);
};

class NoCommaExpression : public CommaExpressionOpt
{
public:

  NoCommaExpression(const NoCommaExpression &);
  NoCommaExpression &operator=(const NoCommaExpression &);
  NoCommaExpression();
  ~NoCommaExpression();
  virtual void accept(Visitor *v);
  virtual NoCommaExpression *clone() const;
  void swap(NoCommaExpression &);
};

class SomeCommaExpression : public CommaExpressionOpt
{
public:
  ListExpression *listexpression_;

  SomeCommaExpression(const SomeCommaExpression &);
  SomeCommaExpression &operator=(const SomeCommaExpression &);
  SomeCommaExpression(ListExpression *p1);
  ~SomeCommaExpression();
  virtual void accept(Visitor *v);
  virtual SomeCommaExpression *clone() const;
  void swap(SomeCommaExpression &);
};

class ABlock : public Block
{
public:
  LBRACE lbrace_;
  ListLocalLabel *listlocallabel_;
  BlockAttrs *blockattrs_;
  ListBlockElement *listblockelement_;
  ListAnnot *listannot_;
  RBRACE rbrace_;

  ABlock(const ABlock &);
  ABlock &operator=(const ABlock &);
  ABlock(LBRACE p1, ListLocalLabel *p2, BlockAttrs *p3, ListBlockElement *p4, ListAnnot *p5, RBRACE p6);
  ~ABlock();
  virtual void accept(Visitor *v);
  virtual ABlock *clone() const;
  void swap(ABlock &);
};

class NoBlockAttrs : public BlockAttrs
{
public:

  NoBlockAttrs(const NoBlockAttrs &);
  NoBlockAttrs &operator=(const NoBlockAttrs &);
  NoBlockAttrs();
  ~NoBlockAttrs();
  virtual void accept(Visitor *v);
  virtual NoBlockAttrs *clone() const;
  void swap(NoBlockAttrs &);
};

class SomeBlockAttrs : public BlockAttrs
{
public:
  BLOCKATTRIBUTE blockattribute_;
  ListAttr *listattr_;

  SomeBlockAttrs(const SomeBlockAttrs &);
  SomeBlockAttrs &operator=(const SomeBlockAttrs &);
  SomeBlockAttrs(BLOCKATTRIBUTE p1, ListAttr *p2);
  ~SomeBlockAttrs();
  virtual void accept(Visitor *v);
  virtual SomeBlockAttrs *clone() const;
  void swap(SomeBlockAttrs &);
};

class DeclarationElement : public BlockElement
{
public:
  ListAnnot *listannot_;
  Declaration *declaration_;

  DeclarationElement(const DeclarationElement &);
  DeclarationElement &operator=(const DeclarationElement &);
  DeclarationElement(ListAnnot *p1, Declaration *p2);
  ~DeclarationElement();
  virtual void accept(Visitor *v);
  virtual DeclarationElement *clone() const;
  void swap(DeclarationElement &);
};

class StatementElement : public BlockElement
{
public:
  ListAnnot *listannot_;
  Statement *statement_;

  StatementElement(const StatementElement &);
  StatementElement &operator=(const StatementElement &);
  StatementElement(ListAnnot *p1, Statement *p2);
  ~StatementElement();
  virtual void accept(Visitor *v);
  virtual StatementElement *clone() const;
  void swap(StatementElement &);
};

class PragmaElement : public BlockElement
{
public:
  ListAnnot *listannot_;
  Pragma *pragma_;

  PragmaElement(const PragmaElement &);
  PragmaElement &operator=(const PragmaElement &);
  PragmaElement(ListAnnot *p1, Pragma *p2);
  ~PragmaElement();
  virtual void accept(Visitor *v);
  virtual PragmaElement *clone() const;
  void swap(PragmaElement &);
};

class CodeAnnot : public Annot
{
public:
  CODE_ANNOT code_annot_;

  CodeAnnot(const CodeAnnot &);
  CodeAnnot &operator=(const CodeAnnot &);
  CodeAnnot(CODE_ANNOT p1);
  ~CodeAnnot();
  virtual void accept(Visitor *v);
  virtual CodeAnnot *clone() const;
  void swap(CodeAnnot &);
};

class GhostAnnot : public Annot
{
public:
  ListBlockElement *listblockelement_;
  ListAnnot *listannot_;
  RGHOST rghost_;

  GhostAnnot(const GhostAnnot &);
  GhostAnnot &operator=(const GhostAnnot &);
  GhostAnnot(ListBlockElement *p1, ListAnnot *p2, RGHOST p3);
  ~GhostAnnot();
  virtual void accept(Visitor *v);
  virtual GhostAnnot *clone() const;
  void swap(GhostAnnot &);
};

class LocalLable : public LocalLabel
{
public:
  ListLocalLabelName *listlocallabelname_;

  LocalLable(const LocalLable &);
  LocalLable &operator=(const LocalLable &);
  LocalLable(ListLocalLabelName *p1);
  ~LocalLable();
  virtual void accept(Visitor *v);
  virtual LocalLable *clone() const;
  void swap(LocalLable &);
};

class ALocalLabelName : public LocalLabelName
{
public:
  IdOrTypenameAsId *idortypenameasid_;

  ALocalLabelName(const ALocalLabelName &);
  ALocalLabelName &operator=(const ALocalLabelName &);
  ALocalLabelName(IdOrTypenameAsId *p1);
  ~ALocalLabelName();
  virtual void accept(Visitor *v);
  virtual ALocalLabelName *clone() const;
  void swap(ALocalLabelName &);
};

class AnnotatedStatement : public AnnotatedStmt
{
public:
  ListAnnot *listannot_;
  Statement *statement_;

  AnnotatedStatement(const AnnotatedStatement &);
  AnnotatedStatement &operator=(const AnnotatedStatement &);
  AnnotatedStatement(ListAnnot *p1, Statement *p2);
  ~AnnotatedStatement();
  virtual void accept(Visitor *v);
  virtual AnnotatedStatement *clone() const;
  void swap(AnnotatedStatement &);
};

class NoElsePart : public ElsePart
{
public:

  NoElsePart(const NoElsePart &);
  NoElsePart &operator=(const NoElsePart &);
  NoElsePart();
  ~NoElsePart();
  virtual void accept(Visitor *v);
  virtual NoElsePart *clone() const;
  void swap(NoElsePart &);
};

class SimpleElsePart : public ElsePart
{
public:
  AnnotatedStmt *annotatedstmt_;

  SimpleElsePart(const SimpleElsePart &);
  SimpleElsePart &operator=(const SimpleElsePart &);
  SimpleElsePart(AnnotatedStmt *p1);
  ~SimpleElsePart();
  virtual void accept(Visitor *v);
  virtual SimpleElsePart *clone() const;
  void swap(SimpleElsePart &);
};

class SimpleGhostElsePart : public ElsePart
{
public:
  AnnotatedStmt *annotatedstmt_;
  RGHOST rghost_;

  SimpleGhostElsePart(const SimpleGhostElsePart &);
  SimpleGhostElsePart &operator=(const SimpleGhostElsePart &);
  SimpleGhostElsePart(AnnotatedStmt *p1, RGHOST p2);
  ~SimpleGhostElsePart();
  virtual void accept(Visitor *v);
  virtual SimpleGhostElsePart *clone() const;
  void swap(SimpleGhostElsePart &);
};

class GhostElsePart : public ElsePart
{
public:
  AnnotatedStmt *annotatedstmt_1;
  RGHOST rghost_;
  AnnotatedStmt *annotatedstmt_2;

  GhostElsePart(const GhostElsePart &);
  GhostElsePart &operator=(const GhostElsePart &);
  GhostElsePart(AnnotatedStmt *p1, RGHOST p2, AnnotatedStmt *p3);
  ~GhostElsePart();
  virtual void accept(Visitor *v);
  virtual GhostElsePart *clone() const;
  void swap(GhostElsePart &);
};

class SemicolonStatement : public Statement
{
public:

  SemicolonStatement(const SemicolonStatement &);
  SemicolonStatement &operator=(const SemicolonStatement &);
  SemicolonStatement();
  ~SemicolonStatement();
  virtual void accept(Visitor *v);
  virtual SemicolonStatement *clone() const;
  void swap(SemicolonStatement &);
};

class SpecStatement : public Statement
{
public:
  SPEC spec_;
  AnnotatedStmt *annotatedstmt_;

  SpecStatement(const SpecStatement &);
  SpecStatement &operator=(const SpecStatement &);
  SpecStatement(SPEC p1, AnnotatedStmt *p2);
  ~SpecStatement();
  virtual void accept(Visitor *v);
  virtual SpecStatement *clone() const;
  void swap(SpecStatement &);
};

class ExprsStatement : public Statement
{
public:
  ListExpression *listexpression_;

  ExprsStatement(const ExprsStatement &);
  ExprsStatement &operator=(const ExprsStatement &);
  ExprsStatement(ListExpression *p1);
  ~ExprsStatement();
  virtual void accept(Visitor *v);
  virtual ExprsStatement *clone() const;
  void swap(ExprsStatement &);
};

class BlockStatement : public Statement
{
public:
  Block *block_;

  BlockStatement(const BlockStatement &);
  BlockStatement &operator=(const BlockStatement &);
  BlockStatement(Block *p1);
  ~BlockStatement();
  virtual void accept(Visitor *v);
  virtual BlockStatement *clone() const;
  void swap(BlockStatement &);
};

class IfStatement : public Statement
{
public:
  ListExpression *listexpression_;
  AnnotatedStmt *annotatedstmt_;
  ElsePart *elsepart_;

  IfStatement(const IfStatement &);
  IfStatement &operator=(const IfStatement &);
  IfStatement(ListExpression *p1, AnnotatedStmt *p2, ElsePart *p3);
  ~IfStatement();
  virtual void accept(Visitor *v);
  virtual IfStatement *clone() const;
  void swap(IfStatement &);
};

class SwitchStatement : public Statement
{
public:
  ListExpression *listexpression_;
  AnnotatedStmt *annotatedstmt_;

  SwitchStatement(const SwitchStatement &);
  SwitchStatement &operator=(const SwitchStatement &);
  SwitchStatement(ListExpression *p1, AnnotatedStmt *p2);
  ~SwitchStatement();
  virtual void accept(Visitor *v);
  virtual SwitchStatement *clone() const;
  void swap(SwitchStatement &);
};

class WhileStatement : public Statement
{
public:
  OptLoopAnnotations *optloopannotations_;
  ListExpression *listexpression_;
  AnnotatedStmt *annotatedstmt_;

  WhileStatement(const WhileStatement &);
  WhileStatement &operator=(const WhileStatement &);
  WhileStatement(OptLoopAnnotations *p1, ListExpression *p2, AnnotatedStmt *p3);
  ~WhileStatement();
  virtual void accept(Visitor *v);
  virtual WhileStatement *clone() const;
  void swap(WhileStatement &);
};

class DoWhileStatement : public Statement
{
public:
  OptLoopAnnotations *optloopannotations_;
  AnnotatedStmt *annotatedstmt_;
  ListExpression *listexpression_;

  DoWhileStatement(const DoWhileStatement &);
  DoWhileStatement &operator=(const DoWhileStatement &);
  DoWhileStatement(OptLoopAnnotations *p1, AnnotatedStmt *p2, ListExpression *p3);
  ~DoWhileStatement();
  virtual void accept(Visitor *v);
  virtual DoWhileStatement *clone() const;
  void swap(DoWhileStatement &);
};

class ForStatement : public Statement
{
public:
  OptLoopAnnotations *optloopannotations_;
  ForClause *forclause_;
  OptExpression *optexpression_1;
  OptExpression *optexpression_2;
  AnnotatedStmt *annotatedstmt_;

  ForStatement(const ForStatement &);
  ForStatement &operator=(const ForStatement &);
  ForStatement(OptLoopAnnotations *p1, ForClause *p2, OptExpression *p3, OptExpression *p4, AnnotatedStmt *p5);
  ~ForStatement();
  virtual void accept(Visitor *v);
  virtual ForStatement *clone() const;
  void swap(ForStatement &);
};

class ColonStatement : public Statement
{
public:
  IdOrTypenameAsId *idortypenameasid_;
  ListAttributeNocv *listattributenocv_;
  AnnotatedStmt *annotatedstmt_;

  ColonStatement(const ColonStatement &);
  ColonStatement &operator=(const ColonStatement &);
  ColonStatement(IdOrTypenameAsId *p1, ListAttributeNocv *p2, AnnotatedStmt *p3);
  ~ColonStatement();
  virtual void accept(Visitor *v);
  virtual ColonStatement *clone() const;
  void swap(ColonStatement &);
};

class CaseStatement : public Statement
{
public:
  Expression *expression_;
  AnnotatedStmt *annotatedstmt_;

  CaseStatement(const CaseStatement &);
  CaseStatement &operator=(const CaseStatement &);
  CaseStatement(Expression *p1, AnnotatedStmt *p2);
  ~CaseStatement();
  virtual void accept(Visitor *v);
  virtual CaseStatement *clone() const;
  void swap(CaseStatement &);
};

class CaseSliceStatement : public Statement
{
public:
  Expression *expression_1;
  Expression *expression_2;
  AnnotatedStmt *annotatedstmt_;

  CaseSliceStatement(const CaseSliceStatement &);
  CaseSliceStatement &operator=(const CaseSliceStatement &);
  CaseSliceStatement(Expression *p1, Expression *p2, AnnotatedStmt *p3);
  ~CaseSliceStatement();
  virtual void accept(Visitor *v);
  virtual CaseSliceStatement *clone() const;
  void swap(CaseSliceStatement &);
};

class DefaultStatement : public Statement
{
public:
  AnnotatedStmt *annotatedstmt_;

  DefaultStatement(const DefaultStatement &);
  DefaultStatement &operator=(const DefaultStatement &);
  DefaultStatement(AnnotatedStmt *p1);
  ~DefaultStatement();
  virtual void accept(Visitor *v);
  virtual DefaultStatement *clone() const;
  void swap(DefaultStatement &);
};

class EmptyReturnStatement : public Statement
{
public:

  EmptyReturnStatement(const EmptyReturnStatement &);
  EmptyReturnStatement &operator=(const EmptyReturnStatement &);
  EmptyReturnStatement();
  ~EmptyReturnStatement();
  virtual void accept(Visitor *v);
  virtual EmptyReturnStatement *clone() const;
  void swap(EmptyReturnStatement &);
};

class ReturnStatement : public Statement
{
public:
  ListExpression *listexpression_;

  ReturnStatement(const ReturnStatement &);
  ReturnStatement &operator=(const ReturnStatement &);
  ReturnStatement(ListExpression *p1);
  ~ReturnStatement();
  virtual void accept(Visitor *v);
  virtual ReturnStatement *clone() const;
  void swap(ReturnStatement &);
};

class BreakStatement : public Statement
{
public:

  BreakStatement(const BreakStatement &);
  BreakStatement &operator=(const BreakStatement &);
  BreakStatement();
  ~BreakStatement();
  virtual void accept(Visitor *v);
  virtual BreakStatement *clone() const;
  void swap(BreakStatement &);
};

class ContinueStatement : public Statement
{
public:

  ContinueStatement(const ContinueStatement &);
  ContinueStatement &operator=(const ContinueStatement &);
  ContinueStatement();
  ~ContinueStatement();
  virtual void accept(Visitor *v);
  virtual ContinueStatement *clone() const;
  void swap(ContinueStatement &);
};

class GotoStatement : public Statement
{
public:
  IdOrTypenameAsId *idortypenameasid_;

  GotoStatement(const GotoStatement &);
  GotoStatement &operator=(const GotoStatement &);
  GotoStatement(IdOrTypenameAsId *p1);
  ~GotoStatement();
  virtual void accept(Visitor *v);
  virtual GotoStatement *clone() const;
  void swap(GotoStatement &);
};

class StarGotoStatement : public Statement
{
public:
  ListExpression *listexpression_;

  StarGotoStatement(const StarGotoStatement &);
  StarGotoStatement &operator=(const StarGotoStatement &);
  StarGotoStatement(ListExpression *p1);
  ~StarGotoStatement();
  virtual void accept(Visitor *v);
  virtual StarGotoStatement *clone() const;
  void swap(StarGotoStatement &);
};

class AsmGotoAsmattrStatement : public Statement
{
public:
  ASM asm_;
  ListAsmattr *listasmattr_;
  ListOneString *listonestring_;
  Asmoutputs *asmoutputs_;

  AsmGotoAsmattrStatement(const AsmGotoAsmattrStatement &);
  AsmGotoAsmattrStatement &operator=(const AsmGotoAsmattrStatement &);
  AsmGotoAsmattrStatement(ASM p1, ListAsmattr *p2, ListOneString *p3, Asmoutputs *p4);
  ~AsmGotoAsmattrStatement();
  virtual void accept(Visitor *v);
  virtual AsmGotoAsmattrStatement *clone() const;
  void swap(AsmGotoAsmattrStatement &);
};

class AsmAsmattrStatement : public Statement
{
public:
  ASM asm_;
  ListAsmattr *listasmattr_;
  ListOneString *listonestring_;
  Asmoutputs *asmoutputs_;

  AsmAsmattrStatement(const AsmAsmattrStatement &);
  AsmAsmattrStatement &operator=(const AsmAsmattrStatement &);
  AsmAsmattrStatement(ASM p1, ListAsmattr *p2, ListOneString *p3, Asmoutputs *p4);
  ~AsmAsmattrStatement();
  virtual void accept(Visitor *v);
  virtual AsmAsmattrStatement *clone() const;
  void swap(AsmAsmattrStatement &);
};

class AsmStatement : public Statement
{
public:
  ASM asm_;

  AsmStatement(const AsmStatement &);
  AsmStatement &operator=(const AsmStatement &);
  AsmStatement(ASM p1);
  ~AsmStatement();
  virtual void accept(Visitor *v);
  virtual AsmStatement *clone() const;
  void swap(AsmStatement &);
};

class TryExceptStatement : public Statement
{
public:
  Block *block_1;
  ListExpression *listexpression_;
  Block *block_2;

  TryExceptStatement(const TryExceptStatement &);
  TryExceptStatement &operator=(const TryExceptStatement &);
  TryExceptStatement(Block *p1, ListExpression *p2, Block *p3);
  ~TryExceptStatement();
  virtual void accept(Visitor *v);
  virtual TryExceptStatement *clone() const;
  void swap(TryExceptStatement &);
};

class TryFinallyStatement : public Statement
{
public:
  Block *block_1;
  Block *block_2;

  TryFinallyStatement(const TryFinallyStatement &);
  TryFinallyStatement &operator=(const TryFinallyStatement &);
  TryFinallyStatement(Block *p1, Block *p2);
  ~TryFinallyStatement();
  virtual void accept(Visitor *v);
  virtual TryFinallyStatement *clone() const;
  void swap(TryFinallyStatement &);
};

class NoLoopAnnotations : public OptLoopAnnotations
{
public:

  NoLoopAnnotations(const NoLoopAnnotations &);
  NoLoopAnnotations &operator=(const NoLoopAnnotations &);
  NoLoopAnnotations();
  ~NoLoopAnnotations();
  virtual void accept(Visitor *v);
  virtual NoLoopAnnotations *clone() const;
  void swap(NoLoopAnnotations &);
};

class SomeLoopAnnotations : public OptLoopAnnotations
{
public:
  LOOP_ANNOT loop_annot_;

  SomeLoopAnnotations(const SomeLoopAnnotations &);
  SomeLoopAnnotations &operator=(const SomeLoopAnnotations &);
  SomeLoopAnnotations(LOOP_ANNOT p1);
  ~SomeLoopAnnotations();
  virtual void accept(Visitor *v);
  virtual SomeLoopAnnotations *clone() const;
  void swap(SomeLoopAnnotations &);
};

class ForClauseExpression : public ForClause
{
public:
  OptExpression *optexpression_;

  ForClauseExpression(const ForClauseExpression &);
  ForClauseExpression &operator=(const ForClauseExpression &);
  ForClauseExpression(OptExpression *p1);
  ~ForClauseExpression();
  virtual void accept(Visitor *v);
  virtual ForClauseExpression *clone() const;
  void swap(ForClauseExpression &);
};

class ForClauseDeclaration : public ForClause
{
public:
  Declaration *declaration_;

  ForClauseDeclaration(const ForClauseDeclaration &);
  ForClauseDeclaration &operator=(const ForClauseDeclaration &);
  ForClauseDeclaration(Declaration *p1);
  ~ForClauseDeclaration();
  virtual void accept(Visitor *v);
  virtual ForClauseDeclaration *clone() const;
  void swap(ForClauseDeclaration &);
};

class NoGhostParameter : public GhostParameterOpt
{
public:

  NoGhostParameter(const NoGhostParameter &);
  NoGhostParameter &operator=(const NoGhostParameter &);
  NoGhostParameter();
  ~NoGhostParameter();
  virtual void accept(Visitor *v);
  virtual NoGhostParameter *clone() const;
  void swap(NoGhostParameter &);
};

class SomeGhostParameter : public GhostParameterOpt
{
public:
  RestParList *restparlist_;
  RGHOST rghost_;

  SomeGhostParameter(const SomeGhostParameter &);
  SomeGhostParameter &operator=(const SomeGhostParameter &);
  SomeGhostParameter(RestParList *p1, RGHOST p2);
  ~SomeGhostParameter();
  virtual void accept(Visitor *v);
  virtual SomeGhostParameter *clone() const;
  void swap(SomeGhostParameter &);
};

class DeclSpecInitDecl : public Declaration
{
public:
  DeclSpecList *declspeclist_;
  DeclAndInitDeclAttrList *declandinitdeclattrlist_;

  DeclSpecInitDecl(const DeclSpecInitDecl &);
  DeclSpecInitDecl &operator=(const DeclSpecInitDecl &);
  DeclSpecInitDecl(DeclSpecList *p1, DeclAndInitDeclAttrList *p2);
  ~DeclSpecInitDecl();
  virtual void accept(Visitor *v);
  virtual DeclSpecInitDecl *clone() const;
  void swap(DeclSpecInitDecl &);
};

class DeclSpec : public Declaration
{
public:
  DeclSpecList *declspeclist_;

  DeclSpec(const DeclSpec &);
  DeclSpec &operator=(const DeclSpec &);
  DeclSpec(DeclSpecList *p1);
  ~DeclSpec();
  virtual void accept(Visitor *v);
  virtual DeclSpec *clone() const;
  void swap(DeclSpec &);
};

class SpecDeclSpecInitDecl : public Declaration
{
public:
  SPEC spec_;
  DeclSpecList *declspeclist_;
  DeclAndInitDeclAttrList *declandinitdeclattrlist_;

  SpecDeclSpecInitDecl(const SpecDeclSpecInitDecl &);
  SpecDeclSpecInitDecl &operator=(const SpecDeclSpecInitDecl &);
  SpecDeclSpecInitDecl(SPEC p1, DeclSpecList *p2, DeclAndInitDeclAttrList *p3);
  ~SpecDeclSpecInitDecl();
  virtual void accept(Visitor *v);
  virtual SpecDeclSpecInitDecl *clone() const;
  void swap(SpecDeclSpecInitDecl &);
};

class SpecDeclSpec : public Declaration
{
public:
  SPEC spec_;
  DeclSpecList *declspeclist_;

  SpecDeclSpec(const SpecDeclSpec &);
  SpecDeclSpec &operator=(const SpecDeclSpec &);
  SpecDeclSpec(SPEC p1, DeclSpecList *p2);
  ~SpecDeclSpec();
  virtual void accept(Visitor *v);
  virtual SpecDeclSpec *clone() const;
  void swap(SpecDeclSpec &);
};

class StaticAssertDecl : public Declaration
{
public:
  Expression *expression_;

  StaticAssertDecl(const StaticAssertDecl &);
  StaticAssertDecl &operator=(const StaticAssertDecl &);
  StaticAssertDecl(Expression *p1);
  ~StaticAssertDecl();
  virtual void accept(Visitor *v);
  virtual StaticAssertDecl *clone() const;
  void swap(StaticAssertDecl &);
};

class StaticAssertDeclStringConst : public Declaration
{
public:
  Expression *expression_;
  StringConstant *stringconstant_;

  StaticAssertDeclStringConst(const StaticAssertDeclStringConst &);
  StaticAssertDeclStringConst &operator=(const StaticAssertDeclStringConst &);
  StaticAssertDeclStringConst(Expression *p1, StringConstant *p2);
  ~StaticAssertDeclStringConst();
  virtual void accept(Visitor *v);
  virtual StaticAssertDeclStringConst *clone() const;
  void swap(StaticAssertDeclStringConst &);
};

class ColonGenericAssociation : public GenericAssociation
{
public:
  TypeName *typename_;
  AssignExpr *assignexpr_;

  ColonGenericAssociation(const ColonGenericAssociation &);
  ColonGenericAssociation &operator=(const ColonGenericAssociation &);
  ColonGenericAssociation(TypeName *p1, AssignExpr *p2);
  ~ColonGenericAssociation();
  virtual void accept(Visitor *v);
  virtual ColonGenericAssociation *clone() const;
  void swap(ColonGenericAssociation &);
};

class DefaultGenericAssociation : public GenericAssociation
{
public:
  AssignExpr *assignexpr_;

  DefaultGenericAssociation(const DefaultGenericAssociation &);
  DefaultGenericAssociation &operator=(const DefaultGenericAssociation &);
  DefaultGenericAssociation(AssignExpr *p1);
  ~DefaultGenericAssociation();
  virtual void accept(Visitor *v);
  virtual DefaultGenericAssociation *clone() const;
  void swap(DefaultGenericAssociation &);
};

class InitDeclaration : public DeclAndInitDeclAttrList
{
public:
  InitDeclarator *initdeclarator_;

  InitDeclaration(const InitDeclaration &);
  InitDeclaration &operator=(const InitDeclaration &);
  InitDeclaration(InitDeclarator *p1);
  ~InitDeclaration();
  virtual void accept(Visitor *v);
  virtual InitDeclaration *clone() const;
  void swap(InitDeclaration &);
};

class InitDeclarationWithAttr : public DeclAndInitDeclAttrList
{
public:
  InitDeclarator *initdeclarator_;
  ListInitDeclaratorAttr *listinitdeclaratorattr_;

  InitDeclarationWithAttr(const InitDeclarationWithAttr &);
  InitDeclarationWithAttr &operator=(const InitDeclarationWithAttr &);
  InitDeclarationWithAttr(InitDeclarator *p1, ListInitDeclaratorAttr *p2);
  ~InitDeclarationWithAttr();
  virtual void accept(Visitor *v);
  virtual InitDeclarationWithAttr *clone() const;
  void swap(InitDeclarationWithAttr &);
};

class InitDeclaratorAttribute : public InitDeclaratorAttr
{
public:
  ListAttributeNocv *listattributenocv_;
  InitDeclarator *initdeclarator_;

  InitDeclaratorAttribute(const InitDeclaratorAttribute &);
  InitDeclaratorAttribute &operator=(const InitDeclaratorAttribute &);
  InitDeclaratorAttribute(ListAttributeNocv *p1, InitDeclarator *p2);
  ~InitDeclaratorAttribute();
  virtual void accept(Visitor *v);
  virtual InitDeclaratorAttribute *clone() const;
  void swap(InitDeclaratorAttribute &);
};

class SimpleInitDeclarator : public InitDeclarator
{
public:
  Declarator *declarator_;

  SimpleInitDeclarator(const SimpleInitDeclarator &);
  SimpleInitDeclarator &operator=(const SimpleInitDeclarator &);
  SimpleInitDeclarator(Declarator *p1);
  ~SimpleInitDeclarator();
  virtual void accept(Visitor *v);
  virtual SimpleInitDeclarator *clone() const;
  void swap(SimpleInitDeclarator &);
};

class InitDeclaratorExpression : public InitDeclarator
{
public:
  Declarator *declarator_;
  InitExpression *initexpression_;

  InitDeclaratorExpression(const InitDeclaratorExpression &);
  InitDeclaratorExpression &operator=(const InitDeclaratorExpression &);
  InitDeclaratorExpression(Declarator *p1, InitExpression *p2);
  ~InitDeclaratorExpression();
  virtual void accept(Visitor *v);
  virtual InitDeclaratorExpression *clone() const;
  void swap(InitDeclaratorExpression &);
};

class TypedefKeyWord : public DeclSpecWOType
{
public:

  TypedefKeyWord(const TypedefKeyWord &);
  TypedefKeyWord &operator=(const TypedefKeyWord &);
  TypedefKeyWord();
  ~TypedefKeyWord();
  virtual void accept(Visitor *v);
  virtual TypedefKeyWord *clone() const;
  void swap(TypedefKeyWord &);
};

class ExternKeyWord : public DeclSpecWOType
{
public:

  ExternKeyWord(const ExternKeyWord &);
  ExternKeyWord &operator=(const ExternKeyWord &);
  ExternKeyWord();
  ~ExternKeyWord();
  virtual void accept(Visitor *v);
  virtual ExternKeyWord *clone() const;
  void swap(ExternKeyWord &);
};

class StaticKeyWord : public DeclSpecWOType
{
public:

  StaticKeyWord(const StaticKeyWord &);
  StaticKeyWord &operator=(const StaticKeyWord &);
  StaticKeyWord();
  ~StaticKeyWord();
  virtual void accept(Visitor *v);
  virtual StaticKeyWord *clone() const;
  void swap(StaticKeyWord &);
};

class AutoKeyWord : public DeclSpecWOType
{
public:

  AutoKeyWord(const AutoKeyWord &);
  AutoKeyWord &operator=(const AutoKeyWord &);
  AutoKeyWord();
  ~AutoKeyWord();
  virtual void accept(Visitor *v);
  virtual AutoKeyWord *clone() const;
  void swap(AutoKeyWord &);
};

class RegisterKeyWord : public DeclSpecWOType
{
public:

  RegisterKeyWord(const RegisterKeyWord &);
  RegisterKeyWord &operator=(const RegisterKeyWord &);
  RegisterKeyWord();
  ~RegisterKeyWord();
  virtual void accept(Visitor *v);
  virtual RegisterKeyWord *clone() const;
  void swap(RegisterKeyWord &);
};

class InlineKeyWord : public DeclSpecWOType
{
public:
  INLINE inline_;

  InlineKeyWord(const InlineKeyWord &);
  InlineKeyWord &operator=(const InlineKeyWord &);
  InlineKeyWord(INLINE p1);
  ~InlineKeyWord();
  virtual void accept(Visitor *v);
  virtual InlineKeyWord *clone() const;
  void swap(InlineKeyWord &);
};

class NoReturnKeyWord : public DeclSpecWOType
{
public:

  NoReturnKeyWord(const NoReturnKeyWord &);
  NoReturnKeyWord &operator=(const NoReturnKeyWord &);
  NoReturnKeyWord();
  ~NoReturnKeyWord();
  virtual void accept(Visitor *v);
  virtual NoReturnKeyWord *clone() const;
  void swap(NoReturnKeyWord &);
};

class DeclSpecCVSpec : public DeclSpecWOType
{
public:
  CVSpec *cvspec_;

  DeclSpecCVSpec(const DeclSpecCVSpec &);
  DeclSpecCVSpec &operator=(const DeclSpecCVSpec &);
  DeclSpecCVSpec(CVSpec *p1);
  ~DeclSpecCVSpec();
  virtual void accept(Visitor *v);
  virtual DeclSpecCVSpec *clone() const;
  void swap(DeclSpecCVSpec &);
};

class DeclSpecAtribNOCV : public DeclSpecWOType
{
public:
  AttributeNocv *attributenocv_;

  DeclSpecAtribNOCV(const DeclSpecAtribNOCV &);
  DeclSpecAtribNOCV &operator=(const DeclSpecAtribNOCV &);
  DeclSpecAtribNOCV(AttributeNocv *p1);
  ~DeclSpecAtribNOCV();
  virtual void accept(Visitor *v);
  virtual DeclSpecAtribNOCV *clone() const;
  void swap(DeclSpecAtribNOCV &);
};

class DeclSpecWoType : public DeclSpecList
{
public:
  DeclSpecWOType *declspecwotype_;

  DeclSpecWoType(const DeclSpecWoType &);
  DeclSpecWoType &operator=(const DeclSpecWoType &);
  DeclSpecWoType(DeclSpecWOType *p1);
  ~DeclSpecWoType();
  virtual void accept(Visitor *v);
  virtual DeclSpecWoType *clone() const;
  void swap(DeclSpecWoType &);
};

class DeclSpecWoTypeNext : public DeclSpecList
{
public:
  DeclSpecWOType *declspecwotype_;
  DeclSpecList *declspeclist_;

  DeclSpecWoTypeNext(const DeclSpecWoTypeNext &);
  DeclSpecWoTypeNext &operator=(const DeclSpecWoTypeNext &);
  DeclSpecWoTypeNext(DeclSpecWOType *p1, DeclSpecList *p2);
  ~DeclSpecWoTypeNext();
  virtual void accept(Visitor *v);
  virtual DeclSpecWoTypeNext *clone() const;
  void swap(DeclSpecWoTypeNext &);
};

class DeclSpecTypeSpec : public DeclSpecList
{
public:
  TypeSpec *typespec_;

  DeclSpecTypeSpec(const DeclSpecTypeSpec &);
  DeclSpecTypeSpec &operator=(const DeclSpecTypeSpec &);
  DeclSpecTypeSpec(TypeSpec *p1);
  ~DeclSpecTypeSpec();
  virtual void accept(Visitor *v);
  virtual DeclSpecTypeSpec *clone() const;
  void swap(DeclSpecTypeSpec &);
};

class DeclSpecTypeSpecNext : public DeclSpecList
{
public:
  TypeSpec *typespec_;
  DeclSpecListNoNamed *declspeclistnonamed_;

  DeclSpecTypeSpecNext(const DeclSpecTypeSpecNext &);
  DeclSpecTypeSpecNext &operator=(const DeclSpecTypeSpecNext &);
  DeclSpecTypeSpecNext(TypeSpec *p1, DeclSpecListNoNamed *p2);
  ~DeclSpecTypeSpecNext();
  virtual void accept(Visitor *v);
  virtual DeclSpecTypeSpecNext *clone() const;
  void swap(DeclSpecTypeSpecNext &);
};

class DeclSpecNoNamedWOType : public DeclSpecListNoNamed
{
public:
  DeclSpecWOType *declspecwotype_;

  DeclSpecNoNamedWOType(const DeclSpecNoNamedWOType &);
  DeclSpecNoNamedWOType &operator=(const DeclSpecNoNamedWOType &);
  DeclSpecNoNamedWOType(DeclSpecWOType *p1);
  ~DeclSpecNoNamedWOType();
  virtual void accept(Visitor *v);
  virtual DeclSpecNoNamedWOType *clone() const;
  void swap(DeclSpecNoNamedWOType &);
};

class DeclSpecNoNamedWOTypeNext : public DeclSpecListNoNamed
{
public:
  DeclSpecWOType *declspecwotype_;
  DeclSpecListNoNamed *declspeclistnonamed_;

  DeclSpecNoNamedWOTypeNext(const DeclSpecNoNamedWOTypeNext &);
  DeclSpecNoNamedWOTypeNext &operator=(const DeclSpecNoNamedWOTypeNext &);
  DeclSpecNoNamedWOTypeNext(DeclSpecWOType *p1, DeclSpecListNoNamed *p2);
  ~DeclSpecNoNamedWOTypeNext();
  virtual void accept(Visitor *v);
  virtual DeclSpecNoNamedWOTypeNext *clone() const;
  void swap(DeclSpecNoNamedWOTypeNext &);
};

class DeclSpecNoNamedTypeSpec : public DeclSpecListNoNamed
{
public:
  TypeSpec *typespec_;

  DeclSpecNoNamedTypeSpec(const DeclSpecNoNamedTypeSpec &);
  DeclSpecNoNamedTypeSpec &operator=(const DeclSpecNoNamedTypeSpec &);
  DeclSpecNoNamedTypeSpec(TypeSpec *p1);
  ~DeclSpecNoNamedTypeSpec();
  virtual void accept(Visitor *v);
  virtual DeclSpecNoNamedTypeSpec *clone() const;
  void swap(DeclSpecNoNamedTypeSpec &);
};

class DeclSpecNoNamedTypeSpecNext : public DeclSpecListNoNamed
{
public:
  TypeSpec *typespec_;
  DeclSpecListNoNamed *declspeclistnonamed_;

  DeclSpecNoNamedTypeSpecNext(const DeclSpecNoNamedTypeSpecNext &);
  DeclSpecNoNamedTypeSpecNext &operator=(const DeclSpecNoNamedTypeSpecNext &);
  DeclSpecNoNamedTypeSpecNext(TypeSpec *p1, DeclSpecListNoNamed *p2);
  ~DeclSpecNoNamedTypeSpecNext();
  virtual void accept(Visitor *v);
  virtual DeclSpecNoNamedTypeSpecNext *clone() const;
  void swap(DeclSpecNoNamedTypeSpecNext &);
};

class VoidKeyWord : public TypeSpec
{
public:

  VoidKeyWord(const VoidKeyWord &);
  VoidKeyWord &operator=(const VoidKeyWord &);
  VoidKeyWord();
  ~VoidKeyWord();
  virtual void accept(Visitor *v);
  virtual VoidKeyWord *clone() const;
  void swap(VoidKeyWord &);
};

class CharKeyWord : public TypeSpec
{
public:

  CharKeyWord(const CharKeyWord &);
  CharKeyWord &operator=(const CharKeyWord &);
  CharKeyWord();
  ~CharKeyWord();
  virtual void accept(Visitor *v);
  virtual CharKeyWord *clone() const;
  void swap(CharKeyWord &);
};

class BoolKeyWord : public TypeSpec
{
public:

  BoolKeyWord(const BoolKeyWord &);
  BoolKeyWord &operator=(const BoolKeyWord &);
  BoolKeyWord();
  ~BoolKeyWord();
  virtual void accept(Visitor *v);
  virtual BoolKeyWord *clone() const;
  void swap(BoolKeyWord &);
};

class ShortKeyWord : public TypeSpec
{
public:

  ShortKeyWord(const ShortKeyWord &);
  ShortKeyWord &operator=(const ShortKeyWord &);
  ShortKeyWord();
  ~ShortKeyWord();
  virtual void accept(Visitor *v);
  virtual ShortKeyWord *clone() const;
  void swap(ShortKeyWord &);
};

class IntKeyWord : public TypeSpec
{
public:
  INT int_;

  IntKeyWord(const IntKeyWord &);
  IntKeyWord &operator=(const IntKeyWord &);
  IntKeyWord(INT p1);
  ~IntKeyWord();
  virtual void accept(Visitor *v);
  virtual IntKeyWord *clone() const;
  void swap(IntKeyWord &);
};

class LongKeyWord : public TypeSpec
{
public:

  LongKeyWord(const LongKeyWord &);
  LongKeyWord &operator=(const LongKeyWord &);
  LongKeyWord();
  ~LongKeyWord();
  virtual void accept(Visitor *v);
  virtual LongKeyWord *clone() const;
  void swap(LongKeyWord &);
};

class Int64KeyWord : public TypeSpec
{
public:

  Int64KeyWord(const Int64KeyWord &);
  Int64KeyWord &operator=(const Int64KeyWord &);
  Int64KeyWord();
  ~Int64KeyWord();
  virtual void accept(Visitor *v);
  virtual Int64KeyWord *clone() const;
  void swap(Int64KeyWord &);
};

class FloatKeyWord : public TypeSpec
{
public:

  FloatKeyWord(const FloatKeyWord &);
  FloatKeyWord &operator=(const FloatKeyWord &);
  FloatKeyWord();
  ~FloatKeyWord();
  virtual void accept(Visitor *v);
  virtual FloatKeyWord *clone() const;
  void swap(FloatKeyWord &);
};

class DoubleKeyWord : public TypeSpec
{
public:

  DoubleKeyWord(const DoubleKeyWord &);
  DoubleKeyWord &operator=(const DoubleKeyWord &);
  DoubleKeyWord();
  ~DoubleKeyWord();
  virtual void accept(Visitor *v);
  virtual DoubleKeyWord *clone() const;
  void swap(DoubleKeyWord &);
};

class SignedKeyWord : public TypeSpec
{
public:
  SIGNED signed_;

  SignedKeyWord(const SignedKeyWord &);
  SignedKeyWord &operator=(const SignedKeyWord &);
  SignedKeyWord(SIGNED p1);
  ~SignedKeyWord();
  virtual void accept(Visitor *v);
  virtual SignedKeyWord *clone() const;
  void swap(SignedKeyWord &);
};

class UnsignedKeyWord : public TypeSpec
{
public:

  UnsignedKeyWord(const UnsignedKeyWord &);
  UnsignedKeyWord &operator=(const UnsignedKeyWord &);
  UnsignedKeyWord();
  ~UnsignedKeyWord();
  virtual void accept(Visitor *v);
  virtual UnsignedKeyWord *clone() const;
  void swap(UnsignedKeyWord &);
};

class StructId : public TypeSpec
{
public:
  IdOrTypename *idortypename_;

  StructId(const StructId &);
  StructId &operator=(const StructId &);
  StructId(IdOrTypename *p1);
  ~StructId();
  virtual void accept(Visitor *v);
  virtual StructId *clone() const;
  void swap(StructId &);
};

class StructJustAttr : public TypeSpec
{
public:
  ListJustAttribute *listjustattribute_;
  IdOrTypename *idortypename_;

  StructJustAttr(const StructJustAttr &);
  StructJustAttr &operator=(const StructJustAttr &);
  StructJustAttr(ListJustAttribute *p1, IdOrTypename *p2);
  ~StructJustAttr();
  virtual void accept(Visitor *v);
  virtual StructJustAttr *clone() const;
  void swap(StructJustAttr &);
};

class StructIdBraces : public TypeSpec
{
public:
  IdOrTypename *idortypename_;
  LBRACE lbrace_;
  StructDeclList *structdecllist_;
  RBRACE rbrace_;

  StructIdBraces(const StructIdBraces &);
  StructIdBraces &operator=(const StructIdBraces &);
  StructIdBraces(IdOrTypename *p1, LBRACE p2, StructDeclList *p3, RBRACE p4);
  ~StructIdBraces();
  virtual void accept(Visitor *v);
  virtual StructIdBraces *clone() const;
  void swap(StructIdBraces &);
};

class StructBraces : public TypeSpec
{
public:
  LBRACE lbrace_;
  StructDeclList *structdecllist_;
  RBRACE rbrace_;

  StructBraces(const StructBraces &);
  StructBraces &operator=(const StructBraces &);
  StructBraces(LBRACE p1, StructDeclList *p2, RBRACE p3);
  ~StructBraces();
  virtual void accept(Visitor *v);
  virtual StructBraces *clone() const;
  void swap(StructBraces &);
};

class StructJustAttrIdBraces : public TypeSpec
{
public:
  ListJustAttribute *listjustattribute_;
  IdOrTypename *idortypename_;
  LBRACE lbrace_;
  StructDeclList *structdecllist_;
  RBRACE rbrace_;

  StructJustAttrIdBraces(const StructJustAttrIdBraces &);
  StructJustAttrIdBraces &operator=(const StructJustAttrIdBraces &);
  StructJustAttrIdBraces(ListJustAttribute *p1, IdOrTypename *p2, LBRACE p3, StructDeclList *p4, RBRACE p5);
  ~StructJustAttrIdBraces();
  virtual void accept(Visitor *v);
  virtual StructJustAttrIdBraces *clone() const;
  void swap(StructJustAttrIdBraces &);
};

class StructJustAttrBraces : public TypeSpec
{
public:
  ListJustAttribute *listjustattribute_;
  LBRACE lbrace_;
  StructDeclList *structdecllist_;
  RBRACE rbrace_;

  StructJustAttrBraces(const StructJustAttrBraces &);
  StructJustAttrBraces &operator=(const StructJustAttrBraces &);
  StructJustAttrBraces(ListJustAttribute *p1, LBRACE p2, StructDeclList *p3, RBRACE p4);
  ~StructJustAttrBraces();
  virtual void accept(Visitor *v);
  virtual StructJustAttrBraces *clone() const;
  void swap(StructJustAttrBraces &);
};

class UnionId : public TypeSpec
{
public:
  IdOrTypename *idortypename_;

  UnionId(const UnionId &);
  UnionId &operator=(const UnionId &);
  UnionId(IdOrTypename *p1);
  ~UnionId();
  virtual void accept(Visitor *v);
  virtual UnionId *clone() const;
  void swap(UnionId &);
};

class UnionIdBraces : public TypeSpec
{
public:
  IdOrTypename *idortypename_;
  LBRACE lbrace_;
  StructDeclList *structdecllist_;
  RBRACE rbrace_;

  UnionIdBraces(const UnionIdBraces &);
  UnionIdBraces &operator=(const UnionIdBraces &);
  UnionIdBraces(IdOrTypename *p1, LBRACE p2, StructDeclList *p3, RBRACE p4);
  ~UnionIdBraces();
  virtual void accept(Visitor *v);
  virtual UnionIdBraces *clone() const;
  void swap(UnionIdBraces &);
};

class UnionBraces : public TypeSpec
{
public:
  LBRACE lbrace_;
  StructDeclList *structdecllist_;
  RBRACE rbrace_;

  UnionBraces(const UnionBraces &);
  UnionBraces &operator=(const UnionBraces &);
  UnionBraces(LBRACE p1, StructDeclList *p2, RBRACE p3);
  ~UnionBraces();
  virtual void accept(Visitor *v);
  virtual UnionBraces *clone() const;
  void swap(UnionBraces &);
};

class UnionJustAttrIdBraces : public TypeSpec
{
public:
  ListJustAttribute *listjustattribute_;
  IdOrTypename *idortypename_;
  LBRACE lbrace_;
  StructDeclList *structdecllist_;
  RBRACE rbrace_;

  UnionJustAttrIdBraces(const UnionJustAttrIdBraces &);
  UnionJustAttrIdBraces &operator=(const UnionJustAttrIdBraces &);
  UnionJustAttrIdBraces(ListJustAttribute *p1, IdOrTypename *p2, LBRACE p3, StructDeclList *p4, RBRACE p5);
  ~UnionJustAttrIdBraces();
  virtual void accept(Visitor *v);
  virtual UnionJustAttrIdBraces *clone() const;
  void swap(UnionJustAttrIdBraces &);
};

class UnionJustAttrBraces : public TypeSpec
{
public:
  ListJustAttribute *listjustattribute_;
  LBRACE lbrace_;
  StructDeclList *structdecllist_;
  RBRACE rbrace_;

  UnionJustAttrBraces(const UnionJustAttrBraces &);
  UnionJustAttrBraces &operator=(const UnionJustAttrBraces &);
  UnionJustAttrBraces(ListJustAttribute *p1, LBRACE p2, StructDeclList *p3, RBRACE p4);
  ~UnionJustAttrBraces();
  virtual void accept(Visitor *v);
  virtual UnionJustAttrBraces *clone() const;
  void swap(UnionJustAttrBraces &);
};

class EnumId : public TypeSpec
{
public:
  IdOrTypename *idortypename_;

  EnumId(const EnumId &);
  EnumId &operator=(const EnumId &);
  EnumId(IdOrTypename *p1);
  ~EnumId();
  virtual void accept(Visitor *v);
  virtual EnumId *clone() const;
  void swap(EnumId &);
};

class EnumIdBraces : public TypeSpec
{
public:
  IdOrTypename *idortypename_;
  LBRACE lbrace_;
  ListEnumerator *listenumerator_;
  MaybeComma *maybecomma_;
  RBRACE rbrace_;

  EnumIdBraces(const EnumIdBraces &);
  EnumIdBraces &operator=(const EnumIdBraces &);
  EnumIdBraces(IdOrTypename *p1, LBRACE p2, ListEnumerator *p3, MaybeComma *p4, RBRACE p5);
  ~EnumIdBraces();
  virtual void accept(Visitor *v);
  virtual EnumIdBraces *clone() const;
  void swap(EnumIdBraces &);
};

class EnumBraces : public TypeSpec
{
public:
  LBRACE lbrace_;
  ListEnumerator *listenumerator_;
  MaybeComma *maybecomma_;
  RBRACE rbrace_;

  EnumBraces(const EnumBraces &);
  EnumBraces &operator=(const EnumBraces &);
  EnumBraces(LBRACE p1, ListEnumerator *p2, MaybeComma *p3, RBRACE p4);
  ~EnumBraces();
  virtual void accept(Visitor *v);
  virtual EnumBraces *clone() const;
  void swap(EnumBraces &);
};

class EnumJustAttrIdBraces : public TypeSpec
{
public:
  ListJustAttribute *listjustattribute_;
  IdOrTypename *idortypename_;
  LBRACE lbrace_;
  ListEnumerator *listenumerator_;
  MaybeComma *maybecomma_;
  RBRACE rbrace_;

  EnumJustAttrIdBraces(const EnumJustAttrIdBraces &);
  EnumJustAttrIdBraces &operator=(const EnumJustAttrIdBraces &);
  EnumJustAttrIdBraces(ListJustAttribute *p1, IdOrTypename *p2, LBRACE p3, ListEnumerator *p4, MaybeComma *p5, RBRACE p6);
  ~EnumJustAttrIdBraces();
  virtual void accept(Visitor *v);
  virtual EnumJustAttrIdBraces *clone() const;
  void swap(EnumJustAttrIdBraces &);
};

class EnumJustAttrBraces : public TypeSpec
{
public:
  ListJustAttribute *listjustattribute_;
  LBRACE lbrace_;
  ListEnumerator *listenumerator_;
  MaybeComma *maybecomma_;
  RBRACE rbrace_;

  EnumJustAttrBraces(const EnumJustAttrBraces &);
  EnumJustAttrBraces &operator=(const EnumJustAttrBraces &);
  EnumJustAttrBraces(ListJustAttribute *p1, LBRACE p2, ListEnumerator *p3, MaybeComma *p4, RBRACE p5);
  ~EnumJustAttrBraces();
  virtual void accept(Visitor *v);
  virtual EnumJustAttrBraces *clone() const;
  void swap(EnumJustAttrBraces &);
};

class NamedTypeTypeSpec : public TypeSpec
{
public:
  NAMEDTYPE namedtype_;

  NamedTypeTypeSpec(const NamedTypeTypeSpec &);
  NamedTypeTypeSpec &operator=(const NamedTypeTypeSpec &);
  NamedTypeTypeSpec(NAMEDTYPE p1);
  ~NamedTypeTypeSpec();
  virtual void accept(Visitor *v);
  virtual NamedTypeTypeSpec *clone() const;
  void swap(NamedTypeTypeSpec &);
};

class TypeOfExpression : public TypeSpec
{
public:
  TYPEOF typeof_;
  Expression *expression_;

  TypeOfExpression(const TypeOfExpression &);
  TypeOfExpression &operator=(const TypeOfExpression &);
  TypeOfExpression(TYPEOF p1, Expression *p2);
  ~TypeOfExpression();
  virtual void accept(Visitor *v);
  virtual TypeOfExpression *clone() const;
  void swap(TypeOfExpression &);
};

class TypeOfTypeName : public TypeSpec
{
public:
  TYPEOF typeof_;
  TypeName *typename_;

  TypeOfTypeName(const TypeOfTypeName &);
  TypeOfTypeName &operator=(const TypeOfTypeName &);
  TypeOfTypeName(TYPEOF p1, TypeName *p2);
  ~TypeOfTypeName();
  virtual void accept(Visitor *v);
  virtual TypeOfTypeName *clone() const;
  void swap(TypeOfTypeName &);
};

class EmptyStructDecl : public StructDeclList
{
public:

  EmptyStructDecl(const EmptyStructDecl &);
  EmptyStructDecl &operator=(const EmptyStructDecl &);
  EmptyStructDecl();
  ~EmptyStructDecl();
  virtual void accept(Visitor *v);
  virtual EmptyStructDecl *clone() const;
  void swap(EmptyStructDecl &);
};

class DeclSpecStructDecl : public StructDeclList
{
public:
  DeclSpecList *declspeclist_;
  StructDeclList *structdecllist_;

  DeclSpecStructDecl(const DeclSpecStructDecl &);
  DeclSpecStructDecl &operator=(const DeclSpecStructDecl &);
  DeclSpecStructDecl(DeclSpecList *p1, StructDeclList *p2);
  ~DeclSpecStructDecl();
  virtual void accept(Visitor *v);
  virtual DeclSpecStructDecl *clone() const;
  void swap(DeclSpecStructDecl &);
};

class SemicolonStructDecl : public StructDeclList
{
public:
  StructDeclList *structdecllist_;

  SemicolonStructDecl(const SemicolonStructDecl &);
  SemicolonStructDecl &operator=(const SemicolonStructDecl &);
  SemicolonStructDecl(StructDeclList *p1);
  ~SemicolonStructDecl();
  virtual void accept(Visitor *v);
  virtual SemicolonStructDecl *clone() const;
  void swap(SemicolonStructDecl &);
};

class SpecFieldDeclStructDecl : public StructDeclList
{
public:
  DeclSpecList *declspeclist_;
  ListFieldDecl *listfielddecl_;
  StructDeclList *structdecllist_;

  SpecFieldDeclStructDecl(const SpecFieldDeclStructDecl &);
  SpecFieldDeclStructDecl &operator=(const SpecFieldDeclStructDecl &);
  SpecFieldDeclStructDecl(DeclSpecList *p1, ListFieldDecl *p2, StructDeclList *p3);
  ~SpecFieldDeclStructDecl();
  virtual void accept(Visitor *v);
  virtual SpecFieldDeclStructDecl *clone() const;
  void swap(SpecFieldDeclStructDecl &);
};

class PragmaStructDecl : public StructDeclList
{
public:
  Pragma *pragma_;
  StructDeclList *structdecllist_;

  PragmaStructDecl(const PragmaStructDecl &);
  PragmaStructDecl &operator=(const PragmaStructDecl &);
  PragmaStructDecl(Pragma *p1, StructDeclList *p2);
  ~PragmaStructDecl();
  virtual void accept(Visitor *v);
  virtual PragmaStructDecl *clone() const;
  void swap(PragmaStructDecl &);
};

class StaticAssertStructDecl : public StructDeclList
{
public:
  StaticAssertDeclaration *staticassertdeclaration_;

  StaticAssertStructDecl(const StaticAssertStructDecl &);
  StaticAssertStructDecl &operator=(const StaticAssertStructDecl &);
  StaticAssertStructDecl(StaticAssertDeclaration *p1);
  ~StaticAssertStructDecl();
  virtual void accept(Visitor *v);
  virtual StaticAssertStructDecl *clone() const;
  void swap(StaticAssertStructDecl &);
};

class StaticAssertStructDeclNext : public StructDeclList
{
public:
  StaticAssertDeclaration *staticassertdeclaration_;
  StructDeclList *structdecllist_;

  StaticAssertStructDeclNext(const StaticAssertStructDeclNext &);
  StaticAssertStructDeclNext &operator=(const StaticAssertStructDeclNext &);
  StaticAssertStructDeclNext(StaticAssertDeclaration *p1, StructDeclList *p2);
  ~StaticAssertStructDeclNext();
  virtual void accept(Visitor *v);
  virtual StaticAssertStructDeclNext *clone() const;
  void swap(StaticAssertStructDeclNext &);
};

class StaticAssert : public StaticAssertDeclaration
{
public:
  Expression *expression_;

  StaticAssert(const StaticAssert &);
  StaticAssert &operator=(const StaticAssert &);
  StaticAssert(Expression *p1);
  ~StaticAssert();
  virtual void accept(Visitor *v);
  virtual StaticAssert *clone() const;
  void swap(StaticAssert &);
};

class StaticAssertStringConst : public StaticAssertDeclaration
{
public:
  Expression *expression_;
  StringConstant *stringconstant_;

  StaticAssertStringConst(const StaticAssertStringConst &);
  StaticAssertStringConst &operator=(const StaticAssertStringConst &);
  StaticAssertStringConst(Expression *p1, StringConstant *p2);
  ~StaticAssertStringConst();
  virtual void accept(Visitor *v);
  virtual StaticAssertStringConst *clone() const;
  void swap(StaticAssertStringConst &);
};

class FieldDeclDeclarator : public FieldDecl
{
public:
  Declarator *declarator_;

  FieldDeclDeclarator(const FieldDeclDeclarator &);
  FieldDeclDeclarator &operator=(const FieldDeclDeclarator &);
  FieldDeclDeclarator(Declarator *p1);
  ~FieldDeclDeclarator();
  virtual void accept(Visitor *v);
  virtual FieldDeclDeclarator *clone() const;
  void swap(FieldDeclDeclarator &);
};

class FieldDeclDeclaratorColon : public FieldDecl
{
public:
  Declarator *declarator_;
  Expression *expression_;
  ListAttribute *listattribute_;

  FieldDeclDeclaratorColon(const FieldDeclDeclaratorColon &);
  FieldDeclDeclaratorColon &operator=(const FieldDeclDeclaratorColon &);
  FieldDeclDeclaratorColon(Declarator *p1, Expression *p2, ListAttribute *p3);
  ~FieldDeclDeclaratorColon();
  virtual void accept(Visitor *v);
  virtual FieldDeclDeclaratorColon *clone() const;
  void swap(FieldDeclDeclaratorColon &);
};

class FieldDeclColonExpression : public FieldDecl
{
public:
  Expression *expression_;

  FieldDeclColonExpression(const FieldDeclColonExpression &);
  FieldDeclColonExpression &operator=(const FieldDeclColonExpression &);
  FieldDeclColonExpression(Expression *p1);
  ~FieldDeclColonExpression();
  virtual void accept(Visitor *v);
  virtual FieldDeclColonExpression *clone() const;
  void swap(FieldDeclColonExpression &);
};

class IdentEnumerator : public Enumerator
{
public:
  Ident ident_;

  IdentEnumerator(const IdentEnumerator &);
  IdentEnumerator &operator=(const IdentEnumerator &);
  IdentEnumerator(Ident p1);
  ~IdentEnumerator();
  virtual void accept(Visitor *v);
  virtual IdentEnumerator *clone() const;
  void swap(IdentEnumerator &);
};

class IdentAssignExpr : public Enumerator
{
public:
  Ident ident_;
  Expression *expression_;

  IdentAssignExpr(const IdentAssignExpr &);
  IdentAssignExpr &operator=(const IdentAssignExpr &);
  IdentAssignExpr(Ident p1, Expression *p2);
  ~IdentAssignExpr();
  virtual void accept(Visitor *v);
  virtual IdentAssignExpr *clone() const;
  void swap(IdentAssignExpr &);
};

class ADeclarator : public Declarator
{
public:
  PointerOpt *pointeropt_;
  DirectDecl *directdecl_;
  AttributesWithAsm *attributeswithasm_;

  ADeclarator(const ADeclarator &);
  ADeclarator &operator=(const ADeclarator &);
  ADeclarator(PointerOpt *p1, DirectDecl *p2, AttributesWithAsm *p3);
  ~ADeclarator();
  virtual void accept(Visitor *v);
  virtual ADeclarator *clone() const;
  void swap(ADeclarator &);
};

class AttributesCommaExpression : public AttributesOrStatic
{
public:
  ListAttribute *listattribute_;
  CommaExpressionOpt *commaexpressionopt_;

  AttributesCommaExpression(const AttributesCommaExpression &);
  AttributesCommaExpression &operator=(const AttributesCommaExpression &);
  AttributesCommaExpression(ListAttribute *p1, CommaExpressionOpt *p2);
  ~AttributesCommaExpression();
  virtual void accept(Visitor *v);
  virtual AttributesCommaExpression *clone() const;
  void swap(AttributesCommaExpression &);
};

class AttributesStaticExpression : public AttributesOrStatic
{
public:
  Attribute *attribute_;
  ListAttribute *listattribute_;
  ListExpression *listexpression_;

  AttributesStaticExpression(const AttributesStaticExpression &);
  AttributesStaticExpression &operator=(const AttributesStaticExpression &);
  AttributesStaticExpression(Attribute *p1, ListAttribute *p2, ListExpression *p3);
  ~AttributesStaticExpression();
  virtual void accept(Visitor *v);
  virtual AttributesStaticExpression *clone() const;
  void swap(AttributesStaticExpression &);
};

class StaticAttributesExpression : public AttributesOrStatic
{
public:
  ListAttribute *listattribute_;
  ListExpression *listexpression_;

  StaticAttributesExpression(const StaticAttributesExpression &);
  StaticAttributesExpression &operator=(const StaticAttributesExpression &);
  StaticAttributesExpression(ListAttribute *p1, ListExpression *p2);
  ~StaticAttributesExpression();
  virtual void accept(Visitor *v);
  virtual StaticAttributesExpression *clone() const;
  void swap(StaticAttributesExpression &);
};

class DirectDeclIdTypename : public DirectDecl
{
public:
  IdOrTypename *idortypename_;

  DirectDeclIdTypename(const DirectDeclIdTypename &);
  DirectDeclIdTypename &operator=(const DirectDeclIdTypename &);
  DirectDeclIdTypename(IdOrTypename *p1);
  ~DirectDeclIdTypename();
  virtual void accept(Visitor *v);
  virtual DirectDeclIdTypename *clone() const;
  void swap(DirectDeclIdTypename &);
};

class DirectDeclAttrDecl : public DirectDecl
{
public:
  ListAttribute *listattribute_;
  Declarator *declarator_;

  DirectDeclAttrDecl(const DirectDeclAttrDecl &);
  DirectDeclAttrDecl &operator=(const DirectDeclAttrDecl &);
  DirectDeclAttrDecl(ListAttribute *p1, Declarator *p2);
  ~DirectDeclAttrDecl();
  virtual void accept(Visitor *v);
  virtual DirectDeclAttrDecl *clone() const;
  void swap(DirectDeclAttrDecl &);
};

class DirectDeclAttrStatic : public DirectDecl
{
public:
  DirectDecl *directdecl_;
  LBRACKET lbracket_;
  AttributesOrStatic *attributesorstatic_;
  RBRACKET rbracket_;

  DirectDeclAttrStatic(const DirectDeclAttrStatic &);
  DirectDeclAttrStatic &operator=(const DirectDeclAttrStatic &);
  DirectDeclAttrStatic(DirectDecl *p1, LBRACKET p2, AttributesOrStatic *p3, RBRACKET p4);
  ~DirectDeclAttrStatic();
  virtual void accept(Visitor *v);
  virtual DirectDeclAttrStatic *clone() const;
  void swap(DirectDeclAttrStatic &);
};

class DirectDeclGhostParam : public DirectDecl
{
public:
  DirectDecl *directdecl_;
  GhostParameterOpt *ghostparameteropt_;

  DirectDeclGhostParam(const DirectDeclGhostParam &);
  DirectDeclGhostParam &operator=(const DirectDeclGhostParam &);
  DirectDeclGhostParam(DirectDecl *p1, GhostParameterOpt *p2);
  ~DirectDeclGhostParam();
  virtual void accept(Visitor *v);
  virtual DirectDeclGhostParam *clone() const;
  void swap(DirectDeclGhostParam &);
};

class DirectDeclGhostRestParParam : public DirectDecl
{
public:
  DirectDecl *directdecl_;
  RestParList *restparlist_;
  GhostParameterOpt *ghostparameteropt_;

  DirectDeclGhostRestParParam(const DirectDeclGhostRestParParam &);
  DirectDeclGhostRestParParam &operator=(const DirectDeclGhostRestParParam &);
  DirectDeclGhostRestParParam(DirectDecl *p1, RestParList *p2, GhostParameterOpt *p3);
  ~DirectDeclGhostRestParParam();
  virtual void accept(Visitor *v);
  virtual DirectDeclGhostRestParParam *clone() const;
  void swap(DirectDeclGhostRestParParam &);
};

class SimpleParameterDecl : public RestParList
{
public:
  ListParameterDecl *listparameterdecl_;

  SimpleParameterDecl(const SimpleParameterDecl &);
  SimpleParameterDecl &operator=(const SimpleParameterDecl &);
  SimpleParameterDecl(ListParameterDecl *p1);
  ~SimpleParameterDecl();
  virtual void accept(Visitor *v);
  virtual SimpleParameterDecl *clone() const;
  void swap(SimpleParameterDecl &);
};

class DotDotDotParameterDecl : public RestParList
{
public:
  ListParameterDecl *listparameterdecl_;

  DotDotDotParameterDecl(const DotDotDotParameterDecl &);
  DotDotDotParameterDecl &operator=(const DotDotDotParameterDecl &);
  DotDotDotParameterDecl(ListParameterDecl *p1);
  ~DotDotDotParameterDecl();
  virtual void accept(Visitor *v);
  virtual DotDotDotParameterDecl *clone() const;
  void swap(DotDotDotParameterDecl &);
};

class ParameterDeclSpecDeclarator : public ParameterDecl
{
public:
  DeclSpecList *declspeclist_;
  Declarator *declarator_;

  ParameterDeclSpecDeclarator(const ParameterDeclSpecDeclarator &);
  ParameterDeclSpecDeclarator &operator=(const ParameterDeclSpecDeclarator &);
  ParameterDeclSpecDeclarator(DeclSpecList *p1, Declarator *p2);
  ~ParameterDeclSpecDeclarator();
  virtual void accept(Visitor *v);
  virtual ParameterDeclSpecDeclarator *clone() const;
  void swap(ParameterDeclSpecDeclarator &);
};

class ParameterDeclSpecAbstract : public ParameterDecl
{
public:
  DeclSpecList *declspeclist_;
  AbstractDecl *abstractdecl_;

  ParameterDeclSpecAbstract(const ParameterDeclSpecAbstract &);
  ParameterDeclSpecAbstract &operator=(const ParameterDeclSpecAbstract &);
  ParameterDeclSpecAbstract(DeclSpecList *p1, AbstractDecl *p2);
  ~ParameterDeclSpecAbstract();
  virtual void accept(Visitor *v);
  virtual ParameterDeclSpecAbstract *clone() const;
  void swap(ParameterDeclSpecAbstract &);
};

class ParameterDeclSpec : public ParameterDecl
{
public:
  DeclSpecList *declspeclist_;

  ParameterDeclSpec(const ParameterDeclSpec &);
  ParameterDeclSpec &operator=(const ParameterDeclSpec &);
  ParameterDeclSpec(DeclSpecList *p1);
  ~ParameterDeclSpec();
  virtual void accept(Visitor *v);
  virtual ParameterDeclSpec *clone() const;
  void swap(ParameterDeclSpec &);
};

class ParameterDeclPar : public ParameterDecl
{
public:
  ParameterDecl *parameterdecl_;

  ParameterDeclPar(const ParameterDeclPar &);
  ParameterDeclPar &operator=(const ParameterDeclPar &);
  ParameterDeclPar(ParameterDecl *p1);
  ~ParameterDeclPar();
  virtual void accept(Visitor *v);
  virtual ParameterDeclPar *clone() const;
  void swap(ParameterDeclPar &);
};

class OldDirectProtoDecl : public DirectOldProtoDecl
{
public:
  DirectDecl *directdecl_;
  ListIdent *listident_;
  OldPardefList *oldpardeflist_;

  OldDirectProtoDecl(const OldDirectProtoDecl &);
  OldDirectProtoDecl &operator=(const OldDirectProtoDecl &);
  OldDirectProtoDecl(DirectDecl *p1, ListIdent *p2, OldPardefList *p3);
  ~OldDirectProtoDecl();
  virtual void accept(Visitor *v);
  virtual OldDirectProtoDecl *clone() const;
  void swap(OldDirectProtoDecl &);
};

class EmptyOldPardefList : public OldPardefList
{
public:

  EmptyOldPardefList(const EmptyOldPardefList &);
  EmptyOldPardefList &operator=(const EmptyOldPardefList &);
  EmptyOldPardefList();
  ~EmptyOldPardefList();
  virtual void accept(Visitor *v);
  virtual EmptyOldPardefList *clone() const;
  void swap(EmptyOldPardefList &);
};

class DotDotDotOldPardefList : public OldPardefList
{
public:
  ListOldPardef *listoldpardef_;

  DotDotDotOldPardefList(const DotDotDotOldPardefList &);
  DotDotDotOldPardefList &operator=(const DotDotDotOldPardefList &);
  DotDotDotOldPardefList(ListOldPardef *p1);
  ~DotDotDotOldPardefList();
  virtual void accept(Visitor *v);
  virtual DotDotDotOldPardefList *clone() const;
  void swap(DotDotDotOldPardefList &);
};

class SimpleOldPardefList : public OldPardefList
{
public:
  ListOldPardef *listoldpardef_;

  SimpleOldPardefList(const SimpleOldPardefList &);
  SimpleOldPardefList &operator=(const SimpleOldPardefList &);
  SimpleOldPardefList(ListOldPardef *p1);
  ~SimpleOldPardefList();
  virtual void accept(Visitor *v);
  virtual SimpleOldPardefList *clone() const;
  void swap(SimpleOldPardefList &);
};

class OldParDef : public OldPardef
{
public:
  DeclSpecList *declspeclist_;
  ListDeclarator *listdeclarator_;

  OldParDef(const OldParDef &);
  OldParDef &operator=(const OldParDef &);
  OldParDef(DeclSpecList *p1, ListDeclarator *p2);
  ~OldParDef();
  virtual void accept(Visitor *v);
  virtual OldParDef *clone() const;
  void swap(OldParDef &);
};

class NoPointer : public PointerOpt
{
public:

  NoPointer(const NoPointer &);
  NoPointer &operator=(const NoPointer &);
  NoPointer();
  ~NoPointer();
  virtual void accept(Visitor *v);
  virtual NoPointer *clone() const;
  void swap(NoPointer &);
};

class SomePointer : public PointerOpt
{
public:
  ListAttribute *listattribute_;
  PointerOpt *pointeropt_;

  SomePointer(const SomePointer &);
  SomePointer &operator=(const SomePointer &);
  SomePointer(ListAttribute *p1, PointerOpt *p2);
  ~SomePointer();
  virtual void accept(Visitor *v);
  virtual SomePointer *clone() const;
  void swap(SomePointer &);
};

class TypeNameAbstractDecl : public TypeName
{
public:
  DeclSpecList *declspeclist_;
  AbstractDecl *abstractdecl_;

  TypeNameAbstractDecl(const TypeNameAbstractDecl &);
  TypeNameAbstractDecl &operator=(const TypeNameAbstractDecl &);
  TypeNameAbstractDecl(DeclSpecList *p1, AbstractDecl *p2);
  ~TypeNameAbstractDecl();
  virtual void accept(Visitor *v);
  virtual TypeNameAbstractDecl *clone() const;
  void swap(TypeNameAbstractDecl &);
};

class TypeNameDeclSpecList : public TypeName
{
public:
  DeclSpecList *declspeclist_;

  TypeNameDeclSpecList(const TypeNameDeclSpecList &);
  TypeNameDeclSpecList &operator=(const TypeNameDeclSpecList &);
  TypeNameDeclSpecList(DeclSpecList *p1);
  ~TypeNameDeclSpecList();
  virtual void accept(Visitor *v);
  virtual TypeNameDeclSpecList *clone() const;
  void swap(TypeNameDeclSpecList &);
};

class AbstractDeclAttr : public AbstractDecl
{
public:
  PointerOpt *pointeropt_;
  AbsDirectDecl *absdirectdecl_;
  ListAttribute *listattribute_;

  AbstractDeclAttr(const AbstractDeclAttr &);
  AbstractDeclAttr &operator=(const AbstractDeclAttr &);
  AbstractDeclAttr(PointerOpt *p1, AbsDirectDecl *p2, ListAttribute *p3);
  ~AbstractDeclAttr();
  virtual void accept(Visitor *v);
  virtual AbstractDeclAttr *clone() const;
  void swap(AbstractDeclAttr &);
};

class AbstractDeclPointer : public AbstractDecl
{
public:
  ListAttribute *listattribute_;
  PointerOpt *pointeropt_;

  AbstractDeclPointer(const AbstractDeclPointer &);
  AbstractDeclPointer &operator=(const AbstractDeclPointer &);
  AbstractDeclPointer(ListAttribute *p1, PointerOpt *p2);
  ~AbstractDeclPointer();
  virtual void accept(Visitor *v);
  virtual AbstractDeclPointer *clone() const;
  void swap(AbstractDeclPointer &);
};

class AbsDirectDeclPar : public AbsDirectDecl
{
public:
  ListAttribute *listattribute_;
  AbstractDecl *abstractdecl_;

  AbsDirectDeclPar(const AbsDirectDeclPar &);
  AbsDirectDeclPar &operator=(const AbsDirectDeclPar &);
  AbsDirectDeclPar(ListAttribute *p1, AbstractDecl *p2);
  ~AbsDirectDeclPar();
  virtual void accept(Visitor *v);
  virtual AbsDirectDeclPar *clone() const;
  void swap(AbsDirectDeclPar &);
};

class AbsDirectDeclBreckets : public AbsDirectDecl
{
public:
  AbsDirectDeclOpt *absdirectdeclopt_;
  LBRACKET lbracket_;
  CommaExpressionOpt *commaexpressionopt_;
  RBRACKET rbracket_;

  AbsDirectDeclBreckets(const AbsDirectDeclBreckets &);
  AbsDirectDeclBreckets &operator=(const AbsDirectDeclBreckets &);
  AbsDirectDeclBreckets(AbsDirectDeclOpt *p1, LBRACKET p2, CommaExpressionOpt *p3, RBRACKET p4);
  ~AbsDirectDeclBreckets();
  virtual void accept(Visitor *v);
  virtual AbsDirectDeclBreckets *clone() const;
  void swap(AbsDirectDeclBreckets &);
};

class AbsDirectDeclRestPar : public AbsDirectDecl
{
public:
  AbsDirectDecl *absdirectdecl_;
  RestParList *restparlist_;

  AbsDirectDeclRestPar(const AbsDirectDeclRestPar &);
  AbsDirectDeclRestPar &operator=(const AbsDirectDeclRestPar &);
  AbsDirectDeclRestPar(AbsDirectDecl *p1, RestParList *p2);
  ~AbsDirectDeclRestPar();
  virtual void accept(Visitor *v);
  virtual AbsDirectDeclRestPar *clone() const;
  void swap(AbsDirectDeclRestPar &);
};

class AbsDirectDeclNoRestPar : public AbsDirectDecl
{
public:
  AbsDirectDecl *absdirectdecl_;

  AbsDirectDeclNoRestPar(const AbsDirectDeclNoRestPar &);
  AbsDirectDeclNoRestPar &operator=(const AbsDirectDeclNoRestPar &);
  AbsDirectDeclNoRestPar(AbsDirectDecl *p1);
  ~AbsDirectDeclNoRestPar();
  virtual void accept(Visitor *v);
  virtual AbsDirectDeclNoRestPar *clone() const;
  void swap(AbsDirectDeclNoRestPar &);
};

class SomeAbsDirectDecl : public AbsDirectDeclOpt
{
public:
  AbsDirectDecl *absdirectdecl_;

  SomeAbsDirectDecl(const SomeAbsDirectDecl &);
  SomeAbsDirectDecl &operator=(const SomeAbsDirectDecl &);
  SomeAbsDirectDecl(AbsDirectDecl *p1);
  ~SomeAbsDirectDecl();
  virtual void accept(Visitor *v);
  virtual SomeAbsDirectDecl *clone() const;
  void swap(SomeAbsDirectDecl &);
};

class NoAbsDirectDecl : public AbsDirectDeclOpt
{
public:

  NoAbsDirectDecl(const NoAbsDirectDecl &);
  NoAbsDirectDecl &operator=(const NoAbsDirectDecl &);
  NoAbsDirectDecl();
  ~NoAbsDirectDecl();
  virtual void accept(Visitor *v);
  virtual NoAbsDirectDecl *clone() const;
  void swap(NoAbsDirectDecl &);
};

class FunctionDefSpec : public FunctionDef
{
public:
  SPEC spec_;
  FunctionDefStart *functiondefstart_;
  Block *block_;

  FunctionDefSpec(const FunctionDefSpec &);
  FunctionDefSpec &operator=(const FunctionDefSpec &);
  FunctionDefSpec(SPEC p1, FunctionDefStart *p2, Block *p3);
  ~FunctionDefSpec();
  virtual void accept(Visitor *v);
  virtual FunctionDefSpec *clone() const;
  void swap(FunctionDefSpec &);
};

class SimpleFunctionDef : public FunctionDef
{
public:
  FunctionDefStart *functiondefstart_;
  Block *block_;

  SimpleFunctionDef(const SimpleFunctionDef &);
  SimpleFunctionDef &operator=(const SimpleFunctionDef &);
  SimpleFunctionDef(FunctionDefStart *p1, Block *p2);
  ~SimpleFunctionDef();
  virtual void accept(Visitor *v);
  virtual SimpleFunctionDef *clone() const;
  void swap(SimpleFunctionDef &);
};

class FunctionDefStartDeclarator : public FunctionDefStart
{
public:
  DeclSpecList *declspeclist_;
  Declarator *declarator_;

  FunctionDefStartDeclarator(const FunctionDefStartDeclarator &);
  FunctionDefStartDeclarator &operator=(const FunctionDefStartDeclarator &);
  FunctionDefStartDeclarator(DeclSpecList *p1, Declarator *p2);
  ~FunctionDefStartDeclarator();
  virtual void accept(Visitor *v);
  virtual FunctionDefStartDeclarator *clone() const;
  void swap(FunctionDefStartDeclarator &);
};

class FunctionDefStartOldProtoDecl : public FunctionDefStart
{
public:
  DeclSpecList *declspeclist_;
  PointerOpt *pointeropt_;
  DirectOldProtoDecl *directoldprotodecl_;

  FunctionDefStartOldProtoDecl(const FunctionDefStartOldProtoDecl &);
  FunctionDefStartOldProtoDecl &operator=(const FunctionDefStartOldProtoDecl &);
  FunctionDefStartOldProtoDecl(DeclSpecList *p1, PointerOpt *p2, DirectOldProtoDecl *p3);
  ~FunctionDefStartOldProtoDecl();
  virtual void accept(Visitor *v);
  virtual FunctionDefStartOldProtoDecl *clone() const;
  void swap(FunctionDefStartOldProtoDecl &);
};

class FunctionDefStartReatParGhostParameter : public FunctionDefStart
{
public:
  Ident ident_;
  RestParList *restparlist_;
  GhostParameterOpt *ghostparameteropt_;

  FunctionDefStartReatParGhostParameter(const FunctionDefStartReatParGhostParameter &);
  FunctionDefStartReatParGhostParameter &operator=(const FunctionDefStartReatParGhostParameter &);
  FunctionDefStartReatParGhostParameter(Ident p1, RestParList *p2, GhostParameterOpt *p3);
  ~FunctionDefStartReatParGhostParameter();
  virtual void accept(Visitor *v);
  virtual FunctionDefStartReatParGhostParameter *clone() const;
  void swap(FunctionDefStartReatParGhostParameter &);
};

class FunctionDefStartOldPardef : public FunctionDefStart
{
public:
  Ident ident_;
  ListIdent *listident_;
  OldPardefList *oldpardeflist_;

  FunctionDefStartOldPardef(const FunctionDefStartOldPardef &);
  FunctionDefStartOldPardef &operator=(const FunctionDefStartOldPardef &);
  FunctionDefStartOldPardef(Ident p1, ListIdent *p2, OldPardefList *p3);
  ~FunctionDefStartOldPardef();
  virtual void accept(Visitor *v);
  virtual FunctionDefStartOldPardef *clone() const;
  void swap(FunctionDefStartOldPardef &);
};

class FunctionDefStartGhostParameter : public FunctionDefStart
{
public:
  Ident ident_;
  GhostParameterOpt *ghostparameteropt_;

  FunctionDefStartGhostParameter(const FunctionDefStartGhostParameter &);
  FunctionDefStartGhostParameter &operator=(const FunctionDefStartGhostParameter &);
  FunctionDefStartGhostParameter(Ident p1, GhostParameterOpt *p2);
  ~FunctionDefStartGhostParameter();
  virtual void accept(Visitor *v);
  virtual FunctionDefStartGhostParameter *clone() const;
  void swap(FunctionDefStartGhostParameter &);
};

class ConstKeyWord : public CVSpec
{
public:
  CONST const_;

  ConstKeyWord(const ConstKeyWord &);
  ConstKeyWord &operator=(const ConstKeyWord &);
  ConstKeyWord(CONST p1);
  ~ConstKeyWord();
  virtual void accept(Visitor *v);
  virtual ConstKeyWord *clone() const;
  void swap(ConstKeyWord &);
};

class VolatileKeyWord : public CVSpec
{
public:
  VOLATILE volatile_;

  VolatileKeyWord(const VolatileKeyWord &);
  VolatileKeyWord &operator=(const VolatileKeyWord &);
  VolatileKeyWord(VOLATILE p1);
  ~VolatileKeyWord();
  virtual void accept(Visitor *v);
  virtual VolatileKeyWord *clone() const;
  void swap(VolatileKeyWord &);
};

class RestrictKeyWord : public CVSpec
{
public:
  RESTRICT restrict_;

  RestrictKeyWord(const RestrictKeyWord &);
  RestrictKeyWord &operator=(const RestrictKeyWord &);
  RestrictKeyWord(RESTRICT p1);
  ~RestrictKeyWord();
  virtual void accept(Visitor *v);
  virtual RestrictKeyWord *clone() const;
  void swap(RestrictKeyWord &);
};

class GhostKeyWord : public CVSpec
{
public:

  GhostKeyWord(const GhostKeyWord &);
  GhostKeyWord &operator=(const GhostKeyWord &);
  GhostKeyWord();
  ~GhostKeyWord();
  virtual void accept(Visitor *v);
  virtual GhostKeyWord *clone() const;
  void swap(GhostKeyWord &);
};

class Attribute_annotKeyWord : public CVSpec
{
public:
  ATTRIBUTE_ANNOT attribute_annot_;

  Attribute_annotKeyWord(const Attribute_annotKeyWord &);
  Attribute_annotKeyWord &operator=(const Attribute_annotKeyWord &);
  Attribute_annotKeyWord(ATTRIBUTE_ANNOT p1);
  ~Attribute_annotKeyWord();
  virtual void accept(Visitor *v);
  virtual Attribute_annotKeyWord *clone() const;
  void swap(Attribute_annotKeyWord &);
};

class EmptyAttrWithASM : public AttributesWithAsm
{
public:

  EmptyAttrWithASM(const EmptyAttrWithASM &);
  EmptyAttrWithASM &operator=(const EmptyAttrWithASM &);
  EmptyAttrWithASM();
  ~EmptyAttrWithASM();
  virtual void accept(Visitor *v);
  virtual EmptyAttrWithASM *clone() const;
  void swap(EmptyAttrWithASM &);
};

class ListAttrWithASM : public AttributesWithAsm
{
public:
  Attribute *attribute_;
  ListAttribute *listattribute_;

  ListAttrWithASM(const ListAttrWithASM &);
  ListAttrWithASM &operator=(const ListAttrWithASM &);
  ListAttrWithASM(Attribute *p1, ListAttribute *p2);
  ~ListAttrWithASM();
  virtual void accept(Visitor *v);
  virtual ListAttrWithASM *clone() const;
  void swap(ListAttrWithASM &);
};

class ListASMAttrWithASM : public AttributesWithAsm
{
public:
  Attribute *attribute_;
  ListAttribute *listattribute_1;
  ASM asm_;
  StringConstant *stringconstant_;
  ListAttribute *listattribute_2;

  ListASMAttrWithASM(const ListASMAttrWithASM &);
  ListASMAttrWithASM &operator=(const ListASMAttrWithASM &);
  ListASMAttrWithASM(Attribute *p1, ListAttribute *p2, ASM p3, StringConstant *p4, ListAttribute *p5);
  ~ListASMAttrWithASM();
  virtual void accept(Visitor *v);
  virtual ListASMAttrWithASM *clone() const;
  void swap(ListASMAttrWithASM &);
};

class ASMAttrWithASM : public AttributesWithAsm
{
public:
  ASM asm_;
  StringConstant *stringconstant_;
  ListAttribute *listattribute_;

  ASMAttrWithASM(const ASMAttrWithASM &);
  ASMAttrWithASM &operator=(const ASMAttrWithASM &);
  ASMAttrWithASM(ASM p1, StringConstant *p2, ListAttribute *p3);
  ~ASMAttrWithASM();
  virtual void accept(Visitor *v);
  virtual ASMAttrWithASM *clone() const;
  void swap(ASMAttrWithASM &);
};

class AttributeAttrNocv : public AttributeNocv
{
public:
  ATTRIBUTE attribute_;
  AttrList *attrlist_;

  AttributeAttrNocv(const AttributeAttrNocv &);
  AttributeAttrNocv &operator=(const AttributeAttrNocv &);
  AttributeAttrNocv(ATTRIBUTE p1, AttrList *p2);
  ~AttributeAttrNocv();
  virtual void accept(Visitor *v);
  virtual AttributeAttrNocv *clone() const;
  void swap(AttributeAttrNocv &);
};

class DeclspecAttrNocv : public AttributeNocv
{
public:
  ListAttr *listattr_;

  DeclspecAttrNocv(const DeclspecAttrNocv &);
  DeclspecAttrNocv &operator=(const DeclspecAttrNocv &);
  DeclspecAttrNocv(ListAttr *p1);
  ~DeclspecAttrNocv();
  virtual void accept(Visitor *v);
  virtual DeclspecAttrNocv *clone() const;
  void swap(DeclspecAttrNocv &);
};

class MsattrAttrNocv : public AttributeNocv
{
public:
  MSATTR msattr_;

  MsattrAttrNocv(const MsattrAttrNocv &);
  MsattrAttrNocv &operator=(const MsattrAttrNocv &);
  MsattrAttrNocv(MSATTR p1);
  ~MsattrAttrNocv();
  virtual void accept(Visitor *v);
  virtual MsattrAttrNocv *clone() const;
  void swap(MsattrAttrNocv &);
};

class ThreadAttrNocv : public AttributeNocv
{
public:

  ThreadAttrNocv(const ThreadAttrNocv &);
  ThreadAttrNocv &operator=(const ThreadAttrNocv &);
  ThreadAttrNocv();
  ~ThreadAttrNocv();
  virtual void accept(Visitor *v);
  virtual ThreadAttrNocv *clone() const;
  void swap(ThreadAttrNocv &);
};

class ThreadLocalAttrNocv : public AttributeNocv
{
public:

  ThreadLocalAttrNocv(const ThreadLocalAttrNocv &);
  ThreadLocalAttrNocv &operator=(const ThreadLocalAttrNocv &);
  ThreadLocalAttrNocv();
  ~ThreadLocalAttrNocv();
  virtual void accept(Visitor *v);
  virtual ThreadLocalAttrNocv *clone() const;
  void swap(ThreadLocalAttrNocv &);
};

class AttributeNoCV : public Attribute
{
public:
  AttributeNocv *attributenocv_;

  AttributeNoCV(const AttributeNoCV &);
  AttributeNoCV &operator=(const AttributeNoCV &);
  AttributeNoCV(AttributeNocv *p1);
  ~AttributeNoCV();
  virtual void accept(Visitor *v);
  virtual AttributeNoCV *clone() const;
  void swap(AttributeNoCV &);
};

class AttributeConst : public Attribute
{
public:
  CONST const_;

  AttributeConst(const AttributeConst &);
  AttributeConst &operator=(const AttributeConst &);
  AttributeConst(CONST p1);
  ~AttributeConst();
  virtual void accept(Visitor *v);
  virtual AttributeConst *clone() const;
  void swap(AttributeConst &);
};

class AttributeRestrict : public Attribute
{
public:
  RESTRICT restrict_;

  AttributeRestrict(const AttributeRestrict &);
  AttributeRestrict &operator=(const AttributeRestrict &);
  AttributeRestrict(RESTRICT p1);
  ~AttributeRestrict();
  virtual void accept(Visitor *v);
  virtual AttributeRestrict *clone() const;
  void swap(AttributeRestrict &);
};

class AttributeVolatile : public Attribute
{
public:
  VOLATILE volatile_;

  AttributeVolatile(const AttributeVolatile &);
  AttributeVolatile &operator=(const AttributeVolatile &);
  AttributeVolatile(VOLATILE p1);
  ~AttributeVolatile();
  virtual void accept(Visitor *v);
  virtual AttributeVolatile *clone() const;
  void swap(AttributeVolatile &);
};

class AttributeGhost : public Attribute
{
public:

  AttributeGhost(const AttributeGhost &);
  AttributeGhost &operator=(const AttributeGhost &);
  AttributeGhost();
  ~AttributeGhost();
  virtual void accept(Visitor *v);
  virtual AttributeGhost *clone() const;
  void swap(AttributeGhost &);
};

class AttributeAttributeAnnot : public Attribute
{
public:
  ATTRIBUTE_ANNOT attribute_annot_;

  AttributeAttributeAnnot(const AttributeAttributeAnnot &);
  AttributeAttributeAnnot &operator=(const AttributeAttributeAnnot &);
  AttributeAttributeAnnot(ATTRIBUTE_ANNOT p1);
  ~AttributeAttributeAnnot();
  virtual void accept(Visitor *v);
  virtual AttributeAttributeAnnot *clone() const;
  void swap(AttributeAttributeAnnot &);
};

class AttributeJustAttribute : public JustAttribute
{
public:
  ATTRIBUTE attribute_;
  AttrList *attrlist_;

  AttributeJustAttribute(const AttributeJustAttribute &);
  AttributeJustAttribute &operator=(const AttributeJustAttribute &);
  AttributeJustAttribute(ATTRIBUTE p1, AttrList *p2);
  ~AttributeJustAttribute();
  virtual void accept(Visitor *v);
  virtual AttributeJustAttribute *clone() const;
  void swap(AttributeJustAttribute &);
};

class DeclspecJustAttribute : public JustAttribute
{
public:
  ListAttr *listattr_;

  DeclspecJustAttribute(const DeclspecJustAttribute &);
  DeclspecJustAttribute &operator=(const DeclspecJustAttribute &);
  DeclspecJustAttribute(ListAttr *p1);
  ~DeclspecJustAttribute();
  virtual void accept(Visitor *v);
  virtual DeclspecJustAttribute *clone() const;
  void swap(DeclspecJustAttribute &);
};

class SimplePragma : public Pragma
{
public:

  SimplePragma(const SimplePragma &);
  SimplePragma &operator=(const SimplePragma &);
  SimplePragma();
  ~SimplePragma();
  virtual void accept(Visitor *v);
  virtual SimplePragma *clone() const;
  void swap(SimplePragma &);
};

class AttrPragma : public Pragma
{
public:
  Attr *attr_;

  AttrPragma(const AttrPragma &);
  AttrPragma &operator=(const AttrPragma &);
  AttrPragma(Attr *p1);
  ~AttrPragma();
  virtual void accept(Visitor *v);
  virtual AttrPragma *clone() const;
  void swap(AttrPragma &);
};

class AttrPragmaSeparated : public Pragma
{
public:
  Attr *attr_;

  AttrPragmaSeparated(const AttrPragmaSeparated &);
  AttrPragmaSeparated &operator=(const AttrPragmaSeparated &);
  AttrPragmaSeparated(Attr *p1);
  ~AttrPragmaSeparated();
  virtual void accept(Visitor *v);
  virtual AttrPragmaSeparated *clone() const;
  void swap(AttrPragmaSeparated &);
};

class PragmaKeyrod : public Pragma
{
public:

  PragmaKeyrod(const PragmaKeyrod &);
  PragmaKeyrod &operator=(const PragmaKeyrod &);
  PragmaKeyrod();
  ~PragmaKeyrod();
  virtual void accept(Visitor *v);
  virtual PragmaKeyrod *clone() const;
  void swap(PragmaKeyrod &);
};

class IdentifierVarAttr : public VarAttr
{
public:
  Ident ident_;

  IdentifierVarAttr(const IdentifierVarAttr &);
  IdentifierVarAttr &operator=(const IdentifierVarAttr &);
  IdentifierVarAttr(Ident p1);
  ~IdentifierVarAttr();
  virtual void accept(Visitor *v);
  virtual IdentifierVarAttr *clone() const;
  void swap(IdentifierVarAttr &);
};

class NamedTypeVarAttr : public VarAttr
{
public:
  NAMEDTYPE namedtype_;

  NamedTypeVarAttr(const NamedTypeVarAttr &);
  NamedTypeVarAttr &operator=(const NamedTypeVarAttr &);
  NamedTypeVarAttr(NAMEDTYPE p1);
  ~NamedTypeVarAttr();
  virtual void accept(Visitor *v);
  virtual NamedTypeVarAttr *clone() const;
  void swap(NamedTypeVarAttr &);
};

class DefaultVarAttr : public VarAttr
{
public:
  Integer integer_;

  DefaultVarAttr(const DefaultVarAttr &);
  DefaultVarAttr &operator=(const DefaultVarAttr &);
  DefaultVarAttr(Integer p1);
  ~DefaultVarAttr();
  virtual void accept(Visitor *v);
  virtual DefaultVarAttr *clone() const;
  void swap(DefaultVarAttr &);
};

class ConstVarAttr : public VarAttr
{
public:
  CONST const_;

  ConstVarAttr(const ConstVarAttr &);
  ConstVarAttr &operator=(const ConstVarAttr &);
  ConstVarAttr(CONST p1);
  ~ConstVarAttr();
  virtual void accept(Visitor *v);
  virtual ConstVarAttr *clone() const;
  void swap(ConstVarAttr &);
};

class VolatileVarAttr : public VarAttr
{
public:
  VOLATILE volatile_;

  VolatileVarAttr(const VolatileVarAttr &);
  VolatileVarAttr &operator=(const VolatileVarAttr &);
  VolatileVarAttr(VOLATILE p1);
  ~VolatileVarAttr();
  virtual void accept(Visitor *v);
  virtual VolatileVarAttr *clone() const;
  void swap(VolatileVarAttr &);
};

class ContIntVarAttr : public VarAttr
{
public:
  Integer integer_1;
  Integer integer_2;

  ContIntVarAttr(const ContIntVarAttr &);
  ContIntVarAttr &operator=(const ContIntVarAttr &);
  ContIntVarAttr(Integer p1, Integer p2);
  ~ContIntVarAttr();
  virtual void accept(Visitor *v);
  virtual ContIntVarAttr *clone() const;
  void swap(ContIntVarAttr &);
};

class BasicAttrConsInt : public BasicAttribute
{
public:
  Integer integer_;

  BasicAttrConsInt(const BasicAttrConsInt &);
  BasicAttrConsInt &operator=(const BasicAttrConsInt &);
  BasicAttrConsInt(Integer p1);
  ~BasicAttrConsInt();
  virtual void accept(Visitor *v);
  virtual BasicAttrConsInt *clone() const;
  void swap(BasicAttrConsInt &);
};

class BasicAttrConsFloat : public BasicAttribute
{
public:
  Double double_;

  BasicAttrConsFloat(const BasicAttrConsFloat &);
  BasicAttrConsFloat &operator=(const BasicAttrConsFloat &);
  BasicAttrConsFloat(Double p1);
  ~BasicAttrConsFloat();
  virtual void accept(Visitor *v);
  virtual BasicAttrConsFloat *clone() const;
  void swap(BasicAttrConsFloat &);
};

class BasicAttrVar : public BasicAttribute
{
public:
  VarAttr *varattr_;

  BasicAttrVar(const BasicAttrVar &);
  BasicAttrVar &operator=(const BasicAttrVar &);
  BasicAttrVar(VarAttr *p1);
  ~BasicAttrVar();
  virtual void accept(Visitor *v);
  virtual BasicAttrVar *clone() const;
  void swap(BasicAttrVar &);
};

class ParameterBasicAttr : public ParameterAttrListNE
{
public:
  ListBasicAttribute *listbasicattribute_;

  ParameterBasicAttr(const ParameterBasicAttr &);
  ParameterBasicAttr &operator=(const ParameterBasicAttr &);
  ParameterBasicAttr(ListBasicAttribute *p1);
  ~ParameterBasicAttr();
  virtual void accept(Visitor *v);
  virtual ParameterBasicAttr *clone() const;
  void swap(ParameterBasicAttr &);
};

class ParameterBasicAttrStringConst : public ParameterAttrListNE
{
public:
  ListBasicAttribute *listbasicattribute_;
  StringConstant *stringconstant_;

  ParameterBasicAttrStringConst(const ParameterBasicAttrStringConst &);
  ParameterBasicAttrStringConst &operator=(const ParameterBasicAttrStringConst &);
  ParameterBasicAttrStringConst(ListBasicAttribute *p1, StringConstant *p2);
  ~ParameterBasicAttrStringConst();
  virtual void accept(Visitor *v);
  virtual ParameterBasicAttrStringConst *clone() const;
  void swap(ParameterBasicAttrStringConst &);
};

class ParameterBasicAttrStringConstNext : public ParameterAttrListNE
{
public:
  ListBasicAttribute *listbasicattribute_;
  StringConstant *stringconstant_;
  ParameterAttrListNE *parameterattrlistne_;

  ParameterBasicAttrStringConstNext(const ParameterBasicAttrStringConstNext &);
  ParameterBasicAttrStringConstNext &operator=(const ParameterBasicAttrStringConstNext &);
  ParameterBasicAttrStringConstNext(ListBasicAttribute *p1, StringConstant *p2, ParameterAttrListNE *p3);
  ~ParameterBasicAttrStringConstNext();
  virtual void accept(Visitor *v);
  virtual ParameterBasicAttrStringConstNext *clone() const;
  void swap(ParameterBasicAttrStringConstNext &);
};

class ParamAttrList : public ParamAttrListNE
{
public:
  ParameterAttrListNE *parameterattrlistne_;

  ParamAttrList(const ParamAttrList &);
  ParamAttrList &operator=(const ParamAttrList &);
  ParamAttrList(ParameterAttrListNE *p1);
  ~ParamAttrList();
  virtual void accept(Visitor *v);
  virtual ParamAttrList *clone() const;
  void swap(ParamAttrList &);
};

class ParamStringConstant : public ParamAttrListNE
{
public:
  StringConstant *stringconstant_;

  ParamStringConstant(const ParamStringConstant &);
  ParamStringConstant &operator=(const ParamStringConstant &);
  ParamStringConstant(StringConstant *p1);
  ~ParamStringConstant();
  virtual void accept(Visitor *v);
  virtual ParamStringConstant *clone() const;
  void swap(ParamStringConstant &);
};

class BasicAttr : public Attr
{
public:
  BasicAttribute *basicattribute_;

  BasicAttr(const BasicAttr &);
  BasicAttr &operator=(const BasicAttr &);
  BasicAttr(BasicAttribute *p1);
  ~BasicAttr();
  virtual void accept(Visitor *v);
  virtual BasicAttr *clone() const;
  void swap(BasicAttr &);
};

class AttrStringConstant : public Attr
{
public:
  StringConstant *stringconstant_;

  AttrStringConstant(const AttrStringConstant &);
  AttrStringConstant &operator=(const AttrStringConstant &);
  AttrStringConstant(StringConstant *p1);
  ~AttrStringConstant();
  virtual void accept(Visitor *v);
  virtual AttrStringConstant *clone() const;
  void swap(AttrStringConstant &);
};

class FuncationCall : public Attr
{
public:
  IdOrTypenameAsId *idortypenameasid_;
  ListAttr *listattr_;

  FuncationCall(const FuncationCall &);
  FuncationCall &operator=(const FuncationCall &);
  FuncationCall(IdOrTypenameAsId *p1, ListAttr *p2);
  ~FuncationCall();
  virtual void accept(Visitor *v);
  virtual FuncationCall *clone() const;
  void swap(FuncationCall &);
};

class ProcedureCall : public Attr
{
public:
  IdOrTypenameAsId *idortypenameasid_;

  ProcedureCall(const ProcedureCall &);
  ProcedureCall &operator=(const ProcedureCall &);
  ProcedureCall(IdOrTypenameAsId *p1);
  ~ProcedureCall();
  virtual void accept(Visitor *v);
  virtual ProcedureCall *clone() const;
  void swap(ProcedureCall &);
};

class BasicPostfix : public Attr
{
public:
  BasicAttribute *basicattribute_;
  ParamAttrListNE *paramattrlistne_;

  BasicPostfix(const BasicPostfix &);
  BasicPostfix &operator=(const BasicPostfix &);
  BasicPostfix(BasicAttribute *p1, ParamAttrListNE *p2);
  ~BasicPostfix();
  virtual void accept(Visitor *v);
  virtual BasicPostfix *clone() const;
  void swap(BasicPostfix &);
};

class ArrowAttr : public Attr
{
public:
  Attr *attr_;
  IdOrTypename *idortypename_;

  ArrowAttr(const ArrowAttr &);
  ArrowAttr &operator=(const ArrowAttr &);
  ArrowAttr(Attr *p1, IdOrTypename *p2);
  ~ArrowAttr();
  virtual void accept(Visitor *v);
  virtual ArrowAttr *clone() const;
  void swap(ArrowAttr &);
};

class DotAttr : public Attr
{
public:
  Attr *attr_;
  IdOrTypename *idortypename_;

  DotAttr(const DotAttr &);
  DotAttr &operator=(const DotAttr &);
  DotAttr(Attr *p1, IdOrTypename *p2);
  ~DotAttr();
  virtual void accept(Visitor *v);
  virtual DotAttr *clone() const;
  void swap(DotAttr &);
};

class ArrayAttr : public Attr
{
public:
  Attr *attr_1;
  LBRACKET lbracket_;
  Attr *attr_2;
  RBRACKET rbracket_;

  ArrayAttr(const ArrayAttr &);
  ArrayAttr &operator=(const ArrayAttr &);
  ArrayAttr(Attr *p1, LBRACKET p2, Attr *p3, RBRACKET p4);
  ~ArrayAttr();
  virtual void accept(Visitor *v);
  virtual ArrayAttr *clone() const;
  void swap(ArrayAttr &);
};

class SizeOfAttrUnary : public Attr
{
public:
  AssignExpr *assignexpr_;

  SizeOfAttrUnary(const SizeOfAttrUnary &);
  SizeOfAttrUnary &operator=(const SizeOfAttrUnary &);
  SizeOfAttrUnary(AssignExpr *p1);
  ~SizeOfAttrUnary();
  virtual void accept(Visitor *v);
  virtual SizeOfAttrUnary *clone() const;
  void swap(SizeOfAttrUnary &);
};

class SizeOfAttrTypeName : public Attr
{
public:
  TypeName *typename_;

  SizeOfAttrTypeName(const SizeOfAttrTypeName &);
  SizeOfAttrTypeName &operator=(const SizeOfAttrTypeName &);
  SizeOfAttrTypeName(TypeName *p1);
  ~SizeOfAttrTypeName();
  virtual void accept(Visitor *v);
  virtual SizeOfAttrTypeName *clone() const;
  void swap(SizeOfAttrTypeName &);
};

class AlignOfAttrUnary : public Attr
{
public:
  ALIGNOF alignof_;
  AssignExpr *assignexpr_;

  AlignOfAttrUnary(const AlignOfAttrUnary &);
  AlignOfAttrUnary &operator=(const AlignOfAttrUnary &);
  AlignOfAttrUnary(ALIGNOF p1, AssignExpr *p2);
  ~AlignOfAttrUnary();
  virtual void accept(Visitor *v);
  virtual AlignOfAttrUnary *clone() const;
  void swap(AlignOfAttrUnary &);
};

class AlignOfAttrTypeName : public Attr
{
public:
  ALIGNOF alignof_;
  TypeName *typename_;

  AlignOfAttrTypeName(const AlignOfAttrTypeName &);
  AlignOfAttrTypeName &operator=(const AlignOfAttrTypeName &);
  AlignOfAttrTypeName(ALIGNOF p1, TypeName *p2);
  ~AlignOfAttrTypeName();
  virtual void accept(Visitor *v);
  virtual AlignOfAttrTypeName *clone() const;
  void swap(AlignOfAttrTypeName &);
};

class PlusUnaryAttr : public Attr
{
public:
  Attr *attr_;

  PlusUnaryAttr(const PlusUnaryAttr &);
  PlusUnaryAttr &operator=(const PlusUnaryAttr &);
  PlusUnaryAttr(Attr *p1);
  ~PlusUnaryAttr();
  virtual void accept(Visitor *v);
  virtual PlusUnaryAttr *clone() const;
  void swap(PlusUnaryAttr &);
};

class MinusUnaryAttr : public Attr
{
public:
  Attr *attr_;

  MinusUnaryAttr(const MinusUnaryAttr &);
  MinusUnaryAttr &operator=(const MinusUnaryAttr &);
  MinusUnaryAttr(Attr *p1);
  ~MinusUnaryAttr();
  virtual void accept(Visitor *v);
  virtual MinusUnaryAttr *clone() const;
  void swap(MinusUnaryAttr &);
};

class MultUnaryAttr : public Attr
{
public:
  Attr *attr_;

  MultUnaryAttr(const MultUnaryAttr &);
  MultUnaryAttr &operator=(const MultUnaryAttr &);
  MultUnaryAttr(Attr *p1);
  ~MultUnaryAttr();
  virtual void accept(Visitor *v);
  virtual MultUnaryAttr *clone() const;
  void swap(MultUnaryAttr &);
};

class AmpUnaryAttr : public Attr
{
public:
  Attr *attr_;

  AmpUnaryAttr(const AmpUnaryAttr &);
  AmpUnaryAttr &operator=(const AmpUnaryAttr &);
  AmpUnaryAttr(Attr *p1);
  ~AmpUnaryAttr();
  virtual void accept(Visitor *v);
  virtual AmpUnaryAttr *clone() const;
  void swap(AmpUnaryAttr &);
};

class NotUnaryAttr : public Attr
{
public:
  Attr *attr_;

  NotUnaryAttr(const NotUnaryAttr &);
  NotUnaryAttr &operator=(const NotUnaryAttr &);
  NotUnaryAttr(Attr *p1);
  ~NotUnaryAttr();
  virtual void accept(Visitor *v);
  virtual NotUnaryAttr *clone() const;
  void swap(NotUnaryAttr &);
};

class TildeUnaryAttr : public Attr
{
public:
  Attr *attr_;

  TildeUnaryAttr(const TildeUnaryAttr &);
  TildeUnaryAttr &operator=(const TildeUnaryAttr &);
  TildeUnaryAttr(Attr *p1);
  ~TildeUnaryAttr();
  virtual void accept(Visitor *v);
  virtual TildeUnaryAttr *clone() const;
  void swap(TildeUnaryAttr &);
};

class MultOp : public Attr
{
public:
  Attr *attr_1;
  Attr *attr_2;

  MultOp(const MultOp &);
  MultOp &operator=(const MultOp &);
  MultOp(Attr *p1, Attr *p2);
  ~MultOp();
  virtual void accept(Visitor *v);
  virtual MultOp *clone() const;
  void swap(MultOp &);
};

class DivOp : public Attr
{
public:
  Attr *attr_1;
  Attr *attr_2;

  DivOp(const DivOp &);
  DivOp &operator=(const DivOp &);
  DivOp(Attr *p1, Attr *p2);
  ~DivOp();
  virtual void accept(Visitor *v);
  virtual DivOp *clone() const;
  void swap(DivOp &);
};

class ModOp : public Attr
{
public:
  Attr *attr_1;
  Attr *attr_2;

  ModOp(const ModOp &);
  ModOp &operator=(const ModOp &);
  ModOp(Attr *p1, Attr *p2);
  ~ModOp();
  virtual void accept(Visitor *v);
  virtual ModOp *clone() const;
  void swap(ModOp &);
};

class AddOp : public Attr
{
public:
  Attr *attr_1;
  Attr *attr_2;

  AddOp(const AddOp &);
  AddOp &operator=(const AddOp &);
  AddOp(Attr *p1, Attr *p2);
  ~AddOp();
  virtual void accept(Visitor *v);
  virtual AddOp *clone() const;
  void swap(AddOp &);
};

class SubOp : public Attr
{
public:
  Attr *attr_1;
  Attr *attr_2;

  SubOp(const SubOp &);
  SubOp &operator=(const SubOp &);
  SubOp(Attr *p1, Attr *p2);
  ~SubOp();
  virtual void accept(Visitor *v);
  virtual SubOp *clone() const;
  void swap(SubOp &);
};

class LeftShiftOp : public Attr
{
public:
  Attr *attr_1;
  Attr *attr_2;

  LeftShiftOp(const LeftShiftOp &);
  LeftShiftOp &operator=(const LeftShiftOp &);
  LeftShiftOp(Attr *p1, Attr *p2);
  ~LeftShiftOp();
  virtual void accept(Visitor *v);
  virtual LeftShiftOp *clone() const;
  void swap(LeftShiftOp &);
};

class RightShiftOp : public Attr
{
public:
  Attr *attr_1;
  Attr *attr_2;

  RightShiftOp(const RightShiftOp &);
  RightShiftOp &operator=(const RightShiftOp &);
  RightShiftOp(Attr *p1, Attr *p2);
  ~RightShiftOp();
  virtual void accept(Visitor *v);
  virtual RightShiftOp *clone() const;
  void swap(RightShiftOp &);
};

class Less : public Attr
{
public:
  Attr *attr_1;
  Attr *attr_2;

  Less(const Less &);
  Less &operator=(const Less &);
  Less(Attr *p1, Attr *p2);
  ~Less();
  virtual void accept(Visitor *v);
  virtual Less *clone() const;
  void swap(Less &);
};

class Greater : public Attr
{
public:
  Attr *attr_1;
  Attr *attr_2;

  Greater(const Greater &);
  Greater &operator=(const Greater &);
  Greater(Attr *p1, Attr *p2);
  ~Greater();
  virtual void accept(Visitor *v);
  virtual Greater *clone() const;
  void swap(Greater &);
};

class LessEqual : public Attr
{
public:
  Attr *attr_1;
  Attr *attr_2;

  LessEqual(const LessEqual &);
  LessEqual &operator=(const LessEqual &);
  LessEqual(Attr *p1, Attr *p2);
  ~LessEqual();
  virtual void accept(Visitor *v);
  virtual LessEqual *clone() const;
  void swap(LessEqual &);
};

class GreaterEqual : public Attr
{
public:
  Attr *attr_1;
  Attr *attr_2;

  GreaterEqual(const GreaterEqual &);
  GreaterEqual &operator=(const GreaterEqual &);
  GreaterEqual(Attr *p1, Attr *p2);
  ~GreaterEqual();
  virtual void accept(Visitor *v);
  virtual GreaterEqual *clone() const;
  void swap(GreaterEqual &);
};

class EqualEqual : public Attr
{
public:
  Attr *attr_1;
  Attr *attr_2;

  EqualEqual(const EqualEqual &);
  EqualEqual &operator=(const EqualEqual &);
  EqualEqual(Attr *p1, Attr *p2);
  ~EqualEqual();
  virtual void accept(Visitor *v);
  virtual EqualEqual *clone() const;
  void swap(EqualEqual &);
};

class NotEqual : public Attr
{
public:
  Attr *attr_1;
  Attr *attr_2;

  NotEqual(const NotEqual &);
  NotEqual &operator=(const NotEqual &);
  NotEqual(Attr *p1, Attr *p2);
  ~NotEqual();
  virtual void accept(Visitor *v);
  virtual NotEqual *clone() const;
  void swap(NotEqual &);
};

class BitAnd : public Attr
{
public:
  Attr *attr_1;
  Attr *attr_2;

  BitAnd(const BitAnd &);
  BitAnd &operator=(const BitAnd &);
  BitAnd(Attr *p1, Attr *p2);
  ~BitAnd();
  virtual void accept(Visitor *v);
  virtual BitAnd *clone() const;
  void swap(BitAnd &);
};

class Xor : public Attr
{
public:
  Attr *attr_1;
  Attr *attr_2;

  Xor(const Xor &);
  Xor &operator=(const Xor &);
  Xor(Attr *p1, Attr *p2);
  ~Xor();
  virtual void accept(Visitor *v);
  virtual Xor *clone() const;
  void swap(Xor &);
};

class BitOr : public Attr
{
public:
  Attr *attr_1;
  Attr *attr_2;

  BitOr(const BitOr &);
  BitOr &operator=(const BitOr &);
  BitOr(Attr *p1, Attr *p2);
  ~BitOr();
  virtual void accept(Visitor *v);
  virtual BitOr *clone() const;
  void swap(BitOr &);
};

class And : public Attr
{
public:
  Attr *attr_1;
  Attr *attr_2;

  And(const And &);
  And &operator=(const And &);
  And(Attr *p1, Attr *p2);
  ~And();
  virtual void accept(Visitor *v);
  virtual And *clone() const;
  void swap(And &);
};

class Or : public Attr
{
public:
  Attr *attr_1;
  Attr *attr_2;

  Or(const Or &);
  Or &operator=(const Or &);
  Or(Attr *p1, Attr *p2);
  ~Or();
  virtual void accept(Visitor *v);
  virtual Or *clone() const;
  void swap(Or &);
};

class TernaryCond : public Attr
{
public:
  Attr *attr_1;
  AttrTest *attrtest_;
  Attr *attr_2;
  Attr *attr_3;

  TernaryCond(const TernaryCond &);
  TernaryCond &operator=(const TernaryCond &);
  TernaryCond(Attr *p1, AttrTest *p2, Attr *p3, Attr *p4);
  ~TernaryCond();
  virtual void accept(Visitor *v);
  virtual TernaryCond *clone() const;
  void swap(TernaryCond &);
};

class AnAttr : public Attr
{
public:
  Attr *attr_1;
  Attr *attr_2;

  AnAttr(const AnAttr &);
  AnAttr &operator=(const AnAttr &);
  AnAttr(Attr *p1, Attr *p2);
  ~AnAttr();
  virtual void accept(Visitor *v);
  virtual AnAttr *clone() const;
  void swap(AnAttr &);
};

class AvoidShiftReduce : public AttrTest
{
public:

  AvoidShiftReduce(const AvoidShiftReduce &);
  AvoidShiftReduce &operator=(const AvoidShiftReduce &);
  AvoidShiftReduce();
  ~AvoidShiftReduce();
  virtual void accept(Visitor *v);
  virtual AvoidShiftReduce *clone() const;
  void swap(AvoidShiftReduce &);
};

class EmptyAtrList : public AttrList
{
public:

  EmptyAtrList(const EmptyAtrList &);
  EmptyAtrList &operator=(const EmptyAtrList &);
  EmptyAtrList();
  ~EmptyAtrList();
  virtual void accept(Visitor *v);
  virtual EmptyAtrList *clone() const;
  void swap(EmptyAtrList &);
};

class AtrList : public AttrList
{
public:
  ListAttr *listattr_;

  AtrList(const AtrList &);
  AtrList &operator=(const AtrList &);
  AtrList(ListAttr *p1);
  ~AtrList();
  virtual void accept(Visitor *v);
  virtual AtrList *clone() const;
  void swap(AtrList &);
};

class VolatileKeyWrod : public Asmattr
{
public:
  VOLATILE volatile_;

  VolatileKeyWrod(const VolatileKeyWrod &);
  VolatileKeyWrod &operator=(const VolatileKeyWrod &);
  VolatileKeyWrod(VOLATILE p1);
  ~VolatileKeyWrod();
  virtual void accept(Visitor *v);
  virtual VolatileKeyWrod *clone() const;
  void swap(VolatileKeyWrod &);
};

class ConstKeyWrod : public Asmattr
{
public:
  CONST const_;

  ConstKeyWrod(const ConstKeyWrod &);
  ConstKeyWrod &operator=(const ConstKeyWrod &);
  ConstKeyWrod(CONST p1);
  ~ConstKeyWrod();
  virtual void accept(Visitor *v);
  virtual ConstKeyWrod *clone() const;
  void swap(ConstKeyWrod &);
};

class NoAsmoutputs : public Asmoutputs
{
public:

  NoAsmoutputs(const NoAsmoutputs &);
  NoAsmoutputs &operator=(const NoAsmoutputs &);
  NoAsmoutputs();
  ~NoAsmoutputs();
  virtual void accept(Visitor *v);
  virtual NoAsmoutputs *clone() const;
  void swap(NoAsmoutputs &);
};

class SomeAsmoutputs : public Asmoutputs
{
public:
  Asmoperands *asmoperands_;
  Asminputs *asminputs_;

  SomeAsmoutputs(const SomeAsmoutputs &);
  SomeAsmoutputs &operator=(const SomeAsmoutputs &);
  SomeAsmoutputs(Asmoperands *p1, Asminputs *p2);
  ~SomeAsmoutputs();
  virtual void accept(Visitor *v);
  virtual SomeAsmoutputs *clone() const;
  void swap(SomeAsmoutputs &);
};

class NoAsmoperands : public Asmoperands
{
public:

  NoAsmoperands(const NoAsmoperands &);
  NoAsmoperands &operator=(const NoAsmoperands &);
  NoAsmoperands();
  ~NoAsmoperands();
  virtual void accept(Visitor *v);
  virtual NoAsmoperands *clone() const;
  void swap(NoAsmoperands &);
};

class SomeAsmoperands : public Asmoperands
{
public:
  ListAsmoperand *listasmoperand_;

  SomeAsmoperands(const SomeAsmoperands &);
  SomeAsmoperands &operator=(const SomeAsmoperands &);
  SomeAsmoperands(ListAsmoperand *p1);
  ~SomeAsmoperands();
  virtual void accept(Visitor *v);
  virtual SomeAsmoperands *clone() const;
  void swap(SomeAsmoperands &);
};

class AsmOperand : public Asmoperand
{
public:
  Asmopname *asmopname_;
  StringConstant *stringconstant_;
  Expression *expression_;

  AsmOperand(const AsmOperand &);
  AsmOperand &operator=(const AsmOperand &);
  AsmOperand(Asmopname *p1, StringConstant *p2, Expression *p3);
  ~AsmOperand();
  virtual void accept(Visitor *v);
  virtual AsmOperand *clone() const;
  void swap(AsmOperand &);
};

class NoAsminputs : public Asminputs
{
public:

  NoAsminputs(const NoAsminputs &);
  NoAsminputs &operator=(const NoAsminputs &);
  NoAsminputs();
  ~NoAsminputs();
  virtual void accept(Visitor *v);
  virtual NoAsminputs *clone() const;
  void swap(NoAsminputs &);
};

class SomeAsminputs : public Asminputs
{
public:
  Asmoperands *asmoperands_;
  Asmclobber *asmclobber_;

  SomeAsminputs(const SomeAsminputs &);
  SomeAsminputs &operator=(const SomeAsminputs &);
  SomeAsminputs(Asmoperands *p1, Asmclobber *p2);
  ~SomeAsminputs();
  virtual void accept(Visitor *v);
  virtual SomeAsminputs *clone() const;
  void swap(SomeAsminputs &);
};

class NoAsmopname : public Asmopname
{
public:

  NoAsmopname(const NoAsmopname &);
  NoAsmopname &operator=(const NoAsmopname &);
  NoAsmopname();
  ~NoAsmopname();
  virtual void accept(Visitor *v);
  virtual NoAsmopname *clone() const;
  void swap(NoAsmopname &);
};

class SomeAsmopname : public Asmopname
{
public:
  LBRACKET lbracket_;
  Ident ident_;
  RBRACKET rbracket_;

  SomeAsmopname(const SomeAsmopname &);
  SomeAsmopname &operator=(const SomeAsmopname &);
  SomeAsmopname(LBRACKET p1, Ident p2, RBRACKET p3);
  ~SomeAsmopname();
  virtual void accept(Visitor *v);
  virtual SomeAsmopname *clone() const;
  void swap(SomeAsmopname &);
};

class NoAsmclobber : public Asmclobber
{
public:

  NoAsmclobber(const NoAsmclobber &);
  NoAsmclobber &operator=(const NoAsmclobber &);
  NoAsmclobber();
  ~NoAsmclobber();
  virtual void accept(Visitor *v);
  virtual NoAsmclobber *clone() const;
  void swap(NoAsmclobber &);
};

class ColonAsmclobber : public Asmclobber
{
public:
  Asmlabels *asmlabels_;

  ColonAsmclobber(const ColonAsmclobber &);
  ColonAsmclobber &operator=(const ColonAsmclobber &);
  ColonAsmclobber(Asmlabels *p1);
  ~ColonAsmclobber();
  virtual void accept(Visitor *v);
  virtual ColonAsmclobber *clone() const;
  void swap(ColonAsmclobber &);
};

class ColonStringAsmclobber : public Asmclobber
{
public:
  ListStringConstant *liststringconstant_;
  Asmlabels *asmlabels_;

  ColonStringAsmclobber(const ColonStringAsmclobber &);
  ColonStringAsmclobber &operator=(const ColonStringAsmclobber &);
  ColonStringAsmclobber(ListStringConstant *p1, Asmlabels *p2);
  ~ColonStringAsmclobber();
  virtual void accept(Visitor *v);
  virtual ColonStringAsmclobber *clone() const;
  void swap(ColonStringAsmclobber &);
};

class NoAsmlabels : public Asmlabels
{
public:

  NoAsmlabels(const NoAsmlabels &);
  NoAsmlabels &operator=(const NoAsmlabels &);
  NoAsmlabels();
  ~NoAsmlabels();
  virtual void accept(Visitor *v);
  virtual NoAsmlabels *clone() const;
  void swap(NoAsmlabels &);
};

class SomeAsmlabels : public Asmlabels
{
public:
  ListLocalLabelName *listlocallabelname_;

  SomeAsmlabels(const SomeAsmlabels &);
  SomeAsmlabels &operator=(const SomeAsmlabels &);
  SomeAsmlabels(ListLocalLabelName *p1);
  ~SomeAsmlabels();
  virtual void accept(Visitor *v);
  virtual SomeAsmlabels *clone() const;
  void swap(SomeAsmlabels &);
};



class ListOneString : public Visitable, public std::vector<OneString*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListOneString *clone() const;
};

ListOneString* consListOneString(OneString* x, ListOneString* xs);

class ListInitializerSingle : public Visitable, public std::vector<InitializerSingle*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListInitializerSingle *clone() const;
};

ListInitializerSingle* consListInitializerSingle(InitializerSingle* x, ListInitializerSingle* xs);

class ListExpression : public Visitable, public std::vector<Expression*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListExpression *clone() const;
};

ListExpression* consListExpression(Expression* x, ListExpression* xs);

class ListBlockElement : public Visitable, public std::vector<BlockElement*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListBlockElement *clone() const;
};

ListBlockElement* consListBlockElement(BlockElement* x, ListBlockElement* xs);

class ListAnnot : public Visitable, public std::vector<Annot*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListAnnot *clone() const;
};

ListAnnot* consListAnnot(Annot* x, ListAnnot* xs);

class ListLocalLabel : public Visitable, public std::vector<LocalLabel*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListLocalLabel *clone() const;
};

ListLocalLabel* consListLocalLabel(LocalLabel* x, ListLocalLabel* xs);

class ListLocalLabelName : public Visitable, public std::vector<LocalLabelName*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListLocalLabelName *clone() const;
};

ListLocalLabelName* consListLocalLabelName(LocalLabelName* x, ListLocalLabelName* xs);

class ListGenericAssociation : public Visitable, public std::vector<GenericAssociation*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListGenericAssociation *clone() const;
};

ListGenericAssociation* consListGenericAssociation(GenericAssociation* x, ListGenericAssociation* xs);

class ListInitDeclaratorAttr : public Visitable, public std::vector<InitDeclaratorAttr*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListInitDeclaratorAttr *clone() const;
};

ListInitDeclaratorAttr* consListInitDeclaratorAttr(InitDeclaratorAttr* x, ListInitDeclaratorAttr* xs);

class ListFieldDecl : public Visitable, public std::vector<FieldDecl*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListFieldDecl *clone() const;
};

ListFieldDecl* consListFieldDecl(FieldDecl* x, ListFieldDecl* xs);

class ListEnumerator : public Visitable, public std::vector<Enumerator*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListEnumerator *clone() const;
};

ListEnumerator* consListEnumerator(Enumerator* x, ListEnumerator* xs);

class ListDeclarator : public Visitable, public std::vector<Declarator*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListDeclarator *clone() const;
};

ListDeclarator* consListDeclarator(Declarator* x, ListDeclarator* xs);

class ListParameterDecl : public Visitable, public std::vector<ParameterDecl*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListParameterDecl *clone() const;
};

ListParameterDecl* consListParameterDecl(ParameterDecl* x, ListParameterDecl* xs);

class ListIdent : public Visitable, public std::vector<Ident>
{
public:
  virtual void accept(Visitor *v);
  virtual ListIdent *clone() const;
};

ListIdent* consListIdent(Ident x, ListIdent* xs);

class ListOldPardef : public Visitable, public std::vector<OldPardef*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListOldPardef *clone() const;
};

ListOldPardef* consListOldPardef(OldPardef* x, ListOldPardef* xs);

class ListAttributeNocv : public Visitable, public std::vector<AttributeNocv*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListAttributeNocv *clone() const;
};

ListAttributeNocv* consListAttributeNocv(AttributeNocv* x, ListAttributeNocv* xs);

class ListAttribute : public Visitable, public std::vector<Attribute*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListAttribute *clone() const;
};

ListAttribute* consListAttribute(Attribute* x, ListAttribute* xs);

class ListJustAttribute : public Visitable, public std::vector<JustAttribute*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListJustAttribute *clone() const;
};

ListJustAttribute* consListJustAttribute(JustAttribute* x, ListJustAttribute* xs);

class ListBasicAttribute : public Visitable, public std::vector<BasicAttribute*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListBasicAttribute *clone() const;
};

ListBasicAttribute* consListBasicAttribute(BasicAttribute* x, ListBasicAttribute* xs);

class ListAttr : public Visitable, public std::vector<Attr*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListAttr *clone() const;
};

ListAttr* consListAttr(Attr* x, ListAttr* xs);

class ListAsmattr : public Visitable, public std::vector<Asmattr*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListAsmattr *clone() const;
};

ListAsmattr* consListAsmattr(Asmattr* x, ListAsmattr* xs);

class ListAsmoperand : public Visitable, public std::vector<Asmoperand*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListAsmoperand *clone() const;
};

ListAsmoperand* consListAsmoperand(Asmoperand* x, ListAsmoperand* xs);

class ListStringConstant : public Visitable, public std::vector<StringConstant*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListStringConstant *clone() const;
};

ListStringConstant* consListStringConstant(StringConstant* x, ListStringConstant* xs);




}
#endif
