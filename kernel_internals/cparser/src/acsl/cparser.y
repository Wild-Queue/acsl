/* -*- c++ -*- File generated by the BNF Converter (bnfc 2.9.4.1). */

/* Parser definition to be used with Bison. */

/* Generate header file for lexer. */
%defines "Bison.H"
%name-prefix = "acsl"
  /* From Bison 2.6: %define api.prefix {acsl} */

/* Reentrant parser */
%pure_parser
  /* From Bison 2.3b (2008): %define api.pure full */
%lex-param   { yyscan_t scanner }
%parse-param { yyscan_t scanner }

/* Turn on line/column tracking in the acsllloc structure: */
%locations

/* Argument to the parser to be filled with the parsed tree. */
%parse-param { YYSTYPE *result }

%{
/* Begin C preamble code */

#include <algorithm> /* for std::reverse */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "Absyn.H"

#define YYMAXDEPTH 10000000

/* The type yyscan_t is defined by flex, but we need it in the parser already. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

typedef struct yy_buffer_state *YY_BUFFER_STATE;
extern YY_BUFFER_STATE acsl_scan_string(const char *str, yyscan_t scanner);
extern void acsl_delete_buffer(YY_BUFFER_STATE buf, yyscan_t scanner);

extern void acsllex_destroy(yyscan_t scanner);
extern char* acslget_text(yyscan_t scanner);

extern yyscan_t acsl_initialize_lexer(FILE * inp);

/* End C preamble code */
%}

%union
{
  int    _int;
  char   _char;
  double _double;
  char*  _string;
  acsl::Program* program_;
  acsl::Globals* globals_;
  acsl::GhostGlobals* ghostglobals_;
  acsl::Global* global_;
  acsl::IdOrTypenameAsId* idortypenameasid_;
  acsl::IdOrTypename* idortypename_;
  acsl::MaybeComma* maybecomma_;
  acsl::AssignExpr* assignexpr_;
  acsl::OffsetofMemberDesignator* offsetofmemberdesignator_;
  acsl::Expression* expression_;
  acsl::Constant* constant_;
  acsl::StringConstant* stringconstant_;
  acsl::WStringList* wstringlist_;
  acsl::OneString* onestring_;
  acsl::ListOneString* listonestring_;
  acsl::InitExpression* initexpression_;
  acsl::InitializerListOpt* initializerlistopt_;
  acsl::InitializerSingle* initializersingle_;
  acsl::ListInitializerSingle* listinitializersingle_;
  acsl::EqOpt* eqopt_;
  acsl::InitDesignators* initdesignators_;
  acsl::InitDesignatorsOpt* initdesignatorsopt_;
  acsl::GhostArgumentsOpt* ghostargumentsopt_;
  acsl::Arguments* arguments_;
  acsl::OptExpression* optexpression_;
  acsl::ListExpression* listexpression_;
  acsl::CommaExpressionOpt* commaexpressionopt_;
  acsl::Block* block_;
  acsl::BlockAttrs* blockattrs_;
  acsl::BlockElement* blockelement_;
  acsl::ListBlockElement* listblockelement_;
  acsl::Annot* annot_;
  acsl::ListAnnot* listannot_;
  acsl::LocalLabel* locallabel_;
  acsl::ListLocalLabel* listlocallabel_;
  acsl::LocalLabelName* locallabelname_;
  acsl::ListLocalLabelName* listlocallabelname_;
  acsl::AnnotatedStmt* annotatedstmt_;
  acsl::ElsePart* elsepart_;
  acsl::Statement* statement_;
  acsl::OptLoopAnnotations* optloopannotations_;
  acsl::ForClause* forclause_;
  acsl::GhostParameterOpt* ghostparameteropt_;
  acsl::Declaration* declaration_;
  acsl::GenericAssociation* genericassociation_;
  acsl::ListGenericAssociation* listgenericassociation_;
  acsl::DeclAndInitDeclAttrList* declandinitdeclattrlist_;
  acsl::InitDeclaratorAttr* initdeclaratorattr_;
  acsl::ListInitDeclaratorAttr* listinitdeclaratorattr_;
  acsl::InitDeclarator* initdeclarator_;
  acsl::DeclSpecWOType* declspecwotype_;
  acsl::DeclSpecList* declspeclist_;
  acsl::DeclSpecListNoNamed* declspeclistnonamed_;
  acsl::TypeSpec* typespec_;
  acsl::StructDeclList* structdecllist_;
  acsl::StaticAssertDeclaration* staticassertdeclaration_;
  acsl::FieldDecl* fielddecl_;
  acsl::ListFieldDecl* listfielddecl_;
  acsl::Enumerator* enumerator_;
  acsl::ListEnumerator* listenumerator_;
  acsl::Declarator* declarator_;
  acsl::ListDeclarator* listdeclarator_;
  acsl::AttributesOrStatic* attributesorstatic_;
  acsl::DirectDecl* directdecl_;
  acsl::RestParList* restparlist_;
  acsl::ParameterDecl* parameterdecl_;
  acsl::ListParameterDecl* listparameterdecl_;
  acsl::DirectOldProtoDecl* directoldprotodecl_;
  acsl::ListIdent* listident_;
  acsl::OldPardefList* oldpardeflist_;
  acsl::OldPardef* oldpardef_;
  acsl::ListOldPardef* listoldpardef_;
  acsl::PointerOpt* pointeropt_;
  acsl::TypeName* typename_;
  acsl::AbstractDecl* abstractdecl_;
  acsl::AbsDirectDecl* absdirectdecl_;
  acsl::AbsDirectDeclOpt* absdirectdeclopt_;
  acsl::FunctionDef* functiondef_;
  acsl::FunctionDefStart* functiondefstart_;
  acsl::CVSpec* cvspec_;
  acsl::AttributesWithAsm* attributeswithasm_;
  acsl::AttributeNocv* attributenocv_;
  acsl::ListAttributeNocv* listattributenocv_;
  acsl::Attribute* attribute_;
  acsl::ListAttribute* listattribute_;
  acsl::JustAttribute* justattribute_;
  acsl::ListJustAttribute* listjustattribute_;
  acsl::Pragma* pragma_;
  acsl::VarAttr* varattr_;
  acsl::BasicAttribute* basicattribute_;
  acsl::ListBasicAttribute* listbasicattribute_;
  acsl::ParameterAttrListNE* parameterattrlistne_;
  acsl::ParamAttrListNE* paramattrlistne_;
  acsl::Attr* attr_;
  acsl::ListAttr* listattr_;
  acsl::AttrTest* attrtest_;
  acsl::AttrList* attrlist_;
  acsl::Asmattr* asmattr_;
  acsl::ListAsmattr* listasmattr_;
  acsl::Asmoutputs* asmoutputs_;
  acsl::Asmoperands* asmoperands_;
  acsl::Asmoperand* asmoperand_;
  acsl::ListAsmoperand* listasmoperand_;
  acsl::Asminputs* asminputs_;
  acsl::Asmopname* asmopname_;
  acsl::Asmclobber* asmclobber_;
  acsl::ListStringConstant* liststringconstant_;
  acsl::Asmlabels* asmlabels_;
}

%{
void yyerror(YYLTYPE *loc, yyscan_t scanner, YYSTYPE *result, const char *msg)
{
  fprintf(stderr, "error: %d,%d: %s at %s\n",
    loc->first_line, loc->first_column, msg, acslget_text(scanner));
}

int yyparse(yyscan_t scanner, YYSTYPE *result);

extern int yylex(YYSTYPE *lvalp, YYLTYPE *llocp, yyscan_t scanner);
%}

%token          _ERROR_
%token          _BANG              /* ! */
%token          _BANGEQ            /* != */
%token          _PERCENT           /* % */
%token          _PERCENTEQ         /* %= */
%token          _AMP               /* & */
%token          _DAMP              /* && */
%token          _AMPEQ             /* &= */
%token          _LPAREN            /* ( */
%token          _RPAREN            /* ) */
%token          _STAR              /* * */
%token          _STAREQ            /* *= */
%token          _PLUS              /* + */
%token          _DPLUS             /* ++ */
%token          _PLUSEQ            /* += */
%token          _COMMA             /* , */
%token          _MINUS             /* - */
%token          _DMINUS            /* -- */
%token          _MINUSEQ           /* -= */
%token          _RARROW            /* -> */
%token          _DOT               /* . */
%token          _ELLIPSIS          /* ... */
%token          _SLASH             /* / */
%token          _SLASHEQ           /* /= */
%token          _COLON             /* : */
%token          _SEMI              /* ; */
%token          _LT                /* < */
%token          _DLT               /* << */
%token          _DLTEQ             /* <<= */
%token          _LDARROW           /* <= */
%token          _EQ                /* = */
%token          _DEQ               /* == */
%token          _GT                /* > */
%token          _GTEQ              /* >= */
%token          _DGT               /* >> */
%token          _DGTEQ             /* >>= */
%token          _QUESTION          /* ? */
%token          _SYMB_55           /* \\ghost */
%token          _CARET             /* ^ */
%token          _CARETEQ           /* ^= */
%token          _SYMB_53           /* _Bool */
%token          _SYMB_4            /* _Generic */
%token          _SYMB_52           /* _Noreturn */
%token          _SYMB_51           /* _Static_assert */
%token          _SYMB_58           /* _Thread_local */
%token          _SYMB_45           /* __PRETTY_FUNCTION__ */
%token          _SYMB_7            /* __builtin_offsetof */
%token          _SYMB_6            /* __builtin_types_compatible_p */
%token          _SYMB_5            /* __builtin_va_arg */
%token          _SYMB_56           /* __declspec */
%token          _SYMB_49           /* __except */
%token          _SYMB_50           /* __finally */
%token          _SYMB_54           /* __int64 */
%token          _SYMB_47           /* __label__ */
%token          _SYMB_57           /* __thread */
%token          _SYMB_48           /* __try */
%token          _KW_auto           /* auto */
%token          _KW_break          /* break */
%token          _KW_case           /* case */
%token          _KW_char           /* char */
%token          _KW_continue       /* continue */
%token          _KW_default        /* default */
%token          _KW_do             /* do */
%token          _KW_double         /* double */
%token          _KW_else           /* else */
%token          _KW_enum           /* enum */
%token          _KW_extern         /* extern */
%token          _KW_float          /* float */
%token          _KW_for            /* for */
%token          _KW_ghost          /* ghost */
%token          _KW_goto           /* goto */
%token          _KW_if             /* if */
%token          _KW_long           /* long */
%token          _KW_pragma         /* pragma */
%token          _KW_register       /* register */
%token          _KW_return         /* return */
%token          _KW_short          /* short */
%token          _KW_sizeof         /* sizeof */
%token          _KW_static         /* static */
%token          _KW_struct         /* struct */
%token          _KW_switch         /* switch */
%token          _KW_typedef        /* typedef */
%token          _KW_union          /* union */
%token          _KW_unsigned       /* unsigned */
%token          _KW_void           /* void */
%token          _KW_while          /* while */
%token          _BAR               /* | */
%token          _BAREQ             /* |= */
%token          _DBAR              /* || */
%token          _TILDE             /* ~ */
%token<_string> T_ALIGNOF          /* ALIGNOF */
%token<_string> T_ASM              /* ASM */
%token<_string> T_ATTRIBUTE        /* ATTRIBUTE */
%token<_string> T_ATTRIBUTE_ANNOT  /* ATTRIBUTE_ANNOT */
%token<_string> T_BLOCKATTRIBUTE   /* BLOCKATTRIBUTE */
%token<_string> T_CODE_ANNOT       /* CODE_ANNOT */
%token<_string> T_CONST            /* CONST */
%token<_string> T_CST_WCHAR        /* CST_WCHAR */
%token<_string> T_CST_WSTRING      /* CST_WSTRING */
%token<_string> T_DECL             /* DECL */
%token<_string> T_FUNCTION__       /* FUNCTION__ */
%token<_string> T_INLINE           /* INLINE */
%token<_string> T_INT              /* INT */
%token<_string> T_LBRACE           /* LBRACE */
%token<_string> T_LBRACKET         /* LBRACKET */
%token<_string> T_LOOP_ANNOT       /* LOOP_ANNOT */
%token<_string> T_MSATTR           /* MSATTR */
%token<_string> T_NAMEDTYPE        /* NAMEDTYPE */
%token<_string> T_RBRACE           /* RBRACE */
%token<_string> T_RBRACKET         /* RBRACKET */
%token<_string> T_RESTRICT         /* RESTRICT */
%token<_string> T_RGHOST           /* RGHOST */
%token<_string> T_SIGNED           /* SIGNED */
%token<_string> T_SPEC             /* SPEC */
%token<_string> T_TYPEOF           /* TYPEOF */
%token<_string> T_VOLATILE         /* VOLATILE */
%token<_string> _STRING_
%token<_char>   _CHAR_
%token<_int>    _INTEGER_
%token<_double> _DOUBLE_
%token<_string> _IDENT_

%type <program_> Program
%type <globals_> Globals
%type <ghostglobals_> GhostGlobals
%type <global_> Global
%type <idortypenameasid_> IdOrTypenameAsId
%type <idortypename_> IdOrTypename
%type <maybecomma_> MaybeComma
%type <assignexpr_> AssignExpr15
%type <assignexpr_> AssignExpr14
%type <offsetofmemberdesignator_> OffsetofMemberDesignator
%type <assignexpr_> AssignExpr13
%type <assignexpr_> AssignExpr12
%type <assignexpr_> AssignExpr11
%type <assignexpr_> AssignExpr10
%type <assignexpr_> AssignExpr9
%type <assignexpr_> AssignExpr8
%type <assignexpr_> AssignExpr7
%type <assignexpr_> AssignExpr6
%type <assignexpr_> AssignExpr5
%type <assignexpr_> AssignExpr4
%type <assignexpr_> AssignExpr3
%type <assignexpr_> AssignExpr2
%type <assignexpr_> AssignExpr1
%type <assignexpr_> AssignExpr
%type <expression_> Expression
%type <constant_> Constant
%type <stringconstant_> StringConstant
%type <wstringlist_> WStringList
%type <onestring_> OneString
%type <listonestring_> ListOneString
%type <initexpression_> InitExpression
%type <initializerlistopt_> InitializerListOpt
%type <initializersingle_> InitializerSingle
%type <listinitializersingle_> ListInitializerSingle
%type <eqopt_> EqOpt
%type <initdesignators_> InitDesignators
%type <initdesignatorsopt_> InitDesignatorsOpt
%type <ghostargumentsopt_> GhostArgumentsOpt
%type <arguments_> Arguments
%type <optexpression_> OptExpression
%type <listexpression_> ListExpression
%type <commaexpressionopt_> CommaExpressionOpt
%type <block_> Block
%type <blockattrs_> BlockAttrs
%type <blockelement_> BlockElement
%type <listblockelement_> ListBlockElement
%type <annot_> Annot
%type <listannot_> ListAnnot
%type <locallabel_> LocalLabel
%type <listlocallabel_> ListLocalLabel
%type <locallabelname_> LocalLabelName
%type <listlocallabelname_> ListLocalLabelName
%type <annotatedstmt_> AnnotatedStmt
%type <elsepart_> ElsePart
%type <statement_> Statement
%type <optloopannotations_> OptLoopAnnotations
%type <forclause_> ForClause
%type <ghostparameteropt_> GhostParameterOpt
%type <declaration_> Declaration
%type <genericassociation_> GenericAssociation
%type <listgenericassociation_> ListGenericAssociation
%type <declandinitdeclattrlist_> DeclAndInitDeclAttrList
%type <initdeclaratorattr_> InitDeclaratorAttr
%type <listinitdeclaratorattr_> ListInitDeclaratorAttr
%type <initdeclarator_> InitDeclarator
%type <declspecwotype_> DeclSpecWOType
%type <declspeclist_> DeclSpecList
%type <declspeclistnonamed_> DeclSpecListNoNamed
%type <typespec_> TypeSpec
%type <structdecllist_> StructDeclList
%type <staticassertdeclaration_> StaticAssertDeclaration
%type <fielddecl_> FieldDecl
%type <listfielddecl_> ListFieldDecl
%type <enumerator_> Enumerator
%type <listenumerator_> ListEnumerator
%type <declarator_> Declarator
%type <listdeclarator_> ListDeclarator
%type <attributesorstatic_> AttributesOrStatic
%type <directdecl_> DirectDecl
%type <restparlist_> RestParList
%type <parameterdecl_> ParameterDecl
%type <listparameterdecl_> ListParameterDecl
%type <directoldprotodecl_> DirectOldProtoDecl
%type <listident_> ListIdent
%type <oldpardeflist_> OldPardefList
%type <oldpardef_> OldPardef
%type <listoldpardef_> ListOldPardef
%type <pointeropt_> PointerOpt
%type <typename_> TypeName
%type <abstractdecl_> AbstractDecl
%type <absdirectdecl_> AbsDirectDecl
%type <absdirectdeclopt_> AbsDirectDeclOpt
%type <functiondef_> FunctionDef
%type <functiondefstart_> FunctionDefStart
%type <cvspec_> CVSpec
%type <attributeswithasm_> AttributesWithAsm
%type <attributenocv_> AttributeNocv
%type <listattributenocv_> ListAttributeNocv
%type <attribute_> Attribute
%type <listattribute_> ListAttribute
%type <justattribute_> JustAttribute
%type <listjustattribute_> ListJustAttribute
%type <pragma_> Pragma
%type <varattr_> VarAttr
%type <basicattribute_> BasicAttribute
%type <listbasicattribute_> ListBasicAttribute
%type <parameterattrlistne_> ParameterAttrListNE
%type <paramattrlistne_> ParamAttrListNE
%type <attr_> Attr14
%type <attr_> Attr13
%type <attr_> Attr12
%type <attr_> Attr11
%type <attr_> Attr10
%type <attr_> Attr9
%type <attr_> Attr8
%type <attr_> Attr7
%type <attr_> Attr6
%type <attr_> Attr5
%type <attr_> Attr4
%type <attr_> Attr3
%type <attr_> Attr2
%type <attr_> Attr1
%type <attr_> Attr
%type <listattr_> ListAttr
%type <attrtest_> AttrTest
%type <attrlist_> AttrList
%type <asmattr_> Asmattr
%type <listasmattr_> ListAsmattr
%type <asmoutputs_> Asmoutputs
%type <asmoperands_> Asmoperands
%type <asmoperand_> Asmoperand
%type <listasmoperand_> ListAsmoperand
%type <asminputs_> Asminputs
%type <asmopname_> Asmopname
%type <asmclobber_> Asmclobber
%type <liststringconstant_> ListStringConstant
%type <asmlabels_> Asmlabels

%start Program

%%

Program : Globals { $$ = new acsl::AProgram($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->program_ = $$; }
;
Globals : /* empty */ { $$ = new acsl::NoGlobals(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->globals_ = $$; }
  | Global Globals { $$ = new acsl::SimpleGlobals($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->globals_ = $$; }
  | _KW_ghost GhostGlobals Globals { $$ = new acsl::AGhostGlobals($2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->globals_ = $$; }
  | _SEMI Globals { $$ = new acsl::SemiColonGlobals($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->globals_ = $$; }
;
GhostGlobals : Declaration GhostGlobals { $$ = new acsl::GhostGlobalsDeclataion($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->ghostglobals_ = $$; }
  | FunctionDef GhostGlobals { $$ = new acsl::GhostGlobalsFunctionDef($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->ghostglobals_ = $$; }
  | T_RGHOST { $$ = new acsl::GhostGlobalsRGhost($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->ghostglobals_ = $$; }
;
Global : T_DECL { $$ = new acsl::GlobalDecl($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->global_ = $$; }
  | Declaration { $$ = new acsl::GlobalsDeclataion($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->global_ = $$; }
  | FunctionDef { $$ = new acsl::GlobalsFunctionDef($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->global_ = $$; }
  | _KW_extern StringConstant Declaration { $$ = new acsl::ExternGlobalDeclataion($2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->global_ = $$; }
  | _KW_extern StringConstant T_LBRACE Globals T_RBRACE { $$ = new acsl::ExternGlobalPar($2, $3, $4, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->global_ = $$; }
  | T_ASM _LPAREN StringConstant _RPAREN _SEMI { $$ = new acsl::AsmGlobal($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->global_ = $$; }
  | Pragma { $$ = new acsl::PragmaGlobal($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->global_ = $$; }
  | _IDENT_ _LPAREN ListIdent _RPAREN OldPardefList _SEMI { std::reverse($3->begin(),$3->end()) ;$$ = new acsl::GlobalOldStyle($1, $3, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->global_ = $$; }
  | _IDENT_ _LPAREN _RPAREN _SEMI { $$ = new acsl::GlobalEmptyOldStyle($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->global_ = $$; }
;
IdOrTypenameAsId : _IDENT_ { $$ = new acsl::Identifier($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->idortypenameasid_ = $$; }
  | T_NAMEDTYPE { $$ = new acsl::NamedType($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->idortypenameasid_ = $$; }
;
IdOrTypename : IdOrTypenameAsId { $$ = new acsl::IdTypename($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->idortypename_ = $$; }
;
MaybeComma : /* empty */ { $$ = new acsl::NoComa(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->maybecomma_ = $$; }
  | _COMMA { $$ = new acsl::Coma(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->maybecomma_ = $$; }
;
AssignExpr15 : _IDENT_ { $$ = new acsl::IdentifierPrimaryExpression($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | Constant { $$ = new acsl::ConstantPrimaryExpressin($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | _LPAREN ListExpression _RPAREN { std::reverse($2->begin(),$2->end()) ;$$ = new acsl::CommaExpressionPrimaryExpressin($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | _LPAREN Block _RPAREN { $$ = new acsl::BlockPrimaryExpressin($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | _SYMB_4 _LPAREN AssignExpr _COMMA ListGenericAssociation _RPAREN { std::reverse($5->begin(),$5->end()) ;$$ = new acsl::GenericAssociationPrimaryExpressin($3, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | _SYMB_4 _LPAREN AssignExpr _RPAREN { $$ = new acsl::GenericPrimaryExpressin($3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
;
AssignExpr14 : AssignExpr15 { $$ = $1; $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | AssignExpr14 T_LBRACKET ListExpression T_RBRACKET { std::reverse($3->begin(),$3->end()) ;$$ = new acsl::BracketsPostfixExpression($1, $2, $3, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | AssignExpr14 _LPAREN Arguments _RPAREN GhostArgumentsOpt { $$ = new acsl::ArgumentsPostfixExpression($1, $3, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | _SYMB_5 _LPAREN Expression _COMMA TypeName _RPAREN { $$ = new acsl::BuiltinVaArgPostfixExpression($3, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | _SYMB_6 _LPAREN TypeName _COMMA TypeName _RPAREN { $$ = new acsl::BuiltinTypesCompatPostfixExpression($3, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | _SYMB_7 _LPAREN TypeName _COMMA OffsetofMemberDesignator _RPAREN { $$ = new acsl::BuiltinOffsetOfPostfixExpression($3, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | AssignExpr14 _DOT IdOrTypename { $$ = new acsl::DotPostfixExpression($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | AssignExpr14 _RARROW IdOrTypename { $$ = new acsl::ArrowPostfixExpression($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | AssignExpr14 _DPLUS { $$ = new acsl::PlusPlusPostfixExpression($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | AssignExpr14 _DMINUS { $$ = new acsl::MinusMinusPostfixExpression($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | _LPAREN TypeName _RPAREN T_LBRACE InitializerListOpt T_RBRACE { $$ = new acsl::ConstructorPostfixExpression($2, $4, $5, $6); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
;
OffsetofMemberDesignator : IdOrTypename { $$ = new acsl::IdTypenameOffsetMembetDesignator($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->offsetofmemberdesignator_ = $$; }
  | OffsetofMemberDesignator _DOT _IDENT_ { $$ = new acsl::DotOffsetMembetDesignator($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->offsetofmemberdesignator_ = $$; }
  | OffsetofMemberDesignator T_LBRACKET ListExpression T_RBRACKET { std::reverse($3->begin(),$3->end()) ;$$ = new acsl::BracketsOffsetMembetDesignator($1, $2, $3, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->offsetofmemberdesignator_ = $$; }
;
AssignExpr13 : AssignExpr14 { $$ = $1; $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | _DPLUS AssignExpr13 { $$ = new acsl::UnaryExprPlusPlus($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | _DMINUS AssignExpr13 { $$ = new acsl::UnaryExprMinusMinus($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | _KW_sizeof AssignExpr13 { $$ = new acsl::UnaryExprSizeOf($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | _KW_sizeof _LPAREN TypeName _RPAREN { $$ = new acsl::UnaryExprSizeOfTypeName($3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | T_ALIGNOF AssignExpr13 { $$ = new acsl::UnaryExprAlignOfUnaryExpr($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | T_ALIGNOF _LPAREN TypeName _RPAREN { $$ = new acsl::UnaryExprAlignOfTypeName($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | _PLUS AssignExpr12 { $$ = new acsl::UnaryExprPlus($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | _MINUS AssignExpr12 { $$ = new acsl::UnaryExprMinus($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | _STAR AssignExpr12 { $$ = new acsl::UnaryExprMult($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | _AMP AssignExpr12 { $$ = new acsl::UnaryExprAmp($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | _BANG AssignExpr12 { $$ = new acsl::UnaryExprNot($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | _TILDE AssignExpr12 { $$ = new acsl::UnaryExprTilde($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | _DAMP IdOrTypenameAsId { $$ = new acsl::UnaryExprAddress($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
;
AssignExpr12 : AssignExpr13 { $$ = $1; $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | _LPAREN TypeName _RPAREN AssignExpr12 { $$ = new acsl::CastExpr($2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
;
AssignExpr11 : AssignExpr12 { $$ = $1; $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | AssignExpr11 _STAR AssignExpr12 { $$ = new acsl::MulsExpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | AssignExpr11 _SLASH AssignExpr12 { $$ = new acsl::DivExpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | AssignExpr11 _PERCENT AssignExpr12 { $$ = new acsl::ModExpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
;
AssignExpr10 : AssignExpr11 { $$ = $1; $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | AssignExpr10 _PLUS AssignExpr11 { $$ = new acsl::PlusExpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | AssignExpr10 _MINUS AssignExpr11 { $$ = new acsl::MinusExpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
;
AssignExpr9 : AssignExpr10 { $$ = $1; $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | AssignExpr9 _DLT AssignExpr10 { $$ = new acsl::LeftShiftExpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | AssignExpr9 _DGT AssignExpr10 { $$ = new acsl::RightShiftExpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
;
AssignExpr8 : AssignExpr9 { $$ = $1; $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | AssignExpr8 _LT AssignExpr9 { $$ = new acsl::LessExpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | AssignExpr8 _GT AssignExpr9 { $$ = new acsl::GreaterExpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | AssignExpr8 _LDARROW AssignExpr9 { $$ = new acsl::LessEqualExpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | AssignExpr8 _GTEQ AssignExpr9 { $$ = new acsl::GreaterEqualExpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
;
AssignExpr7 : AssignExpr8 { $$ = $1; $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | AssignExpr7 _DEQ AssignExpr8 { $$ = new acsl::EqExpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | AssignExpr7 _BANGEQ AssignExpr8 { $$ = new acsl::NotEqExpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
;
AssignExpr6 : AssignExpr7 { $$ = $1; $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | AssignExpr6 _AMP AssignExpr7 { $$ = new acsl::BitAndExpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
;
AssignExpr5 : AssignExpr6 { $$ = $1; $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | AssignExpr5 _CARET AssignExpr6 { $$ = new acsl::BitXorExpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
;
AssignExpr4 : AssignExpr5 { $$ = $1; $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | AssignExpr4 _BAR AssignExpr5 { $$ = new acsl::BitOrExpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
;
AssignExpr3 : AssignExpr4 { $$ = $1; $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | AssignExpr3 _DAMP AssignExpr4 { $$ = new acsl::AndExpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
;
AssignExpr2 : AssignExpr3 { $$ = $1; $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | AssignExpr2 _DBAR AssignExpr3 { $$ = new acsl::OrExpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
;
AssignExpr1 : AssignExpr2 { $$ = $1; $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | AssignExpr2 _QUESTION OptExpression _COLON AssignExpr1 { $$ = new acsl::TernaryCondExpr($1, $3, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
;
AssignExpr : AssignExpr1 { $$ = $1; $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | AssignExpr12 _EQ AssignExpr { $$ = new acsl::EqAssignExpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | AssignExpr12 _PLUSEQ AssignExpr { $$ = new acsl::PlusEqAssignExpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | AssignExpr12 _MINUSEQ AssignExpr { $$ = new acsl::MinusEqAssignExpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | AssignExpr12 _STAREQ AssignExpr { $$ = new acsl::MultEqAssignExpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | AssignExpr12 _SLASHEQ AssignExpr { $$ = new acsl::DivEqAssignExpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | AssignExpr12 _PERCENTEQ AssignExpr { $$ = new acsl::ModEqAssignExpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | AssignExpr12 _AMPEQ AssignExpr { $$ = new acsl::AndEqAssignExpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | AssignExpr12 _BAREQ AssignExpr { $$ = new acsl::OrEqAssignExpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | AssignExpr12 _CARETEQ AssignExpr { $$ = new acsl::XorEqAssignExpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | AssignExpr12 _DLTEQ AssignExpr { $$ = new acsl::LeftShiftEqAssignExpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
  | AssignExpr12 _DGTEQ AssignExpr { $$ = new acsl::RightShiftEqAssignExpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->assignexpr_ = $$; }
;
Expression : AssignExpr { $$ = new acsl::AssignmentExpr($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->expression_ = $$; }
;
Constant : _INTEGER_ { $$ = new acsl::ConstantInt($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->constant_ = $$; }
  | _DOUBLE_ { $$ = new acsl::ConstantFloat($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->constant_ = $$; }
  | _CHAR_ { $$ = new acsl::ConstantChar($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->constant_ = $$; }
  | T_CST_WCHAR { $$ = new acsl::ConstantWChar($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->constant_ = $$; }
  | StringConstant { $$ = new acsl::ConstantString($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->constant_ = $$; }
  | WStringList { $$ = new acsl::ConstantWString($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->constant_ = $$; }
;
StringConstant : ListOneString { std::reverse($1->begin(),$1->end()) ;$$ = new acsl::StringConst($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->stringconstant_ = $$; }
;
WStringList : T_CST_WSTRING { $$ = new acsl::LastConstantWString($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wstringlist_ = $$; }
  | OneString WStringList { $$ = new acsl::OneStringWithList($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wstringlist_ = $$; }
  | T_CST_WSTRING WStringList { $$ = new acsl::WStringWithList($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wstringlist_ = $$; }
  | T_CST_WSTRING ListOneString { std::reverse($2->begin(),$2->end()) ;$$ = new acsl::LatersConstantWString($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->wstringlist_ = $$; }
;
OneString : _STRING_ { $$ = new acsl::SimpleConstantString($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->onestring_ = $$; }
  | T_FUNCTION__ { $$ = new acsl::FunctionConstantString($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->onestring_ = $$; }
  | _SYMB_45 { $$ = new acsl::PrettyFunctionConstantString(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->onestring_ = $$; }
;
ListOneString : OneString { $$ = new acsl::ListOneString(); $$->push_back($1); result->listonestring_ = $$; }
  | OneString ListOneString { $2->push_back($1); $$ = $2; result->listonestring_ = $$; }
;
InitExpression : Expression { $$ = new acsl::SimpleExpression($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->initexpression_ = $$; }
  | T_LBRACE InitializerListOpt T_RBRACE { $$ = new acsl::BracesExpression($1, $2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->initexpression_ = $$; }
;
InitializerListOpt : /* empty */ { $$ = new acsl::EmptyInitializerList(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->initializerlistopt_ = $$; }
  | ListInitializerSingle { std::reverse($1->begin(),$1->end()) ;$$ = new acsl::InitializerList($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->initializerlistopt_ = $$; }
  | ListInitializerSingle _COMMA { std::reverse($1->begin(),$1->end()) ;$$ = new acsl::InitializerListComma($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->initializerlistopt_ = $$; }
;
InitializerSingle : InitDesignators EqOpt InitExpression { $$ = new acsl::InitializerDesignator($1, $2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->initializersingle_ = $$; }
  | IdOrTypename _COLON InitExpression { $$ = new acsl::InitializerGCCDesignator($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->initializersingle_ = $$; }
  | InitExpression { $$ = new acsl::EmptyInitializer($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->initializersingle_ = $$; }
;
ListInitializerSingle : InitializerSingle { $$ = new acsl::ListInitializerSingle(); $$->push_back($1); result->listinitializersingle_ = $$; }
  | InitializerSingle _COMMA ListInitializerSingle { $3->push_back($1); $$ = $3; result->listinitializersingle_ = $$; }
;
EqOpt : _EQ { $$ = new acsl::EquationSign(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->eqopt_ = $$; }
  | /* empty */ { $$ = new acsl::NoEquationSign(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->eqopt_ = $$; }
;
InitDesignators : _DOT IdOrTypename InitDesignatorsOpt { $$ = new acsl::DotInitDesignator($2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->initdesignators_ = $$; }
  | T_LBRACKET Expression T_RBRACKET InitDesignatorsOpt { $$ = new acsl::BracketsInitDesignator($1, $2, $3, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->initdesignators_ = $$; }
  | T_LBRACKET Expression _ELLIPSIS Expression T_RBRACKET { $$ = new acsl::BracketsSliceInitDesignator($1, $2, $4, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->initdesignators_ = $$; }
;
InitDesignatorsOpt : /* empty */ { $$ = new acsl::NoInitDesignator(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->initdesignatorsopt_ = $$; }
  | InitDesignators { $$ = new acsl::SomeInitDesignator($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->initdesignatorsopt_ = $$; }
;
GhostArgumentsOpt : /* empty */ { $$ = new acsl::NoGhostArguments(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->ghostargumentsopt_ = $$; }
  | _KW_ghost _LPAREN Arguments _RPAREN T_RGHOST { $$ = new acsl::SomeGhostArguments($3, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->ghostargumentsopt_ = $$; }
;
Arguments : /* empty */ { $$ = new acsl::NoArguments(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->arguments_ = $$; }
  | ListExpression { std::reverse($1->begin(),$1->end()) ;$$ = new acsl::SomeArguments($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->arguments_ = $$; }
;
OptExpression : /* empty */ { $$ = new acsl::NoExpression(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->optexpression_ = $$; }
  | ListExpression { std::reverse($1->begin(),$1->end()) ;$$ = new acsl::SomeExpression($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->optexpression_ = $$; }
;
ListExpression : Expression { $$ = new acsl::ListExpression(); $$->push_back($1); result->listexpression_ = $$; }
  | Expression _COMMA ListExpression { $3->push_back($1); $$ = $3; result->listexpression_ = $$; }
;
CommaExpressionOpt : /* empty */ { $$ = new acsl::NoCommaExpression(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->commaexpressionopt_ = $$; }
  | ListExpression { std::reverse($1->begin(),$1->end()) ;$$ = new acsl::SomeCommaExpression($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->commaexpressionopt_ = $$; }
;
Block : T_LBRACE ListLocalLabel BlockAttrs ListBlockElement ListAnnot T_RBRACE { $$ = new acsl::ABlock($1, $2, $3, $4, $5, $6); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->block_ = $$; }
;
BlockAttrs : /* empty */ { $$ = new acsl::NoBlockAttrs(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->blockattrs_ = $$; }
  | T_BLOCKATTRIBUTE _LPAREN ListAttr _RPAREN { std::reverse($3->begin(),$3->end()) ;$$ = new acsl::SomeBlockAttrs($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->blockattrs_ = $$; }
;
BlockElement : ListAnnot Declaration { $$ = new acsl::DeclarationElement($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->blockelement_ = $$; }
  | ListAnnot Statement { $$ = new acsl::StatementElement($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->blockelement_ = $$; }
  | ListAnnot Pragma { $$ = new acsl::PragmaElement($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->blockelement_ = $$; }
;
ListBlockElement : /* empty */ { $$ = new acsl::ListBlockElement(); result->listblockelement_ = $$; }
  | ListBlockElement BlockElement { $1->push_back($2); $$ = $1; result->listblockelement_ = $$; }
;
Annot : T_CODE_ANNOT { $$ = new acsl::CodeAnnot($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->annot_ = $$; }
  | _KW_ghost ListBlockElement ListAnnot T_RGHOST { $$ = new acsl::GhostAnnot($2, $3, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->annot_ = $$; }
;
ListAnnot : /* empty */ { $$ = new acsl::ListAnnot(); result->listannot_ = $$; }
  | ListAnnot Annot { $1->push_back($2); $$ = $1; result->listannot_ = $$; }
;
LocalLabel : _SYMB_47 ListLocalLabelName _SEMI { std::reverse($2->begin(),$2->end()) ;$$ = new acsl::LocalLable($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->locallabel_ = $$; }
;
ListLocalLabel : /* empty */ { $$ = new acsl::ListLocalLabel(); result->listlocallabel_ = $$; }
  | ListLocalLabel LocalLabel { $1->push_back($2); $$ = $1; result->listlocallabel_ = $$; }
;
LocalLabelName : IdOrTypenameAsId { $$ = new acsl::ALocalLabelName($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->locallabelname_ = $$; }
;
ListLocalLabelName : LocalLabelName { $$ = new acsl::ListLocalLabelName(); $$->push_back($1); result->listlocallabelname_ = $$; }
  | LocalLabelName _COMMA ListLocalLabelName { $3->push_back($1); $$ = $3; result->listlocallabelname_ = $$; }
;
AnnotatedStmt : ListAnnot Statement { $$ = new acsl::AnnotatedStatement($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->annotatedstmt_ = $$; }
;
ElsePart : /* empty */ { $$ = new acsl::NoElsePart(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->elsepart_ = $$; }
  | _KW_else AnnotatedStmt { $$ = new acsl::SimpleElsePart($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->elsepart_ = $$; }
  | _KW_ghost AnnotatedStmt T_RGHOST { $$ = new acsl::SimpleGhostElsePart($2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->elsepart_ = $$; }
  | _KW_ghost AnnotatedStmt T_RGHOST _KW_else AnnotatedStmt { $$ = new acsl::GhostElsePart($2, $3, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->elsepart_ = $$; }
;
Statement : _SEMI { $$ = new acsl::SemicolonStatement(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->statement_ = $$; }
  | T_SPEC AnnotatedStmt { $$ = new acsl::SpecStatement($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->statement_ = $$; }
  | ListExpression _SEMI { std::reverse($1->begin(),$1->end()) ;$$ = new acsl::ExprsStatement($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->statement_ = $$; }
  | Block { $$ = new acsl::BlockStatement($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->statement_ = $$; }
  | _KW_if _LPAREN ListExpression _RPAREN AnnotatedStmt ElsePart { std::reverse($3->begin(),$3->end()) ;$$ = new acsl::IfStatement($3, $5, $6); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->statement_ = $$; }
  | _KW_switch _LPAREN ListExpression _RPAREN AnnotatedStmt { std::reverse($3->begin(),$3->end()) ;$$ = new acsl::SwitchStatement($3, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->statement_ = $$; }
  | OptLoopAnnotations _KW_while _LPAREN ListExpression _RPAREN AnnotatedStmt { std::reverse($4->begin(),$4->end()) ;$$ = new acsl::WhileStatement($1, $4, $6); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->statement_ = $$; }
  | OptLoopAnnotations _KW_do AnnotatedStmt _KW_while _LPAREN ListExpression _RPAREN _SEMI { std::reverse($6->begin(),$6->end()) ;$$ = new acsl::DoWhileStatement($1, $3, $6); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->statement_ = $$; }
  | OptLoopAnnotations _KW_for _LPAREN ForClause OptExpression _SEMI OptExpression _RPAREN AnnotatedStmt { $$ = new acsl::ForStatement($1, $4, $5, $7, $9); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->statement_ = $$; }
  | IdOrTypenameAsId _COLON ListAttributeNocv AnnotatedStmt { $$ = new acsl::ColonStatement($1, $3, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->statement_ = $$; }
  | _KW_case Expression _COLON AnnotatedStmt { $$ = new acsl::CaseStatement($2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->statement_ = $$; }
  | _KW_case Expression _ELLIPSIS Expression _COLON AnnotatedStmt { $$ = new acsl::CaseSliceStatement($2, $4, $6); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->statement_ = $$; }
  | _KW_default _COLON AnnotatedStmt { $$ = new acsl::DefaultStatement($3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->statement_ = $$; }
  | _KW_return _SEMI { $$ = new acsl::EmptyReturnStatement(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->statement_ = $$; }
  | _KW_return ListExpression _SEMI { std::reverse($2->begin(),$2->end()) ;$$ = new acsl::ReturnStatement($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->statement_ = $$; }
  | _KW_break _SEMI { $$ = new acsl::BreakStatement(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->statement_ = $$; }
  | _KW_continue _SEMI { $$ = new acsl::ContinueStatement(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->statement_ = $$; }
  | _KW_goto IdOrTypenameAsId _SEMI { $$ = new acsl::GotoStatement($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->statement_ = $$; }
  | _KW_goto _STAR ListExpression _SEMI { std::reverse($3->begin(),$3->end()) ;$$ = new acsl::StarGotoStatement($3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->statement_ = $$; }
  | T_ASM _KW_goto ListAsmattr _LPAREN ListOneString Asmoutputs _RPAREN _SEMI { std::reverse($5->begin(),$5->end()) ;$$ = new acsl::AsmGotoAsmattrStatement($1, $3, $5, $6); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->statement_ = $$; }
  | T_ASM ListAsmattr _LPAREN ListOneString Asmoutputs _RPAREN _SEMI { std::reverse($4->begin(),$4->end()) ;$$ = new acsl::AsmAsmattrStatement($1, $2, $4, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->statement_ = $$; }
  | T_ASM { $$ = new acsl::AsmStatement($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->statement_ = $$; }
  | _SYMB_48 Block _SYMB_49 _LPAREN ListExpression _RPAREN Block { std::reverse($5->begin(),$5->end()) ;$$ = new acsl::TryExceptStatement($2, $5, $7); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->statement_ = $$; }
  | _SYMB_48 Block _SYMB_50 Block { $$ = new acsl::TryFinallyStatement($2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->statement_ = $$; }
;
OptLoopAnnotations : /* empty */ { $$ = new acsl::NoLoopAnnotations(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->optloopannotations_ = $$; }
  | T_LOOP_ANNOT { $$ = new acsl::SomeLoopAnnotations($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->optloopannotations_ = $$; }
;
ForClause : OptExpression _SEMI { $$ = new acsl::ForClauseExpression($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->forclause_ = $$; }
  | Declaration { $$ = new acsl::ForClauseDeclaration($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->forclause_ = $$; }
;
GhostParameterOpt : /* empty */ { $$ = new acsl::NoGhostParameter(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->ghostparameteropt_ = $$; }
  | _KW_ghost _LPAREN RestParList _RPAREN T_RGHOST { $$ = new acsl::SomeGhostParameter($3, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->ghostparameteropt_ = $$; }
;
Declaration : DeclSpecList DeclAndInitDeclAttrList _SEMI { $$ = new acsl::DeclSpecInitDecl($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->declaration_ = $$; }
  | DeclSpecList _SEMI { $$ = new acsl::DeclSpec($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->declaration_ = $$; }
  | T_SPEC DeclSpecList DeclAndInitDeclAttrList _SEMI { $$ = new acsl::SpecDeclSpecInitDecl($1, $2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->declaration_ = $$; }
  | T_SPEC DeclSpecList _SEMI { $$ = new acsl::SpecDeclSpec($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->declaration_ = $$; }
  | _SYMB_51 _LPAREN Expression _RPAREN { $$ = new acsl::StaticAssertDecl($3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->declaration_ = $$; }
  | _SYMB_51 _LPAREN Expression _COMMA StringConstant _RPAREN { $$ = new acsl::StaticAssertDeclStringConst($3, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->declaration_ = $$; }
;
GenericAssociation : TypeName _COLON AssignExpr { $$ = new acsl::ColonGenericAssociation($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->genericassociation_ = $$; }
  | _KW_default _COLON AssignExpr { $$ = new acsl::DefaultGenericAssociation($3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->genericassociation_ = $$; }
;
ListGenericAssociation : GenericAssociation { $$ = new acsl::ListGenericAssociation(); $$->push_back($1); result->listgenericassociation_ = $$; }
  | GenericAssociation _COMMA ListGenericAssociation { $3->push_back($1); $$ = $3; result->listgenericassociation_ = $$; }
;
DeclAndInitDeclAttrList : InitDeclarator { $$ = new acsl::InitDeclaration($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->declandinitdeclattrlist_ = $$; }
  | InitDeclarator _COMMA ListInitDeclaratorAttr { std::reverse($3->begin(),$3->end()) ;$$ = new acsl::InitDeclarationWithAttr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->declandinitdeclattrlist_ = $$; }
;
InitDeclaratorAttr : ListAttributeNocv InitDeclarator { $$ = new acsl::InitDeclaratorAttribute($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->initdeclaratorattr_ = $$; }
;
ListInitDeclaratorAttr : InitDeclaratorAttr { $$ = new acsl::ListInitDeclaratorAttr(); $$->push_back($1); result->listinitdeclaratorattr_ = $$; }
  | InitDeclaratorAttr _COMMA ListInitDeclaratorAttr { $3->push_back($1); $$ = $3; result->listinitdeclaratorattr_ = $$; }
;
InitDeclarator : Declarator { $$ = new acsl::SimpleInitDeclarator($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->initdeclarator_ = $$; }
  | Declarator _EQ InitExpression { $$ = new acsl::InitDeclaratorExpression($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->initdeclarator_ = $$; }
;
DeclSpecWOType : _KW_typedef { $$ = new acsl::TypedefKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->declspecwotype_ = $$; }
  | _KW_extern { $$ = new acsl::ExternKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->declspecwotype_ = $$; }
  | _KW_static { $$ = new acsl::StaticKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->declspecwotype_ = $$; }
  | _KW_auto { $$ = new acsl::AutoKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->declspecwotype_ = $$; }
  | _KW_register { $$ = new acsl::RegisterKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->declspecwotype_ = $$; }
  | T_INLINE { $$ = new acsl::InlineKeyWord($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->declspecwotype_ = $$; }
  | _SYMB_52 { $$ = new acsl::NoReturnKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->declspecwotype_ = $$; }
  | CVSpec { $$ = new acsl::DeclSpecCVSpec($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->declspecwotype_ = $$; }
  | AttributeNocv { $$ = new acsl::DeclSpecAtribNOCV($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->declspecwotype_ = $$; }
;
DeclSpecList : DeclSpecWOType { $$ = new acsl::DeclSpecWoType($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->declspeclist_ = $$; }
  | DeclSpecWOType DeclSpecList { $$ = new acsl::DeclSpecWoTypeNext($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->declspeclist_ = $$; }
  | TypeSpec { $$ = new acsl::DeclSpecTypeSpec($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->declspeclist_ = $$; }
  | TypeSpec DeclSpecListNoNamed { $$ = new acsl::DeclSpecTypeSpecNext($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->declspeclist_ = $$; }
;
DeclSpecListNoNamed : DeclSpecWOType { $$ = new acsl::DeclSpecNoNamedWOType($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->declspeclistnonamed_ = $$; }
  | DeclSpecWOType DeclSpecListNoNamed { $$ = new acsl::DeclSpecNoNamedWOTypeNext($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->declspeclistnonamed_ = $$; }
  | TypeSpec { $$ = new acsl::DeclSpecNoNamedTypeSpec($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->declspeclistnonamed_ = $$; }
  | TypeSpec DeclSpecListNoNamed { $$ = new acsl::DeclSpecNoNamedTypeSpecNext($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->declspeclistnonamed_ = $$; }
;
TypeSpec : _KW_void { $$ = new acsl::VoidKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespec_ = $$; }
  | _KW_char { $$ = new acsl::CharKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespec_ = $$; }
  | _SYMB_53 { $$ = new acsl::BoolKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespec_ = $$; }
  | _KW_short { $$ = new acsl::ShortKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespec_ = $$; }
  | T_INT { $$ = new acsl::IntKeyWord($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespec_ = $$; }
  | _KW_long { $$ = new acsl::LongKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespec_ = $$; }
  | _SYMB_54 { $$ = new acsl::Int64KeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespec_ = $$; }
  | _KW_float { $$ = new acsl::FloatKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespec_ = $$; }
  | _KW_double { $$ = new acsl::DoubleKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespec_ = $$; }
  | T_SIGNED { $$ = new acsl::SignedKeyWord($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespec_ = $$; }
  | _KW_unsigned { $$ = new acsl::UnsignedKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespec_ = $$; }
  | _KW_struct IdOrTypename { $$ = new acsl::StructId($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespec_ = $$; }
  | _KW_struct ListJustAttribute IdOrTypename { std::reverse($2->begin(),$2->end()) ;$$ = new acsl::StructJustAttr($2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespec_ = $$; }
  | _KW_struct IdOrTypename T_LBRACE StructDeclList T_RBRACE { $$ = new acsl::StructIdBraces($2, $3, $4, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespec_ = $$; }
  | _KW_struct T_LBRACE StructDeclList T_RBRACE { $$ = new acsl::StructBraces($2, $3, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespec_ = $$; }
  | _KW_struct ListJustAttribute IdOrTypename T_LBRACE StructDeclList T_RBRACE { std::reverse($2->begin(),$2->end()) ;$$ = new acsl::StructJustAttrIdBraces($2, $3, $4, $5, $6); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespec_ = $$; }
  | _KW_struct ListJustAttribute T_LBRACE StructDeclList T_RBRACE { std::reverse($2->begin(),$2->end()) ;$$ = new acsl::StructJustAttrBraces($2, $3, $4, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespec_ = $$; }
  | _KW_union IdOrTypename { $$ = new acsl::UnionId($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespec_ = $$; }
  | _KW_union IdOrTypename T_LBRACE StructDeclList T_RBRACE { $$ = new acsl::UnionIdBraces($2, $3, $4, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespec_ = $$; }
  | _KW_union T_LBRACE StructDeclList T_RBRACE { $$ = new acsl::UnionBraces($2, $3, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespec_ = $$; }
  | _KW_union ListJustAttribute IdOrTypename T_LBRACE StructDeclList T_RBRACE { std::reverse($2->begin(),$2->end()) ;$$ = new acsl::UnionJustAttrIdBraces($2, $3, $4, $5, $6); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespec_ = $$; }
  | _KW_union ListJustAttribute T_LBRACE StructDeclList T_RBRACE { std::reverse($2->begin(),$2->end()) ;$$ = new acsl::UnionJustAttrBraces($2, $3, $4, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespec_ = $$; }
  | _KW_enum IdOrTypename { $$ = new acsl::EnumId($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespec_ = $$; }
  | _KW_enum IdOrTypename T_LBRACE ListEnumerator MaybeComma T_RBRACE { std::reverse($4->begin(),$4->end()) ;$$ = new acsl::EnumIdBraces($2, $3, $4, $5, $6); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespec_ = $$; }
  | _KW_enum T_LBRACE ListEnumerator MaybeComma T_RBRACE { std::reverse($3->begin(),$3->end()) ;$$ = new acsl::EnumBraces($2, $3, $4, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespec_ = $$; }
  | _KW_enum ListJustAttribute IdOrTypename T_LBRACE ListEnumerator MaybeComma T_RBRACE { std::reverse($2->begin(),$2->end()) ; std::reverse($5->begin(),$5->end()) ;$$ = new acsl::EnumJustAttrIdBraces($2, $3, $4, $5, $6, $7); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespec_ = $$; }
  | _KW_enum ListJustAttribute T_LBRACE ListEnumerator MaybeComma T_RBRACE { std::reverse($2->begin(),$2->end()) ; std::reverse($4->begin(),$4->end()) ;$$ = new acsl::EnumJustAttrBraces($2, $3, $4, $5, $6); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespec_ = $$; }
  | T_NAMEDTYPE { $$ = new acsl::NamedTypeTypeSpec($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespec_ = $$; }
  | T_TYPEOF _LPAREN Expression _RPAREN { $$ = new acsl::TypeOfExpression($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespec_ = $$; }
  | T_TYPEOF _LPAREN TypeName _RPAREN { $$ = new acsl::TypeOfTypeName($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typespec_ = $$; }
;
StructDeclList : /* empty */ { $$ = new acsl::EmptyStructDecl(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->structdecllist_ = $$; }
  | DeclSpecList _SEMI StructDeclList { $$ = new acsl::DeclSpecStructDecl($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->structdecllist_ = $$; }
  | _SEMI StructDeclList { $$ = new acsl::SemicolonStructDecl($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->structdecllist_ = $$; }
  | DeclSpecList ListFieldDecl _SEMI StructDeclList { std::reverse($2->begin(),$2->end()) ;$$ = new acsl::SpecFieldDeclStructDecl($1, $2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->structdecllist_ = $$; }
  | Pragma StructDeclList { $$ = new acsl::PragmaStructDecl($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->structdecllist_ = $$; }
  | StaticAssertDeclaration { $$ = new acsl::StaticAssertStructDecl($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->structdecllist_ = $$; }
  | StaticAssertDeclaration _SEMI StructDeclList { $$ = new acsl::StaticAssertStructDeclNext($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->structdecllist_ = $$; }
;
StaticAssertDeclaration : _SYMB_51 _LPAREN Expression _RPAREN { $$ = new acsl::StaticAssert($3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->staticassertdeclaration_ = $$; }
  | _SYMB_51 _LPAREN Expression _COMMA StringConstant _RPAREN { $$ = new acsl::StaticAssertStringConst($3, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->staticassertdeclaration_ = $$; }
;
FieldDecl : Declarator { $$ = new acsl::FieldDeclDeclarator($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fielddecl_ = $$; }
  | Declarator _COLON Expression ListAttribute { $$ = new acsl::FieldDeclDeclaratorColon($1, $3, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fielddecl_ = $$; }
  | _COLON Expression { $$ = new acsl::FieldDeclColonExpression($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->fielddecl_ = $$; }
;
ListFieldDecl : FieldDecl { $$ = new acsl::ListFieldDecl(); $$->push_back($1); result->listfielddecl_ = $$; }
  | FieldDecl _COMMA ListFieldDecl { $3->push_back($1); $$ = $3; result->listfielddecl_ = $$; }
;
Enumerator : _IDENT_ { $$ = new acsl::IdentEnumerator($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->enumerator_ = $$; }
  | _IDENT_ _EQ Expression { $$ = new acsl::IdentAssignExpr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->enumerator_ = $$; }
;
ListEnumerator : Enumerator { $$ = new acsl::ListEnumerator(); $$->push_back($1); result->listenumerator_ = $$; }
  | Enumerator _COMMA ListEnumerator { $3->push_back($1); $$ = $3; result->listenumerator_ = $$; }
;
Declarator : PointerOpt DirectDecl AttributesWithAsm { $$ = new acsl::ADeclarator($1, $2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->declarator_ = $$; }
;
ListDeclarator : Declarator { $$ = new acsl::ListDeclarator(); $$->push_back($1); result->listdeclarator_ = $$; }
  | Declarator _COMMA ListDeclarator { $3->push_back($1); $$ = $3; result->listdeclarator_ = $$; }
;
AttributesOrStatic : ListAttribute CommaExpressionOpt { $$ = new acsl::AttributesCommaExpression($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attributesorstatic_ = $$; }
  | Attribute ListAttribute _KW_static ListExpression { std::reverse($4->begin(),$4->end()) ;$$ = new acsl::AttributesStaticExpression($1, $2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attributesorstatic_ = $$; }
  | _KW_static ListAttribute ListExpression { std::reverse($3->begin(),$3->end()) ;$$ = new acsl::StaticAttributesExpression($2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attributesorstatic_ = $$; }
;
DirectDecl : IdOrTypename { $$ = new acsl::DirectDeclIdTypename($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->directdecl_ = $$; }
  | _LPAREN ListAttribute Declarator _RPAREN { $$ = new acsl::DirectDeclAttrDecl($2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->directdecl_ = $$; }
  | DirectDecl T_LBRACKET AttributesOrStatic T_RBRACKET { $$ = new acsl::DirectDeclAttrStatic($1, $2, $3, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->directdecl_ = $$; }
  | DirectDecl _LPAREN _RPAREN GhostParameterOpt { $$ = new acsl::DirectDeclGhostParam($1, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->directdecl_ = $$; }
  | DirectDecl _LPAREN RestParList _RPAREN GhostParameterOpt { $$ = new acsl::DirectDeclGhostRestParParam($1, $3, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->directdecl_ = $$; }
;
RestParList : ListParameterDecl { std::reverse($1->begin(),$1->end()) ;$$ = new acsl::SimpleParameterDecl($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->restparlist_ = $$; }
  | ListParameterDecl _COMMA _ELLIPSIS { std::reverse($1->begin(),$1->end()) ;$$ = new acsl::DotDotDotParameterDecl($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->restparlist_ = $$; }
;
ParameterDecl : DeclSpecList Declarator { $$ = new acsl::ParameterDeclSpecDeclarator($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->parameterdecl_ = $$; }
  | DeclSpecList AbstractDecl { $$ = new acsl::ParameterDeclSpecAbstract($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->parameterdecl_ = $$; }
  | DeclSpecList { $$ = new acsl::ParameterDeclSpec($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->parameterdecl_ = $$; }
  | _LPAREN ParameterDecl _RPAREN { $$ = new acsl::ParameterDeclPar($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->parameterdecl_ = $$; }
;
ListParameterDecl : ParameterDecl { $$ = new acsl::ListParameterDecl(); $$->push_back($1); result->listparameterdecl_ = $$; }
  | ParameterDecl _COMMA ListParameterDecl { $3->push_back($1); $$ = $3; result->listparameterdecl_ = $$; }
;
DirectOldProtoDecl : DirectDecl _LPAREN ListIdent _RPAREN OldPardefList { std::reverse($3->begin(),$3->end()) ;$$ = new acsl::OldDirectProtoDecl($1, $3, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->directoldprotodecl_ = $$; }
;
ListIdent : _IDENT_ { $$ = new acsl::ListIdent(); $$->push_back($1); result->listident_ = $$; }
  | _IDENT_ _COMMA ListIdent { $3->push_back($1); $$ = $3; result->listident_ = $$; }
;
OldPardefList : /* empty */ { $$ = new acsl::EmptyOldPardefList(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->oldpardeflist_ = $$; }
  | ListOldPardef _ELLIPSIS { std::reverse($1->begin(),$1->end()) ;$$ = new acsl::DotDotDotOldPardefList($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->oldpardeflist_ = $$; }
  | ListOldPardef { std::reverse($1->begin(),$1->end()) ;$$ = new acsl::SimpleOldPardefList($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->oldpardeflist_ = $$; }
;
OldPardef : DeclSpecList ListDeclarator { std::reverse($2->begin(),$2->end()) ;$$ = new acsl::OldParDef($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->oldpardef_ = $$; }
;
ListOldPardef : OldPardef { $$ = new acsl::ListOldPardef(); $$->push_back($1); result->listoldpardef_ = $$; }
  | OldPardef _SEMI ListOldPardef { $3->push_back($1); $$ = $3; result->listoldpardef_ = $$; }
;
PointerOpt : /* empty */ { $$ = new acsl::NoPointer(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->pointeropt_ = $$; }
  | _STAR ListAttribute PointerOpt { $$ = new acsl::SomePointer($2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->pointeropt_ = $$; }
;
TypeName : DeclSpecList AbstractDecl { $$ = new acsl::TypeNameAbstractDecl($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typename_ = $$; }
  | DeclSpecList { $$ = new acsl::TypeNameDeclSpecList($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->typename_ = $$; }
;
AbstractDecl : PointerOpt AbsDirectDecl ListAttribute { $$ = new acsl::AbstractDeclAttr($1, $2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->abstractdecl_ = $$; }
  | _STAR ListAttribute PointerOpt { $$ = new acsl::AbstractDeclPointer($2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->abstractdecl_ = $$; }
;
AbsDirectDecl : _LPAREN ListAttribute AbstractDecl _RPAREN { $$ = new acsl::AbsDirectDeclPar($2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->absdirectdecl_ = $$; }
  | AbsDirectDeclOpt T_LBRACKET CommaExpressionOpt T_RBRACKET { $$ = new acsl::AbsDirectDeclBreckets($1, $2, $3, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->absdirectdecl_ = $$; }
  | AbsDirectDecl _LPAREN RestParList _RPAREN { $$ = new acsl::AbsDirectDeclRestPar($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->absdirectdecl_ = $$; }
  | AbsDirectDecl _LPAREN _RPAREN { $$ = new acsl::AbsDirectDeclNoRestPar($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->absdirectdecl_ = $$; }
;
AbsDirectDeclOpt : AbsDirectDecl { $$ = new acsl::SomeAbsDirectDecl($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->absdirectdeclopt_ = $$; }
  | /* empty */ { $$ = new acsl::NoAbsDirectDecl(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->absdirectdeclopt_ = $$; }
;
FunctionDef : T_SPEC FunctionDefStart Block { $$ = new acsl::FunctionDefSpec($1, $2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->functiondef_ = $$; }
  | FunctionDefStart Block { $$ = new acsl::SimpleFunctionDef($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->functiondef_ = $$; }
;
FunctionDefStart : DeclSpecList Declarator { $$ = new acsl::FunctionDefStartDeclarator($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->functiondefstart_ = $$; }
  | DeclSpecList PointerOpt DirectOldProtoDecl { $$ = new acsl::FunctionDefStartOldProtoDecl($1, $2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->functiondefstart_ = $$; }
  | _IDENT_ _LPAREN RestParList _RPAREN GhostParameterOpt { $$ = new acsl::FunctionDefStartReatParGhostParameter($1, $3, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->functiondefstart_ = $$; }
  | _IDENT_ _LPAREN ListIdent _RPAREN OldPardefList { std::reverse($3->begin(),$3->end()) ;$$ = new acsl::FunctionDefStartOldPardef($1, $3, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->functiondefstart_ = $$; }
  | _IDENT_ _LPAREN _RPAREN GhostParameterOpt { $$ = new acsl::FunctionDefStartGhostParameter($1, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->functiondefstart_ = $$; }
;
CVSpec : T_CONST { $$ = new acsl::ConstKeyWord($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->cvspec_ = $$; }
  | T_VOLATILE { $$ = new acsl::VolatileKeyWord($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->cvspec_ = $$; }
  | T_RESTRICT { $$ = new acsl::RestrictKeyWord($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->cvspec_ = $$; }
  | _SYMB_55 { $$ = new acsl::GhostKeyWord(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->cvspec_ = $$; }
  | T_ATTRIBUTE_ANNOT { $$ = new acsl::Attribute_annotKeyWord($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->cvspec_ = $$; }
;
AttributesWithAsm : /* empty */ { $$ = new acsl::EmptyAttrWithASM(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attributeswithasm_ = $$; }
  | Attribute ListAttribute { $$ = new acsl::ListAttrWithASM($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attributeswithasm_ = $$; }
  | Attribute ListAttribute T_ASM _LPAREN StringConstant _RPAREN ListAttribute { $$ = new acsl::ListASMAttrWithASM($1, $2, $3, $5, $7); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attributeswithasm_ = $$; }
  | T_ASM _LPAREN StringConstant _RPAREN ListAttribute { $$ = new acsl::ASMAttrWithASM($1, $3, $5); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attributeswithasm_ = $$; }
;
AttributeNocv : T_ATTRIBUTE _LPAREN _LPAREN AttrList _RPAREN _RPAREN { $$ = new acsl::AttributeAttrNocv($1, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attributenocv_ = $$; }
  | _SYMB_56 _LPAREN ListAttr _RPAREN { std::reverse($3->begin(),$3->end()) ;$$ = new acsl::DeclspecAttrNocv($3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attributenocv_ = $$; }
  | T_MSATTR { $$ = new acsl::MsattrAttrNocv($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attributenocv_ = $$; }
  | _SYMB_57 { $$ = new acsl::ThreadAttrNocv(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attributenocv_ = $$; }
  | _SYMB_58 { $$ = new acsl::ThreadLocalAttrNocv(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attributenocv_ = $$; }
;
ListAttributeNocv : /* empty */ { $$ = new acsl::ListAttributeNocv(); result->listattributenocv_ = $$; }
  | ListAttributeNocv AttributeNocv { $1->push_back($2); $$ = $1; result->listattributenocv_ = $$; }
;
Attribute : AttributeNocv { $$ = new acsl::AttributeNoCV($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attribute_ = $$; }
  | T_CONST { $$ = new acsl::AttributeConst($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attribute_ = $$; }
  | T_RESTRICT { $$ = new acsl::AttributeRestrict($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attribute_ = $$; }
  | T_VOLATILE { $$ = new acsl::AttributeVolatile($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attribute_ = $$; }
  | _SYMB_55 { $$ = new acsl::AttributeGhost(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attribute_ = $$; }
  | T_ATTRIBUTE_ANNOT { $$ = new acsl::AttributeAttributeAnnot($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attribute_ = $$; }
;
ListAttribute : /* empty */ { $$ = new acsl::ListAttribute(); result->listattribute_ = $$; }
  | ListAttribute Attribute { $1->push_back($2); $$ = $1; result->listattribute_ = $$; }
;
JustAttribute : T_ATTRIBUTE _LPAREN _LPAREN AttrList _RPAREN _RPAREN { $$ = new acsl::AttributeJustAttribute($1, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->justattribute_ = $$; }
  | _SYMB_56 _LPAREN ListAttr _RPAREN { std::reverse($3->begin(),$3->end()) ;$$ = new acsl::DeclspecJustAttribute($3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->justattribute_ = $$; }
;
ListJustAttribute : JustAttribute { $$ = new acsl::ListJustAttribute(); $$->push_back($1); result->listjustattribute_ = $$; }
  | JustAttribute ListJustAttribute { $2->push_back($1); $$ = $2; result->listjustattribute_ = $$; }
;
Pragma : _KW_pragma { $$ = new acsl::SimplePragma(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->pragma_ = $$; }
  | _KW_pragma Attr { $$ = new acsl::AttrPragma($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->pragma_ = $$; }
  | _KW_pragma Attr _SEMI { $$ = new acsl::AttrPragmaSeparated($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->pragma_ = $$; }
  | _KW_pragma { $$ = new acsl::PragmaKeyrod(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->pragma_ = $$; }
;
VarAttr : _IDENT_ { $$ = new acsl::IdentifierVarAttr($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->varattr_ = $$; }
  | T_NAMEDTYPE { $$ = new acsl::NamedTypeVarAttr($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->varattr_ = $$; }
  | _KW_default _COLON _INTEGER_ { $$ = new acsl::DefaultVarAttr($3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->varattr_ = $$; }
  | T_CONST { $$ = new acsl::ConstVarAttr($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->varattr_ = $$; }
  | T_VOLATILE { $$ = new acsl::VolatileVarAttr($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->varattr_ = $$; }
  | _INTEGER_ _COLON _INTEGER_ { $$ = new acsl::ContIntVarAttr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->varattr_ = $$; }
;
BasicAttribute : _INTEGER_ { $$ = new acsl::BasicAttrConsInt($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->basicattribute_ = $$; }
  | _DOUBLE_ { $$ = new acsl::BasicAttrConsFloat($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->basicattribute_ = $$; }
  | VarAttr { $$ = new acsl::BasicAttrVar($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->basicattribute_ = $$; }
;
ListBasicAttribute : BasicAttribute { $$ = new acsl::ListBasicAttribute(); $$->push_back($1); result->listbasicattribute_ = $$; }
  | BasicAttribute ListBasicAttribute { $2->push_back($1); $$ = $2; result->listbasicattribute_ = $$; }
;
ParameterAttrListNE : ListBasicAttribute { std::reverse($1->begin(),$1->end()) ;$$ = new acsl::ParameterBasicAttr($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->parameterattrlistne_ = $$; }
  | ListBasicAttribute StringConstant { std::reverse($1->begin(),$1->end()) ;$$ = new acsl::ParameterBasicAttrStringConst($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->parameterattrlistne_ = $$; }
  | ListBasicAttribute StringConstant ParameterAttrListNE { std::reverse($1->begin(),$1->end()) ;$$ = new acsl::ParameterBasicAttrStringConstNext($1, $2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->parameterattrlistne_ = $$; }
;
ParamAttrListNE : ParameterAttrListNE { $$ = new acsl::ParamAttrList($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->paramattrlistne_ = $$; }
  | StringConstant { $$ = new acsl::ParamStringConstant($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->paramattrlistne_ = $$; }
;
Attr14 : BasicAttribute { $$ = new acsl::BasicAttr($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
  | _LPAREN Attr _RPAREN { $$ = $2; $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
  | StringConstant { $$ = new acsl::AttrStringConstant($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
;
Attr13 : Attr14 { $$ = $1; $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
  | IdOrTypenameAsId _LPAREN ListAttr _RPAREN { std::reverse($3->begin(),$3->end()) ;$$ = new acsl::FuncationCall($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
  | IdOrTypenameAsId _LPAREN _RPAREN { $$ = new acsl::ProcedureCall($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
  | BasicAttribute ParamAttrListNE { $$ = new acsl::BasicPostfix($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
  | Attr13 _RARROW IdOrTypename { $$ = new acsl::ArrowAttr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
  | Attr13 _DOT IdOrTypename { $$ = new acsl::DotAttr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
  | Attr13 T_LBRACKET Attr T_RBRACKET { $$ = new acsl::ArrayAttr($1, $2, $3, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
;
Attr12 : Attr13 { $$ = $1; $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
  | _KW_sizeof AssignExpr13 { $$ = new acsl::SizeOfAttrUnary($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
  | _KW_sizeof _LPAREN TypeName _RPAREN { $$ = new acsl::SizeOfAttrTypeName($3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
  | T_ALIGNOF AssignExpr13 { $$ = new acsl::AlignOfAttrUnary($1, $2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
  | T_ALIGNOF _LPAREN TypeName _RPAREN { $$ = new acsl::AlignOfAttrTypeName($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
  | _PLUS Attr12 { $$ = new acsl::PlusUnaryAttr($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
  | _MINUS Attr12 { $$ = new acsl::MinusUnaryAttr($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
  | _STAR Attr12 { $$ = new acsl::MultUnaryAttr($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
  | _AMP Attr12 { $$ = new acsl::AmpUnaryAttr($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
  | _BANG Attr12 { $$ = new acsl::NotUnaryAttr($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
  | _TILDE Attr12 { $$ = new acsl::TildeUnaryAttr($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
;
Attr11 : Attr12 { $$ = $1; $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
  | Attr11 _STAR Attr12 { $$ = new acsl::MultOp($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
  | Attr11 _SLASH Attr12 { $$ = new acsl::DivOp($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
  | Attr11 _PERCENT Attr12 { $$ = new acsl::ModOp($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
;
Attr10 : Attr11 { $$ = $1; $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
  | Attr10 _PLUS Attr11 { $$ = new acsl::AddOp($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
  | Attr10 _MINUS Attr11 { $$ = new acsl::SubOp($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
;
Attr9 : Attr10 { $$ = $1; $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
  | Attr9 _DLT Attr10 { $$ = new acsl::LeftShiftOp($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
  | Attr9 _DGT Attr10 { $$ = new acsl::RightShiftOp($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
;
Attr8 : Attr9 { $$ = $1; $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
  | Attr8 _LT Attr9 { $$ = new acsl::Less($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
  | Attr8 _GT Attr9 { $$ = new acsl::Greater($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
  | Attr8 _LDARROW Attr9 { $$ = new acsl::LessEqual($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
  | Attr8 _GTEQ Attr9 { $$ = new acsl::GreaterEqual($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
;
Attr7 : Attr8 { $$ = $1; $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
  | Attr7 _DEQ Attr8 { $$ = new acsl::EqualEqual($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
  | Attr7 _BANGEQ Attr8 { $$ = new acsl::NotEqual($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
;
Attr6 : Attr7 { $$ = $1; $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
  | Attr6 _AMP Attr7 { $$ = new acsl::BitAnd($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
;
Attr5 : Attr6 { $$ = $1; $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
  | Attr5 _CARET Attr6 { $$ = new acsl::Xor($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
;
Attr4 : Attr5 { $$ = $1; $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
  | Attr4 _BAR Attr5 { $$ = new acsl::BitOr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
;
Attr3 : Attr4 { $$ = $1; $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
  | Attr3 _DAMP Attr4 { $$ = new acsl::And($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
;
Attr2 : Attr3 { $$ = $1; $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
  | Attr2 _DBAR Attr3 { $$ = new acsl::Or($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
;
Attr1 : Attr2 { $$ = $1; $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
  | Attr2 _QUESTION AttrTest Attr1 _COLON Attr1 { $$ = new acsl::TernaryCond($1, $3, $4, $6); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
;
Attr : Attr1 { $$ = $1; $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
  | Attr1 _EQ Attr1 { $$ = new acsl::AnAttr($1, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attr_ = $$; }
;
ListAttr : Attr { $$ = new acsl::ListAttr(); $$->push_back($1); result->listattr_ = $$; }
  | Attr _COMMA ListAttr { $3->push_back($1); $$ = $3; result->listattr_ = $$; }
;
AttrTest : /* empty */ { $$ = new acsl::AvoidShiftReduce(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attrtest_ = $$; }
;
AttrList : /* empty */ { $$ = new acsl::EmptyAtrList(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attrlist_ = $$; }
  | ListAttr { std::reverse($1->begin(),$1->end()) ;$$ = new acsl::AtrList($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->attrlist_ = $$; }
;
Asmattr : T_VOLATILE { $$ = new acsl::VolatileKeyWrod($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->asmattr_ = $$; }
  | T_CONST { $$ = new acsl::ConstKeyWrod($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->asmattr_ = $$; }
;
ListAsmattr : /* empty */ { $$ = new acsl::ListAsmattr(); result->listasmattr_ = $$; }
  | ListAsmattr Asmattr { $1->push_back($2); $$ = $1; result->listasmattr_ = $$; }
;
Asmoutputs : /* empty */ { $$ = new acsl::NoAsmoutputs(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->asmoutputs_ = $$; }
  | _COLON Asmoperands Asminputs { $$ = new acsl::SomeAsmoutputs($2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->asmoutputs_ = $$; }
;
Asmoperands : /* empty */ { $$ = new acsl::NoAsmoperands(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->asmoperands_ = $$; }
  | ListAsmoperand { std::reverse($1->begin(),$1->end()) ;$$ = new acsl::SomeAsmoperands($1); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->asmoperands_ = $$; }
;
Asmoperand : Asmopname StringConstant _LPAREN Expression _RPAREN { $$ = new acsl::AsmOperand($1, $2, $4); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->asmoperand_ = $$; }
;
ListAsmoperand : Asmoperand { $$ = new acsl::ListAsmoperand(); $$->push_back($1); result->listasmoperand_ = $$; }
  | Asmoperand _COMMA ListAsmoperand { $3->push_back($1); $$ = $3; result->listasmoperand_ = $$; }
;
Asminputs : /* empty */ { $$ = new acsl::NoAsminputs(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->asminputs_ = $$; }
  | _COLON Asmoperands Asmclobber { $$ = new acsl::SomeAsminputs($2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->asminputs_ = $$; }
;
Asmopname : /* empty */ { $$ = new acsl::NoAsmopname(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->asmopname_ = $$; }
  | T_LBRACKET _IDENT_ T_RBRACKET { $$ = new acsl::SomeAsmopname($1, $2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->asmopname_ = $$; }
;
Asmclobber : /* empty */ { $$ = new acsl::NoAsmclobber(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->asmclobber_ = $$; }
  | _COLON Asmlabels { $$ = new acsl::ColonAsmclobber($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->asmclobber_ = $$; }
  | _COLON ListStringConstant Asmlabels { std::reverse($2->begin(),$2->end()) ;$$ = new acsl::ColonStringAsmclobber($2, $3); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->asmclobber_ = $$; }
;
ListStringConstant : StringConstant { $$ = new acsl::ListStringConstant(); $$->push_back($1); result->liststringconstant_ = $$; }
  | StringConstant _COMMA ListStringConstant { $3->push_back($1); $$ = $3; result->liststringconstant_ = $$; }
;
Asmlabels : /* empty */ { $$ = new acsl::NoAsmlabels(); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->asmlabels_ = $$; }
  | _COLON ListLocalLabelName { std::reverse($2->begin(),$2->end()) ;$$ = new acsl::SomeAsmlabels($2); $$->line_number = @$.first_line; $$->char_number = @$.first_column; result->asmlabels_ = $$; }
;

%%

namespace acsl
{
/* Entrypoint: parse Program* from file. */
Program* pProgram(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.program_;
  }
}

/* Entrypoint: parse Program* from string. */
Program* psProgram(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.program_;
  }
}

/* Entrypoint: parse Globals* from file. */
Globals* pGlobals(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.globals_;
  }
}

/* Entrypoint: parse Globals* from string. */
Globals* psGlobals(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.globals_;
  }
}

/* Entrypoint: parse GhostGlobals* from file. */
GhostGlobals* pGhostGlobals(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.ghostglobals_;
  }
}

/* Entrypoint: parse GhostGlobals* from string. */
GhostGlobals* psGhostGlobals(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.ghostglobals_;
  }
}

/* Entrypoint: parse Global* from file. */
Global* pGlobal(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.global_;
  }
}

/* Entrypoint: parse Global* from string. */
Global* psGlobal(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.global_;
  }
}

/* Entrypoint: parse IdOrTypenameAsId* from file. */
IdOrTypenameAsId* pIdOrTypenameAsId(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.idortypenameasid_;
  }
}

/* Entrypoint: parse IdOrTypenameAsId* from string. */
IdOrTypenameAsId* psIdOrTypenameAsId(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.idortypenameasid_;
  }
}

/* Entrypoint: parse IdOrTypename* from file. */
IdOrTypename* pIdOrTypename(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.idortypename_;
  }
}

/* Entrypoint: parse IdOrTypename* from string. */
IdOrTypename* psIdOrTypename(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.idortypename_;
  }
}

/* Entrypoint: parse MaybeComma* from file. */
MaybeComma* pMaybeComma(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.maybecomma_;
  }
}

/* Entrypoint: parse MaybeComma* from string. */
MaybeComma* psMaybeComma(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.maybecomma_;
  }
}

/* Entrypoint: parse AssignExpr* from file. */
AssignExpr* pAssignExpr15(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.assignexpr_;
  }
}

/* Entrypoint: parse AssignExpr* from string. */
AssignExpr* psAssignExpr15(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.assignexpr_;
  }
}

/* Entrypoint: parse AssignExpr* from file. */
AssignExpr* pAssignExpr14(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.assignexpr_;
  }
}

/* Entrypoint: parse AssignExpr* from string. */
AssignExpr* psAssignExpr14(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.assignexpr_;
  }
}

/* Entrypoint: parse OffsetofMemberDesignator* from file. */
OffsetofMemberDesignator* pOffsetofMemberDesignator(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.offsetofmemberdesignator_;
  }
}

/* Entrypoint: parse OffsetofMemberDesignator* from string. */
OffsetofMemberDesignator* psOffsetofMemberDesignator(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.offsetofmemberdesignator_;
  }
}

/* Entrypoint: parse AssignExpr* from file. */
AssignExpr* pAssignExpr13(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.assignexpr_;
  }
}

/* Entrypoint: parse AssignExpr* from string. */
AssignExpr* psAssignExpr13(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.assignexpr_;
  }
}

/* Entrypoint: parse AssignExpr* from file. */
AssignExpr* pAssignExpr12(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.assignexpr_;
  }
}

/* Entrypoint: parse AssignExpr* from string. */
AssignExpr* psAssignExpr12(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.assignexpr_;
  }
}

/* Entrypoint: parse AssignExpr* from file. */
AssignExpr* pAssignExpr11(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.assignexpr_;
  }
}

/* Entrypoint: parse AssignExpr* from string. */
AssignExpr* psAssignExpr11(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.assignexpr_;
  }
}

/* Entrypoint: parse AssignExpr* from file. */
AssignExpr* pAssignExpr10(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.assignexpr_;
  }
}

/* Entrypoint: parse AssignExpr* from string. */
AssignExpr* psAssignExpr10(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.assignexpr_;
  }
}

/* Entrypoint: parse AssignExpr* from file. */
AssignExpr* pAssignExpr9(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.assignexpr_;
  }
}

/* Entrypoint: parse AssignExpr* from string. */
AssignExpr* psAssignExpr9(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.assignexpr_;
  }
}

/* Entrypoint: parse AssignExpr* from file. */
AssignExpr* pAssignExpr8(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.assignexpr_;
  }
}

/* Entrypoint: parse AssignExpr* from string. */
AssignExpr* psAssignExpr8(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.assignexpr_;
  }
}

/* Entrypoint: parse AssignExpr* from file. */
AssignExpr* pAssignExpr7(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.assignexpr_;
  }
}

/* Entrypoint: parse AssignExpr* from string. */
AssignExpr* psAssignExpr7(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.assignexpr_;
  }
}

/* Entrypoint: parse AssignExpr* from file. */
AssignExpr* pAssignExpr6(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.assignexpr_;
  }
}

/* Entrypoint: parse AssignExpr* from string. */
AssignExpr* psAssignExpr6(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.assignexpr_;
  }
}

/* Entrypoint: parse AssignExpr* from file. */
AssignExpr* pAssignExpr5(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.assignexpr_;
  }
}

/* Entrypoint: parse AssignExpr* from string. */
AssignExpr* psAssignExpr5(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.assignexpr_;
  }
}

/* Entrypoint: parse AssignExpr* from file. */
AssignExpr* pAssignExpr4(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.assignexpr_;
  }
}

/* Entrypoint: parse AssignExpr* from string. */
AssignExpr* psAssignExpr4(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.assignexpr_;
  }
}

/* Entrypoint: parse AssignExpr* from file. */
AssignExpr* pAssignExpr3(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.assignexpr_;
  }
}

/* Entrypoint: parse AssignExpr* from string. */
AssignExpr* psAssignExpr3(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.assignexpr_;
  }
}

/* Entrypoint: parse AssignExpr* from file. */
AssignExpr* pAssignExpr2(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.assignexpr_;
  }
}

/* Entrypoint: parse AssignExpr* from string. */
AssignExpr* psAssignExpr2(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.assignexpr_;
  }
}

/* Entrypoint: parse AssignExpr* from file. */
AssignExpr* pAssignExpr1(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.assignexpr_;
  }
}

/* Entrypoint: parse AssignExpr* from string. */
AssignExpr* psAssignExpr1(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.assignexpr_;
  }
}

/* Entrypoint: parse AssignExpr* from file. */
AssignExpr* pAssignExpr(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.assignexpr_;
  }
}

/* Entrypoint: parse AssignExpr* from string. */
AssignExpr* psAssignExpr(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.assignexpr_;
  }
}

/* Entrypoint: parse Expression* from file. */
Expression* pExpression(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.expression_;
  }
}

/* Entrypoint: parse Expression* from string. */
Expression* psExpression(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.expression_;
  }
}

/* Entrypoint: parse Constant* from file. */
Constant* pConstant(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.constant_;
  }
}

/* Entrypoint: parse Constant* from string. */
Constant* psConstant(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.constant_;
  }
}

/* Entrypoint: parse StringConstant* from file. */
StringConstant* pStringConstant(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.stringconstant_;
  }
}

/* Entrypoint: parse StringConstant* from string. */
StringConstant* psStringConstant(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.stringconstant_;
  }
}

/* Entrypoint: parse WStringList* from file. */
WStringList* pWStringList(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.wstringlist_;
  }
}

/* Entrypoint: parse WStringList* from string. */
WStringList* psWStringList(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.wstringlist_;
  }
}

/* Entrypoint: parse OneString* from file. */
OneString* pOneString(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.onestring_;
  }
}

/* Entrypoint: parse OneString* from string. */
OneString* psOneString(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.onestring_;
  }
}

/* Entrypoint: parse ListOneString* from file. */
ListOneString* pListOneString(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listonestring_->begin(), result.listonestring_->end());
    return result.listonestring_;
  }
}

/* Entrypoint: parse ListOneString* from string. */
ListOneString* psListOneString(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listonestring_->begin(), result.listonestring_->end());
    return result.listonestring_;
  }
}

/* Entrypoint: parse InitExpression* from file. */
InitExpression* pInitExpression(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.initexpression_;
  }
}

/* Entrypoint: parse InitExpression* from string. */
InitExpression* psInitExpression(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.initexpression_;
  }
}

/* Entrypoint: parse InitializerListOpt* from file. */
InitializerListOpt* pInitializerListOpt(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.initializerlistopt_;
  }
}

/* Entrypoint: parse InitializerListOpt* from string. */
InitializerListOpt* psInitializerListOpt(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.initializerlistopt_;
  }
}

/* Entrypoint: parse InitializerSingle* from file. */
InitializerSingle* pInitializerSingle(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.initializersingle_;
  }
}

/* Entrypoint: parse InitializerSingle* from string. */
InitializerSingle* psInitializerSingle(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.initializersingle_;
  }
}

/* Entrypoint: parse ListInitializerSingle* from file. */
ListInitializerSingle* pListInitializerSingle(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listinitializersingle_->begin(), result.listinitializersingle_->end());
    return result.listinitializersingle_;
  }
}

/* Entrypoint: parse ListInitializerSingle* from string. */
ListInitializerSingle* psListInitializerSingle(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listinitializersingle_->begin(), result.listinitializersingle_->end());
    return result.listinitializersingle_;
  }
}

/* Entrypoint: parse EqOpt* from file. */
EqOpt* pEqOpt(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.eqopt_;
  }
}

/* Entrypoint: parse EqOpt* from string. */
EqOpt* psEqOpt(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.eqopt_;
  }
}

/* Entrypoint: parse InitDesignators* from file. */
InitDesignators* pInitDesignators(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.initdesignators_;
  }
}

/* Entrypoint: parse InitDesignators* from string. */
InitDesignators* psInitDesignators(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.initdesignators_;
  }
}

/* Entrypoint: parse InitDesignatorsOpt* from file. */
InitDesignatorsOpt* pInitDesignatorsOpt(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.initdesignatorsopt_;
  }
}

/* Entrypoint: parse InitDesignatorsOpt* from string. */
InitDesignatorsOpt* psInitDesignatorsOpt(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.initdesignatorsopt_;
  }
}

/* Entrypoint: parse GhostArgumentsOpt* from file. */
GhostArgumentsOpt* pGhostArgumentsOpt(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.ghostargumentsopt_;
  }
}

/* Entrypoint: parse GhostArgumentsOpt* from string. */
GhostArgumentsOpt* psGhostArgumentsOpt(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.ghostargumentsopt_;
  }
}

/* Entrypoint: parse Arguments* from file. */
Arguments* pArguments(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.arguments_;
  }
}

/* Entrypoint: parse Arguments* from string. */
Arguments* psArguments(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.arguments_;
  }
}

/* Entrypoint: parse OptExpression* from file. */
OptExpression* pOptExpression(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.optexpression_;
  }
}

/* Entrypoint: parse OptExpression* from string. */
OptExpression* psOptExpression(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.optexpression_;
  }
}

/* Entrypoint: parse ListExpression* from file. */
ListExpression* pListExpression(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listexpression_->begin(), result.listexpression_->end());
    return result.listexpression_;
  }
}

/* Entrypoint: parse ListExpression* from string. */
ListExpression* psListExpression(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listexpression_->begin(), result.listexpression_->end());
    return result.listexpression_;
  }
}

/* Entrypoint: parse CommaExpressionOpt* from file. */
CommaExpressionOpt* pCommaExpressionOpt(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.commaexpressionopt_;
  }
}

/* Entrypoint: parse CommaExpressionOpt* from string. */
CommaExpressionOpt* psCommaExpressionOpt(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.commaexpressionopt_;
  }
}

/* Entrypoint: parse Block* from file. */
Block* pBlock(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.block_;
  }
}

/* Entrypoint: parse Block* from string. */
Block* psBlock(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.block_;
  }
}

/* Entrypoint: parse BlockAttrs* from file. */
BlockAttrs* pBlockAttrs(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.blockattrs_;
  }
}

/* Entrypoint: parse BlockAttrs* from string. */
BlockAttrs* psBlockAttrs(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.blockattrs_;
  }
}

/* Entrypoint: parse BlockElement* from file. */
BlockElement* pBlockElement(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.blockelement_;
  }
}

/* Entrypoint: parse BlockElement* from string. */
BlockElement* psBlockElement(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.blockelement_;
  }
}

/* Entrypoint: parse ListBlockElement* from file. */
ListBlockElement* pListBlockElement(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.listblockelement_;
  }
}

/* Entrypoint: parse ListBlockElement* from string. */
ListBlockElement* psListBlockElement(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.listblockelement_;
  }
}

/* Entrypoint: parse Annot* from file. */
Annot* pAnnot(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.annot_;
  }
}

/* Entrypoint: parse Annot* from string. */
Annot* psAnnot(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.annot_;
  }
}

/* Entrypoint: parse ListAnnot* from file. */
ListAnnot* pListAnnot(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.listannot_;
  }
}

/* Entrypoint: parse ListAnnot* from string. */
ListAnnot* psListAnnot(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.listannot_;
  }
}

/* Entrypoint: parse LocalLabel* from file. */
LocalLabel* pLocalLabel(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.locallabel_;
  }
}

/* Entrypoint: parse LocalLabel* from string. */
LocalLabel* psLocalLabel(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.locallabel_;
  }
}

/* Entrypoint: parse ListLocalLabel* from file. */
ListLocalLabel* pListLocalLabel(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.listlocallabel_;
  }
}

/* Entrypoint: parse ListLocalLabel* from string. */
ListLocalLabel* psListLocalLabel(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.listlocallabel_;
  }
}

/* Entrypoint: parse LocalLabelName* from file. */
LocalLabelName* pLocalLabelName(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.locallabelname_;
  }
}

/* Entrypoint: parse LocalLabelName* from string. */
LocalLabelName* psLocalLabelName(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.locallabelname_;
  }
}

/* Entrypoint: parse ListLocalLabelName* from file. */
ListLocalLabelName* pListLocalLabelName(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listlocallabelname_->begin(), result.listlocallabelname_->end());
    return result.listlocallabelname_;
  }
}

/* Entrypoint: parse ListLocalLabelName* from string. */
ListLocalLabelName* psListLocalLabelName(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listlocallabelname_->begin(), result.listlocallabelname_->end());
    return result.listlocallabelname_;
  }
}

/* Entrypoint: parse AnnotatedStmt* from file. */
AnnotatedStmt* pAnnotatedStmt(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.annotatedstmt_;
  }
}

/* Entrypoint: parse AnnotatedStmt* from string. */
AnnotatedStmt* psAnnotatedStmt(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.annotatedstmt_;
  }
}

/* Entrypoint: parse ElsePart* from file. */
ElsePart* pElsePart(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.elsepart_;
  }
}

/* Entrypoint: parse ElsePart* from string. */
ElsePart* psElsePart(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.elsepart_;
  }
}

/* Entrypoint: parse Statement* from file. */
Statement* pStatement(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.statement_;
  }
}

/* Entrypoint: parse Statement* from string. */
Statement* psStatement(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.statement_;
  }
}

/* Entrypoint: parse OptLoopAnnotations* from file. */
OptLoopAnnotations* pOptLoopAnnotations(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.optloopannotations_;
  }
}

/* Entrypoint: parse OptLoopAnnotations* from string. */
OptLoopAnnotations* psOptLoopAnnotations(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.optloopannotations_;
  }
}

/* Entrypoint: parse ForClause* from file. */
ForClause* pForClause(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.forclause_;
  }
}

/* Entrypoint: parse ForClause* from string. */
ForClause* psForClause(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.forclause_;
  }
}

/* Entrypoint: parse GhostParameterOpt* from file. */
GhostParameterOpt* pGhostParameterOpt(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.ghostparameteropt_;
  }
}

/* Entrypoint: parse GhostParameterOpt* from string. */
GhostParameterOpt* psGhostParameterOpt(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.ghostparameteropt_;
  }
}

/* Entrypoint: parse Declaration* from file. */
Declaration* pDeclaration(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.declaration_;
  }
}

/* Entrypoint: parse Declaration* from string. */
Declaration* psDeclaration(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.declaration_;
  }
}

/* Entrypoint: parse GenericAssociation* from file. */
GenericAssociation* pGenericAssociation(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.genericassociation_;
  }
}

/* Entrypoint: parse GenericAssociation* from string. */
GenericAssociation* psGenericAssociation(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.genericassociation_;
  }
}

/* Entrypoint: parse ListGenericAssociation* from file. */
ListGenericAssociation* pListGenericAssociation(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listgenericassociation_->begin(), result.listgenericassociation_->end());
    return result.listgenericassociation_;
  }
}

/* Entrypoint: parse ListGenericAssociation* from string. */
ListGenericAssociation* psListGenericAssociation(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listgenericassociation_->begin(), result.listgenericassociation_->end());
    return result.listgenericassociation_;
  }
}

/* Entrypoint: parse DeclAndInitDeclAttrList* from file. */
DeclAndInitDeclAttrList* pDeclAndInitDeclAttrList(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.declandinitdeclattrlist_;
  }
}

/* Entrypoint: parse DeclAndInitDeclAttrList* from string. */
DeclAndInitDeclAttrList* psDeclAndInitDeclAttrList(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.declandinitdeclattrlist_;
  }
}

/* Entrypoint: parse InitDeclaratorAttr* from file. */
InitDeclaratorAttr* pInitDeclaratorAttr(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.initdeclaratorattr_;
  }
}

/* Entrypoint: parse InitDeclaratorAttr* from string. */
InitDeclaratorAttr* psInitDeclaratorAttr(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.initdeclaratorattr_;
  }
}

/* Entrypoint: parse ListInitDeclaratorAttr* from file. */
ListInitDeclaratorAttr* pListInitDeclaratorAttr(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listinitdeclaratorattr_->begin(), result.listinitdeclaratorattr_->end());
    return result.listinitdeclaratorattr_;
  }
}

/* Entrypoint: parse ListInitDeclaratorAttr* from string. */
ListInitDeclaratorAttr* psListInitDeclaratorAttr(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listinitdeclaratorattr_->begin(), result.listinitdeclaratorattr_->end());
    return result.listinitdeclaratorattr_;
  }
}

/* Entrypoint: parse InitDeclarator* from file. */
InitDeclarator* pInitDeclarator(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.initdeclarator_;
  }
}

/* Entrypoint: parse InitDeclarator* from string. */
InitDeclarator* psInitDeclarator(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.initdeclarator_;
  }
}

/* Entrypoint: parse DeclSpecWOType* from file. */
DeclSpecWOType* pDeclSpecWOType(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.declspecwotype_;
  }
}

/* Entrypoint: parse DeclSpecWOType* from string. */
DeclSpecWOType* psDeclSpecWOType(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.declspecwotype_;
  }
}

/* Entrypoint: parse DeclSpecList* from file. */
DeclSpecList* pDeclSpecList(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.declspeclist_;
  }
}

/* Entrypoint: parse DeclSpecList* from string. */
DeclSpecList* psDeclSpecList(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.declspeclist_;
  }
}

/* Entrypoint: parse DeclSpecListNoNamed* from file. */
DeclSpecListNoNamed* pDeclSpecListNoNamed(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.declspeclistnonamed_;
  }
}

/* Entrypoint: parse DeclSpecListNoNamed* from string. */
DeclSpecListNoNamed* psDeclSpecListNoNamed(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.declspeclistnonamed_;
  }
}

/* Entrypoint: parse TypeSpec* from file. */
TypeSpec* pTypeSpec(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.typespec_;
  }
}

/* Entrypoint: parse TypeSpec* from string. */
TypeSpec* psTypeSpec(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.typespec_;
  }
}

/* Entrypoint: parse StructDeclList* from file. */
StructDeclList* pStructDeclList(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.structdecllist_;
  }
}

/* Entrypoint: parse StructDeclList* from string. */
StructDeclList* psStructDeclList(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.structdecllist_;
  }
}

/* Entrypoint: parse StaticAssertDeclaration* from file. */
StaticAssertDeclaration* pStaticAssertDeclaration(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.staticassertdeclaration_;
  }
}

/* Entrypoint: parse StaticAssertDeclaration* from string. */
StaticAssertDeclaration* psStaticAssertDeclaration(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.staticassertdeclaration_;
  }
}

/* Entrypoint: parse FieldDecl* from file. */
FieldDecl* pFieldDecl(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.fielddecl_;
  }
}

/* Entrypoint: parse FieldDecl* from string. */
FieldDecl* psFieldDecl(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.fielddecl_;
  }
}

/* Entrypoint: parse ListFieldDecl* from file. */
ListFieldDecl* pListFieldDecl(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listfielddecl_->begin(), result.listfielddecl_->end());
    return result.listfielddecl_;
  }
}

/* Entrypoint: parse ListFieldDecl* from string. */
ListFieldDecl* psListFieldDecl(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listfielddecl_->begin(), result.listfielddecl_->end());
    return result.listfielddecl_;
  }
}

/* Entrypoint: parse Enumerator* from file. */
Enumerator* pEnumerator(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.enumerator_;
  }
}

/* Entrypoint: parse Enumerator* from string. */
Enumerator* psEnumerator(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.enumerator_;
  }
}

/* Entrypoint: parse ListEnumerator* from file. */
ListEnumerator* pListEnumerator(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listenumerator_->begin(), result.listenumerator_->end());
    return result.listenumerator_;
  }
}

/* Entrypoint: parse ListEnumerator* from string. */
ListEnumerator* psListEnumerator(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listenumerator_->begin(), result.listenumerator_->end());
    return result.listenumerator_;
  }
}

/* Entrypoint: parse Declarator* from file. */
Declarator* pDeclarator(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.declarator_;
  }
}

/* Entrypoint: parse Declarator* from string. */
Declarator* psDeclarator(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.declarator_;
  }
}

/* Entrypoint: parse ListDeclarator* from file. */
ListDeclarator* pListDeclarator(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listdeclarator_->begin(), result.listdeclarator_->end());
    return result.listdeclarator_;
  }
}

/* Entrypoint: parse ListDeclarator* from string. */
ListDeclarator* psListDeclarator(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listdeclarator_->begin(), result.listdeclarator_->end());
    return result.listdeclarator_;
  }
}

/* Entrypoint: parse AttributesOrStatic* from file. */
AttributesOrStatic* pAttributesOrStatic(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attributesorstatic_;
  }
}

/* Entrypoint: parse AttributesOrStatic* from string. */
AttributesOrStatic* psAttributesOrStatic(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attributesorstatic_;
  }
}

/* Entrypoint: parse DirectDecl* from file. */
DirectDecl* pDirectDecl(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.directdecl_;
  }
}

/* Entrypoint: parse DirectDecl* from string. */
DirectDecl* psDirectDecl(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.directdecl_;
  }
}

/* Entrypoint: parse RestParList* from file. */
RestParList* pRestParList(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.restparlist_;
  }
}

/* Entrypoint: parse RestParList* from string. */
RestParList* psRestParList(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.restparlist_;
  }
}

/* Entrypoint: parse ParameterDecl* from file. */
ParameterDecl* pParameterDecl(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.parameterdecl_;
  }
}

/* Entrypoint: parse ParameterDecl* from string. */
ParameterDecl* psParameterDecl(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.parameterdecl_;
  }
}

/* Entrypoint: parse ListParameterDecl* from file. */
ListParameterDecl* pListParameterDecl(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listparameterdecl_->begin(), result.listparameterdecl_->end());
    return result.listparameterdecl_;
  }
}

/* Entrypoint: parse ListParameterDecl* from string. */
ListParameterDecl* psListParameterDecl(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listparameterdecl_->begin(), result.listparameterdecl_->end());
    return result.listparameterdecl_;
  }
}

/* Entrypoint: parse DirectOldProtoDecl* from file. */
DirectOldProtoDecl* pDirectOldProtoDecl(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.directoldprotodecl_;
  }
}

/* Entrypoint: parse DirectOldProtoDecl* from string. */
DirectOldProtoDecl* psDirectOldProtoDecl(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.directoldprotodecl_;
  }
}

/* Entrypoint: parse ListIdent* from file. */
ListIdent* pListIdent(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listident_->begin(), result.listident_->end());
    return result.listident_;
  }
}

/* Entrypoint: parse ListIdent* from string. */
ListIdent* psListIdent(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listident_->begin(), result.listident_->end());
    return result.listident_;
  }
}

/* Entrypoint: parse OldPardefList* from file. */
OldPardefList* pOldPardefList(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.oldpardeflist_;
  }
}

/* Entrypoint: parse OldPardefList* from string. */
OldPardefList* psOldPardefList(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.oldpardeflist_;
  }
}

/* Entrypoint: parse OldPardef* from file. */
OldPardef* pOldPardef(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.oldpardef_;
  }
}

/* Entrypoint: parse OldPardef* from string. */
OldPardef* psOldPardef(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.oldpardef_;
  }
}

/* Entrypoint: parse ListOldPardef* from file. */
ListOldPardef* pListOldPardef(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listoldpardef_->begin(), result.listoldpardef_->end());
    return result.listoldpardef_;
  }
}

/* Entrypoint: parse ListOldPardef* from string. */
ListOldPardef* psListOldPardef(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listoldpardef_->begin(), result.listoldpardef_->end());
    return result.listoldpardef_;
  }
}

/* Entrypoint: parse PointerOpt* from file. */
PointerOpt* pPointerOpt(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.pointeropt_;
  }
}

/* Entrypoint: parse PointerOpt* from string. */
PointerOpt* psPointerOpt(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.pointeropt_;
  }
}

/* Entrypoint: parse TypeName* from file. */
TypeName* pTypeName(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.typename_;
  }
}

/* Entrypoint: parse TypeName* from string. */
TypeName* psTypeName(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.typename_;
  }
}

/* Entrypoint: parse AbstractDecl* from file. */
AbstractDecl* pAbstractDecl(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.abstractdecl_;
  }
}

/* Entrypoint: parse AbstractDecl* from string. */
AbstractDecl* psAbstractDecl(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.abstractdecl_;
  }
}

/* Entrypoint: parse AbsDirectDecl* from file. */
AbsDirectDecl* pAbsDirectDecl(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.absdirectdecl_;
  }
}

/* Entrypoint: parse AbsDirectDecl* from string. */
AbsDirectDecl* psAbsDirectDecl(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.absdirectdecl_;
  }
}

/* Entrypoint: parse AbsDirectDeclOpt* from file. */
AbsDirectDeclOpt* pAbsDirectDeclOpt(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.absdirectdeclopt_;
  }
}

/* Entrypoint: parse AbsDirectDeclOpt* from string. */
AbsDirectDeclOpt* psAbsDirectDeclOpt(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.absdirectdeclopt_;
  }
}

/* Entrypoint: parse FunctionDef* from file. */
FunctionDef* pFunctionDef(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.functiondef_;
  }
}

/* Entrypoint: parse FunctionDef* from string. */
FunctionDef* psFunctionDef(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.functiondef_;
  }
}

/* Entrypoint: parse FunctionDefStart* from file. */
FunctionDefStart* pFunctionDefStart(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.functiondefstart_;
  }
}

/* Entrypoint: parse FunctionDefStart* from string. */
FunctionDefStart* psFunctionDefStart(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.functiondefstart_;
  }
}

/* Entrypoint: parse CVSpec* from file. */
CVSpec* pCVSpec(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.cvspec_;
  }
}

/* Entrypoint: parse CVSpec* from string. */
CVSpec* psCVSpec(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.cvspec_;
  }
}

/* Entrypoint: parse AttributesWithAsm* from file. */
AttributesWithAsm* pAttributesWithAsm(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attributeswithasm_;
  }
}

/* Entrypoint: parse AttributesWithAsm* from string. */
AttributesWithAsm* psAttributesWithAsm(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attributeswithasm_;
  }
}

/* Entrypoint: parse AttributeNocv* from file. */
AttributeNocv* pAttributeNocv(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attributenocv_;
  }
}

/* Entrypoint: parse AttributeNocv* from string. */
AttributeNocv* psAttributeNocv(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attributenocv_;
  }
}

/* Entrypoint: parse ListAttributeNocv* from file. */
ListAttributeNocv* pListAttributeNocv(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.listattributenocv_;
  }
}

/* Entrypoint: parse ListAttributeNocv* from string. */
ListAttributeNocv* psListAttributeNocv(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.listattributenocv_;
  }
}

/* Entrypoint: parse Attribute* from file. */
Attribute* pAttribute(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attribute_;
  }
}

/* Entrypoint: parse Attribute* from string. */
Attribute* psAttribute(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attribute_;
  }
}

/* Entrypoint: parse ListAttribute* from file. */
ListAttribute* pListAttribute(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.listattribute_;
  }
}

/* Entrypoint: parse ListAttribute* from string. */
ListAttribute* psListAttribute(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.listattribute_;
  }
}

/* Entrypoint: parse JustAttribute* from file. */
JustAttribute* pJustAttribute(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.justattribute_;
  }
}

/* Entrypoint: parse JustAttribute* from string. */
JustAttribute* psJustAttribute(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.justattribute_;
  }
}

/* Entrypoint: parse ListJustAttribute* from file. */
ListJustAttribute* pListJustAttribute(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listjustattribute_->begin(), result.listjustattribute_->end());
    return result.listjustattribute_;
  }
}

/* Entrypoint: parse ListJustAttribute* from string. */
ListJustAttribute* psListJustAttribute(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listjustattribute_->begin(), result.listjustattribute_->end());
    return result.listjustattribute_;
  }
}

/* Entrypoint: parse Pragma* from file. */
Pragma* pPragma(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.pragma_;
  }
}

/* Entrypoint: parse Pragma* from string. */
Pragma* psPragma(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.pragma_;
  }
}

/* Entrypoint: parse VarAttr* from file. */
VarAttr* pVarAttr(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.varattr_;
  }
}

/* Entrypoint: parse VarAttr* from string. */
VarAttr* psVarAttr(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.varattr_;
  }
}

/* Entrypoint: parse BasicAttribute* from file. */
BasicAttribute* pBasicAttribute(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.basicattribute_;
  }
}

/* Entrypoint: parse BasicAttribute* from string. */
BasicAttribute* psBasicAttribute(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.basicattribute_;
  }
}

/* Entrypoint: parse ListBasicAttribute* from file. */
ListBasicAttribute* pListBasicAttribute(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listbasicattribute_->begin(), result.listbasicattribute_->end());
    return result.listbasicattribute_;
  }
}

/* Entrypoint: parse ListBasicAttribute* from string. */
ListBasicAttribute* psListBasicAttribute(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listbasicattribute_->begin(), result.listbasicattribute_->end());
    return result.listbasicattribute_;
  }
}

/* Entrypoint: parse ParameterAttrListNE* from file. */
ParameterAttrListNE* pParameterAttrListNE(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.parameterattrlistne_;
  }
}

/* Entrypoint: parse ParameterAttrListNE* from string. */
ParameterAttrListNE* psParameterAttrListNE(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.parameterattrlistne_;
  }
}

/* Entrypoint: parse ParamAttrListNE* from file. */
ParamAttrListNE* pParamAttrListNE(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.paramattrlistne_;
  }
}

/* Entrypoint: parse ParamAttrListNE* from string. */
ParamAttrListNE* psParamAttrListNE(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.paramattrlistne_;
  }
}

/* Entrypoint: parse Attr* from file. */
Attr* pAttr14(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attr_;
  }
}

/* Entrypoint: parse Attr* from string. */
Attr* psAttr14(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attr_;
  }
}

/* Entrypoint: parse Attr* from file. */
Attr* pAttr13(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attr_;
  }
}

/* Entrypoint: parse Attr* from string. */
Attr* psAttr13(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attr_;
  }
}

/* Entrypoint: parse Attr* from file. */
Attr* pAttr12(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attr_;
  }
}

/* Entrypoint: parse Attr* from string. */
Attr* psAttr12(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attr_;
  }
}

/* Entrypoint: parse Attr* from file. */
Attr* pAttr11(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attr_;
  }
}

/* Entrypoint: parse Attr* from string. */
Attr* psAttr11(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attr_;
  }
}

/* Entrypoint: parse Attr* from file. */
Attr* pAttr10(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attr_;
  }
}

/* Entrypoint: parse Attr* from string. */
Attr* psAttr10(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attr_;
  }
}

/* Entrypoint: parse Attr* from file. */
Attr* pAttr9(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attr_;
  }
}

/* Entrypoint: parse Attr* from string. */
Attr* psAttr9(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attr_;
  }
}

/* Entrypoint: parse Attr* from file. */
Attr* pAttr8(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attr_;
  }
}

/* Entrypoint: parse Attr* from string. */
Attr* psAttr8(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attr_;
  }
}

/* Entrypoint: parse Attr* from file. */
Attr* pAttr7(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attr_;
  }
}

/* Entrypoint: parse Attr* from string. */
Attr* psAttr7(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attr_;
  }
}

/* Entrypoint: parse Attr* from file. */
Attr* pAttr6(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attr_;
  }
}

/* Entrypoint: parse Attr* from string. */
Attr* psAttr6(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attr_;
  }
}

/* Entrypoint: parse Attr* from file. */
Attr* pAttr5(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attr_;
  }
}

/* Entrypoint: parse Attr* from string. */
Attr* psAttr5(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attr_;
  }
}

/* Entrypoint: parse Attr* from file. */
Attr* pAttr4(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attr_;
  }
}

/* Entrypoint: parse Attr* from string. */
Attr* psAttr4(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attr_;
  }
}

/* Entrypoint: parse Attr* from file. */
Attr* pAttr3(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attr_;
  }
}

/* Entrypoint: parse Attr* from string. */
Attr* psAttr3(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attr_;
  }
}

/* Entrypoint: parse Attr* from file. */
Attr* pAttr2(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attr_;
  }
}

/* Entrypoint: parse Attr* from string. */
Attr* psAttr2(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attr_;
  }
}

/* Entrypoint: parse Attr* from file. */
Attr* pAttr1(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attr_;
  }
}

/* Entrypoint: parse Attr* from string. */
Attr* psAttr1(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attr_;
  }
}

/* Entrypoint: parse Attr* from file. */
Attr* pAttr(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attr_;
  }
}

/* Entrypoint: parse Attr* from string. */
Attr* psAttr(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attr_;
  }
}

/* Entrypoint: parse ListAttr* from file. */
ListAttr* pListAttr(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listattr_->begin(), result.listattr_->end());
    return result.listattr_;
  }
}

/* Entrypoint: parse ListAttr* from string. */
ListAttr* psListAttr(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listattr_->begin(), result.listattr_->end());
    return result.listattr_;
  }
}

/* Entrypoint: parse AttrTest* from file. */
AttrTest* pAttrTest(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attrtest_;
  }
}

/* Entrypoint: parse AttrTest* from string. */
AttrTest* psAttrTest(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attrtest_;
  }
}

/* Entrypoint: parse AttrList* from file. */
AttrList* pAttrList(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attrlist_;
  }
}

/* Entrypoint: parse AttrList* from string. */
AttrList* psAttrList(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.attrlist_;
  }
}

/* Entrypoint: parse Asmattr* from file. */
Asmattr* pAsmattr(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.asmattr_;
  }
}

/* Entrypoint: parse Asmattr* from string. */
Asmattr* psAsmattr(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.asmattr_;
  }
}

/* Entrypoint: parse ListAsmattr* from file. */
ListAsmattr* pListAsmattr(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.listasmattr_;
  }
}

/* Entrypoint: parse ListAsmattr* from string. */
ListAsmattr* psListAsmattr(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.listasmattr_;
  }
}

/* Entrypoint: parse Asmoutputs* from file. */
Asmoutputs* pAsmoutputs(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.asmoutputs_;
  }
}

/* Entrypoint: parse Asmoutputs* from string. */
Asmoutputs* psAsmoutputs(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.asmoutputs_;
  }
}

/* Entrypoint: parse Asmoperands* from file. */
Asmoperands* pAsmoperands(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.asmoperands_;
  }
}

/* Entrypoint: parse Asmoperands* from string. */
Asmoperands* psAsmoperands(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.asmoperands_;
  }
}

/* Entrypoint: parse Asmoperand* from file. */
Asmoperand* pAsmoperand(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.asmoperand_;
  }
}

/* Entrypoint: parse Asmoperand* from string. */
Asmoperand* psAsmoperand(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.asmoperand_;
  }
}

/* Entrypoint: parse ListAsmoperand* from file. */
ListAsmoperand* pListAsmoperand(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listasmoperand_->begin(), result.listasmoperand_->end());
    return result.listasmoperand_;
  }
}

/* Entrypoint: parse ListAsmoperand* from string. */
ListAsmoperand* psListAsmoperand(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.listasmoperand_->begin(), result.listasmoperand_->end());
    return result.listasmoperand_;
  }
}

/* Entrypoint: parse Asminputs* from file. */
Asminputs* pAsminputs(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.asminputs_;
  }
}

/* Entrypoint: parse Asminputs* from string. */
Asminputs* psAsminputs(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.asminputs_;
  }
}

/* Entrypoint: parse Asmopname* from file. */
Asmopname* pAsmopname(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.asmopname_;
  }
}

/* Entrypoint: parse Asmopname* from string. */
Asmopname* psAsmopname(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.asmopname_;
  }
}

/* Entrypoint: parse Asmclobber* from file. */
Asmclobber* pAsmclobber(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.asmclobber_;
  }
}

/* Entrypoint: parse Asmclobber* from string. */
Asmclobber* psAsmclobber(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.asmclobber_;
  }
}

/* Entrypoint: parse ListStringConstant* from file. */
ListStringConstant* pListStringConstant(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.liststringconstant_->begin(), result.liststringconstant_->end());
    return result.liststringconstant_;
  }
}

/* Entrypoint: parse ListStringConstant* from string. */
ListStringConstant* psListStringConstant(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
std::reverse(result.liststringconstant_->begin(), result.liststringconstant_->end());
    return result.liststringconstant_;
  }
}

/* Entrypoint: parse Asmlabels* from file. */
Asmlabels* pAsmlabels(FILE *inp)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(inp);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  int error = yyparse(scanner, &result);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.asmlabels_;
  }
}

/* Entrypoint: parse Asmlabels* from string. */
Asmlabels* psAsmlabels(const char *str)
{
  YYSTYPE result;
  yyscan_t scanner = acsl_initialize_lexer(0);
  if (!scanner) {
    fprintf(stderr, "Failed to initialize lexer.\n");
    return 0;
  }
  YY_BUFFER_STATE buf = acsl_scan_string(str, scanner);
  int error = yyparse(scanner, &result);
  acsl_delete_buffer(buf, scanner);
  acsllex_destroy(scanner);
  if (error)
  { /* Failure */
    return 0;
  }
  else
  { /* Success */
    return result.asmlabels_;
  }
}


}
