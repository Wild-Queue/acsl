/* File generated by the BNF Converter (bnfc 2.9.4.1). */

#ifndef ACSL_SKELETON_HEADER
#define ACSL_SKELETON_HEADER
/* You might want to change the above name. */

#include "Absyn.H"

namespace acsl
{
class Skeleton : public Visitor
{
public:
  void visitMain(Main *p);
  void visitAnOption(AnOption *p);
  void visitOptIdentifiers(OptIdentifiers *p);
  void visitMetavar(Metavar *p);
  void visitState(State *p);
  void visitTransition(Transition *p);
  void visitGuard(Guard *p);
  void visitPreCond(PreCond *p);
  void visitPostCond(PostCond *p);
  void visitSeqElt(SeqElt *p);
  void visitRepetition(Repetition *p);
  void visitCond(Cond *p);
  void visitLogicRelation(LogicRelation *p);
  void visitExpr(Expr *p);
  void visitAction(Action *p);
  void visitAMain(AMain *p);
  void visitOption(Option *p);
  void visitEmptyOptIdent(EmptyOptIdent *p);
  void visitOptIdent(OptIdent *p);
  void visitAMetavar(AMetavar *p);
  void visitAState(AState *p);
  void visitEmptyTransition(EmptyTransition *p);
  void visitSeqTransition(SeqTransition *p);
  void visitOtherTransition(OtherTransition *p);
  void visitSimpleTransition(SimpleTransition *p);
  void visitGuardSquares(GuardSquares *p);
  void visitGuardWithPreEmpty(GuardWithPreEmpty *p);
  void visitGuardWithPre(GuardWithPre *p);
  void visitGuardPostOnly(GuardPostOnly *p);
  void visitGuardPostOnlyEmpty(GuardPostOnlyEmpty *p);
  void visitPrecondCC(PrecondCC *p);
  void visitPrecondBB(PrecondBB *p);
  void visitPostcondEmpty(PostcondEmpty *p);
  void visitPostcondSimple(PostcondSimple *p);
  void visitSeqEltCond(SeqEltCond *p);
  void visitSeqEltGuardRep(SeqEltGuardRep *p);
  void visitRepetitionEmpty(RepetitionEmpty *p);
  void visitRepetitionPlus(RepetitionPlus *p);
  void visitRepetitionMinus(RepetitionMinus *p);
  void visitRepetitionQuestion(RepetitionQuestion *p);
  void visitRepetitionPair(RepetitionPair *p);
  void visitRepetitionOne(RepetitionOne *p);
  void visitRepetitionREmpty(RepetitionREmpty *p);
  void visitRepetitionLEmpty(RepetitionLEmpty *p);
  void visitLogicOr(LogicOr *p);
  void visitLogicAnd(LogicAnd *p);
  void visitACondCOR(ACondCOR *p);
  void visitACondCALL(ACondCALL *p);
  void visitACondReturn(ACondReturn *p);
  void visitACondTrue(ACondTrue *p);
  void visitACondFalse(ACondFalse *p);
  void visitACondNot(ACondNot *p);
  void visitRelationCond(RelationCond *p);
  void visitLogicEQ(LogicEQ *p);
  void visitLogicLess(LogicLess *p);
  void visitLogicGreater(LogicGreater *p);
  void visitLogicLessEQ(LogicLessEQ *p);
  void visitLogicGreaterEQ(LogicGreaterEQ *p);
  void visitLogicNotEQ(LogicNotEQ *p);
  void visitAdd(Add *p);
  void visitSubtract(Subtract *p);
  void visitDivide(Divide *p);
  void visitMultiply(Multiply *p);
  void visitMod(Mod *p);
  void visitBitAnd(BitAnd *p);
  void visitBitOr(BitOr *p);
  void visitBitXor(BitXor *p);
  void visitInt(Int *p);
  void visitFloat(Float *p);
  void visitNegativeInt(NegativeInt *p);
  void visitNegativeDouble(NegativeDouble *p);
  void visitStructFielsAccess(StructFielsAccess *p);
  void visitPointerAccess(PointerAccess *p);
  void visitArrayAccess(ArrayAccess *p);
  void visitRefAccess(RefAccess *p);
  void visitFunAccess(FunAccess *p);
  void visitIdentifier(Identifier *p);
  void visitMetavarAccess(MetavarAccess *p);
  void visitAnAction(AnAction *p);
  void visitListIdent(ListIdent *p);
  void visitListAnOption(ListAnOption *p);
  void visitListMetavar(ListMetavar *p);
  void visitListState(ListState *p);
  void visitListTransition(ListTransition *p);
  void visitListSeqElt(ListSeqElt *p);
  void visitListAction(ListAction *p);

  void visitInteger(Integer x);
  void visitChar(Char x);
  void visitDouble(Double x);
  void visitString(String x);
  void visitIdent(Ident x);
  void visitIdent(Ident x);

};
}

#endif
