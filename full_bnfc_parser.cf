--comment "//" ;
--comment "/*" "*/" ;

--token STRING_LITERAL (letter) ;
--separator nonempty STRING_LITERAL "" ;

token SIGNED ({"__signed__"} | {"signed"} | {"__signed"});
token LBRACE ({"<%"} | '{');
token RBRACE ({"%>"} | '}');
token CONST ({"const"} | {"__const"} | {"__const__"});
token RESTRICT ({"__restrict"} | {"restrict"});
token VOLATILE ({"volatile"} | {"__volatile"} | {"__volatile__"} | {"__volatile"});
token BLOCKATTRIBUTE ({"__blockattribute__"} | {"__blockattribute"});
token LBRACKET ({"<:"} | '[');
token RBRACKET ({":>"} | ']');

AProgram.  Program ::= Globals ;


NoGlobals.          Globals ::= ; --/* empty */ 
SimpleGlobals.      Globals ::= Global Globals ;
-- AGhostGlobals.      Globals ::= "ghost" GhostGlobals Globals ;
SemiColonGlobals.   Globals ::= ";" Globals ;


--/*** Global Definition ***/
--GlobalDecl.                 Global ::= Decl ; --DECL => Decl
GlobalsFunctionDef.         Global ::= FunctionDef ;
GlobalsDeclataion.          Global ::= Declaration ;
--/*(* Some C header files are shared with the C++ compiler and have linkage specification *)*/
--ExternGlobalDeclataion.     Global ::= "extern" StringConstant Declaration ;
--ExternGlobalPar.            Global ::= "extern" StringConstant "{" Globals "}" ;
--AsmGlobal.                  Global ::= ASM "(" StringConstant ")" ";" ;
--PragmaGlobal.               Global ::= Pragma ;
--/* (* Old-style function prototype. This should be somewhere else, like in "Declaration". For now we keep it at global scope only because in local scope it looks too much like a function call  *) */
--GlobalOldStyle.             Global ::= Ident "(" [Ident] ")" OldPardefList ";" ;
--GlobalEmptyOldStyle.        Global ::= Ident "(" ")" ";" ;


SimpleFunctionDef.  FunctionDef ::= FunctionDefStart Block ;
FunctionDefSpec.    FunctionDef ::= ACSLProgram FunctionDefStart Block ; -- SPEC => Annot


FunctionDefStartDeclarator.             FunctionDefStart ::= DeclSpecList Declarator ;
--FunctionDefStartOldProtoDecl.           FunctionDefStart ::= DeclSpecList PointerOpt DirectOldProtoDecl ;                              --/* (* Old-style function prototype *) */
--FunctionDefStartReatParGhostParameter.  FunctionDefStart ::= Ident "(" RestParList ")" GhostParameterOpt ;            --/* (* New-style function that does not have a return type *) */
--FunctionDefStartOldPardef.              FunctionDefStart ::= Ident "(" [Ident] ")" OldPardefList ;                      --/* (* No return type and old-style parameter list *) */
--FunctionDefStartGhostParameter.         FunctionDefStart ::= Ident "(" ")" GhostParameterOpt ;


--DeclSpecWoType.         DeclSpecList ::= DeclSpecWOType ;
--DeclSpecWoTypeNext.     DeclSpecList ::= DeclSpecWOType DeclSpecList ;
DeclSpecTypeSpec.       DeclSpecList ::= TypeSpec ;
DeclSpecTypeSpecNext.   DeclSpecList ::= TypeSpec DeclSpecListNoNamed ;


--DeclSpecNoNamedWOType.         DeclSpecListNoNamed ::= DeclSpecWOType ;
--DeclSpecNoNamedWOTypeNext.     DeclSpecListNoNamed ::= DeclSpecWOType DeclSpecListNoNamed ;
DeclSpecNoNamedTypeSpec.       DeclSpecListNoNamed ::= TypeSpec ;
DeclSpecNoNamedTypeSpecNext.   DeclSpecListNoNamed ::= TypeSpec DeclSpecListNoNamed ;


TypeSpecVoidKeyWord.                TypeSpec ::= "void" ;
TypeSpecCharKeyWord.                TypeSpec ::= "char" ;
TypeSpecBoolKeyWord.                TypeSpec ::= "_Bool" ;
TypeSpecShortKeyWord.               TypeSpec ::= "short" ;
TypeSpecInt32KeyWord.               TypeSpec ::= "__int32" ;
TypeSpecIntKeyWord.                 TypeSpec ::= "int" ;
TypeSpecSizeTKeyWord.               TypeSpec ::= "size_t" ;
TypeSpecLongKeyWord.                TypeSpec ::= "long" ;
TypeSpecInt64KeyWord.               TypeSpec ::= "__int64" ;
TypeSpecFloatKeyWord.               TypeSpec ::= "float" ;
TypeSpecDoubleKeyWord.              TypeSpec ::= "double" ;
TypeSpecSignedKeyWord.              TypeSpec ::= SIGNED ;
TypeSpecUnsignedKeyWord.            TypeSpec ::= "unsigned" ;
StructId.                           TypeSpec ::= "struct" IdOrTypename ;
--StructJustAttr.                     TypeSpec ::= "struct" [JustAttribute] IdOrTypename ;
StructIdBraces.                     TypeSpec ::= "struct" IdOrTypename "{" StructDeclList "}" ;
StructBraces.                       TypeSpec ::= "struct" "{" StructDeclList "}" ;
--StructJustAttrIdBraces.             TypeSpec ::= "struct" [JustAttribute] IdOrTypename "{" StructDeclList "}" ;
--StructJustAttrBraces.               TypeSpec ::= "struct" [JustAttribute] "{" StructDeclList "}" ;
--UnionId.                    TypeSpec ::= "union" IdOrTypename ;
--UnionIdBraces.              TypeSpec ::= "union" IdOrTypename "{" StructDeclList "}" ;
--UnionBraces.                TypeSpec ::= "union" "{" StructDeclList "}" ;
--UnionJustAttrIdBraces.      TypeSpec ::= "union" [JustAttribute] IdOrTypename "{" StructDeclList "}" ;
--UnionJustAttrBraces.        TypeSpec ::= "union" [JustAttribute] "{" StructDeclList "}" ;
--EnumId.                     TypeSpec ::= "enum" IdOrTypename ;
--EnumIdBraces.               TypeSpec ::= "enum" IdOrTypename "{" [Enumerator] MaybeComma "}" ;
--EnumBraces.                 TypeSpec ::= "enum" "{" [Enumerator] MaybeComma "}" ;
--EnumJustAttrIdBraces.       TypeSpec ::= "enum" [JustAttribute] IdOrTypename "{" [Enumerator] MaybeComma "}" ;
--EnumJustAttrBraces.         TypeSpec ::= "enum" [JustAttribute] "{" [Enumerator] MaybeComma "}" ;
--NamedTypeTypeSpec.          TypeSpec ::= Ident ;
--TypeOfExpression.           TypeSpec ::= TYPEOF "(" Expression ")" ;
--TypeOfTypeName.             TypeSpec ::= TYPEOF "(" TypeName ")" ;


ADeclarator.        Declarator ::= PointerOpt DirectDecl AttributesWithAsm ;
--separator nonempty Declarator "," ; 

NoPointer.      PointerOpt ::= ""; --/**/ 
SomePointer.    PointerOpt ::= "*" [Attribute] PointerOpt ;


DirectDeclIdTypename.           DirectDecl ::= IdOrTypename ;                                        --/* (* We want to be able to redefine named types as variable names *) */
--DirectDeclAttrDecl.             DirectDecl ::= "(" [Attribute] Declarator ")" ;
--DirectDeclAttrStatic.           DirectDecl ::= DirectDecl "[" AttributesOrStatic  "]" ;
DirectDeclGhostParam.           DirectDecl ::= DirectDecl "(" ")" GhostParameterOpt ;
DirectDeclGhostRestParParam.    DirectDecl ::= DirectDecl "(" RestParList ")" GhostParameterOpt ;


EmptyAttrWithASM.       AttributesWithAsm ::= ; --/* empty */ 
--ListAttrWithASM.        AttributesWithAsm ::= Attribute [Attribute] ;
--ListASMAttrWithASM.     AttributesWithAsm ::= Attribute [Attribute] ASM "(" StringConstant ")" [Attribute] ;
--ASMAttrWithASM.         AttributesWithAsm ::= ASM "(" StringConstant ")" [Attribute] ;

SimpleParameterDecl.    RestParList ::= [ParameterDecl] ;
--DotDotDotParameterDecl. RestParList ::= [ParameterDecl] "," "..." ;


ParameterDeclSpecDeclarator.    ParameterDecl ::= DeclSpecList Declarator ;
--ParameterDeclSpecAbstract.      ParameterDecl ::= DeclSpecList AbstractDecl ;
ParameterDeclSpec.              ParameterDecl ::= DeclSpecList ;
ParameterDeclPar.               ParameterDecl ::= "(" ParameterDecl ")" ;
separator nonempty ParameterDecl "," ;

NoGhostParameter.       GhostParameterOpt ::= ; --/* empty */ 
--SomeGhostParameter.     GhostParameterOpt ::= "ghost" "(" RestParList ")" RGHOST ;


IdTypename.     IdOrTypename ::= IdOrTypenameAsId ;


IdOrTypenameAsIdIdentifier.     IdOrTypenameAsId ::= Ident ;
--IdOrTypenameAsIdNamedType.      IdOrTypenameAsId ::= NAMEDTYPE ;


DeclSpecInitDecl.               Declaration ::= DeclSpecList DeclAndInitDeclAttrList ";" ;
DeclSpec.                       Declaration ::= DeclSpecList ";" ;
SpecDeclSpecInitDecl.           Declaration ::= ACSLProgram DeclSpecList DeclAndInitDeclAttrList ";" ;  --SPEC => IsACSLSpec [Wildcard]
SpecDeclSpec.                   Declaration ::= ACSLProgram DeclSpecList ";" ;                          --SPEC => IsACSLSpec [Wildcard]
--StaticAssertDecl.               Declaration ::= "_Static_assert" "(" Expression ")" ;
--StaticAssertDeclStringConst.    Declaration ::= "_Static_assert" "(" Expression "," StringConstant ")" ;


InitDeclaration.            DeclAndInitDeclAttrList ::= InitDeclarator ;
InitDeclarationWithAttr.    DeclAndInitDeclAttrList ::= InitDeclarator "," [InitDeclaratorAttr] ;

--InitDeclaratorAttribute.    InitDeclaratorAttr ::= [AttributeNocv] InitDeclarator ;
InitDeclaratorAttribute.    InitDeclaratorAttr ::= InitDeclarator ;
separator nonempty InitDeclaratorAttr "," ;

SimpleInitDeclarator.       InitDeclarator ::= Declarator ;
--InitDeclaratorExpression.   InitDeclarator ::= Declarator "=" InitExpression ;


EmptyStructDecl.            StructDeclList ::= ; --/* empty */ 
DeclSpecStructDecl.         StructDeclList ::= DeclSpecList ";" StructDeclList ;
SemicolonStructDecl.        StructDeclList ::= ";" StructDeclList ;                                 --/*(* GCC allows extra semicolons *)*/
SpecFieldDeclStructDecl.    StructDeclList ::= DeclSpecList [FieldDecl] ";" StructDeclList ;
--PragmaStructDecl.           StructDeclList ::= Pragma StructDeclList ;                              --/*(* MSVC allows pragmas in strange places *)*/
--StaticAssertStructDecl.     StructDeclList ::= StaticAssertDeclaration ;                            --/*(* C11 allows static_assert-declaration *)*/
--StaticAssertStructDeclNext. StructDeclList ::= StaticAssertDeclaration ";" StructDeclList ;


FieldDeclDeclarator.        FieldDecl ::= Declarator ;
--FieldDeclDeclaratorColon.   FieldDecl ::= Declarator ":" Expression [Attribute] ;
--FieldDeclColonExpression.   FieldDecl ::= ":" Expression ;
separator nonempty FieldDecl "," ;


--AttributeNoCV.              Attribute ::= AttributeNocv ;
AttributeConst.             Attribute ::= CONST ;
--AttributeRestrict.          Attribute ::= RESTRICT ;
--AttributeVolatile.          Attribute ::= VOLATILE ;
--AttributeGhost.             Attribute ::= "\\ghost" ;
--AttributeAttributeAnnot.    Attribute ::= Identifier ; --ATTRIBUTE_ANNOT => Identifier | "\\ghost" 
separator Attribute "" ;


--ABlock.  Block ::= "{" [LocalLabel] BlockAttrs [BlockElement] [Annot] "}" ;
ABlock.  Block ::= "{" BlockAttrs [BlockElement] "}" ;


NoBlockAttrs.   BlockAttrs ::= ; --/* empty */ 
SomeBlockAttrs. BlockAttrs ::= BLOCKATTRIBUTE "(" [Attr] ")" ;

--DeclarationElement. BlockElement ::= [Annot] Declaration ;
--StatementElement.   BlockElement ::= [Annot] Statement ;
DeclarationElement. BlockElement ::= Declaration ;
StatementElement.   BlockElement ::= Statement ;
--PragmaElement.      BlockElement ::= [Annot] Pragma ;
separator BlockElement "" ;


SemicolonStatement.         Statement ::= ";" ;
SpecStatement.              Statement ::= ACSLProgram AnnotatedStmt ; -- SPEC => ACSLProgram
ExprsStatement.             Statement ::= [Expression] ";" ; 
BlockStatement.             Statement ::= Block ;
IfStatement.                Statement ::= "if" "(" [Expression] ")" AnnotatedStmt ElsePart ;
SwitchStatement.            Statement ::= "switch" "(" [Expression] ")" AnnotatedStmt ;
--WhileStatement.             Statement ::= OptLoopAnnotations "while" "(" [Expression] ")" AnnotatedStmt ;
WhileStatement.             Statement ::= "while" "(" [Expression] ")" AnnotatedStmt ;
--DoWhileStatement.           Statement ::= OptLoopAnnotations "do" AnnotatedStmt "while" "(" [Expression] ")" ";" ;
--ForStatement.               Statement ::= OptLoopAnnotations "for" "(" ForClause OptExpression ";" OptExpression ")" AnnotatedStmt ;
ForStatement.               Statement ::= "for" "(" ForClause OptExpression ";" OptExpression ")" AnnotatedStmt ;
--ColonStatement.             Statement ::= IdOrTypenameAsId ":" [AttributeNocv] AnnotatedStmt ;
CaseStatement.              Statement ::= "case" Expression ":" AnnotatedStmt ;
CaseSliceStatement.         Statement ::= "case" Expression "..." Expression ":" AnnotatedStmt ;
DefaultStatement.           Statement ::= "default" ":" AnnotatedStmt ;
EmptyReturnStatement.       Statement ::= "return" ";" ;
ReturnStatement.            Statement ::= "return" [Expression] ";" ;
BreakStatement.             Statement ::= "break" ";" ;
ContinueStatement.          Statement ::= "continue" ";" ;
--GotoStatement.              Statement ::= "goto" IdOrTypenameAsId ";" ;
--StarGotoStatement.          Statement ::= "goto" "*" [Expression] ";" ;
--AsmGotoAsmattrStatement.    Statement ::= ASM "goto" [Asmattr] "(" [OneString] Asmoutputs ")" ";" ;
--AsmAsmattrStatement.        Statement ::= ASM [Asmattr] "(" [OneString] Asmoutputs ")" ";" ;
--AsmStatement.               Statement ::= ASM ;
--TryExceptStatement.         Statement ::= "__try" Block "__except" "(" [Expression] ")" Block ;
--TryFinallyStatement.        Statement ::= "__try" Block "__finally" Block ;

ForClauseExpression.    ForClause ::= OptExpression ";" ;
ForClauseDeclaration.   ForClause ::= Declaration ;

_.          Attr ::= Attr1 ;
AnAttr.     Attr ::= Attr1 "=" Attr1 ;
separator nonempty Attr "," ;

_.              Attr1 ::= Attr2 ;
TernaryCond.    Attr1 ::= Attr2 "?" Attr1 ":" Attr1 ; --COLON2

_.          Attr2 ::= Attr3 ;
Or.         Attr2 ::= Attr2 "||" Attr3 ;

_.          Attr3 ::= Attr4 ;
And.        Attr3 ::= Attr3 "&&" Attr4 ;

_.          Attr4 ::= Attr5 ;
BitOr.      Attr4 ::= Attr4 "|" Attr5 ;

_.          Attr5 ::= Attr6 ;
Xor.        Attr5 ::= Attr5 "^" Attr6 ;

_.          Attr6 ::= Attr7 ;
BitAnd.     Attr6 ::= Attr6 "&" Attr7	;

_.          Attr7 ::= Attr8 ;
EqualEqual. Attr7 ::= Attr7 "==" Attr8 ;
NotEqual.   Attr7 ::= Attr7 "!=" Attr8 ;

_.              Attr8 ::= Attr9 ;
Less.           Attr8 ::= Attr8 "<" Attr9 ;
Greater.        Attr8 ::= Attr8 ">" Attr9 ;
LessEqual.      Attr8 ::= Attr8 "<=" Attr9 ;
GreaterEqual.   Attr8 ::= Attr8 ">=" Attr9 ;

_.              Attr9 ::= Attr10 ;
LeftShiftOp.    Attr9 ::= Attr9 "<<" Attr10	;
RightShiftOp.   Attr9 ::= Attr9 ">>" Attr10	;

_.      Attr10 ::= Attr11 ;
AddOp.  Attr10 ::= Attr10 "+" Attr11 ;
SubOp.  Attr10 ::= Attr10 "-" Attr11 ;

_.          Attr11 ::= Attr12 ;
MultOp.     Attr11 ::= Attr11 "*" Attr12 ;
DivOp.      Attr11 ::= Attr11 "/" Attr12	;
ModOp.      Attr11 ::= Attr11 "%" Attr12 ;

--/*(* Since in attributes we use both Ident and NAMEDTYPE as indentifiers, that leads to conflicts for "sizeof" and ALIGNOF. In those cases we require that their Arguments be expressions, not attributes *)*/
_.                      Attr12 ::= Attr13 ;
--SizeOfAttrUnary.        Attr12 ::= "sizeof" AssignExpr13 ;
--SizeOfAttrTypeName.     Attr12 ::= "sizeof" "(" TypeName ")" ;
--AlignOfAttrUnary.       Attr12 ::= ALIGNOF AssignExpr13 ;
--AlignOfAttrTypeName.    Attr12 ::= ALIGNOF "(" TypeName ")" ;
PlusUnaryAttr.          Attr12 ::= "+" Attr12 ;
MinusUnaryAttr.         Attr12 ::= "-" Attr12 ;
MultUnaryAttr.          Attr12 ::= "*" Attr12 ;
AmpUnaryAttr.           Attr12 ::= "&" Attr12 ;
NotUnaryAttr.           Attr12 ::= "!" Attr12 ;
TildeUnaryAttr.         Attr12 ::= "~" Attr12 ;

_.              Attr13 ::= Attr14 ;
FuncationCall.  Attr13 ::= IdOrTypenameAsId "(" [Attr] ")" ;
ProcedureCall.  Attr13 ::= IdOrTypenameAsId "("  ")" ;
--BasicPostfix.   Attr13 ::= BasicAttribute ParamAttrListNE ;
ArrowAttr.      Attr13 ::= Attr13 "->" IdOrTypename ;
DotAttr.        Attr13 ::= Attr13 "." IdOrTypename ;
ArrayAttr.      Attr13 ::= Attr13 "[" Attr "]" ;

BasicAttr.          Attr14 ::= BasicAttribute ;
_.                  Attr14 ::= "(" Attr ")" ;
--AttrStringConstant. Attr14 ::= StringConstant ;

BasicAttrConsInt.   BasicAttribute ::= Integer ;
BasicAttrConsFloat. BasicAttribute ::= Double ;
--BasicAttrVar.       BasicAttribute ::= VarAttr ;
--separator nonempty BasicAttribute "" ;


--AnnotatedStatement.     AnnotatedStmt ::= [Annot] Statement ;
AnnotatedStatement.     AnnotatedStmt ::= Statement ;

NoElsePart.             ElsePart ::= ; --/* empty */                  --%prec if_no_else /* To attach the next else to the current if */
SimpleElsePart.         ElsePart ::= "else" AnnotatedStmt ;
--SimpleGhostElsePart.    ElsePart ::= "ghost" AnnotatedStmt RGHOST ;      --%prec ghost_else_no_else /* To force the non ghost else to be attached to the current if */
--GhostElsePart.          ElsePart ::= "ghost" AnnotatedStmt RGHOST "else" AnnotatedStmt ;

NoExpression.   OptExpression ::= ; --/* empty */ 
SomeExpression. OptExpression ::= [Expression] ;

AssignmentExpr.     Expression ::= AssignExpr ;
separator nonempty Expression "," ;

_.                          AssignExpr ::= AssignExpr1 ;
EqAssignExpr.               AssignExpr ::= AssignExpr12 "=" AssignExpr ;
PlusEqAssignExpr.           AssignExpr ::= AssignExpr12 "+=" AssignExpr ;
MinusEqAssignExpr.          AssignExpr ::= AssignExpr12 "-=" AssignExpr ;
MultEqAssignExpr.           AssignExpr ::= AssignExpr12 "*=" AssignExpr ;
DivEqAssignExpr.            AssignExpr ::= AssignExpr12 "/=" AssignExpr ;
ModEqAssignExpr.            AssignExpr ::= AssignExpr12 "%=" AssignExpr ;
AndEqAssignExpr.            AssignExpr ::= AssignExpr12 "&=" AssignExpr ;
OrEqAssignExpr.             AssignExpr ::= AssignExpr12 "|=" AssignExpr ;
XorEqAssignExpr.            AssignExpr ::= AssignExpr12 "^=" AssignExpr ;
LeftShiftEqAssignExpr.      AssignExpr ::= AssignExpr12 "<<=" AssignExpr ;
RightShiftEqAssignExpr.     AssignExpr ::= AssignExpr12 ">>=" AssignExpr ;

_.                  AssignExpr1 ::= AssignExpr2 ;
TernaryCondExpr.    AssignExpr1 ::= AssignExpr2 "?" OptExpression ":" AssignExpr1 ;

_.          AssignExpr2 ::= AssignExpr3 ;
OrExpr.     AssignExpr2 ::= AssignExpr2 "||" AssignExpr3 ;

_.          AssignExpr3 ::= AssignExpr4 ;
AndExpr.    AssignExpr3 ::= AssignExpr3 "&&" AssignExpr4 ;

_.          AssignExpr4 ::= AssignExpr5 ;
BitOrExpr.  AssignExpr4 ::= AssignExpr4 "|" AssignExpr5 ;

_.          AssignExpr5 ::= AssignExpr6 ;
BitXorExpr. AssignExpr5 ::= AssignExpr5 "^" AssignExpr6 ;

_.          AssignExpr6 ::= AssignExpr7 ;
BitAndExpr. AssignExpr6 ::= AssignExpr6 "&" AssignExpr7 ;

_.          AssignExpr7 ::= AssignExpr8 ;
EqExpr.     AssignExpr7 ::= AssignExpr7 "==" AssignExpr8 ;
NotEqExpr.  AssignExpr7 ::= AssignExpr7 "!=" AssignExpr8 ;

_.                  AssignExpr8 ::= AssignExpr9 ;
LessExpr.           AssignExpr8 ::= AssignExpr8 "<" AssignExpr9 ;
GreaterExpr.        AssignExpr8 ::= AssignExpr8 ">" AssignExpr9 ;
LessEqualExpr.      AssignExpr8 ::= AssignExpr8 "<=" AssignExpr9 ;
GreaterEqualExpr.   AssignExpr8 ::= AssignExpr8 ">=" AssignExpr9 ;

_.              AssignExpr9 ::= AssignExpr10 ;
LeftShiftExpr.  AssignExpr9 ::= AssignExpr9  "<<" AssignExpr10 ;
RightShiftExpr. AssignExpr9 ::= AssignExpr9  ">>" AssignExpr10 ;

_.          AssignExpr10 ::= AssignExpr11 ;
PlusExpr.   AssignExpr10 ::= AssignExpr10 "+" AssignExpr11 ;
MinusExpr.  AssignExpr10 ::= AssignExpr10 "-" AssignExpr11 ;

_.          AssignExpr11 ::= AssignExpr12 ;
MulsExpr.   AssignExpr11 ::= AssignExpr11 "*" AssignExpr12 ;
DivExpr.    AssignExpr11 ::= AssignExpr11 "/" AssignExpr12 ;
ModExpr.    AssignExpr11 ::= AssignExpr11 "%" AssignExpr12 ;

_.                  AssignExpr12 ::= AssignExpr13 ;
CastExpr.           AssignExpr12 ::= "(" TypeName ")" AssignExpr12 ;

_.                          AssignExpr13 ::= AssignExpr14 ;
UnaryExprPlusPlus.          AssignExpr13 ::= "++" AssignExpr13 ;
UnaryExprMinusMinus.        AssignExpr13 ::= "--" AssignExpr13 ;
--UnaryExprSizeOf.            AssignExpr13 ::= "sizeof" AssignExpr13 ;
--UnaryExprSizeOfTypeName.    AssignExpr13 ::= "sizeof" "(" TypeName ")" ;
--UnaryExprAlignOfUnaryExpr.  AssignExpr13 ::= ALIGNOF AssignExpr13 ;
--UnaryExprAlignOfTypeName.   AssignExpr13 ::= ALIGNOF "(" TypeName ")" ;
UnaryExprPlus.              AssignExpr13 ::= "+" AssignExpr12 ;
UnaryExprMinus.             AssignExpr13 ::= "-" AssignExpr12 ;
UnaryExprMult.              AssignExpr13 ::= "*" AssignExpr12 ;
UnaryExprAmp.               AssignExpr13 ::= "&" AssignExpr12 ;
UnaryExprNot.               AssignExpr13 ::= "!" AssignExpr12 ;
UnaryExprTilde.             AssignExpr13 ::= "~" AssignExpr12 ;
--/* (* GCC allows to take address of a label (see COMPGOTO Statement) *) */
UnaryExprAddress.           AssignExpr13 ::= "&&" IdOrTypenameAsId ;

_.                                      AssignExpr14 ::= AssignExpr15 ;
BracketsPostfixExpression.              AssignExpr14 ::= AssignExpr14 "[" [Expression] "]" ;
--ArgumentsPostfixExpression.             AssignExpr14 ::= AssignExpr14 "(" Arguments ")" GhostArgumentsOpt ;
--BuiltinVaArgPostfixExpression.          AssignExpr14 ::= "__builtin_va_arg" "(" Expression "," TypeName ")" ;
--BuiltinTypesCompatPostfixExpression.    AssignExpr14 ::= "__builtin_types_compatible_p" "(" TypeName "," TypeName ")" ;
--BuiltinOffsetOfPostfixExpression.       AssignExpr14 ::= "__builtin_offsetof" "(" TypeName "," OffsetofMemberDesignator ")" ;
DotPostfixExpression.                   AssignExpr14 ::= AssignExpr14 "." IdOrTypename ;
ArrowPostfixExpression.                 AssignExpr14 ::= AssignExpr14 "->" IdOrTypename ;
PlusPlusPostfixExpression.              AssignExpr14 ::= AssignExpr14 "++" ;
MinusMinusPostfixExpression.            AssignExpr14 ::= AssignExpr14 "--" ;
--/* (* We handle GCC constructor expressions *) */
--ConstructorPostfixExpression.           AssignExpr14 ::= "(" TypeName ")" "{" InitializerListOpt "}" ;

IdentifierPrimaryExpression.        AssignExpr15 ::= Ident ;
ConstantPrimaryExpressin.           AssignExpr15 ::= Constant ;
CommaExpressionPrimaryExpressin.    AssignExpr15 ::= "(" [Expression] ")" ;
BlockPrimaryExpressin.              AssignExpr15 ::= "(" Block ")" ;
--GenericAssociationPrimaryExpressin. AssignExpr15 ::= "_Generic" "(" AssignExpr "," [GenericAssociation] ")" ;
--GenericPrimaryExpressin.            AssignExpr15 ::= "_Generic" "(" AssignExpr ")" ;

ConstantInt.        Constant ::= Integer ;
ConstantFloat.      Constant ::= Double ;
ConstantChar.       Constant ::= Char ;
--ConstantWChar.      Constant ::= CST_WCHAR ;
--ConstantString.     Constant ::= StringConstant ;
--ConstantWString.    Constant ::= WStringList ;

--TypeNameAbstractDecl.   TypeName ::= DeclSpecList AbstractDecl ;
TypeNameDeclSpecList.   TypeName ::= DeclSpecList ;



----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------


--AnnotProgram.       ACSLProgram ::= "ACSL" "(" Integer ")" ";";

AnnotProgram.       ACSLProgram ::= "ACSL_START" Annot "ACSL_END" ;
AnnotationProgram.  ACSLProgram ::= "ACSL_START" LogicPTreeAnnot "ACSL_END";

CodeAnnot.  Annot ::=  Code_Annot ; --CODE_ANNOT => CodeAnnot
--GhostAnnot. Annot ::= "ghost" [BlockElement] RGHOST ;
----separator Annot "" ;

--CodeAnnotExtContract.               Code_Annot ::= "contract" ExtIdentifierOpt ":" Contract ;
--CodeAnnotPragmaOrCodeAnnotation.    Code_Annot ::= PragmaOrCodeAnnotation ;
CodeAnnotContract.                  Code_Annot ::= Contract ;
--CodeAnnotCodeAnnotation.            Code_Annot ::= CodeAnnotation ;

SimpleContract.                 Contract ::= Requires Terminates Decreases SimpleClauses Behaviors CompleteOrDisjoint ;
--TerminatesRequiresContract.     Contract ::= Requires NETerminates "requires" ;
--DecreasesRequiresContract.      Contract ::= Requires Terminates NEDecreases "requires" ;
--DecreasesTerminatesContract.    Contract ::= Requires Terminates NEDecreases "terminates" ;
--ClausesRequiresContract.        Contract ::= Requires Terminates Decreases NESimpleClauses "requires" ;
--ClausesTerminatesContract.      Contract ::= Requires Terminates Decreases NESimpleClauses "terminates" ;
--ClausesDecreasesContract.       Contract ::= Requires Terminates Decreases NESimpleClauses "decreases" ;
--BehaviorsTerminatesContract.    Contract ::= Requires Terminates Decreases SimpleClauses NEBehaviors "terminates" ;
--BehaviorsDecreasesContract.     Contract ::= Requires Terminates Decreases SimpleClauses NEBehaviors "decreases" ;
--ComplDisjRequiresContract.      Contract ::= Requires Terminates Decreases SimpleClauses Behaviors NECompleteOrDisjoint "requires" ;
--ComplDisjTerminatesContract.    Contract ::= Requires Terminates Decreases SimpleClauses Behaviors NECompleteOrDisjoint "terminates" ;
--ComplDisjDecreasesContract.     Contract ::= Requires Terminates Decreases SimpleClauses Behaviors NECompleteOrDisjoint "decreases" ;
--ComplDisjBehaviorContract.      Contract ::= Requires Terminates Decreases SimpleClauses Behaviors NECompleteOrDisjoint "behavior" ;
--ComplDisjAssignsContract.       Contract ::= Requires Terminates Decreases SimpleClauses Behaviors NECompleteOrDisjoint "assigns" ;
--ComplDisjAllocatesContract.     Contract ::= Requires Terminates Decreases SimpleClauses Behaviors NECompleteOrDisjoint "allocates" ;
--ComplDisjFreesContract.         Contract ::= Requires Terminates Decreases SimpleClauses Behaviors NECompleteOrDisjoint "frees" ;
--ComplDisjPostCondContract.      Contract ::= Requires Terminates Decreases SimpleClauses Behaviors NECompleteOrDisjoint PostCond ;

NoRequires.     Requires ::= ; --/* epsilon */
SomeRequires.   Requires ::= NERequires ;

SimpleRequires.         NERequires ::= "requires" Lexpr ";" Requires ;
CheckRequires.          NERequires ::= "check" "requires" Lexpr ";" Requires ;
AdimtRequires.          NERequires ::= "admit" "requires" Lexpr ";" Requires ;
--ClauseSimpleRequires.   NERequires ::= "requires" Lexpr ClauseKW ;
--ClauseCheckRequires.    NERequires ::= "check" "requires" Lexpr ClauseKW ;
--ClauseAdimtRequires.    NERequires ::= "admit" "requires" Lexpr ClauseKW ;



NoTerminate.    Terminates ::= ; --/* epsilon */
--SomeTerminate.  Terminates ::= NETerminates ;

NoDecreases.    Decreases ::= ; --/* epsilon */
--SomeDecreases.  Decreases ::= NEDecreases ;

NoSimpleClauses.    SimpleClauses ::= ; --/* epsilon */
SomeSimpleClauses.  SimpleClauses ::= NESimpleClauses ;

PostCondSimpleClauses.              NESimpleClauses ::= PostCond Lexpr ";" SimpleClauses ;
--AllocationSimpleClauses.            NESimpleClauses ::= Allocation ";" SimpleClauses ;
AssignsSimpleClauses.               NESimpleClauses ::= "assigns" Assigns ";" SimpleClauses ;
--ExtContractSimpleClauses.           NESimpleClauses ::= EXT_CONTRACT ExtensionContent ";" SimpleClauses ;
--ClausesPostCondSimpleClauses.       NESimpleClauses ::= PostCond Lexpr ClauseKW ;
--ClausesAllocationSimpleClauses.     NESimpleClauses ::= Allocation ClauseKW ;
--ClausesAssignsSimpleClauses.        NESimpleClauses ::= "assigns" Assigns ClauseKW ;
--ExtConClausestractSimpleClauses.    NESimpleClauses ::= EXT_CONTRACT Zones ClauseKW ;

AssignZone.         Assigns ::= Zones ;
AssignZoneFromZone. Assigns ::= [Lexpr] "\\from" Zones ;

SomeZone.   Zones ::= [Lexpr] ;
NoZone.     Zones ::= "\\nothing" ;

NoBehaviors.    Behaviors ::= ; --/* epsilon */ 
--SomeBehaviors.  Behaviors ::= NEBehaviors ;

NoComplDisj.    CompleteOrDisjoint ::= ; --/* epsilon */
--SomeComplDisj.  CompleteOrDisjoint ::= NECompleteOrDisjoint ;

--AdmitRequiresClause.    ClauseKW ::= "admit" "requires" ;
--AdmitInvariantClause.   ClauseKW ::= "admit" "invariant" ; 
--AdmitLemmaClause.       ClauseKW ::= "admit" "lemma" ;
--AdmitLoopClause.        ClauseKW ::= "admit" "loop" ;
--CheckRequiresClause.    ClauseKW ::= "check" "requires" ;
--CheckInvariantClause.   ClauseKW ::= "check" "invariant" ;
--CheckLemmaClause.       ClauseKW ::= "check" "lemma" ;
--CheckLoopClause.        ClauseKW ::= "check" "loop" ; 
--
--RequiresClause.         ClauseKW ::= "requires" ;
--AssumesClause.          ClauseKW ::= "assumes" ;
--AssignsClause.          ClauseKW ::= "assigns" ;
--PostCondClause.         ClauseKW ::= PostCond ;
--DecreasesClause.        ClauseKW ::= "decreases" ;
--BehaviorClause.         ClauseKW ::= "behavior" ;
--AllocatesClause.        ClauseKW ::= "allocates" ;
--FreesClause.            ClauseKW ::= "frees" ;
--CompleteClause.         ClauseKW ::= "complete" ;
--DisjointClause.         ClauseKW ::= "disjoint" ;
----ClauseExtConstract.     ClauseKW ::= EXT_CONTRACT ;
--EmptyClauseKW.          ClauseKW ::= ; -- EOF 


--NoLexpr.        Lexpr ::= ; --/* predicates */ 
ImplLexpr.      Lexpr ::= Lexpr "==>" Lexpr1 ; --Lexpr => Lexpr1
IffLexpr.       Lexpr ::= Lexpr "<==>" Lexpr1 ; --Lexpr => Lexpr1
OrLexpr.        Lexpr ::= Lexpr "||" Lexpr1 ; --Lexpr => Lexpr1
AndLexpr.       Lexpr ::= Lexpr "&&" Lexpr1 ; --Lexpr => Lexpr1
HatHatLexpr.    Lexpr ::= Lexpr "^^" Lexpr1 ; --Lexpr => Lexpr1
--/* terms */
--AmpLexpr.       Lexpr ::= Lexpr "&" Lexpr1 ; --Lexpr => Lexpr1
--PipeLexpr.      Lexpr ::= Lexpr "|" Lexpr1 ; --Lexpr => Lexpr1
--HatLexpr.       Lexpr ::= Lexpr "^" Lexpr1 ; --Lexpr => Lexpr1
--BimpliesLexpr.  Lexpr ::= Lexpr "-->" Lexpr1 ; --Lexpr => Lexpr1
--BiffLexpr.      Lexpr ::= Lexpr "<-->" Lexpr1 ; --Lexpr => Lexpr1
--InLexpr.        Lexpr ::= Lexpr "\\in" Lexpr1 ; --Lexpr => Lexpr1
--TernaryLexpr.   Lexpr ::= Lexpr "?" Lexpr ":" Lexpr ; --%prec prec_question
----/* both terms and predicates */
--IdAssignLexpr.  Lexpr ::= AnyIdentifier ":" Lexpr ; --%prec prec_named 
--StrAssignLexpr. Lexpr ::= [STRING_LITERAL] ":" Lexpr ; --%prec prec_named
_.  Lexpr ::= Lexpr1 ;
separator nonempty Lexpr "," ;

_.              Lexpr1 ::= Lexpr2 ;
RelationLexpr.  Lexpr1 ::= Lexpr3 [LexprRelInner] Relation Lexpr2 ;

RelInnerLexpr.      LexprRelInner ::= Relation Lexpr3;
separator LexprRelInner "" ;

LessRel.        Relation ::= "<" ;
GreaterRel.     Relation ::= ">" ;
LessEqRel.      Relation ::= "<=" ;
GreaterEqRel.   Relation ::= ">=" ;
EqRel.          Relation ::= "==" ;
NotEqRel.       Relation ::= "!=" ;
--/* C. Marche: added to produce better error messages */
--EQUALRel.       Relation ::= "=" ;

_.              Lexpr2 ::= Lexpr3 ;
BinderLexpr.    Lexpr2 ::= LexprBinder ;
NotBinderLexpr. Lexpr2 ::= "!" LexprBinder ;

--LexprBinder
--LetBinderLexpr.     LexprBinder ::= "\\let" BoundedVar "=" Lexpr ";" Lexpr ; --%prec "\\let"
ForallBinderLexpr.  LexprBinder ::= "\\forall" Binders ";" Lexpr ; --%prec prec_forall
ExistBinderLexpr.   LexprBinder ::= "\\exists" Binders ";" Lexpr ; --%prec prec_exists
LambdaBinderLexpr.  LexprBinder ::= "\\lambda" Binders ";" Lexpr ; --%prec prec_lambda 

TheBinders.    Binders ::= TypeSpecOFTYPENAME VarSpec [BindersReentrance] ;

TypeSpecTYPENAME.                           TypeSpecOFTYPENAME ::= Ident ; --TYPENAME => Ident
--TypeSpecTYPENAMELogicTypeGen.               TypeSpecOFTYPENAME ::= Ident "<" [LogicTypeGenOFTYPENAME] ">" ; --TYPENAME => Ident
TypeSpecSimpleFromTypenameTypeSpec. TypeSpecOFTYPENAME ::= TypeSpecSimple ;

BindersReentranceDeclSpec.       BindersReentrance ::= "," TypeSpecOFTYPENAME VarSpec ;
BindersReentranceVarSpec.        BindersReentrance ::= "," VarSpec ;
separator BindersReentrance "";

_.              VarSpec ::= VarSpec1 ;
StartVarSpec.   VarSpec ::= [Stars] VarSpec1 ;

Star.   Stars ::= "*" ;
separator nonempty Stars "";

--VarSpecBits
SimpleSpec.     VarSpec1 ::= FullIdentifier ;
ArraySpec.      VarSpec1 ::= VarSpec1 "[" ArraySize "]" ;
_.              VarSpec1 ::= "(" VarSpec ")" ;
--FunctionSpec.   VarSpec1 ::= VarSpec1 "(" AbsParamTypeList ")" ;

IntConstArraySize.  ArraySize ::= Integer ;
SomeArraySize.      ArraySize ::= FullIdentifier ;
NoSize.             ArraySize ::= ; --/* empty */`

--StringLexpr.            Lexpr3 ::= [STRING_LITERAL] ; 
--NotLexprInner.          Lexpr3 ::= "!" Lexpr3 ;
TrueLexpr.              Lexpr3 ::= "\\true" ;
FalseLexpr.             Lexpr3 ::= "\\false" ;
--PointerLexpr.           Lexpr3 ::= "\\object_pointer" OptLabel1 "(" Lexpr ")" ;
ValidLexpr.             Lexpr3 ::= "\\valid" OptLabel1 "(" Lexpr ")" ;
--ValidReadLexpr.         Lexpr3 ::= "\\valid_read" OptLabel1 "(" Lexpr ")" ;
--ValidFuncLexpr.         Lexpr3 ::= "\\valid_function" "(" Lexpr ")" ;
--ValidIndxLexpr.         Lexpr3 ::= "\\valid_index" OptLabel1 "(" Lexpr "," Lexpr ")" ;
--ValidRangeLexpr.        Lexpr3 ::= "\\valid_range" OptLabel1 "(" Lexpr "," Lexpr "," Lexpr ")" ;
--InitializedLexpr.       Lexpr3 ::= "\\initialized" OptLabel1 "(" Lexpr ")" ;
--DanglingLexpr.          Lexpr3 ::= "\\dangling" OptLabel1 "(" Lexpr ")" ;
--FreshLexpr.             Lexpr3 ::= "\\fresh" OptLabel2 "(" Lexpr "," Lexpr ")" ;
--BaseAddrLexpr.          Lexpr3 ::= "\\base_addr" OptLabel1 "(" Lexpr ")" ;
--BlockLengthLexpr.       Lexpr3 ::= "\\block_length" OptLabel1 "(" Lexpr ")" ;
--OffsetLexpr.            Lexpr3 ::= "\\offset" OptLabel1 "(" Lexpr ")" ;
--AllocableLexpr.         Lexpr3 ::= "\\allocable" OptLabel1 "(" Lexpr ")" ;
--FreeableLexpr.          Lexpr3 ::= "\\freeable" OptLabel1 "(" Lexpr ")" ;
--AllocationLexpr.        Lexpr3 ::= "\\allocation" OptLabel1 "(" Lexpr ")" ;
AutomaticLexpr.         Lexpr3 ::= "\\automatic" ;
DynamicLexpr.           Lexpr3 ::= "\\dynamic" ;
RegisterLexpr.          Lexpr3 ::= "\\register" ;
StaticLexpr.            Lexpr3 ::= "\\static" ;
UnallocatedLexpr.       Lexpr3 ::= "\\unallocated" ;
NullLexpr.              Lexpr3 ::= "\\null" ;
LexprIntConst.          Lexpr3 ::= Integer ;
LexprFloatConst.        Lexpr3 ::= Double ;
LexprStringConst.       Lexpr3 ::= String ;
--LexprWStringConst.       Lexpr3 ::= WSTRING_CONSTANT ;
AddLexpr.               Lexpr3 ::= Lexpr3 "+" Lexpr3 ;
SubtrLexpr.             Lexpr3 ::= Lexpr3 "-" Lexpr3 ;
--MultLexpr.              Lexpr3 ::= Lexpr3 "*" Lexpr3 ;
--DivLexpr.               Lexpr3 ::= Lexpr3 "/" Lexpr3 ;
--ModLexpr.               Lexpr3 ::= Lexpr3 "%" Lexpr3 ;
--StarHatLexpr.           Lexpr3 ::= Lexpr3 "*^" Lexpr3 ;
--ArrowLexpr.             Lexpr3 ::= Lexpr3 "->" IdentifierOrTypenameFull ;
--DotLexpr.               Lexpr3 ::= Lexpr3 "." IdentifierOrTypenameFull ;
SquaresRangeLexpr.      Lexpr3 ::= Lexpr3 "[" Range "]" ;
SquaresLexpr.           Lexpr3 ::= Lexpr3 "[" Lexpr "]" ;
--SquaresPipeLexpr.       Lexpr3 ::= "[|" LexprList "|]" ;
--MinusLexpr.             Lexpr3 ::= "-" Lexpr3 ; --%prec prec_unary_op
--PlusLexpr.              Lexpr3 ::= "+" Lexpr3 ; --%prec prec_unary_op
--TildeLexpr.             Lexpr3 ::= "~" Lexpr3 ;
--StarLexpr.              Lexpr3 ::= "*" Lexpr3 ; --%prec prec_unary_op 
--AmpUnaryLexpr.          Lexpr3 ::= "&" Lexpr3 ; --%prec prec_unary_op 
--SizeOfLexpr.            Lexpr3 ::= "sizeof" "(" Lexpr ")" ;
--SizeOfLogicTypeLexpr.   Lexpr3 ::= "sizeof" "(" CastLogicType ")" ;
--OldLexpr.               Lexpr3 ::= "\\old" "(" Lexpr ")" ;
--AtLexpr.                Lexpr3 ::= "\\at" "(" Lexpr "," LabelName ")" ;
--ResultLexpr.            Lexpr3 ::= "\\result" ;
SeparatedLexpr.         Lexpr3 ::= "\\separated" "(" [Lexpr] ")" ;
FullIdParenLexpr.       Lexpr3 ::= FullIdentifier "(" [Lexpr] ")" ;
--FullIdBraceParenLexpr.  Lexpr3 ::= FullIdentifier "{" [IdentifierOrTypenameFull] "}" "(" [Lexpr] ")" ;
--FullIdBracesLexpr.      Lexpr3 ::= FullIdentifier "{" [IdentifierOrTypenameFull] "}" ;
FullId.                 Lexpr3 ::= FullIdentifier ;
PiLexpr.                Lexpr3 ::= "\\pi" ;
--LessLessLexpr.          Lexpr3 ::= Lexpr3 ">>" Lexpr3 ;
--GreaterGreaterLexpr.    Lexpr3 ::= Lexpr3 "<<" Lexpr3 ;
_.                      Lexpr3 ::= "(" Lexpr ")" ;
ParenRangeLexpr.        Lexpr3 ::= "(" Range ")" ;
--CastLexpr.              Lexpr3 ::= "(" CastLogicType ")" Lexpr3 ; --%prec prec_cast
--TypeOfLexpr.            Lexpr3 ::= "\\typeof" "(" Lexpr ")" ;
--TypeLexpr.              Lexpr3 ::= "\\type" "(" TypeSpecOFTYPENAME ")" ;
--TypeWithStarsLexpr.     Lexpr3 ::= "\\type" "(" TypeSpecOFTYPENAME [Stars] ")" ;

OptLabelOne.    OptLabel1 ::= OptLabelList ;

OptLabelTwo.    OptLabel2 ::= OptLabelList ;

NoLableList.    OptLabelList ::= ; --/* epsilon */ 
LableList.      OptLabelList ::= "{" [LabelName] "}" ;

--/* names */
LableName.  LabelName ::= AnyIdentifier ;
separator nonempty LabelName "," ;

LexprRange.  Range ::= LexprOption ".." LexprOption ;

NoLexprOption.      LexprOption ::= ; --/* epsilon */
SomeLexprOption.    LexprOption ::= Lexpr ;

SimpleIdentifierAny.        AnyIdentifier ::= Identifier ;
--ACSLTypenameIdentifier.     AnyIdentifier ::= IsACSLTypename ;
--TypenameIdentifier.         AnyIdentifier ::= TYPENAME ;
--KeywordIdentifier.          AnyIdentifier ::= Keyword ;


EnsuresKeyWord.         PostCond ::= "ensures" ;
ExitsKeyWord.           PostCond ::= "exits" ;
BreaksKeyWord.          PostCond ::= "breaks" ;
ContinuesKeyWord.       PostCond ::= "continues" ;
ReturnsKeyWord.         PostCond ::= "returns" ;
CheckEnsuresKeyWord.    PostCond ::= "check" "ensures" ;
CheckExitsKeyWord.      PostCond ::= "check" "exits" ;
CheckBreaksKeyWord.     PostCond ::= "check" "breaks" ;
CheckContinuesKeyWord.  PostCond ::= "check" "continues" ;
CheckReturnsKeyWord.    PostCond ::= "check" "returns" ;
AdmitEnsuresKeyWord.    PostCond ::= "admit" "ensures" ;
AdmitExitsKeyWord.      PostCond ::= "admit" "exits" ;
AdmitBreaksKeyWord.     PostCond ::= "admit" "breaks" ;
AdmitContinuesKeyWord.  PostCond ::= "admit" "continues" ;
AdmitReturnsKeyWord.    PostCond ::= "admit" "returns" ;

SimpleIdentifierFull.           FullIdentifier ::= Identifier ;
--AdmitKeyWordFullIdent.          FullIdentifier ::= "admit" ;
--AllocatesKeyWordFullIdent.      FullIdentifier ::= "allocates" ;
--AssertKeyWordFullIdent.         FullIdentifier ::= "assert" ;
--AssignsKeyWordFullIdent.        FullIdentifier ::= "assigns" ;
--AssumesKeyWordFullIdent.        FullIdentifier ::= "assumes" ;
--AtKeyWordFullIdent.             FullIdentifier ::= "at" ;
--AxiomKeyWordFullIdent.          FullIdentifier ::= "axiom" ;
--AxiomaticKeyWordFullIdent.      FullIdentifier ::= "axiomatic" ;
--BehaviorKeyWordFullIdent.       FullIdentifier ::= "behavior" ;
--BreaksKeyWordFullIdent.         FullIdentifier ::= "breaks" ;
--CheckKeyWordFullIdent.          FullIdentifier ::= "check" ;
--CompleteKeyWordFullIdent.       FullIdentifier ::= "complete" ;
--ContinuesKeyWordFullIdent.      FullIdentifier ::= "continues" ;
--ContractKeyWordFullIdent.       FullIdentifier ::= "contract" ;
--DecreasesKeyWordFullIdent.      FullIdentifier ::= "decreases" ;
--DisjointKeyWordFullIdent.       FullIdentifier ::= "disjoint" ;
--EnsuresKeyWordFullIdent.        FullIdentifier ::= "ensures" ;
--ExitsKeyWordFullIdent.          FullIdentifier ::= "exits" ;
--FreesKeyWordFullIdent.          FullIdentifier ::= "frees" ;
--FunctionKeyWordFullIdent.       FullIdentifier ::= "function" ;
--GlobalKeyWordFullIdent.         FullIdentifier ::= "global" ;
--ImpactKeyWordFullIdent.         FullIdentifier ::= "impact" ;
--InductiveKeyWordFullIdent.      FullIdentifier ::= "inductive" ;
--IncludeKeyWordFullIdent.        FullIdentifier ::= "include" ;
--InvariantKeyWordFullIdent.      FullIdentifier ::= "invariant" ;
--LemmaKeyWordFullIdent.          FullIdentifier ::= "lemma" ;
--LetKeyWordFullIdent.            FullIdentifier ::= "let" ;
--LogicKeyWordFullIdent.          FullIdentifier ::= "logic" ;
--LoopKeyWordFullIdent.           FullIdentifier ::= "loop" ;
--ModelKeyWordFullIdent.          FullIdentifier ::= "model" ;
--ModuleKeyWordFullIdent.         FullIdentifier ::= "module" ;
--PragmaKeyWordFullIdent.         FullIdentifier ::= "pragma" ;
--PredicateKeyWordFullIdent.      FullIdentifier ::= "predicate" ;
--RequiresKeyWordFullIdent.       FullIdentifier ::= "requires" ;
--ReturnsKeyWordFullIdent.        FullIdentifier ::= "returns" ;
--SliceKeyWordFullIdent.          FullIdentifier ::= "slice" ;
--TerminatesKeyWordFullIdent.     FullIdentifier ::= "terminates" ;
--TypeKeyWordFullIdent.           FullIdentifier ::= "type" ;
--VariantKeyWordFullIdent.        FullIdentifier ::= "variant" ;

--IdentExtCodeAnnotFullIdent.     FullIdentifier ::= EXT_CODE_ANNOT ;
--IdentExtContractFullIdent.      FullIdentifier ::= EXT_CONTRACT ;
--IdentExtGlobalFullIdent.        FullIdentifier ::= EXT_GLOBAL ;
--IdentExtGlobalBlockFullIdent.   FullIdentifier ::= EXT_GLOBAL_BLOCK ;
separator nonempty FullIdentifier "," ;

IdentifierIdent.    Identifier ::= Ident ;
--/* token list used inside acsl clauses: */
--BehaviorsKeyWord.   Identifier ::= "behaviors" ;
--LabelKeyWord.       Identifier ::= "label" ;
--ReadsKeyWord.       Identifier ::= "reads" ;
--WritesKeyWord.      Identifier ::= "writes" ;


TypeSpecSimpleIntegerKeyWord.                   TypeSpecSimple ::= "integer" ;
TypeSpecSimpleRealKeyWord.                      TypeSpecSimple ::= "real" ;
TypeSpecSimpleBooleanKeyWord.                   TypeSpecSimple ::= "boolean" ;
TypeSpecSimpleVoidKeyWord.                      TypeSpecSimple ::= "void" ;
TypeSpecSimpleBoolKeyWord.                      TypeSpecSimple ::= "_Bool" ;
TypeSpecSimpleCharKeyWord.                      TypeSpecSimple ::= "char" ;                           --/** [char] */
--TypeSpecSimpleSignedCharKeyWord.                TypeSpecSimple ::= "signed" "char" ;                  --/** [signed char] */
--TypeSpecSimpleUnsignedCharKeyWord.              TypeSpecSimple ::= "unsigned" "char" ;                --/** [unsigned char] */
TypeSpecSimpleIntKeyWord.                       TypeSpecSimple ::= "int" ;                            --/** [int] */
--TypeSpecSimpleSignedIntKeyWord.                 TypeSpecSimple ::= "signed" "int" ;                   --/** [int] */
--TypeSpecSimpleUnsignedIntKeyWord.               TypeSpecSimple ::= "unsigned" "int" ;                 --/** [unsigned int] */
--TypeSpecSimpleUnsignedKeyWord.                  TypeSpecSimple ::= "unsigned" ;   
--TypeSpecSimpleShortKeyWord.                     TypeSpecSimple ::= "short" ;                          --/** [short] */
--TypeSpecSimpleSignedShortKeyWord.               TypeSpecSimple ::= "signed" "short" ;                 --/** [short] */
--TypeSpecSimpleUnsignedShortKeyWord.             TypeSpecSimple ::= "unsigned" "short" ;               --/** [unsigned short] */
--TypeSpecSimpleShortIntKeyWord.                  TypeSpecSimple ::= "short" "int" ;                    --/** [short] */
--TypeSpecSimpleSignedShortIntKeyWord.            TypeSpecSimple ::= "signed" "short" "int" ;           --/** [short] */
--TypeSpecSimpleUnsignedShortIntKeyWord.          TypeSpecSimple ::= "unsigned" "short" "int" ;         --/** [unsigned short] */
--TypeSpecSimpleLongKeyWord.                      TypeSpecSimple ::= "long" ;                           --/** [long] */
--TypeSpecSimpleSignedLongKeyWord.                TypeSpecSimple ::= "signed" "long" ;                  --/** [long] */
--TypeSpecSimpleUnsignedLongKeyWord.              TypeSpecSimple ::= "unsigned" "long" ;                --/** [unsigned long] */
--TypeSpecSimpleSignedLongIntKeyWord.             TypeSpecSimple ::= "signed" "long" "int" ;            --/** [long] */
--TypeSpecSimpleLongIntKeyWord.                   TypeSpecSimple ::= "long" "int" ;                     --/** [long] */
--TypeSpecSimpleUnsignedLongIntKeyWord.           TypeSpecSimple ::= "unsigned" "long" "int" ;          --/** [unsigned long] */
--TypeSpecSimpleLongLongKeyWord.                  TypeSpecSimple ::= "long" "long" ;                    --/** [long long] (or [_int64] on Microsoft Visual C) */
--TypeSpecSimpleSignedLongLongKeyWord.            TypeSpecSimple ::= "signed" "long" "long" ;           --/** [long long] (or [_int64] on Microsoft Visual C) */
--TypeSpecSimpleUnsignedLongLongKeyWord.          TypeSpecSimple ::= "unsigned" "long" "long" ;         --/** [unsigned long long] (or [unsigned _int64] on Microsoft Visual C) */
--TypeSpecSimpleLongLongIntKeyWord.               TypeSpecSimple ::= "long" "long" "int" ;              --/** [long long] (or [_int64] on Microsoft Visual C) */
--TypeSpecSimpleSignedLongLongIntKeyWord.         TypeSpecSimple ::= "signed" "long" "long" "int" ;     --/** [long long] (or [_int64] on Microsoft Visual C) */
--TypeSpecSimpleUnsignedLongLongIntKeyWord.       TypeSpecSimple ::= "unsigned" "long" "long" "int" ;   --/** [unsigned long long] (or [unsigned _int64] on Microsoft Visual C) */
--TypeSpecSimpleFloatKeyWord.                     TypeSpecSimple ::= "float" ;
TypeSpecSimpleDoubleKeyWord.                    TypeSpecSimple ::= "double" ;
TypeSpecSimpleLongDoubleKeyWord.                TypeSpecSimple ::= "long" "double" ;
--TypeSpecSimpleStruct.                           TypeSpecSimple ::= "struct" IdentifierOrTypenameFull ;
--TypeSpecSimpleEnum.                             TypeSpecSimple ::= "enum" IdentifierOrTypenameFull ;
--TypeSpecSimpleUnion.                            TypeSpecSimple ::= "union" IdentifierOrTypenameFull ;


----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------
--%type <Logic_ptree.Annot> Annot
--%start Annot
----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------

AnAnnotation.   LogicPTreeAnnot ::= Annotation ; -- EOF 
--ACSLSpec.       LogicPTreeAnnot ::= IsACSLSpec [Wildcard] ; -- EOF 
--AnnotDecl.      LogicPTreeAnnot ::= [Decl] ; -- EOF 
--separator LogicPTreeAnnot "" ;

LoopAnnotation.                 Annotation ::= LoopAnnotStack ; --LoopAnnotStack => loop_annotations
--ForContractAnnotation.          Annotation ::= "for" [BehaviorName] ":" Contract ;
--ForCodeAnnotation.              Annotation ::= "for" [BehaviorName] ":" CodeAnnotation ;
--SimplePragmaOrCodeAnnotation.   Annotation ::= PragmaOrCodeAnnotation ;
--PragmaOrCodeAnnotationBeg.      Annotation ::= PragmaOrCodeAnnotation BegPragmaOrCodeAnnotation ;
--IdentifierAnnotation.           Annotation ::= Identifier ;
--GhostAnnotation.                Annotation ::= "\\ghost" ;

--/* TODO: gather loop Assigns that are related to the same behavior */
LoopAnnotStackInvariant.      LoopAnnotStack ::= LoopInvariant LoopAnnotOpt ;
LoopAnnotStackEffects.        LoopAnnotStack ::= LoopEffects LoopAnnotOpt ;
--LoopAnnotStackAllocation.     LoopAnnotStack ::= LoopAllocation LoopAnnotOpt ;
--LoopAnnotStackForBehavior.    LoopAnnotStack ::= "for" [BehaviorName] ":" LoopAnnotStack ;
LoopAnnotStackVariant.        LoopAnnotStack ::= LoopVariant LoopAnnotOpt ;
--LoopAnnotStackPragma.         LoopAnnotStack ::= LoopPragma LoopAnnotOpt ;
--LoopAnnotStackGrammarExten.   LoopAnnotStack ::= LoopGrammarExtension LoopAnnotOpt ;

NoLoopAnnot.    LoopAnnotOpt ::= ; --/* epsilon */
SomeLoopAnnot.  LoopAnnotOpt ::= LoopAnnotStack ;

SimpleLoopInvariant.    LoopInvariant ::= "loop" "invariant" Lexpr ";" ;
CheckLoopInvariant.     LoopInvariant ::= "check" "loop" "invariant" Lexpr ";" ;
AdmitLoopInvariant.     LoopInvariant ::= "admit" "loop" "invariant" Lexpr ";" ;

SimpleLoopVariant.      LoopVariant ::= "loop" "variant" Variant ";" ;

LoopAssigns.    LoopEffects ::= "loop" "assigns" Assigns ";" ;

ForVariant.     Variant ::= Lexpr "for" AnyIdentifier ;
LexprVariant.   Variant ::= Lexpr ;